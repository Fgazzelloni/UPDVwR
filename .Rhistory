install.packages("quarto")
install.packages(c("anthro", "apcluster", "BAT", "bbotk", "BiocManager", "blastula", "bookdown", "brms", "broom.helpers", "bsicons", "bslib", "butcher", "Cairo", "checkmate", "chk", "clue", "collapse", "colourpicker", "compareGroups", "config", "covr", "credentials", "d3r", "datawizard", "dbplyr", "DEoptimR", "DescTools", "deSolve", "detectors", "dotCall64", "dplyr", "dqrng", "drat", "DT", "effectsize", "elevatr", "EloSteepness", "embed", "emmeans", "evaluate", "exactextractr", "fabletools", "fastmatch", "fields", "flexdashboard", "flextable", "forecast", "foreign", "gdtools", "geodata", "geojson", "geojsonio", "gert", "GGally", "ggeffects", "ggfittext", "ggformula", "ggfun", "ggmap", "ggplotify", "ggrepel", "ggspatial", "ggthemes", "gifski", "giscoR", "glmnet", "googlePolylines", "graphlayouts", "gt", "gtExtras", "gtfsio", "gtools", "gutenbergr", "heatmaply", "HistData", "htmltools", "htmlwidgets", "httpuv", "httr2", "hunspell", "hypervolume", "igraph", "infer", "insight", "jqr", "keras", "knitr", "ks", "lattice", "lava", "learnr", "libcoin", "lifecycle", "linelist", "lme4", "lpSolve", "lubridate", "magick", "mapboxapi", "maps", "mapview", "markdown", "MatchIt", "Matrix", "MatrixExtra", "MatrixModels", "matrixStats", "mclust", "mcmc", "metafor", "metR", "minqa", "mlr3", "mlr3learners", "mlr3misc", "mlr3spatiotempcv", "mlr3tuning", "modeldata", "modeltime", "mosaic", "mosaicCore", "mosaicData", "mvtnorm", "nlme", "officer", "OpenStreetMap", "optmatch", "owidR", "packcircles", "packrat", "pak", "pan", "parameters", "parsnip", "patchwork", "pdftools", "performance", "pins", "pkgload", "plotly", "plotrix", "pls", "polyclip", "posterior", "prabclus", "pracma", "precrec", "prettyunits", "pROC", "prodlim", "progressr", "proj4", "protolite", "psych", "quantmod", "quantreg", "R.utils", "ragg", "ranger", "raster", "rasterVis", "rbibutils", "RcppArmadillo", "RcppEigen", "RcppHNSW", "RcppThread", "RCurl", "Rdpack", "reactR", "readODS", "recipes", "red", "rematch", "renv", "reticulate", "rgbif", "RgoogleMaps", "ridigbio", "rio", "rlang", "rmarkdown", "rnaturalearth", "rosm", "rpart", "RPostgres", "rprojroot", "rsample", "rsconnect", "RSocrata", "RSQLite", "rstan", "rstanarm", "rsvg", "rtweet", "scico", "sfsmisc", "sjPlot", "slider", "snakecase", "sodium", "sp", "spam", "spatialsample", "spatstat", "spatstat.explore", "spatstat.linnet", "spatstat.model", "spatstat.sparse", "spatstat.utils", "spdep", "splancs", "splines2", "spmodel", "stacks", "StanHeaders", "stars", "stringi", "stringr", "striprtf", "styler", "survival", "svglite", "systemfonts", "tensorflow", "terra", "testthat", "text", "text2vec", "textrecipes", "textshaping", "themis", "tidybayes", "tidycensus", "tidymodels", "tidyposterior", "tidyterra", "tidytree", "tigris", "timetk", "tinytex", "tm", "tmap", "tokenizers.bpe", "treemapify", "tsfeatures", "tune", "unhcrthemes", "units", "usmap", "usmapdata", "utf8", "uuid", "V8", "vdiffr", "vip", "vroom", "waffle", "waldo", "warp", "wesanderson", "wk", "word2vec", "x13binary", "xfun", "XML", "yulab.utils"))
quarto::quarto_publish_site()
quarto::quarto_render()
library(tidyverse)
tuesdata <- tidytuesdayR::tt_load(2021, week = 30)
drought <- tuesdata$drought
intensity_impacts<- c("D0"="Abnormally Dry",
"D1"="Moderate Drought",
"D2"="Severe Drought",
"D3"= "Extreme Drought",
"D4"="Exceptional Drought")
drought_short <- drought %>%
dplyr::select(-map_date,-stat_fmt) %>%
filter(!drought_lvl=="None",!area_pct==0)
library(sf)
library(raster)
library(spData)
library(spDataLarge)
library(maps)
library(viridis)
library(ggthemes)
library(zipcodeR)
zipcodeR::download_zip_data()
geo_codes<- zipcodeR::search_state(drought_short$state_abb)%>%
dplyr::select(major_city,county,state,lat,lng,
population,population_density,
land_area_in_sqmi,water_area_in_sqmi,
housing_units,occupied_housing_units,
median_home_value,median_household_income) %>%
drop_na()
my_geo_codes_df<-geo_codes%>%
dplyr::select(state,lat,lng)
drought_short_map <- drought_short %>%
arrange(valid_start)%>%
mutate(year=lubridate::year(valid_start),
month=lubridate::month(valid_start))%>%
filter(str_detect(valid_start,"2021")) %>%
#filter(month==c(1,2,3)) %>%
group_by(month,state_abb,drought_lvl) %>%
summarize(med_area_pct=round(median(area_pct),2))%>%
ungroup() %>%
filter(!med_area_pct==0) %>%
left_join(my_geo_codes_df,by=c("state_abb"="state")) %>%
mutate(month = month.name[month])
my_df <- drought_short_map%>%count(month,sort=T)%>%
dplyr::select(-n)%>%
mutate(month_id=row_number())%>%
inner_join(drought_short_map,by="month")
library(extrafont)
#loadfonts()
#fonts()
droughts_family <- "Roboto Condensed"
library(gganimate)
library(cartography)
red.pal<-c("red", "orangered", "firebrick1", "brown3", "firebrick")
us_county_map <- map_data("county")
us_state_map <- map_data("state")
ggplot() +
geom_point(data=subset(my_df,lat>25&lat<50),
aes(x=lng,y=lat,color=factor(drought_lvl)),
alpha=0.5,size=.4) +
geom_polygon(data=us_county_map,aes(x=long,y=lat,group = group),
fill=NA,color = "darkred",size=0.2) +
geom_polygon(data=us_state_map,aes(x=long,y=lat,group = group),
fill=NA,color = "red",size=0.4) +
scale_color_manual(labels = intensity_impacts,
values=red.pal) +
coord_sf()+
ggthemes::theme_map() +
theme(legend.position = "none",
legend.title = element_text(family = droughts_family),
legend.text = element_text(size=8,family =droughts_family),
legend.background = element_blank(),
legend.box.background = element_blank(),
legend.key = element_blank(),
strip.background = element_blank(),
strip.text = element_text(family = droughts_family),
plot.title =element_text(size=25,face="bold",family =droughts_family,color="black"),
plot.subtitle =element_text(size=12,face="bold",family =droughts_family),
plot.caption =element_text(size=9,family =droughts_family,hjust = 0),
plot.caption.position = "panel",
plot.title.position = "panel") +
# gganimate specific bits:
labs(title="US Drought variation - Month: {closest_state}",
subtitle="",
caption="US Drought map: available values by County - Jan to July 2021\n
#30DayMapChallenge day6-red - graphic: Federica Gazzelloni")+
transition_states(month) +
ease_aes('linear')
#| message: false
#| warning: false
library(tidyverse)
library(tmap)
library(tmaptools)
# Save at gif:
anim_save("drought_red.gif")
quarto::quarto_publish_site()
install.packages("quarto")
library(quarto)
quarto::quarto_publish_site()
path <- list.dirs("~/Documents/R/R_general_resources/EDA_and_maps/30DayMapChallenge/2023")
path
path <- list.files("~/Documents/R/R_general_resources/EDA_and_maps/30DayMapChallenge/2023")
path
files <- list.files(path)
files
files <- list.dirs(path)
files
path
dir <- "~/Documents/R/R_general_resources/EDA_and_maps/30DayMapChallenge/2023"
dir <- "~/Documents/R/R_general_resources/EDA_and_maps/30DayMapChallenge/2023/"
path <- list.files(dir)
path
files <- list.dirs(paste0(dir,path)
files <- list.dirs(paste0(dir,path))
files
files <- list.files(paste0(dir,path))
files
library(tidyverse)
tibble(files=files)%>%filter(str_detect(files,".qmd"))
codes <- tibble(files=files)%>%filter(str_detect(files,".qmd"))
codes
readLines(codes[1],-1L)
codes
files
paste0(dir,path)
list.files(paste0(dir,path))
codes <- tibble(folders=paste0(dir,path),
files=files)%>%
filter(str_detect(files,".qmd"))
tibble(folders=paste0(dir,path),
files=files)
paste0(dir,path)
codes <- tibble(files=files)%>%
filter(str_detect(files,".qmd")) %>%
mutate(folders=paste0(dir,path))
codes
codes  %>%View
codes <- tibble(files=files)%>%
filter(str_detect(files,".qmd")) %>%
mutate(folders=paste0(dir,path),
day=str_extract(files,"[0-9]+"))
codes  %>%View
codes <- tibble(files=files)%>%
filter(str_detect(files,".qmd")) %>%
mutate(folders=paste0(dir,path),
day=str_extract(files,"[0-9]+"),
day=as.integer(day))%>%
arrange(day)
codes  %>%View
codes <- tibble(files=files)%>%
filter(str_detect(files,".qmd")) %>%
mutate(folders=paste0(dir,path),
full_path=paste0(folders,"/",files),
day=str_extract(files,"[0-9]+"),
day=as.integer(day))%>%
arrange(day)
codes  %>%View
readLines(codes$full_path[1],-1L)
contents <- readLines(codes$full_path[1],-1L)
contents[1:11]
## read updv contents
updv_dir<- "~/Documents/R/R_general_resources/EDA_and_maps/UPDVwR/mapchallenges/cases2023/posts2023/"
updv_path <- list.files(updv_dir)
updv_path
## read updv contents
updv_dir<- "~/Documents/R/R_general_resources/EDA_and_maps/UPDVwR/mapchallenges/cases2023/posts2023/"
updv_path <- list.files(updv_dir)
updv_files <- list.files(paste0(updv_dir,updv_path))
updv_files
tibble(files=updv_files)
tibble(files=updv_files,
folders=updv_files)
updv_path
updv_files
updv_dir
paste0(updv_dir,updv_path)
updv_codes <- tibble(files=updv_files)%>%
mutate(folders=paste0(updv_dir,updv_path),
full_path=paste0(folders,"/",files),
day=str_extract(files,"[0-9]+"),
day=as.integer(day))%>%
arrange(day)
for (i in 1:30) {
original_contents <- readLines(codes$full_path[1],-1L)
updv_contents <-
newcontent <- c(contents[1:11],image[i],contents[6:length(contents)])
writeLines(newcontent, file_path_origin[i])
}
updv_codes
updv_codes%>%View
readLines(updv_codes$full_path[1],-1L)
original_contents <- readLines(codes$full_path[1],-1L)
updv_contents <- readLines(updv_codes$full_path[1],-1L)
updv_contents[1:11]
original_contents[11:length(contents)]
c(updv_contents[1:11],original_contents[11:length(contents)])
c(updv_contents[1:11],original_contents[12:length(contents)])
updv_codes$full_path
original_contents <- readLines(codes$full_path[1],-1L)
updv_contents <- readLines(updv_codes$full_path[1],-1L)
newcontent <- c(updv_contents[1:11],original_contents[12:length(contents)])
writeLines(newcontent, updv_codes$full_path[1])
original_contents <- readLines(codes$full_path[28],-1L)
updv_contents <- readLines(updv_codes$full_path[28],-1L)
newcontent <- c(updv_contents[1:11],original_contents[12:length(contents)])
writeLines(newcontent, updv_codes$full_path[28])
original_contents <- readLines(codes$full_path[28],-1L)
updv_contents <- readLines(updv_codes$full_path[28],-1L)
newcontent <- c(updv_contents[1:11],original_contents[12:length(original_contents)])
writeLines(newcontent, updv_codes$full_path[28])
for (i in 1:30) {
original_contents <- readLines(codes$full_path[i],-1L)
updv_contents <- readLines(updv_codes$full_path[i],-1L)
newcontent <- c(updv_contents[1:11],original_contents[12:length(original_contents)])
writeLines(newcontent, updv_codes$full_path[i])
}
readLines(codes$full_path[12],-1L)
codes$full_path[12]
#| message: false
#| warning: false
library(idbr)
library(tidyverse)
data <- get_idb(
country = "all",
year = 2021,
variables = "tfr",
geometry = TRUE,
)
data %>% head()
ggplot(data, aes(fill = code)) +
theme_bw() +
geom_sf() +
coord_sf(crs = 'ESRI:54030') +
scale_fill_viridis_d()+
guides(fill=guide_legend(nrow = 10,title = ""))+
theme(legend.key.size = unit(2,units = "pt"),
legend.text = element_text(size=2),
legend.position = "bottom")
#| warning: false
#| message: false
library(rvest)
south_america_data <- read_html("https://en.wikipedia.org/wiki/South_America")
#| warning: false
#| message: false
library(rvest)
south_america_data <- read_html("https://en.wikipedia.org/wiki/South_America")
south_america_countries <- south_america_data %>%
html_nodes("table") %>%
.[[3]] %>%
html_table(fill = TRUE)
south_america_countries %>% names()
south_america_countries <- south_america_countries%>%
select('Country / Territory')%>%
unlist()
sa <- get_idb(
country = south_america_countries,
year = 2021,
variables = "tfr",
geometry = TRUE,
)
sa %>% head()
summary(sa$tfr)
col.range<- c(1,3)
ggplot(sa, aes(fill = tfr)) +
geom_sf(color="white") +
geom_sf_text(aes(label=name),size=3,family="Roboto Condensed")+
scale_fill_continuous(low = "#006400",
high = "#FF4500",
limits=col.range)+
ggtext::geom_richtext(x=0,y=0,
hjust = 2,
vjust=1.5,
label="South<br>America",
fill = NA,
label.color = NA,
size=25,
family = "Gill Sans")+
ggtext::geom_richtext(x=0,y=0,
hjust = 1.4,
vjust=-3,
label="Total fertility rate by country in 2021",
fill = NA,
label.color = NA,
size=6,
family = "Gill Sans")+
coord_sf(crs = 'ESRI:54030',clip = "off") +
labs(caption="#30DayMapChallenge 2023 - Day 12 South America\nDataSource: wikipedia & {idbr} package | Map @fgazzelloni\n\n'Scale on map varies by more than 10%, scale bar may be inaccurate' {ggspatial}",
fill="Total fertility rate (tfr)")+
ggthemes::theme_map()+
theme(text=element_text(family = "Gill Sans"),
plot.caption = element_text(hjust=0),
legend.position = c(0.8,0.1),
legend.key.size = unit(10,units = "pt"),
legend.text = element_text(size=10),
legend.background = element_rect(color="#E6D2B8",fill="#E6D2B8"))+
ggspatial::annotation_scale()
quarto::quarto_publish_site()
