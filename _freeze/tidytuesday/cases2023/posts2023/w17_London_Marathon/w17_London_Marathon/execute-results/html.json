{
  "hash": "d74e3afa54fda23b8f22473849100a5f",
  "result": {
    "markdown": "---\ntitle: 'London Marathon'\nsubtitle: 'Welcome to TidyTuesday 2023 week 17'\ndate: '2023-04-25'\nimage: 'https://raw.githubusercontent.com/Fgazzelloni/TidyTuesday/main/data/2023/w17_LM/w17_LM.png'\nimage-alt: ''\ndescription: 'Networks'\noutput: html_document\nexecute: \n   eval: false\n---\n\n> To cite Federica's work, please use: Gazzelloni F., 2023 Data Visualization London Marathon\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 17)\nwinners <- tuesdata$winners\nlondon_marathon <- tuesdata$london_marathon\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners%>%count(Nationality)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlondon_marathon%>%head\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlondon_marathon%>%\n  mutate(ymon=zoo::as.yearmon(Date),.after=Date)%>%\n  arrange(ymon)%>%\n  pivot_longer(cols=c(Starters,Finishers))%>%\n  select(ymon,name,value)%>%\n  ggplot(aes(x=ymon,y=value,group=name,color=name))+\n  geom_point()+\n  geom_smooth(method=\"lm\",\n              linewidth=0.5,\n              se=F)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntime <- winners%>%\n  count(Time)%>%\n  mutate(time=hms(Time))\n  \n\nlibrary(hms)\n\ndf <- winners%>%\n  select(Year,Nationality,Time)%>%\n  mutate(time=lubridate::hms(Time)) %>%\n  group_by(Nationality)%>%\n  mutate(mean=mean(Time),\n          sd=sd(Time),\n          max=max(Time),\n          min=min(Time))%>%\n  filter(!is.na(sd))\ndf\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create multiple plots using facet_wrap()\nggplot(df, aes(x = Year, y = time)) +\n  geom_point() +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), color = \"grey80\") +\n  scale_color_gradient(low = \"blue\", high = \"red\") +\n  geom_smooth(method = \"lm\") +\n  #scale_y_time()+\n  facet_wrap(~Nationality,scales = \"free_y\")+\n  theme(axis.text.y = element_blank())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlondon_marathon%>%\n  pivot_longer(cols=c(Applicants,Accepted))%>%\n  select(Year,name,value) %>%\n   ggplot(aes(x=Year,y=value,group=name,color=name))+\n  geom_point()+\n  geom_smooth(method=\"lm\",\n              linewidth=0.5,\n              se=F)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlondon_marathon%>%\n  filter(!Year==2020)%>%\n  select(Year,Applicants,Accepted)%>%\n   ggplot(aes(x=Year))+\n   geom_point(aes(y=Applicants))+\n   geom_point(aes(y=Accepted))+\n   geom_segment(aes(xend=Year,y=Accepted,yend=Applicants))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners%>%\n  group_by(Nationality)%>%\n  mutate(n=n())%>%\n  arrange(-n)%>%\n  filter(Nationality%in%c(\"United Kingdom\",\"Ireland\",\"Kenya\"))%>%\n  ggplot(aes(x=Nationality,y=n))+\n  geom_point()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlondon_marathon%>%\n  filter(!is.na(Raised))%>%\n  select(Year,Accepted,Raised)%>%\n  inner_join(winners%>%count(Year,Nationality),by=\"Year\")%>%\n  arrange(Year)%>%\n  mutate(Nationality=as.factor(Nationality))%>%\n  filter(Nationality%in%c(\"Kenya\",\"United Kingdom\",\"United States\"))\n  ggplot(aes(Accepted,Raised,group=Nationality,color=Nationality))+\n  geom_point()+\n  geom_line()\n  facet_wrap(~Nationality)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sysfonts)\nsysfonts::font_add_google(\"Chelsea Market\",\"Chelsea Market\")\nlibrary(showtext)\nshowtext::showtext_auto()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlondon_marathon%>%\n  filter(!is.na(Raised))%>%\n  select(Year,Accepted,Raised)%>%\n  inner_join(winners%>%count(Year,Nationality),by=\"Year\")%>%\n  arrange(Year)%>%\n  mutate(Nationality=as.factor(Nationality))%>%\n  filter(Nationality%in%c(\"Kenya\",\"United Kingdom\",\"United States\"))%>%\n  mutate(Accepted=scale(Accepted,\n                        center = F, scale = TRUE),\n         Raised=scale(Raised,\n                      center = F, scale = TRUE)\n         ) %>%\n  # pivot_longer(cols = c(\"Accepted\",\"Raised\"))%>% #count(Year)\n  ggplot(aes(x=Year)\n             #group=name,\n             #color=name,fill=name)\n         )+\n  geom_point(aes(y=Accepted),\n             shape=21,stroke=0.5,\n             size=2,\n             color=\"white\",\n             fill=\"#910C00\",\n             key_glyph = draw_key_rect)+\n    geom_point(aes(y=Raised),\n             shape=21,stroke=0.5,\n             size=2,\n             fill=\"#00668F\",\n             color=\"white\",\n             key_glyph = draw_key_rect)+\n  geom_line(aes(y=Accepted,color=\"Accepted\"),\n            linewidth=1,\n            key_glyph = draw_key_rect)+\n    geom_line(aes(y=Raised,color=\"Raised\"),\n              linewidth=1,\n            key_glyph = draw_key_rect)+\n  geom_segment(aes(xend=Year,y=Accepted,yend=Raised),\n               color=\"grey80\")+\n  facet_wrap(~Nationality) +\n  labs(title=\"Amount raised for charity based on acceptance\",\n       subtitle=\"scaled by the standard deviations without centering\",\n       caption=\"DataSource: #TidyTuesday Week 17 London Marathon\\n#30DayChartChallenge Day 26 uncertanties: local change | DataViz: Federica Gazzelloni\",\n       color=\"\")+\n  scale_x_continuous(breaks = c(2007,2010,2014,2017))+\n  scale_colour_manual(\"\", \n                      breaks = c(\"Accepted\", \"Raised\"),\n                      values = c(\"#910C00\", \"#00668F\")) +\n  guides(fill=\"none\")+\n  ggthemes::theme_stata(base_family = \"Chelsea Market\",\n                        scheme=\"s1rcolor\")+\n  theme(text=element_text(size=30),\n        strip.background = element_rect(color=\"#910C00\",fill=\"#910C00\"),\n        plot.caption = element_text(hjust = 0.5, size=30, lineheight = 0.5),\n        plot.title = element_text(size=60),\n        plot.subtitle = element_text(size=40),\n        axis.title.y = element_blank())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshowtext::showtext_auto(enable = T)\nggsave(\"w17_LM.png\",\n       dpi=320,\n       width = 7,height = 5,\n       bg=\"black\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}