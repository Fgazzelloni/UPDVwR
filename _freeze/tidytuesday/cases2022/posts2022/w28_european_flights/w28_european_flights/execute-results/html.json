{
  "hash": "55007214f82d09b6fc30f7682587f366",
  "result": {
    "markdown": "---\ntitle: \"European flights\"\nsubtitle: 'Welcome to TidyTuesday 2022 week 28'\ndate: '2022-07-12'\nimage: \"w28_european_flights.png\"\nimage-alt: ''\ndescription: 'Networks'\noutput: html_document\nexecute: \n   eval: false\n---\n\n\n\n\n## Overview test\n\nThis #TidyTuesday week 28 is all about **European flights**.\nI was looking for a visualization that would represent the differences among countries in terms of the number of airports versus number of flights. \nI looked on the internet for getting some inspiration and then landed on Pintarest, where I found exactly what I was hoping for: a Sankey!\nFirst of all, **What is a Sankey?** \nThe answer is clearer after you make one of your own. In short, it is a network graph connecting diffent groups with a ribbon. A few things that made me think about a lot were the requirenment for the type of data to combine, the consequent label results, and the grouping. \n\nSo, let's have a go in making a **Sankey**.\n\n\nHave a quick look at the data for European flights:\n\nLoad the {tidyverse} and the data from: [#TidyTuesday GitHub repo](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-07-12)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-07-12/flights.csv')\n```\n:::\n\n\n\nJus a little cleaning for this type of data with `janitor::clean_names()` function, and it's ready to use.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights <- flights%>%\n  janitor::clean_names()\n```\n:::\n\n\nThe best way is to select a subgroup among the list of the European countries in the data set, and represent the diversity in aerial traffic.\n\nAs an example I choose Ukraine airports, and found that there is only one airoprt for Ukraine in the dataset. But, the interesting thing is that it covers on average almost the same aerial traffic of other European countries such as Italy which is provided with a far larger number of airports, in this dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  filter(state_name == \"Ukraine\") %>%\n  count(state_name,apt_name)\n```\n:::\n\n\n\nCompare Italy median of the total number of flights by airports with the only available airport aerial traffic in Ukraine:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  filter(state_name %in% c(\"Ukraine\",\"Italy\")) %>%\n  count(state_name,pivot_label,flt_tot_1) %>%\n  group_by(state_name) %>%\n  summarize(total_median = median(flt_tot_1)) \n```\n:::\n\n\nThe results of this preliminary data exploration arise a question:\n\n## Does the number of airports influence countries' aerial traffic?\n\n---\n\n### Waffle\n\nMake the first part of the visualization as a series of waffle, one for each selected country to show the diferences in number of airports.\n\nSelected are 6 countries with a varied number of airports and flights, this is done to give the idea of the differences.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- flights%>%\n  filter(state_name %in% c(\"Ukraine\",\"Belgium\",\"France\",\"Italy\",\"Spain\",\"United Kingdom\")) %>%\n  group_by(state_name) %>%\n  count(apt_name,sort=T) %>%\n  mutate(apt_id = seq(1,length(state_name),1)) %>%\n  summarise(tot = max(apt_id)) %>%\n  arrange(-tot)\n\ndf\n```\n:::\n\n\nLoad both libraries {waffle} and {ggsankey} to use a feature in the waffle which is provided by the ggsankey package.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(waffle)\nlibrary(ggsankey)\n```\n:::\n\n\n\nThe waffles shows the number of airports for the selected countries on a total of 100.\nTo make the waffle we can safetly use the geom_waffle() layer\n\n::: {.cell}\n\n```{.r .cell-code}\nwaffle <- df %>%\n  mutate(rr = 100 - tot) %>% # this is the remaining part of the 100 set of cubes in the waffle\n  pivot_longer(cols = c(tot,rr),names_to = \"values_name\",values_to = \"values\") %>% \n  arrange(state_name) %>%\n  ggplot(aes(fill = values_name, values = values)) +\n  geom_waffle(n_rows = 10, \n              size = 0.33, \n              make_proportional = F,\n              colour = \"white\", \n              flip = TRUE,\n              show.legend = F) +\n  facet_wrap(~ state_name,nrow = 1)+\n  coord_equal() +\n  scale_fill_manual(values=c(\"grey60\",\"#8E0152\"))+\n  theme_sankey(base_size = 16) +\n  theme_enhance_waffle() +\n  theme(strip.text = element_blank(),\n        plot.background = element_blank(),\n        panel.background = element_blank())\n\nwaffle\n```\n:::\n\n\n#### Sankey\n\nThe purpose of this **sankey** is to show the differences among selected countries on number of airports and number of flights, from 2016 to 2022 for 6 selected countries.\n\nThe {ggsankey} package uses an interesting function `make_long()` which transform provided object into a longer data frame, with vectors named as:\n\n- x, next_x, node, and next_node\n\nready to be used inside the geom_sankey.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsankey <- df %>%\n  left_join(flights %>% select(state_name,flt_tot_1), by = \"state_name\") %>%\n  group_by(state_name,tot) %>%\n  summarize(total_med = median(flt_tot_1),.groups = \"drop\") %>%\n  ungroup() %>%\n  mutate(class = cut(tot,\n                     breaks = c(0,1,5,50,65)), #) %>% pull(tot) %>% summary()\n         tot_class = cut(total_med,\n                         breaks = c(0,10,30,65,120,700))) %>% #count(tot_class)\n  mutate(class_id = case_when(class == \"(0,1]\" ~ \"one\",\n                              class == \"(1,5]\" ~ \"up to 5\",\n                              class == \"(5,50]\" ~ \"up to 50\",\n                              TRUE ~ \"up to 65\"),\n         tot_class_id = case_when(tot_class == \"(0,10]\" ~ \"one\",\n                              tot_class == \"(10,30]\" ~ \"up to 30\",\n                              tot_class == \"(30,65]\" ~ \"up to 65\",\n                              tot_class == \"(65,120]\" ~ \"up to 120\",\n                              TRUE ~ \"up to 700\")) %>%\n  mutate(state_name= ifelse(state_name==\"United Kingdom\",\"UK\",state_name)) %>%\n  # function to make the object ready to be used in the geom_sankey\n  make_long(tot_class_id,class_id,state_name) %>% \n  ggplot(aes(x = x, \n             label= node,\n             next_x = next_x, \n             node = node, \n             next_node = (next_node),\n             fill = factor(node))) +\n  geom_sankey(flow.alpha = 0.8, \n              node.color = 1,\n              show.legend = FALSE) +\n  geom_sankey_text(angle=0,family = \"Roboto Condensed\", size = 3)+\n  scale_fill_manual(values = colorRampPalette(RColorBrewer::brewer.pal(11, \"PiYG\"))(13))+\n  theme_sankey(base_size = 16) +\n  coord_flip(expand = F) +\n  theme(axis.text = element_blank(),\n        axis.title = element_blank(),\n        plot.background = element_blank(),\n        panel.background = element_blank())\n  \nsankey\n```\n:::\n\n\n#### European Map\n\nThe map has been saved as map.png and sourced in the main visualization. The code can be found in a separate file named \"eu_coords.R\".\n\n\n::: {.cell}\n\n:::\n\n\n\n---\n\nUse {cowplot} for assembling the plots, adding notes, the map and the logo as images.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cowplot)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n combo <- ggdraw() +\n  draw_image(\"map.png\",\n             scale=0.5,\n             x=0.3,y=0.4)+\n  draw_plot(waffle,\n            scale=1,\n            x=0,y=0.2) +\n  draw_plot(sankey, \n            scale=0.7,\n            width = 1.4,\n            height = 0.85,\n            x=-0.2, y=-0.093) +\n  draw_label(\"Countries such as France and Spain have the highest number of airports while this\\nseems reasonable, other countries such as Ukraine with just one airport record\\namong the countries with the highest total number of flights. Data are released\\nwithin a range of 7 years from 2016 to 2022.\",\n             x=0.02,y=0.90,size=9,hjust=0, \n             fontfamily=\"Roboto Condensed\") +\n  draw_label(\"N. of airports\", x=0.1,y=0.4,\n             fontfamily=\"Roboto Condensed\") +\n  draw_label(\"N. of flights\\n(median values)\", x=0.1,y=0.16,\n             fontfamily=\"Roboto Condensed\") +\n  draw_image(\"eurocontrol_logo.png\",\n             scale=0.1,\n             x=-0.45,y=-0.52) +\n  draw_label(\"Eurocontrol aviation intelligence\\n(ansperformance.eu)\",\n             x=0.22,y=-0.02,size=9,fontfamily=\"Roboto Condensed\")\n\n\ncombo\n```\n:::\n\n\n\nUse {ggpubr} for arranging the grid of the main visualization, so it can be annotate with `annotate_figure()` to making it a bit more standing out with spaces around the plot and top and bottmo annotations already at the right distance/position.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggpubr)\n```\n:::\n\n\n`ggpubr::annotate_figure()` provides a framework for annotating the plot on the four sides top, bottom, left and right. It comes a handy function when you'd like to position notes or even rich text at specified positions. To use it, it requires an object from `ggpubr::ggarrange()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot <- ggpubr::ggarrange(combo) \n\n  ggpubr::annotate_figure(plot,\n               top = text_grob(\"Does the number of airports influence countries' aerial traffic?\", \n                               color = c(\"#8E0152\"), face = \"bold\", family = \"Roboto Condensed\", \n                               size = 18, vjust = 1.4),\n               bottom = text_grob(\"DataSource:TidyTuesday 2022 week28 European flights\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n                                  color = \"#8E0152\",\n                                  hjust = 1, x = 1, face = \"italic\",  family = \"Roboto Condensed\", \n                                  size = 10),\n               left = text_grob(\"\", color = c(\"#7FBC41\"), rot = 90, size=10),\n               right = text_grob(bquote(\"\"), color=c(\"#DE77AE\"), rot = 90, size=10),\n                fig.lab = \"European flights\", fig.lab.face = \"bold\")\n```\n:::\n\n\n\nThen finally, save it as .png file with `ggsave()` function. I specified a height a little bit more than the default values provided as I needed more space.\n\nThe other arguments, `dpi` and `bg` are to set the pixels and the background color.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"waffle_sankey.png\",\n       dpi=320,\n       bg = \"grey95\",\n       height = 7.2)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}