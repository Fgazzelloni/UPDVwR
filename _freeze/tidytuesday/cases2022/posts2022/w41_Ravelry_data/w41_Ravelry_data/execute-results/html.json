{
  "hash": "80a5fee15ad6ec1017040ae65d4edbdb",
  "result": {
    "markdown": "---\ntitle: 'Ravelry data'\nsubtitle: 'Welcome to #TidyTuesday 2022 day 41'\ndate: '2022-10-11'\nimage: 'https://raw.githubusercontent.com/Fgazzelloni/TidyTuesday/main/data/2022/w41_yarn/w41_yarn.png'\nimage-alt: ''\ndescription: 'Networks'\noutput: html_document\nexecute: \n   eval: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the libraries\nlibrary(tidyverse)\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(RColorBrewer)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\n\n\n# set the fonts\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Pangolin\",family=\"pangolin\")\n\n# read the data\nyarn <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-10-11/yarn.csv')\n\n# tidy textures\ndf <- yarn%>%\n  mutate(texture_clean=case_when(str_detect(texture_clean,\"merino\")~\"merino\",\n                                 str_detect(texture_clean,\"ply|plied|play|plies\")~\"ply\",\n                                 str_detect(texture_clean,\"acrylique|acrylic|polyacryl|acrilyc|acryt\")~\"acrylic\",#TRUE~texture_clean))%>%count(texture_clean)%>%filter(str_detect(texture_clean,\"acr|ply\"))\n                                 str_detect(texture_clean,\"nylon\")~\"nylon\",\n                                 str_detect(texture_clean,\"cotton\")~\"cotton\",\n                                 str_detect(texture_clean,\"wool\")~\"wool\",\n                                 str_detect(texture_clean,\"polyamide|polyamid\")~\"polyamid\",\n                                 str_detect(texture_clean,\"angora\")~\"angora\",\n                                 str_detect(texture_clean,\"cashmere\")~\"cashmere\",\n                                 str_detect(texture_clean,\"aran\")~\"aran\",\n                                 str_detect(texture_clean,\"silk\")~\"silk\",\n                                 str_detect(texture_clean,\"jersey\")~\"jersey\",\n                                 TRUE~texture_clean))%>%#count(texture_clean)\n  filter(str_detect(texture_clean,\n                    c(\"merino|ply|acrylic|nylon|cotton|wool|angora|cashmere|aran|silk|jersey\")))%>%\n  count(texture_clean,yarn_weight_name,yardage,grams) %>%\n  mutate(yarn_weight_name=case_when(yarn_weight_name==\"Aran / Worsted\"~\"Aran\",\n                                    yarn_weight_name==\"DK / Sport\"~\"DK\",\n                                    yarn_weight_name==\"Light Fingering\"~\"Fingering\",\n                                    yarn_weight_name==\"Super Bulky\"~\"Bulky\",\n                                    TRUE~yarn_weight_name))%>%\n  filter(!yarn_weight_name==\"No weight specified\",!is.na(yarn_weight_name))%>%\n  filter(!is.na(yardage),!is.na(grams))%>%\n  select(-n)%>%\n  group_by(yarn_weight_name,texture_clean)%>%\n  summarise_all(.funs=mean)%>%\n  select(yarn_weight_name,texture_clean,yardage)\n\n\n# build the data ready for the graph\nd1<- df%>%\n  mutate(from=\"YARN\")%>%\n  relocate(from)%>%\n  rename(to=yarn_weight_name)%>%\n  select(-texture_clean,-yardage)%>%distinct()\nd2 <- df%>%\n  rename(from=yarn_weight_name, \n         to=texture_clean)%>%\n  select(-yardage)%>%distinct()\n\nhierarchy <- rbind(d1, d2)\nvertices <- data.frame(name = unique(c(as.character(hierarchy$from), \n                                       as.character(hierarchy$to))) ) \n\n\n# make the graph_from_data_frame\nmygraph <- graph_from_data_frame(hierarchy, vertices=vertices )\n\n# see the elements of the graph\ndf1 <- create_layout(mygraph, layout = 'dendrogram')\n\n\n# make a function for node angle adj\n# node_angle(df1$x,df1$y,degrees = T)\nnode_ang_adj <- function(x,y) {\n  ifelse(node_angle(x,y) > 90 & node_angle(x,y) < 270 , \n         node_angle(x,y) + 180, node_angle(x,y))\n  }\n\n# make a function for hjust\nnode_hjust_adj <- function(x,y) {\n  ifelse(node_angle(x,y) > 90 & node_angle(x,y) < 270 , 1,0)\n}\n\n# make the graph\nggraph(mygraph, layout = 'dendrogram', circular = TRUE) + \n  geom_edge_diagonal(aes(color=factor(x)),\n                     alpha=0.9,\n                     show.legend = F) +\n  geom_node_point(aes(color=factor(x)),\n                  size=10,\n                  show.legend = F)+\n  geom_node_point(aes(color=factor(x)),\n                  size=10,\n                  shape=8,\n                  show.legend = F)+\n  geom_node_label(aes(filter=!leaf,label=name,color=factor(x)),\n                  label.padding = unit(0.1, \"lines\"),\n                  label.r = unit(0.1, \"lines\"),\n                  label.size = 0.1,\n                  family = \"pangolin\",\n                  fontface=\"bold\",\n                  show.legend = F,\n                  size=4, \n                  alpha=1)+\n  geom_node_text(aes(x = x*1.1, \n                     y=y*1.1, \n                     hjust = node_hjust_adj(x,y),\n                     angle=node_ang_adj(x,y),\n                     filter = leaf, \n                     label=name,\n                     color=factor(x)),\n                 family = \"pangolin\",\n                 fontface=\"bold\",\n                 show.legend = F,\n                 size=4, \n                 alpha=1)+\n  scale_color_manual(values = rep(RColorBrewer::brewer.pal(10,\"Paired\"),10))+\n  scale_x_discrete(expand = c(0,0.3))+\n  scale_y_discrete(expand = c(0,0.3))+\n  coord_fixed()+\n  labs(caption=\"What's inside your YARN?\\ntextures for each type\\n\\nDataSource: #TidyTuesday 2022 week41 Ravelry data\\nDataViz: Federica Gazzelloni (FG) Twitter: @fgazzelloni\\n\",\n       alt=\"Infographics\") +\n  theme_graph()+\n  theme(plot.margin = margin(5,5,5,5,unit = \"pt\"),\n        plot.caption = element_text(face=\"bold\",family=\"pangolin\"))\n\n\n\n#  ggsave(\"w41_yarn.png\",\n#        dpi=280,\n#        bg=\"white\",\n#        width = 9,height = 9)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}