{
  "hash": "f1e9f9f51cea796c81af088deed2680b",
  "result": {
    "markdown": "---\ntitle: 'World Cup Cricket'\nsubtitle: 'Welcome to TidyTuesday 2021 week 49'\ndate: '2021-11-30'\nimage: 'w49_world_cup_cricket.png'\nimage-alt: ''\ndescription: 'Networks'\noutput: html_document\nexecute: \n  eval: false\n---\n\n\nTidyTuesday week49 Cricket\nauthor: Federica Gazzelloni\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list=ls())\n# libraries----------\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(extrafont)\nloadfonts()\nlibrary(xkcd)\n\nmatches <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-11-30/matches.csv')\n\n# matches%>%View\n\n# data wrangling------------\n# 113 ground, 109 ground_city, 21 ground_country\nmatches <- matches%>% # count(ground,ground_city,ground_country)%>%View\n  mutate(date=lubridate::mdy(match_date))%>%\n  filter(!date==is.na(date)) %>% \n  mutate(points=ifelse(winner==team1,score_team1,score_team2),\n         year=lubridate::year(date))\n\n# exploratory data analysis----------\n# points plot\npoints_yr<-matches %>% # count(date,winner)\n  ggplot(aes(x=(date),y=points))+\n  geom_point(aes(color=factor(year)),show.legend = F,shape=\".\")+\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\")+\n  geom_smooth(size=0.2)+\n  theme_xkcd()+\n  labs(x=\"Years\",y=\"Points rating\",\n       title=\"Points by Years\",\n       caption = \"Observed Values\")+\n  theme(text = element_text(size=12),\n        panel.grid.minor.x = element_line(size=6,color=\"darkseagreen3\"),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size=14),\n        axis.line = element_line(),\n        axis.text.x = element_text(size=7,angle = 15))\n\n# time series | for extra plots------------\n# model sesonality \npr_df<- matches%>%select(ds=date,y=points)\nlibrary(prophet)\nm <-prophet(pr_df)\nfuture <- prophet::make_future_dataframe(m, periods=365)\nforecast <- predict(m,future)\n# tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])\n\nforecast%>%\n  mutate(ds=as.Date(ds,\"%Y-%m-%d\"))%>%\n  ggplot(aes(ds,yhat))+\n  geom_point(data=pr_df,aes(x=ds,y=y),size=0.05)+ # original data\n  geom_line(aes(x=ds,y=yhat_upper),size=0.03)+\n  geom_line(aes(x=ds,y=yhat_lower),size=0.03)+\n  geom_line(col=\"violet\",size=0.5)+\n  geom_smooth()\n\nprophet_plot_components(m, forecast)\n\n# week_trend plot\nweek_trend<- forecast%>%\n  mutate(day=lubridate::wday(ds,label = T,abbr = T,\n                             week_start = getOption(\"lubridate.week.start\", 7),\n                             locale = Sys.getlocale(\"LC_TIME\")),\n         .after=ds) %>%\n  select(ds,day,weekly,yearly,trend) %>%\n  \n  ggplot(aes(x=day,y=weekly,group = 1))+\n  geom_line(color=\"black\")+\n  theme_xkcd()+\n  labs(x=\"Weekdays\",y=\"Points rating\",\n       title=\"Days of the week with higher points\",\n       caption = \"Prophet Time Series\")+\n  theme(text = element_text(size=12),\n        plot.background = element_blank(),\n        plot.title = element_text(size=14),\n        axis.line = element_line(),\n        axis.text.x = element_text(size=8))\n\n\n# flags----------\n# add country code\nlibrary(ggflags)\nlibrary(countrycode)\n#countrycode::codelist_panel%>%View\ncountrycode::codelist%>%filter(str_detect(country.name.en,\"United\"))\n# countrycode::countrycode(matches)\nlibrary(maps)\n\nmatches%>%\n  select(date,year,winner,points,ground,ground_city,ground_country,match_date)%>%\n  mutate(country_code = countrycode(ground_country, \n                                    origin = 'country.name', \n                                    destination = 'iso2c'),\n         country_code=tolower(country_code))\n\n# not matched unambiguously England, Midlothian, Wales, West Indies\n# England, Midlothian, Wales == United Kingdom\n# West Indies ?\nambiguous_values <- matches%>%\n  select(ground,ground_city,ground_country)%>%\n  filter(ground_country==\"West Indies\")%>%\n  count(ground,ground_city,ground_country)\n\nmy_missing_cities<- ambiguous_values%>%\n  pull(ground_city)%>%\n  unlist()\n\n\nflags_df <- matches%>% #count(ground_country)\n  select(date,year,winner,points,ground,ground_city,ground_country,match_date)%>%\n  mutate(country=case_when(ground_country==\"England\"~\"United Kingdom\",\n                                  ground_country==\"Midlothian\"~\"United Kingdom\",\n                                  ground_country==\"Wales\"~\"United Kingdom\",\n                                  TRUE~ground_country))%>%\n  mutate(country=case_when(ground_city==\"Bridgetown\"~\"Barbados\",\n                           ground_city==\"Gros Islet\"~\"Saint Lucia\",\n                           ground_city==\"Kingston\"~\"Jamaica\",\n                           ground_city==\"Port of Spain\"~\"Trinidad and Tobago\",\n                           ground_city==\"Arnos Vale\"~\"Saint Vincent e Grenadine\",\n                           ground_city==\"St John's\"~\"Antigua e Barbuda\",\n                           TRUE~country))%>%\n  mutate(country_code = countrycode(country, \n                                    origin = 'country.name', \n                                    destination = 'iso2c'),\n         country_code=tolower(country_code),.after=winner)\n\n\n# ground country winners dataset--------\nworld1_geo<- rnaturalearth::ne_countries(scale=110,\n                                         returnclass = \"sf\")\n\n\nworld1_geo <- world1_geo%>%filter(!name==c(\"Antarctica\",\"Fr. S. Antarctic Lands\"))\n\npolygon_df <- matches%>%\n  left_join(world1_geo,by=c(\"ground_country\"=\"name\"))%>%\n  select(date,year,points,winner,ground_country,geometry)\n\n# centroids and coords with spData::world-----\nworld2_geo<- spData::world\nworld2_ctr<- st_centroid(world2_geo)\nworld2_ctr_coords<- st_coordinates(world2_ctr)%>%\n  as.data.frame()\n\ncountries <- matches$ground_country\n\nworld2_ctr_coords_my_countries<-cbind(world2_ctr_coords,ground_country=world2_geo$name_long)%>%\n  filter(ground_country%in%countries)%>%\n  left_join(polygon_df%>%select(year,ground_country,winner,points),by=\"ground_country\")\n\n# flags data sets\nflags_df_coords<- flags_df%>%\n  inner_join(world2_ctr_coords_my_countries,by=c(\"ground_country\",\"year\",\"winner\",\"points\"))\n\n# this set will be used\nflags_df_coords2<- flags_df_coords%>%count(country_code,X,Y)\n\n\n\n# map plot----------------\n  # world polygons\nmap_plot <- ggplot(world2_ctr_coords_my_countries)+\n  geom_sf(data=world1_geo,\n          aes(geometry=geometry),\n          fill=\"#f0ebc7\",size=0.2) +\n  # my polygons\n  geom_sf(data=polygon_df,\n          aes(geometry=geometry),color=\"red\",\n          fill=\"#d9ed53\",\n          show.legend = F) +\n  # polygons centroids\n  geom_point(data=world2_ctr_coords,\n             aes(x=X,y=Y),shape=\".\") +\n  # my polygons centroids\n  geom_point(data=world2_ctr_coords_my_countries,\n             aes(x=X,y=Y),size=0.3,color=\"red\") +\n  # my country names\n  geom_text(data=world2_ctr_coords_my_countries%>%  #count(ground_country)\n             filter(!ground_country%in%c(\"Ireland\",\n                                      \"United Arab Emirates\",\n                                      \"Bangladesh\")),\n            aes(x=X,y=Y,label=ground_country),\n            check_overlap = F,\n            vjust=-1.5,hjust=0.5,family=\"Roboto Condensed\") +\n  # flags\n  ggflags::geom_flag(data=flags_df_coords2,\n                     aes(x=X,y=Y,country=country_code), size=4.5) +\n  coord_sf()+\n  ggthemes::theme_map() +\n  theme(text = element_text(family=\"Roboto Condensed\"),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(face=\"bold\"))\n\n# green background plot------------\nbackround_plot<- ggplot()+\n  geom_blank()+\n  ggthemes::theme_map() +\n  theme(plot.background = element_rect(fill=\"darkseagreen3\",color=\"#42f59b\"),\n        panel.background = element_rect(fill=\"darkseagreen3\",color=\"#42f59b\"))\n  \n\n# draw plot------------\nlibrary(cowplot)\nfinal<- ggdraw()+\n  #plot background\n  draw_image(\"R_general_resources/TidyTuesday/TidyTuesday/w49_world_cup_cricket/ball.jpg\",\n             x=0,y=0,scale=1)+\n  draw_image(\"R_general_resources/TidyTuesday/TidyTuesday/w49_world_cup_cricket/ball.jpg\",\n             x=0.4,y=0.4,scale=0.2,width = 1,height = 0.98)+\n  draw_plot(backround_plot,width=1,heigh=0.75,x=0,y=0.1) +\n  # main playing area\n  draw_line(x=c(0.05,0.95),y=c(0.5,0.5),\n            size=90,color=\"#a8e657\",alpha=0.4)+\n  # map with extra labels\n  draw_plot(map_plot) +\n  draw_label(\"Ireland\",x=0.45,y=0.68,size=10,color=\"black\")+\n  draw_label(\"United Arab Emirates\",x=0.57,y=0.58,size=10,color=\"black\")+\n  draw_label(\"Bangladesh\",x=0.7,y=0.57,size=10,color=\"black\")+\n  # red lines \n  draw_line(x=c(0.05,0.05),y=c(0.33,0.665),\n            size=0.2,color=\"red\",alpha=1)+\n  draw_line(x=c(0.95,0.95),y=c(0.33,0.665),\n            size=0.2,color=\"red\",alpha=1)+\n  # crease: popping crease\n  draw_label(\"Popping Crease\",x=0.19,y=0.28,size=12)+\n  draw_line(x=c(0.19,0.18),y=c(0.29,0.37),size=0.4,color=\"red\")+\n  draw_line(x=c(0.18,0.18),y=c(0.38,0.635),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.82,0.82),y=c(0.38,0.635),\n            size=0.5,color=\"white\",alpha=1)+\n  # crease: return crease\n  draw_label(\"Return Crease\",x=0.138,y=0.32,size=12)+\n  draw_line(x=c(0.17,0.15),y=c(0.33,0.42),size=0.4,color=\"red\")+\n  draw_line(x=c(0.05,0.18),y=c(0.42,0.42),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.82,0.95),y=c(0.42,0.42),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.05,0.18),y=c(0.6,0.6),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.82,0.95),y=c(0.6,0.6),\n            size=0.5,color=\"white\",alpha=1)+\n  # crease: bowling crease\n  draw_label(\"Bowling Crease\",x=0.126,y=0.62,size=12)+\n  draw_line(x=c(0.13,0.15),y=c(0.61,0.58),size=0.4,color=\"red\")+\n  draw_line(x=c(0.15,0.15),y=c(0.42,0.6),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.85,0.85),y=c(0.42,0.6),\n            size=0.5,color=\"white\",alpha=1) + \n  draw_plot(week_trend,x=0.25,y=-0.3,scale=0.2,width=1,heigh=1)+\n  draw_plot(points_yr,x=0.01,y=-0.3,scale=0.2,width=1,heigh=1)+\n  # title & caption\n  draw_label(\"Cricket Ground Country Winners \\n1996-2005\",\n             x=0.4,y=0.93,size=34,fontfamily=\"Impact\",\n             fontface=\"bold\")+\n  draw_label(\"Datasource: World Cup Cricket | ESPN Cricinfo\\n#TidyTuesday w49\\nInfographics: Federica Gazzelloni\",\n             x=0.82,y=0.05,size=12,fontfamily=\"Impact\",\n             fontface=\"plain\")\n\n\n# save the plot---------\nragg::agg_png(here::here(\"TidyTuesday/w49/cricket.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}