{
  "hash": "9f1ce31013ff78bbfee627874ff62806",
  "result": {
    "markdown": "---\ntitle: 'Big Pumpkins'\nsubtitle: 'Welcome to TidyTuesday 2021 week 43'\ndate: '2021-10-19'\nimage: 'w43_big_pumpkins.png'\nimage-alt: ''\ndescription: 'Networks'\noutput: html_document\nexecute: \n   eval: false\n---\n\n\n\n\n# final week 43 Pumpkins\n\nrm(list=ls())\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries-----\nlibrary(tidyverse)\nlibrary(extrafont)\nlibrary(showtext)\nshowtext_opts(dpi = 320)\nshowtext_auto(enable=T)\nfont_add_google(\"Eater\",\"Eater\")\n\n\n# Data-----\npumpkins <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-19/pumpkins.csv')\n\n\n# Data wrangling-------\ndf <- pumpkins%>% #\n  filter(!str_detect(state_prov,\"Entries\")) %>%\n  filter(!country==\"Unknown country\") %>%\n  separate(id,into=c(\"year\",\"type\")) %>%\n  mutate(#place=as.integer(place),\n    year=as.integer(year),\n    pct_chart=as.double(pct_chart))%>%\n  mutate(type = factor(type,labels=c(\"F\"=\"Field Pumpkins\",\n                                     \"L\"=\"Long Gourds\",\n                                     \"P\"=\"Pumpkins\",\n                                     \"S\"=\"Squash\",\n                                     \"T\"=\"Tomato\",\n                                     \"W\"=\"Watermelon\"))) %>%\n  count(place,year,type,country,weight_lbs,ott,est_weight,pct_chart,sort=T) %>%\n  mutate(weight_lbs=as.factor(weight_lbs),\n         weight_lbs=as.double(weight_lbs),\n         est_weight=as.factor(est_weight),\n         est_weight=as.double(est_weight),\n         ott=as.factor(ott),\n         ott=as.numeric(ott)) %>%\n  filter(!ott==0) %>%\n  mutate(pct_weight=round(sum(weight_lbs),2),\n         pct_weight=round(weight_lbs/pct_weight*100,2),\n         .after=pct_chart) %>%\n  # I added this new information, so I need to re-run all the models\n  mutate(base=median(weight_lbs[year==2013]),\n         w_ratio=weight_lbs/base) %>% #head\n  arrange(year) %>%\n  select(-n,-base) # %>%count(year,w_ratio)\n\n\n# Set the df for plotting\nmed_ratios <- df%>%\n  filter(type==\"Pumpkins\")%>%\n  filter(year%in%c(\"2013\",\"2020\"))%>%\n  arrange(w_ratio) %>%\n  filter(!country%in%c(\"The Netherlands\",\"Spain\",\"Belgium\",\"Poland\",\"Portugal\"))%>%\n  group_by(country,year) %>%\n  summarize(median_w_ratio=round(median(w_ratio),2))%>%\n  ungroup()%>%\n  pivot_wider(names_from=year,values_from=median_w_ratio)%>%\n  arrange(2013,2020)\n\n# find the values for the secondary axis\nmy_y_axis <- df %>%\n  left_join(med_ratios,by=\"country\")%>%\n  mutate(country_ratio_13=paste0(`2013`,\"-\",country),\n         country_ratio_20=paste0(country,\"-\",`2020`),\n                                 .after=\"country\") \n\nmy_sec_y_axis <- c(\"Italy-0.78\",\"United Kingdom-0.97\",\n                   \"Germany-0.99\",\"United States-0.84\",\n                   \"Finland-0.96\",\"Japan-1.17\",\n                   \"Austria-0.96\",\"Canada-0.87\",\n                   \"Slovenia-1.21\",\"Switzerland-1.42\",\"France-1.13\")\n\nmy_sec_y_axis<- as.factor(my_sec_y_axis)\nmy_sec_y_axis <- rev(my_sec_y_axis)\n\n\n\n# violin plot\nfinal <- my_y_axis%>%\n  filter(type==\"Pumpkins\")%>%\n  filter(year%in%c(\"2013\",\"2020\"))%>%\n  arrange(w_ratio) %>%\n  filter(!country%in%c(\"The Netherlands\",\"Spain\",\"Belgium\",\"Poland\",\"Portugal\"))%>%\n  ggplot(aes(x=(w_ratio),y=fct_reorder(country_ratio_13,-(w_ratio)),group=country)) +\n  geom_jitter(shape=\".\",color=\"gold\")+\n  geom_violin(fill= \"darkorange\", color=\"darkgreen\",alpha=0.8,size=0.3)+\n  geom_boxplot(width=0.1,outlier.colour = NA,fill=\"sandybrown\",color=NA)+\n  scale_color_manual(values=c(\"green\",\"pink\"))+\n  scale_x_discrete(expand = expansion(mult = c(0, .1)))+\n  facet_wrap(~year)+\n  # from: https://cran.r-project.org/web/packages/ggh4x/vignettes/PositionGuides.html\n  guides(y = guide_axis_manual( label_size = c(12, 8)),\n    y.sec = guide_axis_manual(labels = my_sec_y_axis, label_size = c(12,8)))+\n  #label_colour = c(\"gold\", \"blue\")\n  labs(title=\"Pumpkins variability weights\",\n       subtitle=\"on selected countries 2013-2020\",\n       x=\"Ratios (Base 2013)\",y=\"Selected Countries\")+\n  theme(axis.text.x = element_text(angle=0))+\n  ggthemes::theme_solarized() +\n  theme(text = element_text(family=\"Eater\"),\n        strip.background = element_blank(),\n        strip.text = element_text(color=\"gold\",face=\"bold\",size=16),\n        plot.background = element_rect(fill=\"grey33\",color=\"grey33\"),\n        plot.title = element_text(color=\"gold\",face=\"bold\",size=34),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_text(color=\"springgreen4\"),\n        panel.background = element_rect(fill=\"grey33\",color=\"grey33\"),\n        axis.text.y = element_text(color=\"gold\",face=\"bold\"),\n        axis.title.y = element_blank(),\n        axis.title.x = element_text(color=\"gold\",face=\"bold\",family=\"Eater\",hjust=0.5),\n        axis.line.x = element_blank(),\n        axis.text.x = element_text(color=\"gold\",face=\"bold\",size=8),\n        axis.ticks.x = element_line(color=\"gold\",size=2),\n        plot.margin = margin(0.5,1,1.2,1,\"cm\"),\n        panel.spacing=unit(0, \"lines\"))\n\n\n# frame the plot\nlibrary(ggpubr)\ngraphics <- ggarrange(final)\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"\",\n                                              color = c(\"grey28\"), face = \"bold\", size = 3,\n                                              family = \"Eater\"),\n                              left = text_grob(\" \",\n                                               color = c(\"grey28\"), face = \"bold\", size = 5,\n                                               family = \"Eater\"),\n                              right = text_grob(\" \",\n                                                color = c(\"grey28\"), face = \"bold\", size = 10,\n                                                family = \"Eater\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: BigPumpkins - GPW - TidyTuesday week43\\n\",\n                                                 color = \"grey28\",family = \"Eater\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 13)\n)\n\n#source: BigPumpkins.com\tGreat Pumpkin Commonwealth\n\n# add annotations\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label = \"talking about Pumpkins\",\n           x = 0.75, y = 0.1,colour = \"gold\",size = 6,\n           family = \"Eater\",fontface = \"bold\") +\n  annotate(geom = \"text\", label = \"88% median value\",\n           x = 0.5, y = 0.85,colour = \"gold\",size = 6,\n           family = \"Eater\",fontface = \"bold\") +\n  annotate(geom = \"curve\",curvature=-0.2,\n           x = 0.6, xend=0.4, y = 0.7,yend=0.8,\n           colour = \"gold\",size = 1,\n           arrow=arrow(length=unit(0.03,\"npc\")))+\n  annotate(geom = \"text\", label = \"decreased in variability\",\n           x = 0.7, y = 0.7,colour = \"gold\",size = 3,\n           family = \"Eater\",fontface = \"bold\")\n\n\n\nlibrary(cowplot)\nlibrary(ggimage)\nlibrary(magick)\n\n# add the images for the legend keys\nimgpump <- image_read(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w43/GPCMedium512.png\")\nimgtt <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>% image_resize(\"300x300\")\n\n\n# ggdraw from {cowplot} draw the plot for setting the background colors of the side annotations\nfinal <- cowplot::ggdraw(final_plot) +\n  draw_image(imgtt, x = 0.8, y = 0.4,width = 0.15) +\n  draw_image(imgpump, x = 0.9, y = -0.45,width = 0.06) +\n  theme(plot.background = element_rect(fill = \"orange\",color = \"gold\"))\n\n\n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w43/pumpkins.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}