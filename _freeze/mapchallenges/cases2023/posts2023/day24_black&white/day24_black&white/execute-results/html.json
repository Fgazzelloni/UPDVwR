{
  "hash": "2e44433fa15394de61aa069a763267fd",
  "result": {
    "markdown": "---\ntitle: 'Black&White'\nsubtitle: 'Welcome to #30DayMapChallenge 2023 day 24'\ndate: '2023-11-24'\nimage: 'https://raw.githubusercontent.com/Fgazzelloni/30DayMapChallenge/master/2023/day24_black&white/day24_black&white.png'\nimage-alt: ''\ndescription: ''\noutput: html_document\nexecute: \n   eval: false\n---\n\n\n\n\n# Overview\n\nThis Black & white Belgium Map is build \n\nLoad necessary libraries\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggspatial)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(showtext)\nlibrary(sysfonts)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(maps)\n\nlibrary(DescTools)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add_google(name = \"Ubuntu\", family = \"Ubuntu\")\nshowtext_auto()\nshowtext_opts(dpi = 320)\n```\n:::\n\n\n\nLoad the Belgium boundaries with  `map_data()` function from the {ggplot2} package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld <- map_data('world')\nbelgium<- world%>%\n  filter(str_detect(region,\"Belgium\"))\n```\n:::\n\n\nTransform the Belgium dataset containing the longitude and latitude into a simple feature object with the `st_as_sf()` function from the {sf} package, and visualize the polygon. In this case is a POINT polygon.\n\n::: {.cell}\n\n```{.r .cell-code}\nbg_sf <- belgium%>%\n  st_as_sf(coords = c(\"long\",\"lat\"))%>%\n  st_make_valid()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bg_sf)+\n  geom_sf(color=\"grey40\")+\n  coord_sf()+\n  theme_bw()\n```\n:::\n\n\n\n\nLet's have a look at the same map witout transofrmation.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(belgium)+\n  geom_polygon(aes(long,lat,group=group),fill=\"grey40\")+\n  coord_sf()+\n  theme_bw()\n```\n:::\n\n\n\nIn order to make a full grid of the Belgium polygon, the boundary box is extracted from the simple feature object with the `st_bbox()` function from the {sf} package.\n\n::: {.cell}\n\n```{.r .cell-code}\nbg_bbox <- bg_sf%>%\n  st_bbox()\n\nbg_bbox\n```\n:::\n\n\nLet's first have a look at a simple perimeter grid with `sf::st_make_grid()` function, specifying the type of grid options, `square = FALSE`, and `cellsize = .1`.\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid <- bg_sf%>%\n  sf::st_make_grid(square = FALSE,cellsize = .1)\n```\n:::\n\n\nVisualize the `grid`:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  geom_sf(data=grid)+\n  geom_sf(data=bg_sf)+\n  coord_sf()+\n  theme_bw()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_lon <- bg_bbox[1]\nmax_lon <- bg_bbox[3]\nmin_lat <- bg_bbox[2]\nmax_lat <- bg_bbox[4]\n```\n:::\n\n\nAnd calculate the full grid of points:\n\n::: {.cell}\n\n```{.r .cell-code}\nbg_grid <- expand_grid(x = seq(from = min_lon, \n                               to = max_lon, length.out = 100),\n                       y = seq(from = min_lat, \n                               to = max_lat, length.out = 100))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbg_coords <- belgium %>% \n  select(1:2) %>% \n  rename(x = long, y = lat)\n```\n:::\n\n\nIn this case the application of the `DescTools::PtInPoly()` function builds points within the boundaries of a given polygon. The point in polygon, `pip` vector is created. *The algorithm implements a sum of the angles made between the test point and each pair of points making up the polygon.*\n\n::: {.cell}\n\n```{.r .cell-code}\nbg_grid_map <- data.frame(DescTools::PtInPoly(bg_grid, bg_coords)) %>% \n  filter(pip == 1) %>% \n  # group by latitude\n  group_by(y) %>% \n  # set a new id vector for grouping points\n  mutate(id = dplyr::cur_group_id()) %>%\n  ungroup()\n```\n:::\n\n\n\nMake the map:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_jitter(data=belgium,\n             aes(long,lat,group=group),size=0.2)+\n  geom_jitter(data = bg_grid_map, \n          aes(x, y, group = id,color=y), \n          size=0.1,show.legend = F)+\n  geom_jitter(data = bg_grid_map, \n            aes(x, y, group = id,color=y), \n            shape=\".\",show.legend = F) +\n  scale_color_gradient(low = \"white\",high = \"black\") +\n  scale_y_continuous(limits = c(49.5294835476, 51.4750237087)) +\n  scale_x_continuous(limits = c(2.51357303225, 6.15665815596)) +\n  coord_map(clip = \"off\") +\n  annotate(\"text\", y = 49.68, x = 4.3, \n           label = \"Belgium\", \n           family=\"Ubuntu\",\n           fontface = \"bold\", \n           size = 18, color = \"#000000\", vjust = \"top\") +\n  annotation_north_arrow(location = \"br\", \n                         which_north = \"true\", \n                         pad_x = unit(0.0, \"in\"), \n                         pad_y = unit(0.2, \"in\"),\n                         style = north_arrow_fancy_orienteering)+\n   labs(caption = \"#30DayMapChallenge 2023 Day 24 Black & White: Belgium\\nDataSource: {ggplot2} | Map: @fgazzelloni\")+\n  ggthemes::theme_map() +\n  theme(text = element_text(family=\"Ubuntu\"),\n        plot.caption = element_text( hjust = 0.5, \n                                     vjust=-0.1,\n                                     size = 8),\n        plot.caption.position = \"plot\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"day_24_black&white.png\",bg=\"#f6f7f9\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}