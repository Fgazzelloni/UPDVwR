{
  "hash": "e4383493b41e47032a33d9087d3044e3",
  "result": {
    "markdown": "---\ntitle: 'Asia'\nsubtitle: 'Welcome to #30DayMapChallenge 2023 day 6'\ndate: '2023-11-06'\nimage: 'https://raw.githubusercontent.com/Fgazzelloni/30DayMapChallenge/master/2023/day6_asia/day6_asia.png'\nimage-alt: ''\ndescription: ''\noutput: html_document\nformat:\n  html:\n    code-overflow: wrap\nexecute: \n   eval: false\n---\n\n\n# Overview\n\nFor this `#30DayMapChallenge 2023 Day6 - Asia` let's explore the Population estimation for Regions and major Cities, from different sources.\n\nAlso, we will be looking at `how to get started with {ggmap}` to find the `geocodes` for the major cities in Asia.\n\n\n## Asia Cities and Population by Wikipedia.org\n\nLet's scrap the table of the Major Cities in Asia along with the Population level from `Wikipedia.org`.\n\n\nLoad the first set of libraries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(stringr)\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml.population <- read_html('https://en.wikipedia.org/wiki/List_of_Asian_cities_by_population_within_city_limits')\n\ndf.asia_cities <- html.population %>%\n  html_nodes(\"table\") %>%\n  .[[2]] %>%\n  html_table(fill = TRUE)\n\ndf.asia_cities %>% names()\n```\n:::\n\n\nSelect only the vectors of interest and clean data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf.asia_cities <- df.asia_cities[-1,c(1,2,4)]\n\nasia_cities <- df.asia_cities %>%\n    mutate(Population = str_replace_all(Population, \"\\\\[.*\\\\]\",\"\") %>% parse_number(),\n           City_full= str_c(df.asia_cities$City, df.asia_cities$Nation, sep = ', ')) %>%\n    select(City, Nation, City_full, Population)%>%\n    filter(!str_detect(Nation,\"Russia|Turkey\"))\n\n\nasia_cities %>% head()\n```\n:::\n\n\n## Use GGMAP\n\nTo find the Asia City `Geocodes` we use the `geocode()` function from the {ggmap} package.\n\n\n::: callout\n\nIn order to get started with {ggmap} follow these steps:\n\n-   Install the package from source:\n\n    remotes::install_github(\"dkahle/ggmap\")\n\n-   Get started with Google Maps Platform <https://developers.google.com/maps> all you need to do, if you do not have access to the platform yet, is to get started a free trial by adding your bank account information (if you do not want to continue after the trials ends you can stop it without charges)\n\n-   Go to on the left-side bar menu and select `Overview` then `ENABLE APIs`\n\n-   Go to `APIs & Services` to check enabled APIs\n\n-   Go to `Keys and Credentials` and click `+CREATE CREDENTIALS` on the top-side bar\n\n-   Copy the API key and paste it in the `register_google()` function, the option write = T will save the credentials for future use in your .Renviron file:\n\n    ggmap::register_google(<your api key>, write = T)\n    \n:::\n\n\n\nOnce you are all set try:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggmap)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.geo <- geocode(asia_cities$City_full)\ndata.geo%>%head\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nasia_cities_full <- cbind(asia_cities, data.geo)\n# inspect\nasia_cities_full %>% head() \n```\n:::\n\n\n\n\n## Mapping Asia Polygons\n\nLet's have a look at the map of Asia with {ggmap}.\n\n::: {.cell}\n\n```{.r .cell-code}\nmap.asia <- get_map('Asia', zoom = 3)\nmap.asia %>% ggmap()\n```\n:::\n\n\nFor this challenge we will be using another package for the polygons of Asia, the {rworldmap} package. \n\n    install.packages(\"rworldmap\")\n    \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rworldmap)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nworldmap <- rworldmap::getMap(resolution = \"high\")\ndim(worldmap)\n```\n:::\n\n\nHave a look at the regions and choose Asia.\n\n::: {.cell}\n\n```{.r .cell-code}\nt(t(table(worldmap$REGION)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nasia <- worldmap[which(worldmap$REGION==\"Asia\"),]\nasia%>%class\n```\n:::\n\n\nAs it is a spatial polygon dataframe, and we'd like to use the `geom_sf()` function from the `{ggplot2}` package, we transform it to a simple feature object with `st_as_sf()` function from the `{sf}` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nasia_sf <- asia %>%\n  st_as_sf()\n\nasia_sf %>% class()\n```\n:::\n\n\n### Asia States by Population Level\n\nTo map the continent with population estimation by state we can set the option `fill= POP_EST`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasia_sf %>%\n  ggplot()+\n  geom_sf(aes(fill=POP_EST))+\n  scale_fill_continuous()\n```\n:::\n\n\n#### Population Level by custom class\n\nInteresting is looking at a different classification of the population classes, and we do this by using the `classIntervals()` function from the `{classInt}` package for classifying the Population Estimation by quantile.\n\n\nLet's have a look at the population quantiles first. What we can see are the min and the max levels, and the values of the three quantiles, 25%, 50% (median), and the 75%. Which estimation of population follow in each quantile class.\n\nThe median population estimate for Asia is around 18 million, with some regions having populations of less than 1.5 billion people.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(asia_sf$POP_EST, na.rm=TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nasia_sf%>%\n  ggplot(aes(POP_EST))+\n  geom_histogram(aes(fill=SOVEREIGNT),bins = 20)+\n  geom_vline(aes(xintercept = mean(POP_EST)),color=\"lightblue\")+\n  geom_vline(aes(xintercept = median(POP_EST)),color=\"midnightblue\")+\n  geom_text(aes(x=9000000,y=9,label=\"median\"),size=2)+\n  geom_text(aes(x=50000000,y=9,label=\"mean\"),size=2)+\n  scale_x_log10(labels=scales::comma_format(scale = 1/1000),n.breaks =8)+\n  scale_fill_viridis_d()+\n  labs(x=\"Population Estimation (Thousands)\",\n       title=\"Asia Population Distribution\",\n       caption=\"DataSource: {rworldmap} | Graphic: @fgazzelloni\")+\n  ggthemes::theme_clean()+\n  theme(legend.text = element_text(size=5),\n        legend.key.size = unit(5,units = \"pt\"))\n```\n:::\n\n\n\nWe use the `{classInt}` package to find custom intervals of the population. And set up a new object called `brks`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(classInt)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbrks <- classIntervals(asia_sf$POP_EST,\n                       n=10, \n                       style=\"quantile\")\nbrks\n```\n:::\n\n\nSet the color scheme:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrks <- brks$brks\ncolors <- RColorBrewer::brewer.pal(length(brks), \"Spectral\")\n```\n:::\n\n\nFinalize the dataset to use for the map with the population estimation interval cuts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregion_pop <- asia_sf%>%\n  select(POP_EST)%>%\n  mutate(breaks=case_when(POP_EST > 0 & POP_EST < 625493.5 ~ \"[0,625493.5)\",\n                          POP_EST >= 625493.5 & POP_EST < 2691158 ~ \"[625493.5,2691158)\",\n                          POP_EST >= 2691158 & POP_EST < 4728016 ~ \"[2691158,4728016)\",\n                          POP_EST >= 4728016 & POP_EST < 6834942 ~ \"[4728016,6834942)\",\n                          POP_EST >= 6834942 & POP_EST < 17788961 ~ \"[6834942,17788961)\",\n                          POP_EST >= 17788961 & POP_EST < 23822783 ~ \"[17788961,23822783)\",\n                          POP_EST >= 23822783 & POP_EST < 28625005 ~ \"[23822783,28625005)\",\n                          POP_EST >= 28625005 & POP_EST < 65905410 ~ \"[28625005,65905410)\",\n                          POP_EST >= 65905410 & POP_EST < 141564781 ~ \"[65905410,141564781)\",\n                          POP_EST >= 141564781 & POP_EST <= 1338612968 ~ \"[141564781,1338612968]\"))\n```\n:::\n\n\n\nSet some information about Asia Population on a text box with the `geom_textbox()` function from the `{ggtext}` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext <- tibble(asia_text=c(\"As of 2022, Asia's 4.6B population thrives in diverse urban centers. Mumbai's density soars at 20.7K/km², while Tokyo boasts 6.3K/km². Asia's remarkable density and cultural richness make it the world's most populous and dynamic continent.\"))\n```\n:::\n\n\n\n## Make the Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregion_pop %>%\n  ggplot()+\n  geom_sf(aes(fill=breaks))+\n  scale_fill_manual(breaks=c(\"[0,625493.5)\",\"[625493.5,2691158)\",\n                               \"[2691158,4728016)\",\"[4728016,6834942)\",\n                             \n                             \"[6834942,17788961)\",\"[17788961,23822783)\",\n                               \"[23822783,28625005)\",\"[28625005,65905410)\",\n                               \"[65905410,141564781)\",\"[141564781,1338612968]\"),\n                      values=rev(colors))+\n  geom_point(data=asia_cities_full,\n             mapping=aes(lon,lat,size=Population),\n             shape=21,stroke=0.5,\n             alpha=0.7,\n             color=\"grey90\",\n             inherit.aes = F)+\n  scale_size_continuous(labels=scales::comma_format())+\n  geom_text(data=asia_cities_full,\n             mapping=aes(lon,lat,label=City),fontface=\"bold\",\n            check_overlap = T,\n            size=2.1,color=\"white\")+\n  ggtext::geom_textbox(data=text,\n                       mapping=aes(x=60,y=-6,label=text),\n                       size=1.8,width = 0.4,fill=\"grey90\",\n                       family = \"Gill Sans\",\n                       inherit.aes = F)+\n  geom_curve(x=50,xend=67,y=0,yend=20,\n               linewidth=0.2,curvature = -0.5,\n               arrow = arrow(angle=30, \n                             length = unit(0.1, \"inches\"),\n                             ends = \"last\", type = \"open\"),\n      color=\"white\")+\n    geom_curve(x=86,xend=140,y=-5,yend=33,\n               linewidth=0.2,\n               arrow = arrow(angle=30, \n                             length = unit(0.1, \"inches\"),\n                             ends = \"last\", type = \"open\"),\n      color=\"white\")+\n  labs(fill=\"Regions Population\",\n       size=\"Cities Population\",\n       title=\"Asia - Population Level\",\n       caption=\"#30DayMapChallenge 2023 Day6 - ASIA\\nDataSource: Wikipedia & ggmap | Map @fgazzelloni\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(color=\"white\", family = \"Gill Sans\"),\n        plot.title = element_text(face=\"bold\",size=14),\n        plot.caption = element_text(hjust = 0),\n        plot.background = element_rect(fill=\"#4A4A4A\",color=\"#4A4A4A\"),\n        panel.background = element_rect(fill=\"#4A4A4A\",color=\"#4A4A4A\"),\n        legend.background = element_blank(),\n        legend.key = element_rect(color=\"#4A4A4A\",fill=\"#4A4A4A\"),\n        legend.position = \"right\",\n        legend.text = element_text(size=5.5),\n        legend.key.size = unit(5.5,units = \"pt\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"day6_asia.png\",\n       width = 7,height = 4,\n       bg=\"#4A4A4A\")\n```\n:::\n\n\n## Resources\n\n- <https://cran.r-project.org/web/packages/ggmap/readme/README.html>\n- <https://www.r-bloggers.com/2017/09/mapping-the-largest-cities-in-asia-using-r/>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}