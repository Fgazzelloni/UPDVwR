{
  "hash": "c9ad5bd0465b9225b62116429d98a8a1",
  "result": {
    "markdown": "---\ntitle: '3d'\nsubtitle: 'Welcome to #30DayMapChallenge 2023 day 23'\ndate: '2023-11-23'\nimage: 'https://raw.githubusercontent.com/Fgazzelloni/30DayMapChallenge/master/2023/day23_3D/day23_3D.png'\nimage-alt: ''\ndescription: ''\noutput: html_document\nexecute: \n   eval: false\n---\n\n\n\n# Overview\n\nThis is the 3D Italy's Population Density Map made with the instruction provided by `Milos Agathon: Milos Makes Maps` tutorial:\n\n- <https://www.youtube.com/watch?v=qTDf5VVnjMM>\n- <https://github.com/milos-agathon/making-crisp-spike-maps-with-r/blob/main/R/create-spike-map-in-r.r>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"tidyverse\")\nlibrary(\"R.utils\")\nlibrary(\"httr\")\nlibrary(\"sf\")\nlibrary(\"stars\")\nlibrary(\"rayshader\")\n```\n:::\n\n\nDownload and unzip `kontur` data: \n\n::: {.cell}\n\n```{.r .cell-code}\nurl <-\n    \"https://geodata-eu-central-1-kontur-public.s3.amazonaws.com/kontur_datasets/kontur_population_IT_20220630.gpkg.gz\"\nfile_name <- \"italy-population.gpkg.gz\"\n\nget_population_data <- function() {\n    res <- httr::GET(\n        url,\n        write_disk(file_name),\n        progress()\n    )\n\n    R.utils::gunzip(file_name, remove = F)\n}\n\nget_population_data()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload_file_name <- gsub(\".gz\", \"\", file_name)\ncrsLONGLAT <- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_population_data <- function() {\n    pop_df <- sf::st_read(\n        load_file_name\n    ) |>\n        sf::st_transform(crs = crsLONGLAT)\n}\n\npop_sf <- get_population_data()\n\nhead(pop_sf)\n```\n:::\n\n\nFirst raw image:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n    geom_sf(\n        data = pop_sf,\n        color = \"grey10\", fill = \"grey10\"\n    )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggsave(\"raw.png\")\n```\n:::\n\n\nMake it a `raster`\n\n::: {.cell}\n\n```{.r .cell-code}\nbb <- sf::st_bbox(pop_sf)\n\nget_raster_size <- function() {\n    height <- sf::st_distance(\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymin\"]])),\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymax\"]]))\n    )\n    width <- sf::st_distance(\n        sf::st_point(c(bb[[\"xmin\"]], bb[[\"ymin\"]])),\n        sf::st_point(c(bb[[\"xmax\"]], bb[[\"ymin\"]]))\n    )\n\n    if (height > width) {\n        height_ratio <- 1\n        width_ratio <- width / height\n    } else {\n        width_ratio <- 1\n        height_ratio <- height / width\n    }\n\n    return(list(width_ratio, height_ratio))\n}\nwidth_ratio <- get_raster_size()[[1]]\nheight_ratio <- get_raster_size()[[2]]\n\nsize <- 3000\nwidth <- round((size * width_ratio), 0)\nheight <- round((size * height_ratio), 0)\n\nget_population_raster <- function() {\n    pop_rast <- stars::st_rasterize(\n        pop_sf |>\n            dplyr::select(population, geom),\n        nx = width, ny = height\n    )\n\n    return(pop_rast)\n}\n\npop_rast <- get_population_raster()\n```\n:::\n\n\nSecond raw image this time as a raster:\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pop_rast)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggsave(\"raw2.png\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npop_mat <- pop_rast |>\n    as(\"Raster\") |>\n    rayshader::raster_to_matrix()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- rev(c(\n    \"#0b1354\", \"#283680\",\n    \"#6853a9\", \"#c863b3\"\n))\n\ntexture <- grDevices::colorRampPalette(cols)(256)\n```\n:::\n\n\nCreate the initial 3D object\n\n::: {.cell}\n\n```{.r .cell-code}\npop_mat |>\n    rayshader::height_shade(texture = texture) |>\n    rayshader::plot_3d(\n        heightmap = pop_mat,\n        solid = F,\n        soliddepth = 0,\n        zscale = 15,\n        shadowdepth = 0,\n        shadow_darkness = .95,\n        windowsize = c(800, 800),\n        phi = 65,\n        zoom = .65,\n        theta = -30,\n        background = \"white\"\n    )\n```\n:::\n\n\nAdjust the view after building the window object\n\n::: {.cell}\n\n```{.r .cell-code}\nrayshader::render_camera(phi = 75, zoom = .7, theta = 0)\n\nrayshader::render_highquality(\n    filename = \"italy_population_2022.png\",\n    preview = T,\n    light = T,\n    lightdirection = 225,\n    lightaltitude = 60,\n    lightintensity = 400,\n    interactive = F,\n    width = width, height = height\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}