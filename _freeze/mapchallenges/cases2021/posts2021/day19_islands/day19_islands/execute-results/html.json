{
  "hash": "eb3ea83a9e76290c986399c2e4209fbe",
  "result": {
    "markdown": "---\ntitle: 'Islands'\nsubtitle: 'Welcome to #30DayMapChallenge 2021 day 19'\ndate: '2021-11-19'\nimage: 'day19_islands.png'\nimage-alt: ''\ndescription: 'Networks'\noutput: html_document\nexecute: \n   eval: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n## Japan\nsource: https://cran.r-project.org/web/packages/ggfortify/vignettes/plot_map.html\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mapdata)\n\n# Check all available geospatial objects:\n# help(package='mapdata')\n \njapan<- ggplot2::map_data(\"japan\")\n# Map of Japan:\nmap('japan',col=\"black\", lwd=1, mar=rep(0,4) )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\njapan <- map_data(\"japan\") %>% \n  select(lon = long, lat, group, id = region)\nhead(japan)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncities <- get('world.cities')\ncities <- cities[cities$country.etc == 'Japan', ]\nhead(cities)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\njp_pop<- cities%>%\n  count(name,pop,lat,long)%>%\n  arrange(-pop)%>%\n  slice(1:10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfull <- japan%>%\n  full_join(jp_pop,by=c(\"lon\"=\"long\",\"lat\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(extrafont)\nlibrary(showtext)\nlibrary(cowplot)\nlibrary(ggstream)\nlibrary(colorspace)\n\n\n## Automatically use showtext to render text for future devices\nshowtext_auto()\n\n## Tell showtext the resolution of the device,\n## only needed for bitmap graphics. Default is 96\nshowtext_opts(dpi = 320)\n\n## Loading Google fonts (https://fonts.google.com/)\nfont_add_google(\"Covered By Your Grace\", \"grace\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\nn <- 47\nqual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]\ncol_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))\n\nlibrary(RColorBrewer)\nfinal<- ggplot() +\n  geom_point(data = cities, \n             mapping = aes(x = long, y = lat),\n               colour = 'blue', size = 0.1) +\n  \n  geom_polygon(data=japan,\n               mapping = aes(x = lon,y = lat,group = group,fill=id)) +\n  \n   geom_point(data=full,\n               mapping = aes(x = lon,y = lat, group = group,\n                             size=pop),alpha=0.4,color=\"black\") +\n  \n  geom_text(aes(x = 132, y = 40),label = \"Japan\",size=20,family=\"grace\") +\n  geom_text(aes(x = 142, y = 45),label = \"Hokkaido\",size=12,family=\"grace\") +\n  geom_text(aes(x = 142, y = 37),label = \"Honshu\",size=12,family=\"grace\") +\n  geom_text(aes(x = 132, y = 30),label = \"Kyushu\",size=12,family=\"grace\") +\n  geom_text(aes(x = 138, y = 33),label = \"Shikoku\",size=12,family=\"grace\") +\n  geom_text(aes(x = 130, y = 25),label = \"Okinawa Island\",size=12,family=\"grace\") +\n  \n  ggrepel::geom_text_repel(data = jp_pop, \n             mapping = aes(x = long, y = lat,label=name),family=\"grace\") +\n  \n  scale_fill_manual(values=col_vector)+\n  scale_size_area(label = scales::comma,max_size=6)+\n  guides(fill=guide_legend(ncol=2,keywidth =  unit(0.1, 'cm')),\n         size=guide_legend(ncol=4)) +\n  \n  labs(title=\"Japanese Archipelago\",\n       subtitle=\"Japan is the largest island country in East Asia and the fourth largest island country in the world - Wiki\",\n       size=\"Population\",fill=\"Regions\",\n       caption = \"Datasource: {ggplot2}::map_data - #30DayMapChallenge - Infographics: Federica Gazzelloni\")+\n  coord_map() +\n  ggthemes::theme_map()+\n  theme(text = element_text(family=\"grace\",size=12),\n        legend.position = c(-0.3,0.1),\n        legend.background = element_blank(),\n        legend.key.size = unit(0.1, 'cm'),\n        plot.title = element_text(size=25,vjust=-2),\n        plot.subtitle = element_text(vjust=-5),\n        plot.caption = element_text(size=14)\n        )\n\nfinal\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# save final plot\nragg::agg_png(here::here(\"R_general_resources/30DayMapChallenge/day19_islands/islands.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}