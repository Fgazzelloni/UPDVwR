{
  "hash": "f71d44427976b2a2a589a5d033e3be2f",
  "result": {
    "markdown": "---\ntitle: 'Points'\nsubtitle: 'Welcome to #30DayMapChallenge 2021 day 1'\ndate: '2021-11-1'\nimage: 'https://raw.githubusercontent.com/Fgazzelloni/30DayMapChallenge/master/2021/day1_points/w44_runners.png'\nimage-alt: ''\ndescription: ''\noutput: html_document\nexecute: \n   eval: false\n---\n\n\n\n# Overview\n\nThis map is made with data from `TidyTuesday` 2021 week44 Race.\n\n\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nlibrary(tidyquant)\nlibrary(ggpattern)\n```\n:::\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nlibrary(extrafont)\n\n# loadfonts()\nlibrary(showtext)\nfont_add_google(\"Shadows Into Light\",\"shadow_into_light\")\nfont_add_google(\"Schoolbell\", \"bell\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n#font_families()\n```\n:::\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nultra_rankings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv')\nrace <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv')\n```\n:::\n\n\n\n- Make one dataset using the key primary variable \"race_year_id\" as a link between the two datasets\n- select the variables needed for making the map\n\nthere are some missing values, we deal with those later on the making\n\nCountry to fix:\n\n- Hong Kong, China  ~\"China\"\n- FL, United States\t~ \"US\"\t\t\n- LA, United States\t\t\t\n- PA, United States\t\t\t\n- United States\n- Myoko, Japan      ~ \"Japan\"\n- United Kingdom\t  ~ \"UK\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace%>%\n  inner_join(ultra_rankings ,by=\"race_year_id\") %>% \n  mutate(year=lubridate::year(date))%>% #count(year)\n  mutate(participation=tolower(participation))%>%count(age,gender)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_df <- race%>%\n  inner_join(ultra_rankings ,by=\"race_year_id\")%>%\n  mutate(year=lubridate::year(date))%>%\n  #select(city,country,gender,year,runner)%>%\n  filter(!is.na(country),!is.na(rank)) %>%\n  mutate(country=case_when(country==\"Hong Kong, China\"~\"China\",\n                           country==\"FL, United States\"~\"USA\",\n                           country==\"LA, United States\"~\"USA\",\n                           country==\"PA, United States\"~\"USA\",\n                           country==\"United States\"~\"USA\",\n                           country==\"United Kingdom\"~\"UK\",\n                           country==\"Myoko, Japan\"~\"Japan\",\n                           TRUE~country)) \n```\n:::\n\n\nLet's see the cities:\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_df <- map_df %>% #count(year)\n  arrange(city)%>%\n  mutate(city=tolower(city))%>%\n  mutate(city=gsub(\"\\\\d\",\"\",city),\n         city=gsub(\"\\\\?\",NA,city),\n         city=gsub(\"-\",\"\",city)) \n```\n:::\n\n\ndrop the missing values\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_df<- map_df%>%drop_na()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nranks <- map_df%>%\n  filter(rank==\"1\")%>%\n  filter(gender==\"W\")%>%\n  count(country,nationality,distance,time_in_seconds,year)%>%\n  dplyr::select(-n)%>%\n  arrange(-distance,time_in_seconds) %>%#count(distance)\n  slice(1:10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncou_yr_m <- c(\"Finland_2018\",\"France_2019\",\"Spain_2019\",\"Indonesia_2019\",\"USA_2018\")\ncountry_m<- c(\"Finland\",\"France\",\"Spain\",\"Indonesia\",\"USA\")\nlatitude_m<- c(60.192059, 46.7111, 40.416775,-6.200000,40.981613)\nlongitude_m<-c(24.945831,1.7191,-3.703790,106.816666,-73.691925)\n\n\ncou_yr_w<-c(\"UK_2016\",\"Nepal_2018\",\"Greece_2016\",\"Poland_2017\",\"Italy_2018\",\"USA_2017\")\ncountry_w<- c(\"UK\",\"Nepal\",\"Greece\",\"Poland\",\"Italy\",\"USA\")\nlatitude_w<- c(43.844264,27.700769,39.366669,50.012100,42.349998,40.981613)\nlongitude_w<- c(-21.086052,85.300140,22.933332,20.985842,14.166667,-73.691925)\n\nmy_map_text_w<- data.frame(cou_yr_w,country_w,latitude_w,longitude_w)\n\nmy_map_text_m<- data.frame(cou_yr_m,country_m,latitude_m,longitude_m)\n```\n:::\n\n\n\n\nload the libraries form the map\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nlibrary(maps)\nlibrary(rnaturalearth)\nlibrary(sp)\nlibrary(sf)\n```\n:::\n\n\nFirst step for the geo codes and geometry\n\n- geocode() {ggmap} finds latitude and longitude for the cities (See ?register_google)\n- ne_countries() {rnaturalearth} for world country polygons\n- sf() {sf} for **simple feature** list column\n- map_data() {ggplot2} for a data frame of map data (require(\"maps\"))\n\n\nDataset is downloaded from:--------207 matches -----\n[kaggle dataset](https://www.kaggle.com/max-mind/world-cities-database?select=worldcitiespop.csv)\n\n[geonames](https://www.geonames.org/export/web-services.html) can be another fount for geocodes\n\n\n\n\n\nLoad the data form {rnaturalearth} with `geometry` and join {maps} with `map_data()`for the lat and lon\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# world data full \nworld_full <- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\")\nworld_data <- filter(world_full, continent != \"Antarctica\")\n\n# world lat&long\nworld<-map_data(map = \"world\") #%>%count(subregion)\n# states lat&long\nstates <- map_data(\"state\") # let's see if we use it\n\nworld_geodata<- world %>%\n  full_join(world_data, by = c(\"region\"=\"name\"))%>%\n  select(long,lat,group,order,region,region_wb) #%>%count(region)\n\n# my df with geocodes\nmap_geodata <- map_df%>%\n  left_join(worldcitiespop_match,by=\"city\")%>%\n  janitor::clean_names()\n```\n:::\n\n\n\n\n- geom_polygon() for the world borders\n- geom_polygon() for the US borders\n- geom_path() for delimiting world regions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_geodata_dot <- map_geodata %>% \n  arrange(time_in_seconds)%>%\n  mutate(participation=tolower(participation))%>%\n  mutate(elevation=elevation_gain+elevation_loss,.after=elevation_gain)%>%\n  select(-elevation_gain,-elevation_loss) %>%\n  select(country,latitude,longitude,gender,participation,rank)%>%\n  mutate(country_code = countrycode(country, \n            origin = 'country.name', \n            destination = 'iso2c'),\n         country_code=tolower(country_code))\n```\n:::\n\n\n\nWe do not use these features:\n\n- geom_polygon(data=world_geodata,aes(x=long,y=lat,group=group),fill=\"lightslategray\") + \n- geom_polygon(data = states,aes(x = long, y = lat, group = group),fill=NA,color=\"#000000\",size=0.3)+\n- geom_path(data=world,aes(x=long,y=lat,group=group),size=0.1,color=\"darkslateblue\") +\n\n\n::: {.cell}\n\n```{.r .cell-code}\npal_gender<- c(\"deepskyblue4\",\"mediumvioletred\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map_text_w\n```\n:::\n\n\nWest world\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nworld_west<-  ggplot() +\n  \n  geom_point(data = states,aes(x = long, y = lat),color=\"darkslateblue\",shape=\".\") +\n  geom_point(data=world,aes(x=long,y=lat,group=group),shape=\".\",color=\"darkslateblue\") +\n  \n  # now we need to add our data \n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude,color=factor(gender)),\n             alpha=0.7,stroke=1,size=1,shape = 21,fill=NA) +\n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude),\n             alpha=0.7,shape=\".\",color=\"yellow3\",show.legend = T) +\n  geom_point(data=map_geodata,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  geom_text(data=my_map_text_m,mapping=aes(x=longitude_m, y=latitude_m,label=cou_yr_m),\n            family=\"shadow_into_light\",color=\"gold\",hjust=-0.5) +\n  \n  coord_map(\"ortho\", orientation = c(3.849945, -103.525750, 0)) +\n  \n  guides(color = guide_legend(override.aes = list(size = 5)))+\n  scale_color_manual(values = pal_gender,labels=c(\"Male\",\"Female\")) +\n  labs(x=\"\",y=\"\",color=\"Gender\") +\n  theme_void() +\n  theme(text = element_text(family=\"shadow_into_light\",color=\"gold\"),\n        plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n        panel.background = element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = c(0.2,0.5),\n        legend.text = element_text(family=\"shadow_into_light\"),\n        legend.title = element_text(family=\"shadow_into_light\"))\n\n\nworld_west\n```\n:::\n\n\n\nEast World \n\n::: {.cell}\n\n```{.r .cell-code}\nworld_east<-  ggplot() +\n  \n  geom_point(data = states,aes(x = long, y = lat),color=\"darkslateblue\",shape=\".\") +\n  geom_point(data=world,aes(x=long,y=lat,group=group),shape=\".\",color=\"darkslateblue\") +\n  \n  # now we need to add our data \n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude,color=gender),\n             alpha=0.7,stroke=1,size=1,shape = 21,fill=NA,show.legend = F) +\n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  geom_point(data=map_geodata,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  \n  geom_text(data=my_map_text_w,mapping=aes(x=longitude_w, y=latitude_w,label=cou_yr_w),\n            family=\"shadow_into_light\",color=\"gold\",hjust=-0.2) +\n  \n  coord_map(\"ortho\", orientation = c(19.982182, 46.595135, 0)) +\n  \n  scale_color_manual(values = pal_gender) +\n  labs(x=\"\",y=\"\",color=\"\") +\n  theme_void() +\n  theme(text = element_text(family=\"shadow_into_light\",color=\"gold\"),\n        plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n        panel.background = element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"none\")\n\n world_east \n```\n:::\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nlibrary(patchwork)\nlibrary(cowplot)\n\nmain_plot <- (world_west + world_east)# +\n  #theme_update(plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n  #             panel.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n  #             plot.margin = margin(0,0,0,0,unit = \"pt\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the libraries for final touches\nlibrary(ggpubr)\n\n# ggarrange from {ggpubr} frames the plot to make side annotations\ngraphics <- ggpubr::ggarrange(main_plot)\n\nfinal_plot <- ggpubr::annotate_figure(graphics,\n                              top = text_grob(\"Global State of Ultra Running 2012-2021\",\n                                              color = c(\"gold\"), face = \"bold\", size = 32,\n                                              family=\"shadow_into_light\",vjust = 0.8),\n                              bottom = text_grob(\"DataSource: BjnNowak-Github Repo, RunRepeat.com-TidyTuesday week44\\n30DayMapChallenge day1 - Infographics: Federica Gazzelloni\",\n                                                 color = \"gold\",family=\"shadow_into_light\",\n                                                 hjust = 0.5, vjust = 0.5, x = 0.5, \n                                                 face = \"bold.italic\", size = 14))\n\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label = \"Top 6 Countries with faster Female runners at distances between 164 and 173 km\",\n         x = 0.5, y = 0.9,colour = \"gold\",size = 4,family = \"shadow_into_light\",fontface = \"bold\")+\n  annotate(geom = \"text\", label = \"Ranking number one faster\",\n         x = 0.91, y = 0.12,colour = \"gold\",size = 4,family = \"shadow_into_light\",fontface = \"bold\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cowplot)\nlibrary(ggimage)\nlibrary(magick)\n\n# add the images for the legend keys\nimgrunners <- image_read(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w44/runner.png\")\n\n\n# ggdraw from {cowplot} draw the plot for setting the background colors of the side annotations\nfinal <- cowplot::ggdraw(final_plot) +\n  draw_image(imgrunners, x = 0.9, y = -0.45,width = 0.06) +\n  theme(plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w44/w44_runners.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}