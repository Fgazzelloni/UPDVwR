{
  "hash": "740e26b32ba91c7c9f92ec9aa20e7be7",
  "result": {
    "markdown": "---\ntitle: 'Map Challenge 2: Natural Earth'\nsubtitle: 'Welcome to #30DayMapChallenge 2021 day 13'\ndate: '2021-11-13'\nimage: 'https://raw.githubusercontent.com/Fgazzelloni/30DayMapChallenge/master/2021/day13_naturalearth/naturalearth2.png'\nimage-alt: ''\ndescription: ''\noutput: html_document\nexecute: \n   eval: false\n---\n\n\n# Overview\n\nThis map represent the `NATURAL EARTH GDP ESTIMATION`, data is from the `{rnaturalearth}` package - View: EPSG:5368.\n\nThe resources I'll to use for this map are:\n\n- [rforpoliticalscience](https://rforpoliticalscience.com/2020/12/28/add-flags-to-maps-in-r/)\n- [us census](https://walker-data.com/census-r/the-united-states-census-and-the-r-programming-language.html)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(reshape2)\nlibrary(rnaturalearth)\nlibrary(rvest)\nlibrary(countrycode)\n\n\nlibrary(ggflags)\n\nlibrary(ggimage)\n\nlibrary(ggthemes)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nCOLDAT_colonies <- read_csv(here::here(\"day13_naturalearth/coldat/COLDAT_colonies.csv\"))\ncol_df <- COLDAT_colonies  #%>%head\ncol_df <- data.frame(col_df[1:9])\ncol_df%>%names\n```\n:::\n\n\n Tidy data from wide to long:\n \n\n::: {.cell}\n\n```{.r .cell-code}\nlong_col <- col_df %>%\n  pivot_longer(cols=c(2:9), names_to=\"colony\",values_to=\"value\")%>%\n  filter(!value==0) \n\nEncoding(long_col$country) <- \"latin1\"\n  \nlong_col <- long_col%>%\n  mutate(country=tolower(country))\n```\n:::\n\n \n\n\nGet natural earth world country polygons:\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(rnaturalearth)\nmap <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\nmap <- map %>%\n  mutate(country=tolower(name_long))\n\nmap%>%select(contains(\"iso\"),country,name_long)%>%head\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry<- unique(long_col$country)\n\nrequire(countrycode)\n\ncountrycode::codelist%>%head\n\n\nlong_col$iso2c<- countrycode::countrycode(long_col$country,\n                         origin = 'country.name', \n                         destination = 'iso2c')\n\ncol_map <- sp::merge(map, long_col, \n                 by.x = \"iso_a2\", \n                 by.y = \"iso2c\", \n                 all.x = TRUE)\n\n\ncol_map <- col_map%>%\n  separate(colony,into=c(\"x\",\"colony\"))%>%\n  mutate(colony=as.factor(colony))\n\ncol_map <- col_map%>%select(-x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\ncoord <- read_html(\"https://developers.google.com/public-data/docs/canonical/countries_csv\")\n\ncoord_tables <- coord %>% html_table(header = TRUE, fill = TRUE)\n\ncoord <- coord_tables[[1]]\n\ncol_map <- merge(col_map, coord, by.x= \"iso_a2\", by.y = \"country\", all.y = TRUE)\n\n\ncol_map <- col_map%>%mutate(country_iso=tolower(iso_a2))\n\ncol_map%>%select(latitude,longitude)%>%head\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\nRColorBrewer::display.brewer.all()\nRColorBrewer::display.brewer.pal(9,\"BrBG\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_map%>%select(subregion,country_iso)%>%head\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncs_america<-col_map[which(col_map$subregion==\"Central America\"|col_map$subregion==\"South America\"),]\ncs_america%>%select(country_iso)\ncs_america%>%head\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggflags)\n\nlibrary(RColorBrewer)\n# RColorBrewer::display.brewer.pal(9,\"BrBG\")\ncut_colors <- setNames(c(brewer.pal(name = \"BrBG\", n = 4),\n                         \"darkred\"),\n                       levels(cs_america$colony_factor))\n\nflags <- cs_america%>% # select(contains(\"colony\"))\n  count(longitude,latitude,colony) \n\n\nlabels <- cs_america%>%\n  count(longitude,latitude,sovereignt,country_iso) \n\ncs_america %>%\n  filter(!is.na(subregion))%>%\n  ggplot()+\n  geom_sf(aes(fill=gdp_md_est),position=\"identity\") + # gdp_md_est\n  scale_fill_distiller(type = \"seq\",\n  palette = 2,\n  direction = -1,\n  values = NULL,\n  space = \"Lab\",\n  na.value = \"grey50\",\n  guide = \"colourbar\",\n  aesthetics = \"fill\")+\n  #scale_fill_manual(values = cut_colors) +\n  \n  ggflags::geom_flag(data=labels,aes(x=longitude,y=latitude,country=factor(sovereignt)),size=4) +\n  ggrepel::geom_text_repel(data=labels,\n                      aes(x=longitude+1,y=latitude+1,label=factor(sovereignt)),\n                      fill=\"darkorange\",max.overlaps = 100,\n             label.padding = unit(1,\"pt\"))+\n  ggthemes::theme_map()+\n  theme(legend.position = c(-0.1,0.4))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(showtext)\nlibrary(extrafont)\nsysfonts::font_info_google(\"Josefin Sans\")\n#fonts()\n#loadfonts()\nfont_add_google(\"Josefin Sans\",\"josefin\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen = 999)\nnaturalearth <- col_map %>%\n  filter(!is.na(subregion))%>%\n  ggplot()+\n  geom_sf(aes(fill=gdp_md_est),color=\"#e3bf86\",size=0.2,position=\"identity\") + # gdp_md_est\n  scale_fill_distiller(type = \"seq\",\n                       label = scales::unit_format(unit = \"M\", scale = 1e-6),\n                       palette = 2,\n                       direction = -1,\n                       values = NULL,\n                       space = \"Lab\",\n                       na.value = \"grey50\",\n                       guide = \"colourbar\",\n                       aesthetics = \"fill\")+\n  coord_sf(crs = sf::st_crs(5368))+ # https://epsg.io/\n  labs(title = \"NATURAL EARTH GDP ESTIMATION\",\n       subtitle=\"rnaturalearth data #30DayMapChallenge\",\n       caption = \"Data: rnaturalearth - View: EPSG:5368 - Graphics: Federica Gazzelloni\",\n       fill=\"GDP est.\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family = \"josefin\",face = \"bold\"),\n        plot.title = element_text(size=25),\n        plot.subtitle = element_text(size=15),\n        plot.caption = element_text(size=12),\n        legend.position = c(0,0),\n        legend.background = element_blank(),\n        legend.title = element_text(vjust=1),\n        plot.background = element_rect(colour = \"#7d9ac7\",fill=\"#7d9ac7\"),\n        panel.background = element_rect(colour = \"#7d9ac7\",fill=\"#7d9ac7\")\n        )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# save final plot\nragg::agg_png(here::here(\"day13_naturalearth/naturalearth2.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nnaturalearth\ndev.off()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}