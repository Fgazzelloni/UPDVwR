{
  "hash": "63ebb1c2a489bdf0f4440e81ae2d42bf",
  "result": {
    "markdown": "---\ntitle: 'Network'\nsubtitle: 'Welcome to #30DayMapChallenge 2022 day 6'\ndate: '2022-11-6'\nimage: 'https://raw.githubusercontent.com/Fgazzelloni/30DayMapChallenge/master/2022/day6_network/day6_network.png'\nimage-alt: ''\ndescription: ''\noutput: html_document\nexecute: \n   eval: false\n---\n\n\n# Overview\n\n`New York City subways`, map headways by route & Population density. Subway routes id are from 1 to 7 with extension coded X,A,D,E,F,G,J,L,M,N,Q and R. Data for NY Subways is from `{tidytransit}` & NYC Geometry from `data.BetaNYC`.\n\n\n### Set the fonts\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Noto Serif\",\n                family=\"Noto Serif\")\n```\n:::\n\n\n\n\nSubways in NY: load packages and data\n\n- https://cran.r-project.org/web/packages/tidytransit/vignettes/frequency.html\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages('tidytransit')\nlibrary(tidytransit)\nlibrary(tidyverse)\nlibrary(sf)\n\n# other resources: \n# https://stackoverflow.com/questions/34316083/need-to-display-u-s-metro-areas-on-a-map\n\nlocal_gtfs_path <- system.file(\"extdata\", \"google_transit_nyc_subway.zip\", package = \"tidytransit\")\n\n########  ######## ########  ######## ########  ######## ########  ######## \n# The following piece of code is from {tidytransit} vignette ########\n# Import Transit Data (GTFS)\n# read it/set the service/make it as sf\n# this must be done in three steps\ngtfs <- read_gtfs(local_gtfs_path)\ngtfs <- set_servicepattern(gtfs)\ngtfs <- gtfs_as_sf(gtfs)\n\n# build a vector with spatial lengths\ngtfs$shapes$length <- st_length(gtfs$shapes)\n\nshape_lengths <- gtfs$shapes %>% \n  as.data.frame() %>% \n  select(shape_id, length, -geometry)\n\n\n\nservice_pattern_summary <- gtfs$trips %>%\n  left_join(gtfs$.$servicepatterns, by=\"service_id\") %>% \n  left_join(shape_lengths, by=\"shape_id\") %>%\n  left_join(gtfs$stop_times, by=\"trip_id\") %>% \n  group_by(servicepattern_id) %>% \n  summarise(trips = n(), \n            routes = n_distinct(route_id),\n            total_distance_per_day_km = sum(as.numeric(length), \n                                            na.rm=TRUE)/1e3,\n            route_avg_distance_km = (sum(as.numeric(length), \n                                         na.rm=TRUE)/1e3)/(trips*routes),\n            stops=(n_distinct(stop_id)/2))\n\n\nservice_pattern_summary <- gtfs$.$dates_servicepatterns %>% \n  group_by(servicepattern_id) %>% \n  summarise(days_in_service = n()) %>% \n  left_join(service_pattern_summary, by=\"servicepattern_id\")\n\n\nservice_ids <- gtfs$.$servicepattern %>% \n  filter(servicepattern_id == 's_e25d6ca') %>% \n  pull(service_id)\n\nam_stop_freq <- get_stop_frequency(gtfs, \n                                   start_time = 6*3600, \n                                   end_time = 10*3600, \n                                   service_ids = service_ids, \n                                   by_route = TRUE)\n\none_line_stops <- am_stop_freq %>% \n  filter(route_id == 1 & direction_id == 0) %>%\n  left_join(gtfs$stops, by =\"stop_id\") %>% \n  mutate(mean_headway_minutes = mean_headway/60)\n\n\none_line_stops_sf <- gtfs$stops %>%\n  right_join(one_line_stops, by=\"stop_id\") \n\n\nroutes_sf <- get_route_geometry(gtfs, service_ids = service_ids)\n\nam_route_freq <- get_route_frequency(gtfs, \n                                     service_ids = service_ids, \n                                     start_time = 6*3600, \n                                     end_time = 10*3600)\nroutes_sf <- routes_sf %>% \n  inner_join(am_route_freq, by = 'route_id')\n\n########  ######## ########  ######## ########  ######## ########  ######## \n# convert to an appropriate coordinate reference system\nroutes_sf_crs <- sf::st_transform(routes_sf, 4326) \n\n\n# first output\nroutes_sf_crs %>% \n  filter(median_headways < 10*60) %>%\n  ggplot() + \n  geom_sf(aes(color=as.factor(median_headways)),\n          size=2) + \n  labs(color = \"Headways\") +\n  geom_sf_text(aes(label=route_id)) +\n  theme_bw()\n\n\n##### Add the NYC polygons ##### ##### ##### ##### ##### \n# https://data.beta.nyc/dataset/nyc-zip-code-tabulation-areas/resource/894e9162-871c-4552-a09c-c6915d8783fb?view_id=2c40fce3-0bb2-46d3-bb67-04a935151a96\n# https://edaoud.com/blog/2022/03/18/draw-maps-with-R-and-ggplot/\n\nlibrary(geojsonio)\nlibrary(broom)\n\n# NYC Geometry\nspdf_file <- geojson_read(  # Read the geojson file\n  \"data/zip_code_040114.geojson\",\n  what = \"sp\"\n  )\n\nstats_df <- as.data.frame(spdf_file)  # Export the census statistics in another data frame variable\nspdf_file <- broom::tidy(  # Convert it to a spatial data frame, with zip code as index\n  spdf_file,\n  region=\"ZIPCODE\"  # Use ZIPCODE variable as index, the index will be named \"id\"\n)\n\n# second output\nggplot() +\n  geom_polygon(data=spdf_file %>%\n                 inner_join(stats_df, c(\"id\"=\"ZIPCODE\")),\n               aes(x=long, y=lat, group=group,\n                   fill=POPULATION),\n               color=\"white\",\n               linewidth=.2) +\n  coord_map() +\n  scale_fill_distiller(palette = \"YlGnBu\", \n                       direction = 1) +\n  labs(title=\"Population in New York City\",\n       subtitle=\"Neighborhoods are filled by population\",\n       fill=\"Population\")\n\n######\n\n# see unique routes id available in the dataset\nroutes_sf_crs %>% \n  filter(median_headways < 10*60) %>% \n  as.data.frame()%>%\n  count(route_id,median_headways)%>%\n  pull(route_id)\n  \n########  ######## ########  ######## ########  ######## ########  ######## \n# Final map combination of the two outputs ##### ##### ##### ##### \nroutes_sf_crs %>% \n  filter(median_headways < 10*60) %>% \n  ggplot() + \n  geom_polygon(data=spdf_file %>%\n                 inner_join(stats_df, c(\"id\"=\"ZIPCODE\")),\n               aes(x=long,\n                   y=lat,\n                   group=group,\n                   fill=POPULATION),\n               color=\"grey60\",\n               alpha=0.5,\n               linewidth=.2) +\n  scale_fill_gradient(low=\"white\",high=\"grey40\")+\n  geom_sf(aes(color=as.factor(median_headways)),\n          linewidth=1,\n          show.legend = F,\n          alpha=0.8) + \n  labs(title=\"New York City subways\",\n       subtitle=\"Map headways by route & Population density\",\n       caption=\"Subway routes id are from 1 to 7 with extension coded X,A,D,E,F,G,J,L,M,N,Q and R\\nNYC Subways info:https://en.wikipedia.org/wiki/List_of_New_York_City_Subway_stations\\nDataSource: NY Subways from {tidytransit} & NYC Geometry from data.BetaNYC\\nMap: Federica Gazzelloni (@fgazzelloni)\",\n       color = \"Headways\",\n       x=\"Longitude\",y=\"Latitude\") +\n  geom_sf_label(aes(label=route_id),\n               fontface=\"bold\",\n               label.padding = unit(0.05, \"lines\"),\n               size=1.5,color=\"grey30\") +\n  coord_sf() +\n  theme_bw()+\n  theme(text=element_text(family=\"Noto Serif\",size=9),\n        legend.position = c(1.1,0.7),\n        #legend.background = element_blank(),\n        legend.key.size = unit(10,units = \"pt\"),\n        legend.text = element_text(size=5),\n        legend.title = element_text(size=5.5),\n        axis.title = element_text(size=8),\n        axis.text = element_text(size=6),\n        plot.title = element_text(size=18),\n        plot.caption = element_text(size=6,hjust=0.5,lineheight = 1.2),\n        panel.background = element_rect(fill=\"grey90\"))\n\n\n# Save it ##### ##### ##### ##### ##### \n# ggsave(\"day6_network.png\", # 7.19 x 5.15\n#        dpi=280,\n#        width = 7.19,\n#        height = 5.15)\n########  ######## ########  ######## ########  ######## ########  \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}