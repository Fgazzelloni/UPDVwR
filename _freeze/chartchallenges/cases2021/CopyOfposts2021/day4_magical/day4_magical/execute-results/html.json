{
  "hash": "1e89ef3a0dc8276dee265fd9daf0ac7f",
  "result": {
    "markdown": "---\ntitle: 'Magical'\nsubtitle: 'Welcome to #30DayChartChallenge 2021 day 4'\ndate: '2021-04-04'\nimage: 'day4_magical.png'\nimage-alt: ''\ndescription: 'Networks'\noutput: html_document\nexecute: \n   eval: false\n---\n\n\n\n\n### INSPIRED BY:\n#### https://github.com/avrodrigues/Tidy_tuesday/blob/main/2021/week14/makeup_shades.R\n#### https://github.com/AndyABaker/TidyTuesday/blob/main/2021_week14_makeupshades.R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# libraries --------------------------------------\nlibrary(tidyverse)\nlibrary(ggforce)\nlibrary(extrafont)\n\n\n\n# load and wrangling ---------------------------------------------------\n\n# read the data from OurWorldData\now_df<- read.csv(\"owid-covid-data.csv\") \n\now_df[is.na(ow_df)]=0 # transform na into 0 values\n\n# location sliced by total_deaths: A<=10; 10<B>=138; 138<C>=1819; D>1819\nA <- ow_df %>% group_by(location) %>% filter(total_deaths <= 10) %>% mutate(gr=\"A\")\nB <- ow_df %>% group_by(location) %>% filter(total_deaths > 10 & total_deaths <= 138) %>% mutate(gr=\"B\")\nC <- ow_df %>% group_by(location) %>% filter(total_deaths > 138 & total_deaths <= 1819) %>% mutate(gr=\"C\")\nD <- ow_df %>% group_by(location) %>% filter(total_deaths > 1819) %>% mutate(gr=\"D\")\n\n# build a new data set \ndf<-rbind(A,B,C,D)\n\n# manipulate and select daily cases and deaths by group\ndf <- df %>%\n  mutate(date=as.Date(date)) %>%\n  arrange(- new_deaths_per_million) %>%\n  distinct(date,\n           location,\n           reproduction_rate,\n           new_cases_per_million,\n           new_deaths_per_million,\n           gr) \n\n\nman_cols <- df$location\nnames(man_cols) <- man_cols\n\n# Grouping -------------------------------------------------------------\n# selection of the first TEN countries per group with the latest number of tot deaths\na<-df%>%\n  filter(gr==\"A\")%>%\n  arrange(-new_deaths_per_million)%>%\n  group_by(location)%>%\n  summarize(av_new_deaths_per_million=mean(new_deaths_per_million))%>%\n  ungroup()%>%\n  arrange(-av_new_deaths_per_million)\n\nA_countries<-a[1:10,]$location # first 10 in group A\n\nb<-df%>%\n  filter(gr==\"B\")%>%\n  arrange(-new_deaths_per_million)%>%\n  group_by(location)%>%\n  summarize(av_new_deaths_per_million=mean(new_deaths_per_million))%>%ungroup()%>%arrange(-av_new_deaths_per_million)\n\nB_countries<-b[1:10,]$location  # first 10 in group B\n\nc<-df%>%\n  filter(gr==\"C\")%>%\n  arrange(-new_deaths_per_million)%>%\n  group_by(location)%>%\n  summarize(av_new_deaths_per_million=mean(new_deaths_per_million))%>%ungroup()%>%arrange(-av_new_deaths_per_million)\n\nC_countries<-c[1:10,]$location  # first 10 in group C\n\nd<-df%>%\n  filter(gr==\"D\")%>%\n  arrange(-new_deaths_per_million)%>%\n  group_by(location)%>%\n  summarize(av_new_deaths_per_million=mean(new_deaths_per_million))%>%ungroup()%>%arrange(-av_new_deaths_per_million)\n\nD_countries<-d[1:10,]$location  # first 10 in group D\n\n# extrapolation of the first 10 countries with the latest number of total deaths by group\nA_df<-df%>%filter(location==A_countries,gr==\"A\")\nB_df<-df%>%filter(location==B_countries,gr==\"B\")\nC_df<-df%>%filter(location==C_countries,gr==\"C\")\nD_df<-df%>%filter(location==D_countries,gr==\"D\")\n\n# build selection df for plotting\nselection<- rbind(A_df,B_df,C_df,D_df)\n\n# set a max limit for daily cases per million to use a colour warning in the plot\ncols<-selection$new_cases_per_million < 1000\n\n# count the unique countries used in the viz\nselected_countries<-plyr::count(selection$location) #31\n\n# adding two column for adj of daily cases\nselection$log_new_cases_per_million<-log(selection$new_cases_per_million)\nselection$log10_new_cases_per_million<-log10(selection$new_cases_per_million)\n\n# confirming 0 values \nselection$log_new_cases_per_million[is.infinite(selection$log_new_cases_per_million)]=0\nselection$log10_new_cases_per_million[is.infinite(selection$log10_new_cases_per_million)]=0\n\n\n# plot --------------------------------------------\n\n#axis.font <- \"Source Sans Pro\" \n#################################################################\nmy.col <- \"#4c4551\"\nfonts()\n\nlibrary(ggforce)\ncases_plot<-\n  ggplot(data=selection) +    # set the data to be used in the plot\n  geom_sina(                  # Sina plot for adj1 daily cases representation (log)\n    aes(x=gr, y=log_new_cases_per_million, color=cols), \n                   alpha=0.4, scale=F, show.legend = F,\n                   method=\"density\", \n                   maxwidth = .2,\n    position=position_jitter(0)) + \n\n  geom_hline(aes(yintercept = 6.9, colour = cols),show.legend = F) + \n  annotate(\"text\", x = 0.82, y = 7.1, label = \"<1000 daily cases per million\", family=\"Comic Sans MS\",size = 4) + \n  \n  geom_violin(                # Violin plot for adj2 daily cases representation (log10)\n    aes(x=gr, y=log10_new_cases_per_million,fill=\"#4c4551\",col=\"red\"), # higher prob is at median value\n              alpha=0.4, show.legend = F,trim=FALSE) +\n  \n  geom_crossbar(              # bar crossing on the mean values\n    aes(x=gr, y=log10_new_cases_per_million),\n    stat=\"summary\", fun=mean, fatten=0.8, width=.3) +\n  \n  stat_summary(               # star shape on the median values\n    aes(x=gr, y=log10_new_cases_per_million),\n                   fun=median, geom=\"point\", shape=8, size=2, color=\"#4c4551\") +\n  \n  annotate(\"text\", x = 0.7, y = 0.9, label = \"- AVG values\", family=\"Comic Sans MS\",size = 4) + \n  annotate(\"text\", x = 2.4, y = 2.17, label = \"* Median values\", family=\"Comic Sans MS\",size = 4) + \n      \n  # setting the elements of the plot \n  \n  theme_transparent() +\n  xlab(\"Group Countries\") + ylab(\"ADJ Daily Cases per million\") +\n  \n  # personalizing the theme\n  theme(\n    axis.title.y = element_text(family=\"Comic Sans MS\", size = 14,\n                                 color = \"grey95\"),  \n    axis.title.x = element_text(family=\"Comic Sans MS\", size = 14,\n                                color = \"grey95\"),   \n    \n    axis.text.y = element_text(size = 14,\n                                color = \"grey95\"), \n    axis.text.x = element_text(size = 14,\n                               color = \"grey95\"),\n    \n    panel.grid.major.y = element_line(linetype = 2,color=\"#665c6d\"),\n    \n    panel.grid = element_blank(),\n   \n    axis.line.x = element_line(color = \"grey95\"),\n   \n    axis.ticks.x = element_line(color= \"grey95\"),\n    axis.ticks.y = element_line(color= \"grey95\")) \n\n  \n# add a magick raster------------------------\n\nlibrary(magick)\n\nfrink <- image_read(\"https://jeroen.github.io/images/frink.png\")\nraster<-as.raster(frink)\n\nfinal <- cases_plot + annotation_raster(raster,5, 4, -3, 2)\n\n\n# final plot --------------------------------------------------------------\n# adding title, annotations and caption\n\nlibrary(cowplot)\n\nfinal.plot <- ggdraw() +\n  \n  draw_plot(\n    final,\n    x = 0.5,\n    y = 0.1,\n    width = 0.8,\n    height = 0.7,\n    hjust = 0.5,\n    vjust = 0) +\n  \n  draw_label(\n    \"COVID-19 and the Turn to Magical Thinking _Sapiens.org\",\n    x = 0.06,\n    y = 0.9,\n    fontfamily = \"Comic Sans MS\", \n    fontface = \"bold\",\n    size = 22,\n    color = \"grey95\",\n    hjust = 0) +\n  \n  draw_label(\n    \"The rebels were partly incited by a spirit medium who claimed to be possessed by a snake spirit and to have a “war medicine”\",\n    x = 0.065,\n    y = 0.85,\n    fontfamily = \"Comic Sans MS\", \n    fontface = \"plain\",\n    size = 12,\n    color = \"grey95\",\n    hjust = 0,\n    vjust = 1) +\n  \n  draw_label(\"*Rumors have spread in Sri Lanka that \\nwhite (and only white) handkerchiefs \\nprotect people from COVID-19\n    \\n*In the Philippines, volcanic ash is \\nsaid to kill the virus\n    \\n*In parts of China, it is saltwater \\n*India, it is cow dung and urine...\",\n    x = 0.8,\n    y = 0.95,\n    fontfamily = \"Comic Sans MS\", \n    fontface = \"plain\",\n    size = 10,\n    color = \"grey95\",\n    hjust = 0,\n    vjust = 1) +\n  \n  # adding explanation 1\n  annotate(\"curve\", x = 0.05, xend = 0.1, y = 0.15, yend = 0.25, \n           color = \"grey85\", curvature = -0.5) +\n  draw_label(\n    \"31 Selected countries with the \\nlowest numbers of cases and deaths \\nreported\",\n    x = 0.10,\n    y = 0.1,\n    fontfamily = \"Comic Sans MS\", \n    size = 7,\n    color = \"grey95\",\n    hjust = 0.5,\n    vjust = 0.5) +\n  \n  # adding explanation 2\n  annotate(\"curve\", x = 0.3, xend = 0.38, y = 0.1, yend = 0.23, \n           color = \"grey85\", curvature = -0.5) +\n  \n  draw_label(\n    \"Violin representing Groups' variability \\nin daily cases\",\n    x = 0.3,\n    y = 0.05,\n    fontfamily = \"Comic Sans MS\", \n    size = 7,\n    color = \"grey95\",\n    hjust = 0.5,\n    vjust = 0.5) +\n  \n  # adding explanation 3\n  annotate(\"curve\", x = 0.8, xend = 0.75, y = 0.75, yend = 0.68, \n           color = \"grey85\", curvature = 0.3) +\n  draw_label(\n    \"Light red highest numbers, Sina representation \\nof a different adj of daily cases \",\n    x = 0.88,\n    y = 0.732,\n    fontfamily = \"Comic Sans MS\", \n    size = 7,\n    color = \"grey95\",\n    hjust = 0.5,\n    vjust = 0.5) +\n  \n  ###########\n  \n\n  draw_label(\n    \"Viz @fgazzelloni | DataSource: Ourworldindata.org/coronavirus | Hint: sapiens.org (covid-19-magic)\",\n    x = 0.62,\n    y = 0.08,\n    fontfamily = \"Comic Sans MS\", \n    size = 8,\n    color = \"grey95\",\n    hjust = 0.5,\n    vjust = 0.5\n  ) +\n    \n  theme(\n    plot.background = element_rect(fill = my.col)) \n\n\n\n# save final plot ---------------------------------------------------------\n\n\nragg::agg_png(here::here(\"day4\", \"magick.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal.plot\n\ndev.off()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}