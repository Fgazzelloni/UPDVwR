{
  "hash": "eb59e33ba65f30395ff0ad2e2d31c489",
  "result": {
    "markdown": "---\ntitle: 'Data day'\nsubtitle: 'Welcome to #30DayChartChallenge 2023 day 18'\ndate: '2023-04-18'\nimage: 'day18_data_day.png'\nimage-alt: ''\ndescription: 'Networks'\noutput: html_document\nexecute: \n   eval: false\n---\n\n\n\nTo cite Federica's work please use:\n\n> Gazzelloni F. (2023), Data Visualization: Eurosat hlth_hlye data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n# install.packages(\"eurostat\")\nlibrary(eurostat)\nlibrary(sf)\nlibrary(countrycode)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nid <- search_eurostat(\"Healthy life years by sex\")\nid <- id[1,]\nid\n# save(id,file=\"id.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- get_eurostat(\"hlth_hlye\",unit=\"PC\")\n# save(data,file=\"data.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data%>%\n  filter(indic_he==\"HLY_PC_0\")%>%\n  mutate(year=year(time))%>%\n  select(geo, year,sex,values)%>%\n  mutate(sex=case_when(sex==\"F\"~\"Female\",\n                       sex==\"M\"~\"Male\",\n                       TRUE~\"Both\"))\ndf%>%head\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_countries_abbr <- unique(df$geo)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# countrycode::codelist%>%names\n\nmy_countries <- countrycode::codelist %>%\n  count(country.name.en, iso2c) %>%\n  filter(iso2c %in% my_countries_abbr)%>%\n  rename(region=country.name.en)\n\nmy_countries_names <- unique(my_countries$region)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_countries <- df%>%\n  inner_join(my_countries,by=c(\"geo\"=\"iso2c\"))\n\ndf_countries%>%head\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_geometry <- map_data(\"world\") %>%\n  filter(region %in% my_countries_names) %>%\n  group_by(group) %>%\n  sf::st_as_sf(coords = c(1, 2), crs = 4326) %>%\n  summarise(geometry = st_combine(geometry)) %>%\n  st_cast(\"POLYGON\") \n\ndf_geometry %>% head\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npolygons <- rnaturalearth::ne_countries(returnclass = \"sf\")\n\nggplot()+\n  geom_sf(data=polygons)+\n  geom_sf(data=df_geometry,aes(geometry=geometry),color=\"red\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_coords <- map_data(\"world\") %>%\n  filter(region %in% my_countries_names)%>%\n  select(region,group)\n\ndf_full <- df_geometry%>%\n  inner_join(df_coords,by=\"group\") %>% \n  merge(df_countries,by=\"region\")\n\n\naustria <- df_full%>%\n  filter(region==\"Austria\",year==2020)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npolygons <- rnaturalearth::ne_countries(scale = 110, \n                                        type = 'map_units',\n                                        returnclass = 'sf')\n\nggplot()+\n  geom_sf(data=polygons)+\n  geom_sf(data=df_geometry,aes(geometry=geometry),fill=\"beige\")+\n  geom_sf(data=austria,aes(geometry=geometry,fill=values))+\n  coord_sf()\n```\n:::\n\n\nZooming in\n\nsource: <https://www.r-bloggers.com/2019/04/zooming-in-on-maps-with-sf-and-ggplot2/>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# polygons%>%View\n\nmy_countries_names[30]<- \"England\"\nmy_countries_names[31]<- \"N. Ireland\"\nmy_countries_names[32]<- \"Scotland\"\nmy_countries_names[33]<- \"Wales\"\neu <- polygons[polygons$name %in% my_countries_names,]\nggplot() + geom_sf(data = eu) + theme_bw()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neu_qualy <- df_full%>%\n  filter(year==2020)\n```\n:::\n\n::: {.cell hash='day18_data_day_cache/html/unnamed-chunk-14_23d0a2764de6928b2c94b745fab170d7'}\n\n```{.r .cell-code}\nmap <- ggplot()+\n  geom_sf(data=eu)+\n  geom_sf(data=df_geometry,aes(geometry=geometry),fill=\"beige\")+\n  geom_sf(data=eu_qualy,aes(geometry=geometry,fill=values))+\n  coord_sf()+\n  facet_wrap(~sex)\n\nmap\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap +\n  scale_fill_gradient(low = \"white\",high = \"#a60845\") +\n  labs(title=\"Healthy life years by sex (2020) %\",\n       caption=\"DataSource: Eurosat - Healthy life years by sex\\n#30DayChartChallenge day18 Eurosat | DataViz: Federica Gazzelloni\") +\n  ggthemes::theme_map(base_size = 12, base_family = \"Roboto Condensed\")+\n  theme(strip.background = element_rect(color = \"#a60845\",fill=\"#a60845\"),\n        strip.text = element_text(color=\"white\"),\n        legend.position = \"bottom\",\n        plot.title = element_text(color=\"#a60845\",size=20),\n        plot.caption = element_text(color=\"#a60845\",size=12))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"map.png\",width = 7,height = 5)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}