{
  "hash": "2cf3ce80b3ff90cf3fc38324cd6833b3",
  "result": {
    "markdown": "---\ntitle: 'Monochrome'\nsubtitle: 'Welcome to #30DayChartChallenge 2023 day 29'\ndate: '2023-04-29'\nimage: 'day29_monochrome.png'\nimage-alt: ''\ndescription: 'Networks'\noutput: html_document\nexecute: \n   eval: false\n---\n\n\n\n> Gazzelloni F. (2023), Data Visualization: Lyme Disease Map\n\nLoad libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nData for this visualization is from **CDC**: <https://www.cdc.gov/lyme/stats/survfaq.html>\n\nThis is old dataset, it is updated at 2011. I had a look at it, then used the most updated one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(jsonlite)\n\nurl <- \"https://data.cdc.gov/api/views/smai-7mz9/rows.json?accessType=DOWNLOAD\"\ndata <- fromJSON(url)\nkeys <- data$meta$view$columns\n\ndf <- as.data.frame(data$data)\nnames(df) <- keys$name%>%t()\ndf%>%head\n\nmy_df <- df %>%\n  select(StateCode,CountyCode,StateName,CountyName,\n         ConfirmedCount_1992_1996,\n         ConfirmedCount_1997_2001,\n         ConfirmedCount_2002_2006,\n         ConfirmedCount_2007_2011)%>%\n  pivot_longer(5:8)%>%\n  mutate(name=gsub(\"ConfirmedCount_\",\"\",name),\n         name=gsub(\"_\",\"-\",name),\n         value=as.numeric(value),\n         value=ifelse(is.na(value),0,value),\n         CountyName=tolower(CountyName),\n         CountyName=gsub(\" county\",\"\",CountyName),\n         CountyName=trimws(CountyName))%>%\n  rename(Years=name,subregion=CountyName)\n\n\nmy_df%>%head\n```\n:::\n\n\nThis data contains **County-level Lyme disease data from 2001-2020**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl2 <- \"https://www.cdc.gov/lyme/resources/datasurveillance/LD-Case-Counts-by-County-01-20.csv\"\n\ndf2 <- read.csv(url2)\n```\n:::\n\n\nTidy data, the **Ctyname** vector is the one I want to use for looking at the cases by cities. I had to leave some information behind.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df2 <- df2 %>%\n  select(1:2,6:25)%>%\n  pivot_longer(3:22)%>% \n  mutate(name=gsub(\"Cases\",\"\",name),\n         Stname=tolower(Stname),\n         Ctyname= str_to_lower(Ctyname),\n         Ctyname=gsub(\" county\",\"\",Ctyname),\n         Ctyname=gsub(\" parish\",\"\",Ctyname),\n         Ctyname=gsub(\" city\",\"\",Ctyname),\n         Ctyname=gsub(\"st.\",\"st\",Ctyname),\n         Ctyname=gsub(\" bay borough\",\"\",Ctyname),\n         Ctyname=case_when(Ctyname==\"armstong\"~\"armstrong\",\n                           TRUE~Ctyname),\n         name=as.numeric(name),\n         name=cut_interval(name,4))%>%\n  rename(Years=name,subregion2=Ctyname,region=Stname)%>%\n  distinct()\n```\n:::\n\n\nHere is a double check of the City names differences in `map_data(\"county\")` and the `Lyme disease dataset` (`my_df2`). I am going to leave some city names behind.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_county_map <- map_data(\"county\")\nsubregion <- us_county_map%>%count(subregion)%>%select(-n)%>%unlist()\nsubregion2 <- my_df2%>%count(subregion2)%>%select(-n)%>%unlist()\nintersect(subregion, subregion2)%>%length()\nsetdiff(subregion2, subregion)%>%length()\nsetdiff(subregion, subregion2)%>%length()\n\nmy_df2%>%\n  filter(str_detect(subregion2,\"yellowstone\"))\n```\n:::\n\n\nThese are the sets that will be used in the Map. \n\n\n-   Base map layers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_state_map <- map_data(\"state\")\nus_county_map <- map_data(\"county\")\n```\n:::\n\n\n-   Cases layer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_us_county_map <- map_data(\"county\")%>%\n  filter(subregion%in%subregion2)\n\nmy_df_coords <- my_df2%>%\n  rename(subregion=subregion2)%>%\n  inner_join(my_us_county_map,by=c(\"region\",\"subregion\"))%>%\n  distinct()\n\ndf_jitter <- my_df_coords%>%\n  filter(value>0)%>%\n  group_by(subregion,region,Years)%>%\n  mutate(long=mean(range(long)),lat=mean(range(lat)))%>%\n         #value=sum(value))%>%\n  ungroup()%>%\n  distinct()\n```\n:::\n\n\nChange the facet lables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlbl <- my_df2 %>% \n  group_by(Years)%>%\n  reframe(value=sum(value))%>%\n  mutate(pct=lag(value),\n         pct=round((value-pct)/pct*100,2),\n         pct=ifelse(is.na(pct),\"-\",pct),\n         Year=gsub(\"\\\\[|\\\\]\", \"\", Years),\n         Year=gsub(\"\\\\(|\\\\]\", \"\", Year),\n         Year=gsub(\",\", \"-\", Year),\n         lbl=paste(Year,\"pct change\",pct,\"%\"))%>%\n  select(lbl)%>%\n  unlist()\n```\n:::\n\n\nSet the fonts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(showtext)\nlibrary(sysfonts)\nsysfonts::font_add_google(\"David Libre\",\"David Libre\")\nsysfonts::font_add_google(\"Syne Mono\",\"Syne Mono\")\n```\n:::\n\n\nMake the Map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshowtext_auto()\np <-ggplot()+\n  geom_polygon(data=us_county_map,\n             aes(x=long,y=lat,group = group),\n             fill=\"white\",color = \"#192d40\",linewidth=0.02) +\n  geom_polygon(data=us_state_map,aes(x=long,y=lat,group = group),\n             fill=NA,color = \"grey50\",linewidth=0.2)+\n  geom_jitter(data=df_jitter,\n               aes(x=long,y=lat,size=value),\n              color = \"#192d40\")+\n  coord_quickmap()+\n  facet_wrap(~Years,scales = \"free\",\n             labeller = as_labeller(setNames(lbl, sort(unique(df_jitter$Years))))) +\n  guides(size=\"none\")+\n  scale_size(range=c(0.1,1))+  \n  labs(caption=\"#30DayChartChallenge Day 29 Monochrome\\nDataSource: CDC Lyme Disease | Map: Federica Gazzelloni\") +\n  ggthemes::theme_map()+\n  theme(text=element_text(color=\"white\",size=40),\n        legend.background = element_blank(),\n        legend.position = \"right\",\n        strip.background = element_rect(color=NA,fill=NA),\n        strip.text = element_text(family=\"David Libre\",color=\"white\"),\n        plot.background = element_rect(color=\"#192d40\",fill=\"#192d40\"),\n        plot.caption = element_text(family=\"Syne Mono\",lineheight = 0.5,hjust=0.3),\n        panel.background = element_rect(color=\"#192d40\",fill=\"#192d40\"),\n        plot.margin = margin(0,0,0,0,unit = \"pt\"))\n```\n:::\n\n\nHave a look at the Map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np\n```\n:::\n\n\nSet some information about the **Lyme disease**, and use `ggtitle()` for making a title plot to use in the main plot **layout**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggtext)\ntext <- \"Lyme disease is caused by bacteria called Borrelia burgdorferi, which is spread to people through the bite of several types of blacklegged ticks. In the United States, most infections occur in Eastern states, Northern midwestern states, and West Coast. Recent estimates using other methods suggest that approximately 476,000 people may get Lyme disease each year in the United States.\"\n\ntext=tibble(text)\n\ntitle <- ggplot() + \nggtitle(label =text) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_textbox_simple(\n      size = 50,lineheight = 0.3,\n      color=\"white\",\n      family=\"Syne Mono\",\n      padding = margin(5.5, 5.5, 5.5, 5.5),\n      margin = margin(0, 0, 5.5, 0),\n      fill = \"#192d40\"),\n    plot.background = element_rect(color=\"#192d40\",fill=\"#192d40\"),\n        panel.background = element_rect(color=\"#192d40\",fill=\"#192d40\"),\n    plot.margin = margin(0,0,0,0,unit = \"pt\")\n    )\n```\n:::\n\n\n\nHere is the part where the layout design is done. Use `{patchwork}` for setting the area to combine the title with the map with the `area()` function. Then check the result with the `plot()` function, as shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n# area(t, l, b = t, r = l)\ndesign <- c(\n   area(1, 1,20,100),\n   area(5, 1, 100,100)\n)\n\nplot(design)\n```\n:::\n\n\nFinally, combine all together in one plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle + p + plot_layout(design = design) &\n  theme(plot.background = element_rect(fill=\"#192d40\",color=\"#192d40\"))\n```\n:::\n\n\nAnd save it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"p.png\",width = 9,height = 7,dpi=320,bg=\"#192d40\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}