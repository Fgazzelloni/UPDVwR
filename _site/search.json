[
  {
    "objectID": "mapchallenges/cases2021/index.html",
    "href": "mapchallenges/cases2021/index.html",
    "title": "30DayMapChallenge 2021",
    "section": "",
    "text": "The content is in development. Interested in contributing to Unlocking the power of data visualization with R? Check out our call for contributions.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "mapchallenges/cases2023/index.html",
    "href": "mapchallenges/cases2023/index.html",
    "title": "30DayMapChallenge 2023",
    "section": "",
    "text": "The content is in development. Interested in contributing to Unlocking the power of data visualization with R? Check out our call for contributions.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "mapchallenges/cases2022/index.html",
    "href": "mapchallenges/cases2022/index.html",
    "title": "30DayMapChallenge 2022",
    "section": "",
    "text": "The content is in development. Interested in contributing to Unlocking the power of data visualization with R? Check out our call for contributions.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chartchallenges/cases2021/index.html",
    "href": "chartchallenges/cases2021/index.html",
    "title": "30DayChartChallenge 2021",
    "section": "",
    "text": "The content is in development. Interested in contributing to Unlocking the power of data visualization with R? Check out our call for contributions.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chartchallenges/cases2023/index.html",
    "href": "chartchallenges/cases2023/index.html",
    "title": "30DayChartChallenge 2023",
    "section": "",
    "text": "The content is in development. Interested in contributing to Unlocking the power of data visualization with R? Check out our call for contributions.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chartchallenges/cases2022/index.html",
    "href": "chartchallenges/cases2022/index.html",
    "title": "30DayChartChallenge 2022",
    "section": "",
    "text": "The content is in development. Interested in contributing to Unlocking the power of data visualization with R? Check out our call for contributions.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Unlocking the Power of Data Visualization with R",
    "section": "",
    "text": "Welcome to \"Unlocking the Power of Data Visualization with R\" where I am proudly showcasing the vibrant contributions to #R4DS community to the #TidyTuesday, #30DayChartChallenge, and #30DayMapChallenge contributions spanning 2021, 2022, and 2023. This platform serves as your gateway to exploring an engaging journey of data exploration, featuring a diverse collection of visualizations created using the R programming language. Dive into the digital gallery to discover insights, find inspiration, and learn from detailed explanations and code for each submission.\n\nWhether you’re a seasoned data professional or just starting out, join me in unraveling the art and impact of data visualization."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to this data visualization website, where I am proudly spotlight the my contributions of our #R4DS community to the #TidyTuesday, #30DayChartChallenge, and #30DayMapChallenge contributions spanning 2021, 2022, and 2023.\nMy name is Federica Gazzelloni, and I am a passionate data enthusiast and a skilled storyteller who believes in the power of data visualization to communicate complex insights. With a keen eye for detail and a knack for making data accessible, I curated this unique collection of visualizations that tell stories beyond the numbers. Committed to sharing expertise for helping others to unlock the potential of data visualization, stay tuned for more exciting updates and insights as we continue this journey of discovery together."
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w46_afrilearndata/w46_afrilearndata.html",
    "href": "tidytuesday/cases2021/posts2021/w46_afrilearndata/w46_afrilearndata.html",
    "title": "Learning with afrilearndata",
    "section": "",
    "text": "library(tidyverse)\nlibrary(afriadmin)\nlibrary(afrihealthsites)\nlibrary(afrilearndata)\nlibrary(tmap)\n\n\nafriadmin::afcountries\n#afriadmin::afcountrynames(afcountries$name)\n\ncountries<- afriadmin::afcountries$name\n\nafrilearndata::africapitals\nafrilearndata::afrihighway\nafrilearndata::afripop2000\nafrilearndata::afripop2020  \nafrilearndata::africountries\nafriadmin::sf_af_gadm0\nafrihealthsites::sf_healthsites_af\n\n\nsf::st_crs(africountries)=st_crs(4326)\nsf::st_crs(afrihighway)=st_crs(4326)\nsf::st_crs(africapitals)=st_crs(4326)\n\n\ntmap_mode(\"plot\")\n\npop_00 <- tmap::tm_shape(africountries) +\n  tm_polygons(col = \"#42ecf5\") +\n  \n  tm_shape(afripop2000)+\n  tm_raster(title=\"Population density\",\n            palette = rev(viridisLite::inferno(5)),\n            breaks = c(0,2,20,200,2000,25000)) +\n  \n  tm_shape(afrihighway) +\n  tm_lines(col=\"#f5b342\") +\n  \n  tm_shape(africountries)+\n  tm_borders() +\n  tm_text(text =\"iso_a3\", \n          fontface = \"bold\",\n          col=\"midnightblue\",\n          size = \"pop_est\",\n          title.size = \"\",\n          legend.size.show = TRUE,\n          sizes.legend.text = \"Pop\"\n          ) +\n  \n  tm_shape(africapitals) +\n  tm_symbols(col=\"midnightblue\",scale = 0.2) +\n  \n  tm_layout(title=\"2000\",\n            title.position = c(0.8,0.9),\n            legend.title.size = 1,\n            legend.text.size = 0.5,\n            legend.position = c(\"left\",\"bottom\"),\n            legend.bg.color = NA\n            )\n  \n    \npop_20 <- tmap::tm_shape(africountries) +\n  tm_polygons(col = \"#42ecf5\") +\n  \n  tm_shape(afripop2020)+\n  tm_raster(title=\"Population density\",\n            palette = rev(viridisLite::inferno(5)),\n            breaks = c(0,2,20,200,2000,25000)) +\n  \n  tm_shape(afrihighway) +\n  tm_lines(col=\"#f5b342\") +\n  \n  tm_shape(africountries)+\n  tm_borders() +\n   tm_text(text =\"iso_a3\", \n          fontface = \"bold\",\n          col=\"midnightblue\",\n          size = \"pop_est\",\n          title.size = \"\",\n          legend.size.show = TRUE,\n          sizes.legend.text = \"Pop\"\n          ) +\n  \n  tm_shape(africapitals) +\n  tm_symbols(col=\"midnightblue\",scale = 0.2) +\n  \n  tm_layout(title=\"2020\",\n            title.position = c(0.8,0.9),\n            legend.title.size = 1,\n            legend.text.size = 0.5,\n            legend.position = c(\"left\",\"bottom\"),\n            legend.bg.color = NA\n            )  \n  \nmy_raster<-tmap_arrange(pop_00,pop_20,ncol = 2)\n\n\n# save final plot\nragg::agg_png(here::here(\"day10_raster/raster.png\"),\n              res = 320, width = 8, height = 6, units = \"in\")\nmy_raster\ndev.off()\n\n\nlibrary(showtext)\nlibrary(extrafont)\nsysfonts::font_info_google(\"Josefin Sans\")\n#fonts()\n#loadfonts()\nfont_add_google(\"Josefin Sans\",\"josefin\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\n# final touches\nlibrary(cowplot)\nlibrary(magick)\n\nraster_image<- magick::image_read(here::here(\"day10_raster/raster.png\"))\n\ng <- grid::circleGrob(gp = grid::gpar(fill = NA,color=\"black\"))\n\n\nfinal <- cowplot::ggdraw()+\n  draw_image(raster_image,x = 0.1, y = 0,width = 0.7)+\n  draw_label(label=\"Africa\",x=0.3,y=0.2,fontfamily=\"josefin\",size=40) +\n  draw_label(label=\"density increased\\nin some areas\\nmore than others\",x=0.52,y=0.35,fontfamily=\"josefin\",size=8) +\n  draw_label(label=\"Population density transition 2000-2020\", x=0.45, y=0.95, size=30, fontfamily=\"josefin\") +\n  \n  draw_line(x = c(0.52, 0.5),y = c(0.38, 0.48),color = \"black\", size = 0.2)+\n  \n  draw_line(x = c(0.52, 0.6),y = c(0.38, 0.5),color = \"black\", size = 0.2)+\n  \n  draw_text(\"Datasource: afrilearndata\\n#TidyTuesdat week46 and #30DayMapChallenge day10 Raster\\nInfographics: Federica Gazzelloni\",x=0.5,y=0.05,family=\"josefin\",size=11)+\n  draw_grob(g, scale = 0.2,x = 0,y = 0.03)\n\n# save final plot\nragg::agg_png(here::here(\"day10_raster/raster2.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w15_global_deforestation/w15_global_deforestation.html",
    "href": "tidytuesday/cases2021/posts2021/w15_global_deforestation/w15_global_deforestation.html",
    "title": "Global deforestation",
    "section": "",
    "text": "Libraries, fonts and colors\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(extrafont)\n# fonts()\n\nmy_col <- \"#720000\"\nmy_col2 <- \"#9900bfbf\"\n\nLoad data and wrangling\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 15)\n\nforest <- tuesdata$forest\nforest_area <- tuesdata$forest_area\nbrazil_loss <- tuesdata$brazil_loss\nsoybean_use <- tuesdata$soybean_use\nvegetable_oil <- tuesdata$vegetable_oil\n\n\nbrazil_loss <- tuesdata$brazil_loss\n\nslopes <- brazil_loss%>%\n  pivot_longer(cols=c(5,6,11,12,13),names_to=\"Predictors\",values_to=\"values\")\n\nslopes <- slopes %>% select(year,fire,Predictors,values)\n\nSlope plot\n\nslope_plot <- ggplot(slopes, aes(x = fire, y = values, color = Predictors) ) +\n  geom_point() +\n  geom_smooth(method = \"lm\", alpha = .15, aes(fill = Predictors)) +\n  theme_minimal() +\n  \n  scale_y_continuous(name=\"Predictors\", labels = scales::label_number_si(), limits=c(0,92000)) +\n  scale_x_continuous(name=\"Fire (hectares)\", labels = scales::label_number_si(), limits=c(26000,537000)) +\n  \n  \n  annotate(\"curve\", x = 400000, xend = 450000, y = 50000, yend = 75000, \n           color = \"red\", curvature = -0.5) +\n  annotate(\"text\", x=500000, y= 75000, label=\"driving down: tree plantations \\ndriving up: natural disturbances\", colour=my_col) +\n  \n  labs(x=\"Fire\",\n       y=\"Predictors\",\n       title = \"Brazil Fire due to predictors\",\n       subtitle = \"flooding, mining, disturbances, plantations, infrastructures...\",\n       caption = \"Viz @fgazzelloni | DataSource: @ourworldindata | Brazil Fire predictors\") +\n  \n  theme(legend.position = \"bottom\",\n        legend.text = element_text(family=\"Trebuchet MS\"),\n        legend.background = element_blank(),\n        legend.title = element_text(family=\"Trebuchet MS\"),\n        legend.key = element_rect(fill = \"white\", colour = NA),\n        \n        plot.title = element_text(family=\"Trebuchet MS\", size =32,face=\"bold\", hjust=0 ),\n        plot.subtitle = element_text(family=\"Trebuchet MS\", size =20),\n        \n        axis.title = element_text(family=\"Trebuchet MS\", size =12),\n        \n        strip.background = element_rect(colour = \"black\", fill = \"white\"),\n        strip.text.x = element_text(colour = \"white\", face = \"bold\"),\n        panel.spacing = unit(5, \"lines\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"azure\", color = NA),\n        panel.background = element_rect(fill = \"azure\")\n       ) +\n  annotate(\"text\", x = 280000, y = 80000, \n           family=\"Trebuchet MS\",\n           label = \"researchers at *Global Forest Watch* estimate that global deforestation \\nin 2019 was around 5.4 million hectares. \\n95% of this was in the tropics 33.12% in Brazil\")\n\nSave final plot\n\nragg::agg_png(here::here(\"w15\", \"tidytuesday_slope.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nslope_plot\n\ndev.off()\n\nRead the image, attach the Tidytuesday logo and save it\n\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\ntidy_slope <- image_read(\"tidytuesday_slope.png\")\n\nattached_logo <- image_composite(tidy_slope, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_slope.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w34_star_trek/w34_star_trek.html",
    "href": "tidytuesday/cases2021/posts2021/w34_star_trek/w34_star_trek.html",
    "title": "StarTrek",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2021, week = 34)\ntidytuesdayR::readme(tuesdata)"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w34_star_trek/w34_star_trek.html#designing-speech-interactions-from-the-imagined-ideal-of-star-trek",
    "href": "tidytuesday/cases2021/posts2021/w34_star_trek/w34_star_trek.html#designing-speech-interactions-from-the-imagined-ideal-of-star-trek",
    "title": "StarTrek",
    "section": "Designing Speech Interactions from the Imagined Ideal of Star Trek",
    "text": "Designing Speech Interactions from the Imagined Ideal of Star Trek\nvoice user interfaces (VUIs) like Alexa reveals mismatches between current designs and user expectations The analysis study voice interactions with the Enterprise’s computer and compare them to current interactions\n\ncomputer <- tuesdata$computer\nhead(computer,3)\nDataExplorer::profile_missing(computer)\n\n\ndf <- computer %>%\n  select(char,line,type,pri_type,nv_resp:error) %>% #count(char)\n  mutate(char=if_else(str_detect(char,\"Computer\"),\"Computer\",char),\n         type=if_else(str_detect(type,\"command\"),\"Command\",type),\n         type=if_else(str_detect(type,\"question\"),\"Question\",type))\n\n\ndf %>% \n  group_by(char) %>%\n  summarize(type,nv_resp) %>%\n  ungroup() %>%\n  ggplot(aes(y=char,x=type,z=nv_resp)) +\n  stat_summary_hex(alpha=0.8,bins=50)+\n  scale_fill_viridis_c()+\n  labs(fill = \"char\",title = \"type\")+\n  theme(axis.text.x = element_text(angle=90,size=6))\n\n\nlibrary(extrafont)\nloadfonts()\n\n\nfinal <- df %>% #count(type,nv_resp,sort=TRUE)%>%\n  ggplot(aes(x=fct_reorder(sort(type,decreasing = TRUE),nv_resp),group=nv_resp)) +\n  geom_histogram(aes(fill=nv_resp),stat=\"count\",position =\"stack\")+ #position_dodge(width=0))+\n  coord_flip()+\n  scale_fill_viridis_d()+\n  labs(title=\"Type of words when the computer completes the query but without speaking a response\", \n       subtitle=\"False or True?\",\n       caption=\"Infographic: @fgazzelloni\\n DataSource: TidyTuesday Week34:Star Trek Voice Commands,SpeechInteraction.org\",\n       fill=\"Response\",\n       y=\"N°\",x=\"Word type\") +\n  ggthemes::theme_solarized()+\n  theme(text = element_text(family=\"Impact\"),\n        axis.text.x = element_text(angle=0,size=10),\n        axis.text.y = element_text(angle=0,size=10),\n        axis.title.x = element_text(size=14),\n        axis.title.y = element_text(size=14),\n        plot.title.position = \"plot\",\n        plot.title = element_text(face=\"bold\",size=20),\n        plot.subtitle = element_text(face=\"bold\",size=14),\n        plot.caption = element_text(size=10),\n        plot.caption.position = \"plot\")\n\n\nragg::agg_png(\"w34_star_trek.png\",\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\nlibrary(scales)\nlibrary(ggbump)\nlibrary(extrafont)\nlibrary(showtext)\nlibrary(cowplot)\nlibrary(ggstream)\nlibrary(colorspace) \nlibrary(ggpubr)\nlibrary(ggbump)\nlibrary(ggimage)\nlibrary(magick)\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\nimg <-image_read(\"1200px-Star_Trek_TNG_logo.svg.png\")\n\n\ntidy_final <- image_read(\"w34_star_trek.png\")\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"southwest\") \nimage_write(attached_logo, path = \"w34_star_trek.png\", format = \"png\") \ntidy_final2 <- image_read(\"w34_star_trek.png\")\n\nattached_logo2 <- image_composite(tidy_final2, img,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") \nimage_write(attached_logo, path = \"w34_star_trek.png\", format = \"png\") \n\n\nlibrary(\"ggmosaic\")\n\n\nfinal2 <- df %>% \n  select(type,char_type) %>%\n  ggplot() +\n  geom_mosaic(aes(x = product(type, char_type), fill = type)) +\n  labs(title=\"Type of request by count Person or Computer?\",\n       x=\"\",fill=\"Type of interaction\",\n       caption=\"Infographic: @fgazzelloni\\n DataSource: TidyTuesday Week34:Star Trek Voice Commands,SpeechInteraction.org\")+\n  theme(text=element_text(family=\"Roboto Condensed\"),\n  axis.text.y = element_blank(),\n  axis.ticks.y = element_blank(),\n  axis.title.y = element_blank(),\n  axis.text.x = element_text(color=\"white\",size=10),\n  axis.ticks.x = element_line(color=\"white\",size=1),\n  panel.background = element_blank(),\n  panel.border = element_blank(),\n  panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),\n  plot.background = element_rect(color=\"darkgrey\",fill=\"black\"),\n  plot.title = element_text(color=\"white\",size=30),\n  legend.position = \"left\",\n  legend.text = element_text(color=\"white\"),\n  legend.background = element_rect(color=\"darkgrey\",fill=\"black\"),\n  plot.caption = element_text(color=\"white\")\n)\n\n\nragg::agg_png(\"w34_star_trek2.png\",\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal2\n\ndev.off()\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\ntidy_final <- image_read(\"w34_star_trek2.png\")\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"southwest\") \nimage_write(attached_logo, path = \"w34_star_trek2.png\", format = \"png\") \n\n\nimg <-image_read(\"white_startrek.png\")\n\ntidy_final2 <- image_read(\"w34_star_trek2.png\")\n\nattached_logo2 <- image_composite(tidy_final2, img,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") \nimage_write(attached_logo2, path = \"w34_star_trek2.png\", format = \"png\") \n\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\ndummy\n\ndf %>% select(char,type,nv_resp) %>%\n  #mutate(nv_resp=factor(nv_resp)) %>%\n  recipe(char~.) %>%\n  step_dummy(all_nominal_predictors(),one_hot = TRUE)%>%\n  prep() %>%\n  bake(df) %>%\n  group_by(char,nv_resp) %>%\n  summarise_all(.funs = sum) %>%\n  ungroup() %>%\n  pivot_longer(cols=type_Alert:type_Wake.Word,names_to=\"type\",values_to=\"values\") %>%\n  mutate(type=gsub(\"^type_\",\"\",type)) %>%\n  group_by(char,nv_resp,type) %>%\n  summarize(tot=sum(values)) %>%\n  ungroup() %>%\n  \n  ggplot() +\n  geom_mosaic(aes(x = product(type, char), fill = nv_resp)) +\n  #geom_text(aes(x=nv_resp,y=type,label=type))+\n  theme(\n  axis.text.y = element_blank(),\n  axis.ticks.y = element_blank(),\n  axis.title.y = element_blank(),\n  panel.background = element_blank(),\n  panel.border = element_blank(),\n  panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),\n  plot.background = element_blank(),\n  legend.position = \"left\"\n)"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w24_great_lakes_fish/w24_great_lakes_fish.html",
    "href": "tidytuesday/cases2021/posts2021/w24_great_lakes_fish/w24_great_lakes_fish.html",
    "title": "Great Lakes Fish",
    "section": "",
    "text": "TidyTuesday week 24\nData Source: Great Lakes Fish, Great Lakes Database, Detroit Free Press database of all fish stocked from artificial propagation into the Great Lakes\nlibraries\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(hrbrthemes)\nlibrary(viridis)\nlibrary(forcats)\nlibrary(ggridges)\nlibrary(patchwork)\n\n# load data ##############################\ntuesdata <- tidytuesdayR::tt_load(2021, week = 24)\n\n\nstocked <- tuesdata$stocked\nfishing <- tuesdata$fishing\n\n# check #################################\nhead(stocked);dim(stocked)\nhead(fishing);dim(fishing)\n\nlibrary(DataExplorer)\nprofile_missing(fishing)\n\nfishing$grand_total[is.na(fishing$grand_total)]<-0\nfishing$values[is.na(fishing$values)]<-0\n\n# wrangling ###########################\nmy_df <- fishing%>%\n  arrange(year)%>%\n  mutate(\n    species=case_when(species==\"Amercian Eel\"~\"American Eel\",\n              species==\"Bullhead\"~\"Bullheads\",\n              species==\"Channel catfish\"~\"Channel Catfish\",\n              species==\"Cisco and chubs\"~\"Cisco and Chubs\",\n              species==\"Cisco and Chub\"~\"Cisco and Chubs\",\n              species==\"Crappie\"~\"Crappies\",\n              species==\"Drum\"~\"Freshwater Drum\",\n              species==\"Lake Trout - siscowet\"~\"Lake Trout\",\n              species==\"Pacific salmon\"~\"Pacific Salmon\",\n              species==\"White bass\"~\"White Bass\",\n              TRUE~species))\n\n\n# plotting #################################\n\nfig1 <- my_df %>%\n  filter(!str_detect(species,\"and\")) %>%\n  arrange(year)%>%\n  mutate(text = fct_reorder(species, year )) %>%\n  ggplot( aes(y=text, x=year,fill=species)) +\n  geom_density_ridges_gradient(scale = 2, rel_min_height = 0.01) +\n  scale_fill_viridis(discrete=TRUE) +\n  scale_x_continuous(breaks=seq(1867, 2015, 8))+\n  labs(title=\"All Fisheries from the Great Lakes Fishery Commission\",\n       subtitle=\"from 1867 to 2015\",\n       tag = \"Fig1\")+\n  xlab(\"\") +\n  ylab(\"Assigned Probability (%)\")+\n  theme_ft_rc()+\n  theme(axis.text.x = element_text(angle=90),\n    legend.position=\"none\",\n    plot.title.position = \"plot\",\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.spacing = unit(0.1, \"lines\"),\n    strip.text.x = element_text(size = 8))\n\n\nfig2 <- my_df%>%\n  filter(!str_detect(species,\"and\")) %>%\n  group_by(year,species)%>%\n  summarize(total_number=sum(grand_total),total_production=sum(values))%>%\n  ungroup()%>%\n  arrange(total_number)%>%\n  filter(!total_number==0)%>%\n  mutate(percent=total_production/total_number)%>%\n  filter(!percent>1)%>%\n  arrange(year,percent)%>%\n  filter(str_detect(species,(\"Lake\")))%>%\n  ggplot(aes(x=year,y=reorder(species,-total_production),group=species,color=species))+\n  geom_line(aes(size=total_production))+\n  labs(title=\"Lake Fisheries by Year\",\n       subtitle=\"sized by total value of production\",\n       tag=\"Fig2\",\n       size=\"Total value of production in $\",\n       x=\"\",\n       y=\"Species\"\n       #color=\"Species\",#size=\"Percent\",\n       #caption=\"Viz @fgazzelloni, DataSource: TidyTuesday Week24 - Great Lakes Fish,Great Lakes Database,Detroit Free Press\"\n       )+\n scale_color_viridis(discrete = TRUE)+\n  guides(color = FALSE)+\n   scale_x_continuous(breaks=seq(1867, 2015, 18))+\n  theme_ft_rc()+\n  theme(axis.text.x = element_text(angle=0),\n        legend.position = \"top\",\n        panel.grid = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank())\n\nfig3 <- my_df%>%\n  filter(!str_detect(species,\"and\")) %>%\n  arrange(year)%>%\n  filter(str_detect(species,(\"Lake\")))%>%\n  ggplot(aes(x=species, y=values, fill=species)) +\n  geom_boxplot() +\n  scale_fill_viridis(discrete = TRUE, alpha=0.6) +\n  geom_jitter(aes(colour=values), size=0.3, alpha=0.5) +\n  scale_colour_viridis_c()+\n  labs(tag = \"Fig3\",\n       x=\"\",y=\"Values\",\n       caption=\"Viz @fgazzelloni, DataSource: TidyTuesday Week24 - Great Lakes Fish,Great Lakes Database,Detroit Free Press\")+\n  theme_ft_rc() +\n  theme(\n    legend.position=\"none\",\n    panel.background = element_blank(),\n    panel.grid = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank())\n\n\n\n\n\n\n\nfinal <- fig1+(fig2/fig3)\n\nfinal\n\n\n\n\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w24\",\"w24_fisheries.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"w24/w24_fisheries.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"w24/w24_fisheries.png\",\n            format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w41_nurses/w41_nurses.html",
    "href": "tidytuesday/cases2021/posts2021/w41_nurses/w41_nurses.html",
    "title": "Registered Nurses",
    "section": "",
    "text": "TidyTuesday week 41 Nurses\n\n# load libraries\nlibrary(ggExtra)\nlibrary(xkcd)\nlibrary(ggstatsplot)\nlibrary(extrafont)\nlibrary(extrafont)\nfonts()\n\noptions(scipen = 999)\nlibrary(tidyverse)\n\n\nnurses <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-05/nurses.csv')\n\n\ndf <- nurses %>%\n  janitor::clean_names() %>%\n  filter(!is.na(employed_standard_error_percent),!is.na(wage_salary_standard_error_percent))\n\nmy_df <- df %>%\n  mutate(salary_level = case_when(annual_salary_median < 35000 ~ \"low\",\n                                 annual_salary_median >= 35000 & annual_salary_median < 55000 ~ \"medium\",\n                                 annual_salary_median >= 55000 & annual_salary_median <= 80000 ~ \"high\",\n                                 TRUE ~ \"top high\"),\n         .after = year) %>%\n  mutate(salary_level_class = case_when(annual_salary_median < 35000 ~ \"<35\",\n                                       annual_salary_median >= 35000 & annual_salary_median < 55000 ~ \"35 to 55\",\n                                       annual_salary_median >= 55000 & annual_salary_median <= 80000 ~ \"56 to 80\",\n                                       TRUE ~ \"<80\"),\n         .after = salary_level) %>%\n  mutate(salary_leg = paste(salary_level,\"-\",salary_level_class),\n         .after = salary_level,\n         salary_leg = as.factor(salary_leg))\n\nunique(my_df$salary_leg)\nlegend_ord <- levels(with(my_df, reorder(annual_salary_median,year)))\nmy_df$salary_level <- factor(my_df$salary_level, # Relevel group factor\n                             levels = c(\"low\",\"medium\",\"high\",\"top high\"))\n\n\ntheme_nurses <- xkcd::theme_xkcd() +\n  theme(text = element_text(color = \"grey80\",family = \"Comic Sans MS\"),\n        plot.title = element_text(hjust = 0.5,size = 24,face = \"bold\"),\n        plot.title.position = \"plot\",\n        plot.caption = element_text(family = \"Comic Sans MS\"),\n        plot.subtitle = element_text(hjust = 0.5),\n        plot.caption.position = \"plot\",\n        legend.background = element_blank(),\n        legend.box.background = element_blank(),\n        legend.key = element_blank(),\n        legend.title = element_text(size = 11,family = \"Comic Sans MS\",face = \"bold\"),\n        legend.text = element_text(size = 9,family = \"Comic Sans MS\"),\n        axis.ticks = element_line(size = 2,color = \"orange\"),\n        axis.line.x = element_line(color = \"grey80\"),\n        axis.title.x = element_text(size = 12,face = \"bold\"),\n        axis.title.y = element_text(size = 12,face = \"bold\"),\n        axis.text.y = element_text(color = \"grey80\"),\n        axis.text.x = element_text(color = \"grey80\"),\n        panel.grid.major.y = element_line(color = \"grey80\"),\n        panel.background = element_rect(color = \"grey40\",fill = \"grey40\"),\n        plot.background = element_rect(color = \"grey40\",fill = \"grey40\"))\n\n\nstair_sal <- my_df %>%\n  ggplot(aes(factor(year), y = annual_salary_median, group = salary_level, fill = salary_level)) +\n  geom_col(width = 1) +\n  labs(fill = \"Salary level\",\n       x = \"Years\",y = \"Cumulate annual median salaries by salary level\",\n       title = \"How much should salary increase per year?\",\n       subtitle = \"Nurses' annual median salary values by 4 levels\n        \") +\n  scale_x_discrete(breaks = seq(1998,2020,3)) +\n  scale_y_continuous(labels = scales::number_format(scale = 1/1000000,suffix = \"M\",accuracy = 1)) +\n  scale_fill_manual(limits = c(\"low\", \"medium\",\"high\",\"top high\"),\n                    labels = c(\"high\" = \"high from 56,000 to 80,000\",\n                             \"low\" = \"low less than 35,000\",\n                             \"medium\" = \"medium from 35,000 to 55,000\",\n                             \"top high\" = \"top high greater than 80,000\"),\n                    values = RColorBrewer::brewer.pal(4,\"Spectral\")) +\n  guides(fill = guide_legend(ncol = 4,title.position = \"left\")) +\n  theme_nurses +\n  theme(legend.position = c(0.5,0.99)) +\n  annotate(\"text\", x = 5, y = 1100000,label = \"Medium Salary from 35,000 to 60,000\",family = \"xkcd\" ) +\n  annotate(\"text\", x = 20, y = 300000,label = \"Top High up to 118,500\",family = \"xkcd\" ) +\n  annotate(\"text\", x = 20, y = 160000,label = \"started in 2008\",family = \"xkcd\" ) +\n  annotate(\"text\", x = 16, y = 2000000,label = \"High Salaries between 56,000 and 80,000\",family = \"xkcd\" ) +\n  annotate(\"curve\", x = 3, xend = 5, y = 3600000, yend = 2600000,color = \"grey85\", curvature = 0.5,\n           arrow = arrow(angle = 30, length = unit(0.2, \"inches\"),ends = \"last\", type = \"open\")) +\n  annotate(\"text\", x = 4, y = 3700000,label = \"Low salaries below 30,000\",family = \"xkcd\" ,color = \"red\") +\n  annotate(\"text\", x = 8, y = 3500000,label = \"stopped in 2011\\nto reach 35,000\",family = \"xkcd\",color = \"red\" ) +\n  annotate(\"curve\", x = 9, xend = 13, y = 3500000, yend = 3400000,color = \"grey85\", curvature = -0.5,\n         arrow = arrow(angle = 30, length = unit(0.2, \"inches\"),ends = \"last\", type = \"open\"))\n\n\n\nsalaries_by_year <- my_df %>%\n  group_by(year,salary_level) %>%\n  summarize(total = sum(annual_salary_median),.groups = \"drop\") %>%\n  pivot_wider(names_from = year,values_from = total,values_fill = 0)\n\nfacet_sal <- salaries_by_year %>%\n  pivot_longer(cols = \"1998\":\"2020\",names_to = \"years\",values_to = \"tot salary by level\") %>%\n  ggplot(aes(`tot salary by level`,salary_level,group = years)) +\n  geom_col(aes(fill = salary_level)) +\n  labs(x = \"Total amount of annual median salaries by level\",\n       y = \"Salary levels - $10thous.\",\n       fill = \"Salary level\",\n       caption = \"(values are in $,10thous.,M = millions of $)\\nDataSource: Registered Nurses,DataWorld,BLS\\nTidyTuesday Week41 DataViz: Federica Gazzelloni\") +\n  scale_x_continuous(labels = scales::number_format(scale = 1/100000,accuracy = 1)) +\n  scale_fill_manual(limits = c(\"low\", \"medium\",\"high\",\"top high\"),\n                    labels = c(\"high\" = \"high from 56,000 to 80,000\",\n                             \"low\" = \"low less than 35,000\",\n                             \"medium\" = \"medium from 35,000 to 55,000\",\n                             \"top high\" = \"top high greater than 80,000\"),\n                    values = RColorBrewer::brewer.pal(4,\"Spectral\")) +\n  guides(fill = guide_legend(ncol = 2,title.position = \"top\", title.hjust = 0.5)) +\n  facet_wrap(~years,scale = \"free_x\") +\n  theme_nurses +\n  theme(legend.position = c(0.80,0.07),\n        strip.background = element_rect(color = \"grey40\",fill = \"grey40\"),\n        strip.text = element_text(color = \"grey80\",face = \"bold\"))\n\n\nimg_nurse <- image_read(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w41/nurse.png\"))\nimg_dataworld <- image_read(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w41/dataworld.png\"))\nimg_bls <- image_read(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w41/bls.png\"))\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\nlibrary(cowplot)\nfinal <- ggdraw() +\n  draw_plot(stair_sal/facet_sal) +\n  draw_image(img_nurse, x = 0.1, y = 0.45,width = 0.08) +\n  draw_image(img_dataworld, x = 0.13, y = -0.46,width = 0.05) +\n  draw_image(img_bls, x = 0.18, y = -0.46,width = 0.05) +\n  draw_image(tidy_logo, x = 0.04, y = -0.46,width = 0.09) \n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w41/w41_nurses.png\"),\n              res = 320, width = 12, height = 14, units = \"in\")\n#stair_sal/facet_sal\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w18_ceo_departures/w18_ceo_departures.html",
    "href": "tidytuesday/cases2021/posts2021/w18_ceo_departures/w18_ceo_departures.html",
    "title": "Ceo Departures",
    "section": "",
    "text": "Tidytuesday week 28——— & future day28 ————–\n\n# inspired by http://applied-r.com/plotting-forecast-data-objects-ggplot/\n\n\nlibrary(tidyverse)\nlibrary(tidytuesdayR)\nlibrary(DataExplorer)\nlibrary(lubridate)\nlibrary(tsibble)\nlibrary(ggrepel)\nlibrary(corrplot)\nlibrary(forecast)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ragg)\nlibrary(RColorBrewer)\n\n\n# load data ###############################\ndepartures <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-27/departures.csv')\n\n# check and wrangling #####################\nhead(departures)\nglimpse(departures)\nprofile_missing(departures)\n\n\ndf <- departures%>%\n  select(2,4,6,7,8,11,12,13)%>%\n  arrange(leftofc)%>%\n  mutate(diff=fyear_gone-fyear)%>%\n  drop_na()%>%\n  select(coname,exec_fullname,fyear,fyear_gone,diff,leftofc,departure_code,ceo_dismissal,max_tenure_ceodb)%>%\n  filter(abs(diff)<6)%>%filter(!diff<0)\n\nrange(df$fyear_gone)\n\n# first plot to see the pattern ###############\n# excluded raws with more than 6 years difference between fyear and fyear_gone\nggplot(df) + \n  geom_point(aes(x=factor(fyear),y=factor(fyear_gone),color=ifelse(abs(diff)<6 ,\"in bound\",\"out of bound\")) )+\n  labs(color=\"\")+\n  theme(axis.text.x = element_text(angle=90))\n  \n# selecting data for main plot ############################\ntot_dismissal <- df %>%\n  mutate(y_month=yearmonth(leftofc),month=month(leftofc))%>%\n  group_by(y_month,month)%>%\n  summarize(tot_dism=sum(ceo_dismissal),tot_posit=sum(max_tenure_ceodb))%>%\n  ungroup()\n\n\n# set the theme and modifications as it is needed --------------------\nlibrary(ggthemes)\n\n# theme for forecast data objects\ntheme.fxdat <- theme_gdocs() +\n  theme(plot.title = element_text(size = 25,color=\"grey45\"),\n        plot.subtitle = element_text(size = 11),\n        plot.caption = element_text(size = 9, hjust = 0, vjust = 0, colour = \"grey50\"),\n        axis.title.y = element_text(face = \"bold\", color = \"gray30\"),\n        axis.title.x = element_text(face = \"bold\", color = \"gray30\", vjust = -1),\n        axis.text.x = element_text(angle=90),\n        panel.background = element_rect(fill = \"grey95\", colour = \"grey75\"),\n        panel.border = element_rect(colour = \"grey75\"),\n        panel.grid.major.y = element_line(colour = \"white\"),\n        panel.grid.minor.y = element_line(colour = \"white\", linetype = \"dotted\"),\n        panel.grid.major.x = element_line(colour = \"white\"),\n        panel.grid.minor.x = element_line(colour = \"white\", linetype = \"dotted\"),\n        strip.background = element_rect(size = 1, fill = \"white\", colour = \"grey75\"),\n        strip.text.y = element_text(face = \"bold\"),\n        axis.line = element_line(colour = \"grey75\"),\n        legend.position = \"top\",\n        legend.box = \"horizontal\",\n        legend.box.just = \"bottom\")\n\ntot_dismissal$y_month[80]\ntot_dismissal$tot_dism+rnorm(tot_dismissal$tot_dism)[1]\n\n# plotting ########################################\nlibrary(zoo)\nset.seed(345)\nplot1 <- ggplot(tot_dismissal,aes(x=y_month,y=tot_dism+rnorm(tot_dism))) + \n  geom_point(aes(color=\"Number of dismissal\"),fill=\"black\")+\n  geom_line(aes(color=\"Dismissal Trend\"),size=0.2) +\n  geom_smooth(aes(color=\"Smoothed conditional means\"))+\n  geom_line(aes(y_month,rollmedian(tot_dism, k = 15, fill = NA, align = \"center\"),color=\"Rolling median\"),size=0.8)+\n  labs(x=\"Time(Year-Month)\",\n       y=\"Normalized total n. of dismissal\",\n       title=\"33 Years trend CEO Departures\",\n       subtitle=\"1988 - 2021\\n Rolling median, smooth variation line and trend\",\n       caption=\"\",\n       color=\"\"\n       )+\n  scale_color_brewer(palette = \"Dark2\")+\n  theme.fxdat \n\n\n\n# future ----------------------------\nx<-tot_dismissal$tot_dism\n\n# create time series data object (ts) using tot_dism\nres.gen <- ts(x, frequency = 12, start = c(1992, 6))\n\nxx<-tot_dismissal%>%\n  pivot_wider(names_from=\"month\",values_from=\"tot_dism\",values_fill=0)%>%select(-tot_posit,-y_month)\n\n########################\nfit.y <- tslm(res.gen ~ trend + season)\nfx.y <- forecast(fit.y, h = 17, level = c(80, 95, 99))\n\n\nsource(\"plot_fx.R\")\n\nplot2 <- plot_fx(fx.y,\n        PI = TRUE,\n        line.cols = NA,\n        shade.cols = NA,\n        show.gap = TRUE,\n        date.breaks = \"15 months\",\n        date.format = \"%b-%y\",\n        main.title = \"CEO Departures forecast\",\n        sub.title = \"Transformed 33 years trend in Linear trend with seasonal dummy variables\",\n        caption = \"Viz. @fgazzelloni | DataSource: Gentry et al. & investors.com | TidyTuesday week18\",\n        x.title = \"CEO Departures by Year and Month\",\n        y.title = \"Total numbers of CEO Departures\")\n\n\nfinal<-plot1+plot2\n\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w18\", \"tidytuesday_Departures.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################ \nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"W18/tidytuesday_Departures.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_Departures.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w48_dr_who/w48_dr_who.html",
    "href": "tidytuesday/cases2021/posts2021/w48_dr_who/w48_dr_who.html",
    "title": "Dr. Who",
    "section": "",
    "text": "rm(list=ls())\n\nlibrary(tidyverse)\nlibrary(\"datardis\")\n\ndirectors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-11-23/directors.csv')\nepisodes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-11-23/episodes.csv')\nwriters <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-11-23/writers.csv')\n\nmy_df <- directors%>%\n  full_join(episodes,by=\"story_number\")%>%\n  full_join(writers,by=\"story_number\")\n\n# my_df%>%head\n\nuk_viewers<- my_df$uk_viewers\nuk_viewers[is.na(uk_viewers)]<- 0\n\n\n# https://www.r-graph-gallery.com/59-nifty-graph.html\nmoxbuller = function(uk_viewers) {   \n  u = runif(uk_viewers)   \n  v = runif(uk_viewers)   \n  x = cos(2*pi*u)*sqrt(-2*log(v))  \n  y = sin(2*pi*v)*sqrt(-2*log(u))\n  r = list(x=x, y=y)\n  return(r) \n}\nr = moxbuller(5000) \n\n\n# https://github.com/coolbutuseless/threed\nlibrary(threed)\ncamera_to_world <- threed::look_at_matrix(eye = c(4, 2, 5), \n                                          at = c(0, 0, 0))\nobj <- threed::mesh3dobj$cube %>%\n  transform_by(invert_matrix(camera_to_world)) %>%\n  perspective_projection()\n\n\nplot<-  data.frame(r)%>%\n  ggplot(aes(x=x,y=y,z=0))+\n  geom_point(shape=\".\",col=\"blue\")+\n  geom_polygon(data=obj,aes(x = x*25, y = y*25, group = zorder,\n                            linetype = hidden,  size = hidden), #zorder the drawing order of the elements from back to front\n               fill = NA, colour = 'blue', size = 0.7,\n               show.legend = F) +\n  geom_rect(mapping=aes(xmin=-30,xmax=0.7,ymin=0.2,ymax=0.8),\n            fill=NA)+  \n  theme_void() +\n  theme(plot.background = element_rect(color=\"black\",\n                                       fill=\"black\"))\n \n\nlibrary(showtext)\n\n# Import fonts\nfont_add_google(\"Luckiest Guy\", \"Luckiest\")\nfont_add_google(\"Poiret One\", \"Poiret\")\nshowtext_auto()\nshowtext_opts(dpi = 320)\n\n\nplot2<-my_df%>%\nggplot(aes(x=uk_viewers,y=rating))+\n  geom_jitter(aes(color=duration),show.legend = T)+\n  geom_smooth()+\n  theme_void()+\n  labs(x=\"rating\",y=\"viewers\",color=\"\")+\n  scale_color_viridis_c()+\n  theme(plot.background = element_rect(color=NA,\n                                       fill=NA),\n        text = element_text(family=\"Luckiest\",color=\"blue\"),\n        legend.position = c(0.5,-0.4),\n        legend.direction = \"horizontal\",\n        legend.title = element_blank())\n\n\n\nmy_df%>%\n  mutate(year=lubridate::year(first_aired))%>%\n  group_by(year)%>%\n  summarize(tot_view=sum(uk_viewers))%>%\n  arrange(-tot_view)#,rating,director)%>%arrange(-uk_viewers,-rating)\n\n######################################\nlibrary(prophet)\ndf<-my_df%>%select(ds=first_aired,y=uk_viewers)\nm <-prophet(df)\nfuture <- prophet::make_future_dataframe(m, periods=365)\nforecast <- predict(m,future)\n\n#### PROPHET PLOT COMPONENTS ###############################################\nplot3<-prophet_plot_components(m, forecast)\n######################################\ntrend <- forecast%>%\n  ggplot(aes(x=ds,y=trend))+\n  geom_line(color=\"blue\")+\n  theme_void()+\n  labs(x=\"rating\",y=\"viewers\")+\n  theme(plot.background = element_rect(color=NA,\n                                       fill=NA),\n        text = element_text(family=\"Luckiest\",color=\"blue\"),\n        axis.text.x = element_text(color=\"blue\",family = \"Luckiest\"))\n######################################\ntrend\n######################################\nweekly<- forecast%>%\n  mutate(day=lubridate::wday(ds,label = T,abbr = F,\n                             week_start = getOption(\"lubridate.week.start\", 7),\n                             locale = Sys.getlocale(\"LC_TIME\")),\n         .after=ds) %>%\n  select(ds,day,weekly,yearly,trend) %>%\n  \n  ggplot(aes(x=day,y=weekly,group = 1))+\n  geom_line(color=\"blue\")+\n  #geom_text(aes(label=day),color=\"blue\",family=\"Luckiest\")+\n  theme_void()+\n  labs(x=\"rating\",y=\"viewers\")+\n  theme(plot.background = element_rect(color=NA,\n                                       fill=NA),\n        text = element_text(family=\"Luckiest\",color=\"blue\"),\n        axis.text.x = element_text(color=\"blue\",\n                                   family = \"Luckiest\",\n                                   angle=15,size=8))\n######################################\nweekly # m$changepoints\n######################################\n\nlibrary(patchwork)\nplot3<-trend/weekly\n\n\nlibrary(cowplot)\nfinal <- ggdraw()+\n  draw_plot(plot)+\n  draw_plot(plot2,x = 0.02, y = 0,scale = 0.3)+\n  draw_plot(trend,x = -0.4, y = 0.2,scale = 0.25,height = 0.7,width=1.2)+\n  draw_plot(weekly,x = -0.4, y = -0.06,scale = 0.25,height = 0.7,width=1.2)+\n  draw_text(\"Dr. WHO - UK Viewers\", x=0.4,y=0.93,\n            color=\"blue\",size=42,family=\"Luckiest\")+\n  draw_text(\"Favorite months for watching are April, June and September\n            While the Years with the highest numbers of views \n            are 2010 and 2008\",\n            x=0.34,y=0.8,size=18,family=\"Luckiest\",color=\"blue\")+\n  draw_text(\"General trend declined after 2010 \n            favorite days of the week for watching are Tuesday to Friday\",\n            x=0.4,y=0.1,size=18,family=\"Luckiest\",color=\"blue\")+\n  draw_text(\"Trend\",x=0.04,y=0.56,angle=90,color=\"blue\",family = \"Luckiest\")+\n  draw_text(\"Weekly\",x=0.05,y=0.3,angle=90,color=\"blue\",family = \"Luckiest\")+\n  draw_text(\"Ratings\",x=0.365,y=0.53,angle=90,color=\"blue\",family = \"Luckiest\")+\n  draw_text(\"Viewers\",x=0.5,y=0.35,angle=0,color=\"blue\",family = \"Luckiest\")+\n  draw_text(\"Duration\",x=0.43,y=0.25,angle=0,color=\"blue\",family = \"Luckiest\",size=12)+\n  draw_text(\"Nifty UK Viewers density\",x=0.94,y=0.73,angle=88,\n            color=\"blue\",size=12,\n            family=\"Luckiest\")+\n  draw_text(\"#TidyTuesday week48 Dr.Who - DataViz: Federica Gazzelloni\", \n            x=0.4,y=0.03,color=\"blue\",size=14,family=\"Luckiest\")+\n  draw_image(\"/Users/federica/Documents/R/R_general_resources/TidyTuesday/TidyTuesday/w48/drwho.png\",\n             x=-0.14,y=0.17,scale=0.15)+\n  draw_image(\"/Users/federica/Documents/R/R_general_resources/TidyTuesday/TidyTuesday/w48/tardis.jpg\",\n             x=-0.42,y=0.42,scale=0.12)\n\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resources/TidyTuesday/TidyTuesday/w48/dr_who2.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w39_emmy_awards/w39_emmy_awards.html",
    "href": "tidytuesday/cases2021/posts2021/w39_emmy_awards/w39_emmy_awards.html",
    "title": "Emmy Awards",
    "section": "",
    "text": "TidyTuesday\n\n\nweek 39 nominees EMMYS’\n\n\nload libraries ————–\n\nlibrary(tidyverse)\n\nlibrary(extrafont)\nlibrary(showtext)\n#font_families_google()\nfont_add_google(\"Roboto Condensed\",\"Roboto Condensed\")\n\nlibrary(patchwork)\nlibrary(cowplot)\n\n# load the data ------\n\nnominees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-21/nominees.csv')\nhead(nominees)\n\n# data wrangling -------\n# arrange the set to have the count of the types\n# add a column with the icons for types\n\nmy_df <-\n  nominees %>%\n  filter(year>=2015) %>%\n  filter(distributor==c(\"HBO\")) %>%\n  count(year,distributor,type,sort=T) %>%\n  mutate(distributor_lab=paste0(\"HBO_\",year))%>%\n  mutate(img = if_else(\n      type == \"Winner\",\n      \"<img src='w39/emmy_winner.png' width='12'/>\",\n      \"<img src='w39/emmy_nom.png' width='12'/>\"\n    ))\n\n\n\n# set a special vector for the facet strip names with the type counts\n\ntype_c <- c(\"HBO_2015\"= \"219 to 140\",\n            \"HBO_2016\"= \"198 to 75\",\n            \"HBO_2017\"= \"216 to 118\",\n            \"HBO_2018\"= \"302 to 96\",\n            \"HBO_2019\"= \"297 to 146\",\n            \"HBO_2020\"= \"217 to 124\",\n            \"HBO_2021\"= \"261 to 66\") \n\n\n# make the plot -------\n\nlibrary(waffle)\nlibrary(ggtext)\nlibrary(ggthemes)\n\n\nplot <- ggplot(my_df, aes(fill = type, values = n,label = img)) +\n  facet_wrap(distributor_lab~year, nrow = 1, strip.position = \"bottom\",\n             labeller = labeller(distributor_lab  = as_labeller(type_c))) +\n  stat_waffle(geom = \"richtext\", fill = NA, label.color = NA, flip = TRUE, n_rows = 10) +\n  scale_x_discrete() + \n  scale_y_continuous(labels = function(x) x * 10, expand = c(0,0)) +\n  ggthemes::scale_fill_fivethirtyeight(name=NULL) +\n  coord_equal() +\n  labs(title=\"\\n\",subtitle=\"\\n\",\n    caption=\"Source: The data this week comes from emmys.com\") +\n  theme_minimal(base_family = \"Roboto Condensed\") +\n  theme(text=element_text(family = \"Roboto Condensed\"),\n        axis.ticks.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_blank(),\n        strip.text = element_text(family = \"Roboto Condensed\",size=22,face=\"bold\"),\n        legend.position = \"top\",\n        panel.grid.major.x = element_line(color=\"grey50\",size=10),\n        panel.grid.minor.x = element_line(color=\"grey50\",size=10),\n        plot.margin = margin(5,5,1,5,unit = \"pt\"),\n        plot.background = element_rect(color=\"#F0F8FF\", fill=\"#F0F8FF\"),\n        plot.caption.position = \"panel\",\n        plot.caption = element_text(family = \"Roboto Condensed\",color= \"grey40\", face=\"bold\",size=30, hjust=0,vjust=-1)) \n\n\n#------------finish touches\n\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\n\n\nlibrary(ggpubr)\n\ngraphics <- ggarrange(plot) +\n  theme(plot.background = element_rect(fill = \"#F0F8FF\", color = \"#F0F8FF\"))\n\n\n# annotate the plot\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"EMMY AWARD WINNERS AND NOMINEES\",\n                                              color = c(\"grey28\"), face = \"bold\", size = 34,\n                                              family = \"Roboto Condensed\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: TidyTuesday week39\",\n                                                 color = \"grey28\",family = \"Roboto Condensed\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 24),\n                              left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size = 12),\n                              right = text_grob(bquote(\"\"), color = c(\"#778899\"),rot = 90,size = 10),\n                              fig.lab = \"\", fig.lab.face = \"bold.italic\",fig.lab.size = 8,\n                              fig.lab.pos = \"bottom.right\"\n)\n\nfinal_plot <-\n  final_plot +\n\n  annotate(geom = 'segment',y = 0.78, yend = 0.93, x = 0.1,xend = 0.1, color=\"#8A2BE2\", size = 9) +\n\n  annotate(geom = \"text\", label = \"HBO RECORD AT THE EMMYS \\nAWARDS AND NOMINEES\",\n           x = 0.44, y = 0.875,colour = \"black\",size = 16,family = \"Roboto Condensed\",fontface=\"bold\") +\n\n  annotate(geom = \"text\", label = \"Number of Emmy nominations and wins for HBO\",\n           x = 0.44, y = 0.79,colour = \"grey40\",size = 10,family = \"Roboto Condensed\") +\n  \n  annotate(geom = \"text\", label = \"Winner\",\n         x = 0.5, y = 0.1,colour = \"grey50\",size = 8,family = \"Roboto Condensed\") +\n  annotate(geom = \"text\", label = \"Nominee\",\n         x = 0.32, y = 0.1,colour = \"grey50\",size = 8,family = \"Roboto Condensed\") \n\n\n# add the images for the legend keys \n\nimgWin <- image_read(here::here(\"w39/emmy_winner.png\"))\nimgNom <- image_read(here::here(\"w39/emmy_nom.png\"))\nimgHBO <- image_read(here::here(\"w39/hbo.png\"))\n\nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(imgWin, x = 0.55, y = -0.4,width = 0.06)+\n  draw_image(imgNom, x = 0.37, y = -0.4,width = 0.06)+\n  draw_image(imgHBO, x = 0.1, y = -0.1,width = 0.12)\n\n\n\n## save final plot ----\n\nragg::agg_png(here::here(\"w39/w39_nominees.png\"),\n              res = 320, width = 12, height = 14, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\n\n\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\ntidy_final <- image_read(here::here(\"w39/w39_nominees.png\"))\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator = \"atop\",\n                                 gravity = \"southeast\")\n\nimage_write(attached_logo, path = \"w39_nominees.png\", format = \"png\")"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w21_ask_a_manager_survey/w21_ask_a_manager_survey.html",
    "href": "tidytuesday/cases2021/posts2021/w21_ask_a_manager_survey/w21_ask_a_manager_survey.html",
    "title": "Ask a Manager Survey",
    "section": "",
    "text": "Ask a Manager Survey\n\nrm(list=ls())\n\nlibrary(tidyverse)\nlibrary(DataExplorer)\noptions(scipen=999)\n\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 21)\nsurvey <- tuesdata$survey\n\n\nhead(survey)\nprofile_missing(survey)\n\nmy_df<-survey%>%select(2,4,6,8,14,15)\n\n\narrange(plyr::count(my_df$currency),freq)\n\nmy_currency<-c(\"EUR\",\"GBP\",\"USD\")\n\ncountry_df<-data.frame(country_name=c(\"Europe\",\"UK\",\"USA\"),\n                       currency=c(\"EUR\",\"GBP\",\"USD\"))\n\nmy_df_curr<-my_df%>%\n  filter(currency%in%my_currency,annual_salary<3000000)%>%\n  inner_join(country_df,by=\"currency\")\n\nstr(my_df_curr)\nnames(my_df)\n\n\nmy_df_curr<-my_df_curr%>%\n  mutate(how_old_are_you=case_when(\n    how_old_are_you==\"65 or over\"~\"65+\",\n    how_old_are_you==\"under 18\"~\"<18\",\n    TRUE~how_old_are_you),\n    years_of_experience_in_field=case_when(\n      years_of_experience_in_field==\"1 year or less\"~\"0-1\",\n      years_of_experience_in_field==\"41 years or more\"~\"41+\",\n      TRUE~sub(\" years$\",\"\",years_of_experience_in_field)),\n    overall_years_of_professional_experience=case_when(\n      overall_years_of_professional_experience==\"1 year or less\"~\"0-1\",\n      overall_years_of_professional_experience==\"41 years or more\"~\"41+\",\n      TRUE~sub(\" years$\",\"\",overall_years_of_professional_experience)),\n    overall_years_of_professional_experience = as.factor(overall_years_of_professional_experience),\n    how_old_are_you = as.factor(how_old_are_you),\n    years_of_experience_in_field = as.factor(years_of_experience_in_field))%>%\n  arrange(desc(how_old_are_you))\n\n\nmy_df_curr<- my_df_curr%>%\n  mutate(years_of_experience_in_field=case_when(\n    TRUE~gsub(\" \",\"\",years_of_experience_in_field)),\n    overall_years_of_professional_experience=case_when(\n      TRUE~gsub(\" \",\"\",overall_years_of_professional_experience))\n  )\n\n\nnames(my_df_curr)<-c(\"age\",\"job_title\",\"annual_salary\",\"currency\" ,\"yr_prof_exp\",\"yr_exp\",\"country_name\")\n\n######### PLOTTING ####################\n\n\nlibrary(viridis)\nlibrary(hrbrthemes)\nlibrary(ggthemes)\n\nscr_df<-data.frame(country_name=c(\"Europe\",\"UK\",\"USA\"),\n                   scr=c(1/1.22,1/1.41,1))\n\nmy_df_curr<-my_df_curr%>%inner_join(scr_df,by=\"country_name\")%>%\n  mutate(salaryUSD=annual_salary*scr)\n\nlibrary(extrafont)\nfonts()\nleg_lab<-c(\"0-1\",\"2-4\",\"5-7\",\"8-10\",\"11-20\",\"21-30\",\"31-40\",\"40+\")\nnewcolors<-c(\"#004586\",\"#ffd320\",\"#314004\",\"#aecf00\",\"#ff420e\",\n             \"#579d1c\",\"#7e0021\",\"#83caff\")\n\n\nsurvey_plot<-ggplot(my_df_curr, aes(x=age, y=salaryUSD)) +\n  geom_line(aes(group=age))+\n  geom_point(aes(group=yr_exp,col=yr_exp),\n            alpha=0.5) +\n  geom_text(aes(label=job_title,size=salaryUSD),hjust = 0, nudge_x = 0.05,\n            check_overlap = TRUE,family=\"World of Water\") +\n  scale_y_continuous(labels = dollar_format(prefix=\"$\"), limits = c(0,NA))+\n  scale_color_manual(labels = leg_lab,values = newcolors)+\n  labs(title=\"Who is the Richest?\",\n       subtitle=\"Industry job title pyramid annual Salary(USD) by age - Ask a Manager Salary Survey \",\n       caption=\"Viz. @fgazzelloni | DataSource: Ask a Manager Salary Survey | TidyTuesday Week21\",\n       x=\"Age\", y=\"Salary(USD)\",\n       col=\"Years of experience in the field\",\n       size=\"\")+\n  scale_size(guide=FALSE)+\n  theme_calc() +\n  theme(plot.margin=unit(c(c(1, 1, 0.5, 0.5)), units=\"line\"),\n        legend.position = c(0.83,0.7),\n        #legend.justification = c(\"right\", \"top\"),\n        #legend.box.just = \"right\",\n        legend.margin = margin(6, 6, 6, 6),\n        legend.direction = \"horizontal\",\n        legend.title = element_text(family=\"World of Water\"),\n        legend.text = element_text(family=\"World of Water\"),\n        legend.background = element_rect(color = \"#4b1f6f\"),\n        plot.title = element_text(family=\"World of Water\",size=rel(4)),\n        plot.subtitle = element_text(family=\"World of Water\",size=20),\n        plot.caption = element_text(family=\"World of Water\",size=10,hjust = 0.5),\n        axis.title = element_text(family=\"World of Water\"),\n        axis.text = element_text(family=\"World of Water\"),\n        axis.line = element_line(size = 3, colour = \"grey80\"),\n        axis.ticks = element_line(size=2,color=\"#4b1f6f\"))\n\n\n\n################################################################################\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"tidytuesday_Ask_a_manager_survey.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nsurvey_plot\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"tidytuesday_Ask_a_manager_survey.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_Ask_a_manager_survey.png\",\n            format = \"png\") # save final plot\n\n\n\n##############################################################"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w17_netflix/w17_netflix.html",
    "href": "tidytuesday/cases2021/posts2021/w17_netflix/w17_netflix.html",
    "title": "NETFLIX & Upwards",
    "section": "",
    "text": "library(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(extrafont)\nlibrary(showtext)\n\nshowtext_opts(dpi = 320)\n\n\nshowtext_auto(enable = TRUE)\nmy_family = \"Roboto Condensed\"\n\n#tuesdata <- tidytuesdayR::tt_load(2021, week = 17)\n\nnetflix <- tuesdata$netflix\n\nhead(netflix)\ndim(netflix)\n\nset.seed(73)\nNETFLIX_plot <- ggplot(data=netflix, aes(x=release_year, y=sample(7787),fill=release_year)) +\n  geom_col() +\n  scale_fill_gradient(low = \"#333333\",high = \"red\") + \n  labs(title=\"NETFLIX\",\n       subtitle=\"Show released years from 1925 to 20121\",\n       caption=\"Viz Federica Gazzelloni | DataSource: Kaggle - 'NETFIX titles'| Tidytuesday week 17 & Upwards Day 20\",\n       x=\"Time(Year)\",\n       y=\"\",\n       fill=\"Release Year\")+\n  theme_void() +\n  theme(plot.title=element_text(family=my_family,size=50,face=\"bold\",color=\"red\"),\n        plot.subtitle = element_text(family=my_family,size=15,face=\"bold\"),\n        plot.caption = element_text(family=my_family,size=10,face=\"bold\"),\n        \n        panel.background = element_rect(fill = \"#333333\") ,\n        plot.margin = margin(10,10,10,10),\n        panel.grid = element_line(color = \"white\",size=2),\n        panel.grid.major = element_line(color = \"white\",size=1.5),\n        panel.grid.minor =element_line(color = \"white\",size=2), \n        axis.line = element_line(colour = \"white\"),\n        axis.line.x = element_line(color=\"white\"),\n        axis.line.y = element_blank(),\n        axis.text.x = element_text(family=my_family,size=10,face=\"bold\"),\n        legend.text = element_text(family=my_family,size=10,face=\"bold\"),\n        legend.title = element_text(family=my_family,size=10,face=\"bold\"),\n        legend.position = \"bottom\")\n\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w17\", \"tidytuesday_NETFLIX.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nNETFLIX_plot\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################ \nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\ntidy_NETFLIX_plot <- image_read(\"W17/tidytuesday_NETFLIX.png\")\n\nattached_logo <- image_composite(tidy_NETFLIX_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_NETFLIX.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w28_independence_days/w28_independence_days.html",
    "href": "tidytuesday/cases2021/posts2021/w28_independence_days/w28_independence_days.html",
    "title": "International Independence Days",
    "section": "",
    "text": "library(tidyverse)\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 28)\n\nholidays <- tuesdata$holidays\nnames(holidays)\n\n\nlibrary(maps)\nlibrary(sf)\n\nmaps::map(\"world\")\n\n\nworld <- sf::st_as_sf(map(\"world\",plot=FALSE,fill=TRUE))\nworld <- cbind(world, sf::st_coordinates(sf::st_centroid(world)))\n\n\nholidays_map <- holidays %>%\n  filter(str_detect(name_of_holiday,\"(?i)inde\"))%>%\n  left_join(world, by=c(\"country\"=\"ID\")) %>%\n  select(country,date_parsed,name_of_holiday,independence_from,X,Y)%>%\n  mutate(country=as.factor(country))\n\n\nlibrary(showtext)\nlibrary(extrafont)\nshowtext.auto(enable=FALSE)\n\n“#EEE9E9”\n\nmapdata <- ggplot2::map_data(\"world\") %>%\n  filter(!region==c(\"Antartica\",\"Greenland\",\"French Southern and Antartic Lands\")) %>%\n  mutate(region=recode(region, \n                       USA=\"United States\",\n                       UK=\"United Kingdom\"))\n           \n\nfinal_plot <- ggplot() +\n  geom_map(data=mapdata,map = mapdata,aes(map_id=region),fill= \"#F0F8FF\",color= \"#FAEBD7\")+\n  geom_point(data=world,aes(x=X,y=Y),size=1,color=\"grey\",alpha=0.3)+\n  geom_point(data=holidays_map,aes(x=X,y=Y),size=0.5,color=\"black\")+\n  geom_text(data=holidays_map,aes(x=X,y=Y,label=country),family=\"Andalus\",\n                            check_overlap = TRUE,size=1.5,color=\"#363636\",hjust=0,vjust=0)+ #\n  geom_text(data=holidays_map,aes(x=X,y=Y,label=date_parsed),\n            family=\"Andalus\", check_overlap = TRUE,size=0.8,\n            color=\"#CD1076\",vjust=0.8,hjust=-1)+\n  expand_limits(x=mapdata$long,y=mapdata$lat)+\n  coord_map(projection = \"mercator\",xlim=c(-180,180)) +\n  labs(title=\"Date parsed: Independent Days celebrating Countries\",\n       caption= \"DataViz: @fgazzelloni, DataSource: International Independence Days,    Wikipedia,WorldAtlas.com - #TidyTuesday w28\")+\n  guides(fill=\"none\") +\n  ggthemes::theme_map()+\n    theme(axis.text = element_blank(),\n          plot.background = element_rect(fill=\"#C5E5F0\",color=\"#E0EEEE\"),\n          plot.title = element_text(color=\"#363636\",family=\"Andalus\",size=18,face=\"bold\"),\n          plot.caption = element_text(size=10))\n\n\n\nfinal_plot\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w28\",\"w28_independence_days.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()\n\n##################################################"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w31_olympic_medals/w31_olympic_medals.html",
    "href": "tidytuesday/cases2021/posts2021/w31_olympic_medals/w31_olympic_medals.html",
    "title": "Olympic Medals",
    "section": "",
    "text": "35 Years of Olympic Games\nConverting “region” vector into country code “iso2c” with {countrycodes} to be able to use {ggflags}\nsome values were not matched unambiguously:\nI could do a dataset with only “Individual Olympic Athletes” and eventually use it to add some info in a geom_\nAfter a quick look at the “ambiguous_country_codes”, just one is relevant with a “Gold medal”, then will see how to use it.\nUpdate “my_olympics” with countrycode():\n35 Years: 1896 to 2016\nAge: 11 to 71 (61 different ages)"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w31_olympic_medals/w31_olympic_medals.html#section-age-sex",
    "href": "tidytuesday/cases2021/posts2021/w31_olympic_medals/w31_olympic_medals.html#section-age-sex",
    "title": "Olympic Medals",
    "section": "Section Age & Sex",
    "text": "Section Age & Sex\n\nage_sex_plot <- my_olympics %>% \n  group_by(sex) %>%\n  summarize(age,height,weight,year) %>% # count(age)\n  ungroup() %>% \n  ggplot(aes(x=factor(age),fill=factor(sex))) + \n  geom_bar(position=\"stack\") +\n  scale_fill_fivethirtyeight() +\n  labs(title=\"Distribution of age by sex\",\n       subtitle=\"61 different age years form 11 to 71 years old gamers\",\n       fill=\"Sex\") + \n  theme_fivethirtyeight() +\n  theme(axis.text.x = element_text(angle=20),\n        legend.position = \"bottom\",\n        plot.title = element_text(size=16,vjust=-0.5),\n        panel.grid.major.x = element_blank())\n\nage_sex_plot\n\nComposition of plots and background\n\nlibrary(magick)\nlibrary(ggimage)\nlibrary(ggpubr)\nlibrary(cowplot)\nlibrary(extrafont)\nlibrary(showtext)\nfonts()\nolympics_family<-\"Roboto Condensed\"\n#library(ggflags)\nlibrary(countrycode)\n\n\nolympics_plot <- ggplot() +\n  geom_blank() + \n  theme_void() +\n  theme()\n\n\nimg_olympics<-\"olympics.png\"\n\nplot <- ggbackground(age_sex_plot, img_olympics,alpha=.4, color=\"#CD919E\")\n\n\nplot +\n  theme(plot.background = element_rect())#fill=\"#FFEFDB\"))\n\nThen add a secon plot on the right corner"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w31_olympic_medals/w31_olympic_medals.html#section-medals",
    "href": "tidytuesday/cases2021/posts2021/w31_olympic_medals/w31_olympic_medals.html#section-medals",
    "title": "Olympic Medals",
    "section": "Section medals",
    "text": "Section medals\n“At the 1968 Summer Olympics in Mexico City, 29 events in swimming were contested. There was a total of 468 participants from 51 countries competing. The United States dominated the competition, winning 52 of 87 possible medals. 15-year-old phenom Debbie Meyer from Maryland won three gold medals.”\nsource: Swimming at the 1968 Summer Olympics\n\nmy_olympics_with_country_codes<- my_olympics%>%\n  mutate(country_code = countrycode(region, \n            origin = 'country.name', \n            destination = 'iso2c'),\n         country_code=tolower(country_code)) %>%\n  select(year,sport,medal,country_code) %>%\n  filter(medal==\"Gold\") %>%\n  count(year,sport,country_code) %>%\n  arrange(year) \n  \n\n\nmy_olympics_with_country_codes\n\n\nmy_favourites <- c(\"Athletics\",\"Wrestling\",\"Swimming\",\"Shooting\",\"Rowing\",\n                   \"Boxing\",\"Canoeing\",\"Cycling\")\n\n\nmy_favourite_sports <- my_olympics_with_country_codes%>%\n  filter(sport %in%my_favourites)\n\n\nlibrary(ggflags)\n\n\ntop_golden_sports <- ggplot(data=my_favourite_sports,\n       aes(x=factor(year),y=fct_reorder(sport,-year))) +\n  geom_point(shape = 21, colour = \"gold\", fill = NA, size = 7, stroke = 1) +\n  ggflags::geom_flag(aes(country=country_code), size=4.5) +\n  ggflags::scale_country() +\n  guides(country=\"none\") +\n  labs(title=\"Top 8 Gold medal sport winners\",\n       x=\"\",y=\"\") +\n  theme_fivethirtyeight()+\n  theme(axis.text.x = element_text(angle=90),\n        panel.grid.major.y = element_blank(),\n        panel.grid.major.x = element_line(color=\"#CD919E\"),\n        plot.title.position = \"plot\",\n        plot.background = element_blank(),\n        panel.background = element_blank())\n\n# top_golden_sports\n\n\n#png(\"top_golden_sports.png\")\nggsave(\"top_golden_sports.png\", width = 8, height = 6)\n\nprint(top_golden_sports)\ndev.off()\n\n\nlibrary(cowplot)\n\n\nimg <- \"top_golden_sports.png\"\n\ninset.plot <- ggdraw() +\n  draw_image(img,  x = 0.22, y = -0.2,  scale = .70) \n\ninset.plot <- inset.plot + theme(legend.position = \"none\",\n                                    plot.background = element_blank(),\n                                    panel.background = element_blank())\ninset.plot2 <- age_sex_plot + theme(legend.position = \"none\",\n                                    plot.background = element_blank(),\n                                    panel.background = element_blank())\n\ndouble_plot <- ggdraw() +\n  draw_plot(inset.plot2, x = 0, y = 0, width = 1, height = 1) +\n  draw_plot(inset.plot, x = -0.35, y = .18, width = 1.5, height = 0.9) \n\n\ndouble_plot\n\n\nimg_olympics<-\"olympics.png\"\nplot <- ggbackground(double_plot, img_olympics,alpha=.2, color=\"#CD919E\")\n\n\nplot +\n  theme(plot.background = element_rect(fill=\"#FFEFDB\"))\n\n\ngraphics <- ggarrange(plot) \n\nannotation_plot <- annotate_figure(graphics,\n               top = text_grob(\"Olympics outlook 1896 - 2016  \",color =c(\"#FF4040\", \"#FFFFFF\", \"#FFFFFF\"), \n                               face = \"bold\", size = 40,family=olympics_family),\n               bottom = text_grob(\"DataViz: @fgazzelloni DataSource: \\n TidyTuesday week31, Olympic Medals, Kaggle, Financial Times & FiveThirtyEight\",\n                                  color = c(\"black\"),family=olympics_family,\n                                  hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n               left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size=1),\n               right = text_grob(bquote(\"\"), color=c(\"#778899\"),rot = 90,size=1),\n               fig.lab = \"TidyTuesday week31\\n\", fig.lab.face = \"bold.italic\",fig.lab.size=7,\n               fig.lab.pos=\"bottom.right\"\n)\n\nfinal_plot <- annotation_plot +\n  annotate(geom = \"text\", label=\"The historical dataset on the modern Olympic Games,\\n including all the Games from Athens 1896 to Rio 2016\",x = 0.7, y = 0.81, \n           colour = \"black\", size = 6,family=olympics_family) \n  \n\nfinal_plot\n\nAttach the Olympic logo at the sides of the title\n\nimg_olympics<-\"olympics.png\"\n\nfinal <- ggdraw() +\n  draw_image(img_olympics,  x = -0.35, y = 0.45, scale = .10) +\n  draw_image(img_olympics,  x = 0.32, y = 0.45, scale = .10) +\n  draw_plot(final_plot)\n\nSaving:\n\nragg::agg_png(here::here(\"w31\", \"w31_olympics.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w23_survivors/w23_survivors.html",
    "href": "tidytuesday/cases2021/posts2021/w23_survivors/w23_survivors.html",
    "title": "Survivors",
    "section": "",
    "text": "TidyTuesdat Week 23\n\n# Survivor TV Show \n# survivoR Package\n# https://github.com/doehm/survivoR\n\n# http://gradientdescending.com/survivor-data-from-the-tv-series-in-r/\n\n\n# install.packages(\"survivoR\")\n\n\n# source of inspiration: \n# https://github.com/TIvanDijk/TidyTuesday/blob/main/Week%2023/survivors.R\n# https://cran.r-project.org/web/packages/ggtext/vignettes/plotting_text.html\n\nlibrary(survivoR)\n\nlibrary(tidytuesdayR)\ntuesdata <- tidytuesdayR::tt_load(2021, week = 23)\n\nchallenges <- tuesdata$challenges\nhead(challenges);dim(challenges)\nviewers <- tuesdata$viewers\nhead(viewers);dim(viewers)\njury_votes <- tuesdata$jury_votes\ncastaways <- tuesdata$castaways\nsummary <- tuesdata$summary\nhead(summary);dim(summary)\n\n#########################\n\n\nhead(castaways);dim(castaways)\n\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(extrafont)\nlibrary(patchwork)\nlibrary(ggtext)\nlibrary(forcats)\nlibrary(ggrepel)\nlibrary(showtext)\nlibrary(cowplot)\nlibrary(magick)\n# fonts()\n\nfont_add_google(\"Roboto\", \"roboto\")\nfont_add_google(\"Roboto Condensed\", \"roboto condensed\")\n\n\n##############################################\n\nlabels <-\n  tibble(\n    labels = c(\n      \"**The 4 Cognitive Functions dealing with '*How Processing Information*'**\",\n      \"Extroverted Sensing = ESTP, ESFP, ISTP, and ISFP                   \",\n      \"Introverted Sensing = ISTJ, ISFJ, ESTJ, and ESFJ                   \",\n      \"Extroverted Intuition = ENTP, ENFP, INTP, and INFP                 \",\n      \"Introverted Intuition = INTJ, INFJ, ENTJ, and ENFJ                 \"\n      ),\n    x = rep(3.5, 5),\n    y = c(0.8,0.7,0.6,0.5,0.4)#rep(1, 5)\n    )\n\npersonality_codes <-ggplot(labels, aes(x, y)) +\n  annotate(\"text\", x = 3, y = 1.45,\n           label = \"Survivor personality code explained\",\n           size = 14,color=\"#A91727\",\n           fontface = \"bold\",\n           family =  \"Roboto Condensed\" ) +\n  geom_text(aes(x=2.8,y=1,family= \"Roboto Condensed\" ),\n            label=\"The Myers-Briggs Personality Type Indicator is a personality classification system that breaks personalities into 16 different categories. \\nEach personality type has specific preferences in how they 1.) perceive the world and how they 2.) make decisions\",\n            color = 'black', size = 4,face=\"bold\")+\n  geom_richtext(aes(label = labels,family= \"Roboto Condensed\"),\n                label.color = NA,\n                vjust = 0.8,hjust=0.2,color=\"#A91727\",size=4,fill=NA) +\n  annotate(geom = \"curve\", x = 1.8, y = 0.6, xend = 2.5, yend = 0.75, curvature = -.2, arrow = arrow(length = unit(2, \"mm\")))+\n  annotate(geom = \"rect\",xmin=0.2,ymin=0.35,xmax =1.8 ,ymax =0.81, color=\"#FEED01\",fill=\"#FEED01\")+\n  annotate(geom = \"text\",x=1,y=0.6,\n           label=\"Each personality type has four cognitive functions:\\n1. dominant\\n2. auxiliary or secondary\\n3. tertiary\\n4. inferior or least developed\",\n           size = 3,color=\"black\",\n           family =  \"Roboto Condensed\")+\n  annotate(\"text\",x=1,y=0.25,\n           label=\"Each of the 16 personality types will have a unique combination of 4 out of 8 cognitive functions\",\n           size = 3,color=\"black\",\n           family =  \"Roboto Condensed\")+\n  scale_x_continuous(limits = c(0, 6.1)) +\n  scale_y_continuous(limits =  c(0.2, 1.5)) +\n  labs(title=\"Survivor (American TV series)\")+\n  theme_void()+\n  theme(plot.title = element_text(hjust=1,vjust=-0.5,face=\"bold\",family = \"Roboto Condensed\"),\n        plot.background = element_rect(fill = \"#EFCC24\"),\n        panel.border = element_blank(),\n        plot.margin = unit(c(1,1,0,1), \"cm\"))\n\n\npersonality_plot <- castaways%>%\n  group_by(personality_type)%>%\n  summarize(avg_age=mean(age),n=n())%>%\n  ungroup()%>%\n  arrange(desc(n))%>%\n  drop_na()%>%\n  ggplot(aes(x=reorder(round(avg_age),avg_age),y=n,\n             color=personality_type,fill=personality_type))+\n  geom_col()+\n  geom_label(aes(y=n,label=paste(personality_type),fill=personality_type),\n            #direction = \"y\",\n            color=\"white\",\n            position= position_stack(vjust=0.5))+\n  scale_fill_survivor(12)+\n  scale_colour_survivor(12)+#8\n  labs(title=\"Personality type by Age group\",\n       x=\"Survivor's Age\",y=\"Group(n)\",\n       fill=\"Personality Type\",color=\"\",\n       caption = \"Viz @fgazzelloni Source: TidyTuesday week 23 & Survivor TV Show, more info @Daniel's Oehm's Website\")+\n  guides(color=FALSE)+\n theme_base()+\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill=\"#EFCC24\"),\n    plot.title = element_text(color=\"#784937\",family=\"Roboto Condensed\"),\n    plot.caption = element_text(color=\"#784937\",family=\"Roboto Condensed\",size=9,face=\"bold\"),\n    panel.background = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(),\n    axis.title = element_text(family=\"Roboto Condensed\"))\n\n\n\np<-personality_codes / personality_plot\n\n\nimg <- image_read(\"hex-torch.png\")\n\n# Set the canvas where you are going to draw the plot and the image\nfinal <-ggdraw() +\n  # Draw the plot in the canvas setting the x and y positions, which go from 0,0\n  # (lower left corner) to 1,1 (upper right corner) and set the width and height of\n  # the plot. It's advisable that x + width = 1 and y + height = 1, to avoid clipping \n  # the plot\n  draw_plot(p,x = 0, y = 0, width = 1, height = 1) +\n  # Draw image in the canvas using the same concept as for the plot. Might need to \n  # play with the x, y, width and height values to obtain the desired result\n  draw_image(img,x = -0.85, y = 0.8, width = 1.85, height = 0.2)\n\n\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w23\",\"w23_survivor.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"w23_survivor.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"w23_survivor.png\",\n            format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w30_drought/w30_drought.html",
    "href": "tidytuesday/cases2021/posts2021/w30_drought/w30_drought.html",
    "title": "US drought",
    "section": "",
    "text": "library(tidyverse)\n\nResources for this week:\n\nrfordatascience\nComprehensiveStatistics\nNYT\nCNN\nDrought Classification\ndrought Monitor\n\nFacts 2001 to 2021:\n\nSix states are now entirely in drought conditions\nThe drought has nearly doubled in size from this time last year\nAround 25% of the country was in drought conditions in July 2020\nMore than 94% of the West is in drought\nMore than 60% of the region is in ‘extreme’ or ‘exceptional’ drought\nSix states completely in drought conditions; California, Oregon, Nevada, Utah, Idaho and North Dakota\n\nData limitations:\n\nstatistics are limited to areas based on counties\npopulation changes over time\npopulation is distributed evenly across each county\nlimitation\n\nCaption: The U.S. Drought Monitor is jointly produced by the National Drought Mitigation Center at the University of Nebraska-Lincoln, the United States Department of Agriculture, and the National Oceanic and Atmospheric Administration. Map courtesy of NDMC.\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 30)\n\ndrought <- tuesdata$drought\n\n\nglimpse(drought)\n\n\ndrought%>%count(drought_lvl)\n\nIntensity and Impacts\n\nintensity_impacts<- c(\"D0\"=\"Abnormally Dry\",\n                      \"D1\"=\"Moderate Drought\",\n                      \"D2\"=\"Severe Drought\",\n                      \"D3\"= \"Extreme Drought\",\n                      \"D4\"=\"Exceptional Drought\")\n\n\nDataExplorer::profile_missing(drought)\n\n\ndrought_short <- drought %>%\n  dplyr::select(-map_date,-stat_fmt) %>%\n  filter(!drought_lvl==\"None\",!area_pct==0)\n\ndrought_short\n\n\nlibrary(sf)\nlibrary(raster)\nlibrary(spData)\nlibrary(spDataLarge)\n\nlibrary(maps)\nlibrary(viridis)\nlibrary(ggthemes)\n\n\nus_county_map <- map_data(\"county\")\n\ncounty_plot<-ggplot()+\n  geom_polygon(data=us_county_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"lightblue\") +\n  theme_map()\n\ncounty_plot\n\n\nmy_states <- drought_short%>%count(state_abb)\n\n\nus_state_map <- map_data(\"state\")\n\nstate_plot<-ggplot()+\n  geom_polygon(data=us_state_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"lightblue\") +\n  theme_map()\n\nstate_plot\n\n\nus_plot<-ggplot()+\n  geom_polygon(data=us_county_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"lightblue\") +\n   geom_polygon(data=us_state_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"pink\") +\n  theme_map()\n\nus_plot\n\n\nlibrary(zipcodeR)\nzipcodeR::download_zip_data()\n\ngeo_codes<- zipcodeR::search_state(drought_short$state_abb)%>%\n  dplyr::select(major_city,county,state,lat,lng,\n         population,population_density,\n         land_area_in_sqmi,water_area_in_sqmi,\n         housing_units,occupied_housing_units,\n         median_home_value,median_household_income) %>%\n  drop_na()\n\ngeo_codes\n\n\nmy_geo_codes_df<-geo_codes%>%\n  dplyr::select(state,lat,lng)\n  \n\ndrought_short_map <- drought_short %>%\n  arrange(valid_start)%>%\n  mutate(year=lubridate::year(valid_start),\n         month=lubridate::month(valid_start))%>%\n  filter(str_detect(valid_start,\"2021\")) %>%\n  #filter(month==c(1,2,3)) %>%\n  group_by(month,state_abb,drought_lvl) %>%\n  summarize(med_area_pct=round(median(area_pct),2))%>%\n  ungroup() %>%\n  filter(!med_area_pct==0) %>%\n  left_join(my_geo_codes_df,by=c(\"state_abb\"=\"state\")) %>%\n  mutate(month = month.name[month])\n  \ndrought_short_map\n\n\nlibrary(extrafont)\nloadfonts()\nfonts()\n\ndroughts_family <- \"Roboto Condensed\"\n\n\ndrought_plot <- ggplot() +\n  geom_point(data=subset(drought_short_map,lat>25&lat<50),\n                         aes(x=lng,y=lat,color=drought_lvl),\n             alpha=0.5,size=.4) +\n  geom_polygon(data=us_county_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"lightblue\",size=0.2) +\n   geom_polygon(data=us_state_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"pink\",size=0.4) +\n  facet_wrap(~factor(month, levels=c('January','February','March','April',\n                                     'May','June','July'))) +\n  labs(title=\"\",\n       subtitle=\"\",\n       caption=\"US Droughts map: available values by County\\n Jan to July 2021\",\n       #tag = \"Jan to July 2021\",\n       color=\"Level\") +\n  scale_color_viridis(labels = intensity_impacts,discrete = TRUE) +\n  guides(color = guide_legend(override.aes = list(size = 3))) +\n  ggthemes::theme_map() +\n  theme(legend.position = \"top\",\n        legend.title = element_text(family = droughts_family),\n        legend.text = element_text(size=8,family =droughts_family),\n        legend.background = element_blank(),\n        legend.box.background = element_blank(),\n        legend.key = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(family = droughts_family),\n        plot.title =element_text(size=15,face=\"bold\",family =droughts_family,color=\"black\"),\n        plot.subtitle =element_text(size=12,face=\"bold\",family =droughts_family),\n        plot.caption =element_text(size=9,family =droughts_family,hjust = 0),\n        #plot.tag = element_text(size=9,face=\"bold\",family =droughts_family,hjust = 0),\n        plot.caption.position = \"panel\",\n        plot.title.position = \"panel\")\n  \n\n\n# drought_plot \n\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\n\ncooked_drought <- recipe(drought_lvl ~ med_area_pct+month + lat+lng +state_abb,drought_short_map) %>%\n  prep()%>%\n  bake(new_data=NULL)\n\ncooked_drought\n\n\ncooked_drought_plot <- cooked_drought%>%\n  group_by(drought_lvl,month) %>%\n  summarise(med_med_area_pct=median(med_area_pct)) %>%\n  mutate(month_f= case_when(month==\"January\"~1,\n                            month==\"February\"~2,\n                            month==\"March\"~3,\n                            month==\"April\"~4,\n                            month==\"May\"~5,\n                            month==\"June\"~6,\n                            month==\"July\"~7)) %>%\n\n  ggplot(aes(x=month_f,y=med_med_area_pct,fill=month)) +\n  geom_col()+\n  geom_text(aes(label=month),nudge_y = 1.5,size=1.5,family = droughts_family) +\n  geom_text(aes(label=med_med_area_pct),nudge_y = -1.5,size=1.5,color=\"white\") +\n  facet_wrap(~factor(drought_lvl,labels = intensity_impacts),\n             nrow = 1,ncol = 5,strip.position=\"bottom\",\n             scales = \"fixed\")+\n  scale_fill_viridis(discrete = TRUE) +\n  labs(y=\"\",\n       caption=\"Forecasted Droughts affected area pct median value by first 7 months of the year\")+\n  theme_void()+\n  theme(legend.position = \"none\",\n        plot.caption = element_text(family = droughts_family),\n        axis.text.x = element_blank(),\n        axis.ticks = element_blank(),\n        strip.placement = \"inside\",\n        strip.text = element_text(family = droughts_family,size=6),\n        plot.background = element_blank())\n\n\n  \n# cooked_drought_plot\n\n\nlibrary(cowplot)\n\n\ninset.plot <- cooked_drought_plot + theme(legend.position = \"none\")\n\ndouble_plot <- ggdraw() +\n  draw_plot(drought_plot,width = 1, height = 1) +\n  draw_plot(inset.plot, x = 0.39, y = .035, width = .55, height = .25)\n\n# double_plot\n\n\nlibrary(ggpubr)\nlibrary(ggimage)\n\n\ngraphics <- ggarrange(double_plot) \n\nannotation_plot <- annotate_figure(graphics,\n               top = text_grob(\"US droughts monitor condition outlook: \",color =c(\"#36648B\", \"#607B8B\", \"#668B8B\"), \n                               face = \"bold\", size = 30,family=droughts_family),\n               bottom = text_grob(\"DataViz: @fgazzelloni DataSource: \\n TidyTuesday week30, US Droughts,Drought Monitor,NYTimes & CNN\",\n                                  color = c(\"#36648B\", \"#607B8B\", \"#668B8B\"),family=droughts_family,\n                                  hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n               left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size=1),\n               right = text_grob(bquote(\"\"), color=c(\"#778899\"),rot = 90,size=1),\n               fig.lab = \"TidyTuesday week30\\n\", fig.lab.face = \"bold.italic\",fig.lab.size=7,\n               fig.lab.pos=\"bottom.right\"\n)\n\nfinal_plot <- annotation_plot +\n  annotate(geom = \"text\", label=\"map approximates drought-related impacts\",x = 0.7, y = 0.87, \n           colour = \"#BF3EFF\", size = 8,family=droughts_family) \n  \n\n# final_plot\n\n\nimg <- png::readPNG('NDMC-logo-usdm-opt.png')\nimg1 <- png::readPNG('DOC-logo-usdm.png')\nimg2 <- png::readPNG('NOAA-logo-usdm.png')\nimg3 <- png::readPNG('USDA-logo-usdm-opt.png')\n\n\nfinal <- ggdraw() +\n  draw_image(img,  x = -0.45, y = 0.44, scale = .10) +\n  draw_image(img1,  x = -0.38, y = 0.44, scale = .10) +\n  draw_image(img2,  x = 0.33, y = 0.44, scale = .10) +\n  draw_image(img3,  x = 0.42, y = 0.44, scale = .10) +\n  draw_plot(final_plot)\n\n# final\n\nSaving:\n\nragg::agg_png(here::here(\"w30\", \"w30_drought.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w26_public_park_access/w26_public_park_access.html",
    "href": "tidytuesday/cases2021/posts2021/w26_public_park_access/w26_public_park_access.html",
    "title": "US Public Parks",
    "section": "",
    "text": "Week 26 Public Parks\n\n\npoints for 14 measures across five categories: acreage, investment, amenities, access, and equity.\n\n\nOUTLIERS\n\n\nPARK INCLUSION CRITERIA\n\n# load libraries --------------\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(tidymodels)\ntidymodels_prefer()\n\nlibrary(forcats)\n\nlibrary(DataExplorer)\nlibrary(ggthemes)\nlibrary(hrbrthemes)\nlibrary(viridis)\nlibrary(extrafont)\n\nlibrary(showtext)\n#font_families_google()\nfont_add_google(\"Montserrat\",\"Montserrat\")\nshowtext.auto(enable = TRUE)\n\nlibrary(RColorBrewer)\nlibrary(ggwordcloud)\n\nlibrary(patchwork)\nlibrary(cowplot)\n\n\n# load data ------------------\ntuesdata <- tidytuesdayR::tt_load(2021, week = 26)\n\nparks <- tuesdata$parks\n\n\nhead(parks)\n\n# questions ------------\n\n# - how parks evolved within the years\n# - how many parks have a playground/sports amenities/dogpark/splashgrounds/general amenities/restrooms/benches\n# - has the parks size changed within the years\n# - how has the residents spending evolved\n# - what is the rank by cities\n\n\n# check of the data and tidy manipilation --------------------\nnames(parks)\nstr(parks)\n\nplyr::count(parks$year)\n\n# selecting the columns iwth just points as a measure to have omogeneous data, some of them are\n# on a 50 max scale and other on a 100 max scale, so if I want to used them all I would need to rescale\n# one of the two\n\n  \nminneapolis<-parks%>%\n  filter(city==\"Minneapolis\")\n\nmissing<-profile_missing(minneapolis)\n#View(missing)\nkableExtra::kable(skimr::skim(minneapolis)) %>% kableExtra::scroll_box(width = '100%')\n\nstr(minneapolis)\n\nminneapolis_long<-minneapolis%>%\n  pivot_longer(cols=c(6,8,10),names_to=\"data\",values_to=\"percent\")\n\nminneapolis_long$data2 = factor(minneapolis_long$data, \n                           levels=c(\"spend_per_resident_data\",\"park_pct_city_data\",\"pct_near_park_data\"))\n\nnew_labels=c(\"spend_per_resident_data\"=\"Spending\",\"park_pct_city_data\"=\"Park points\",\"pct_near_park_data\"=\"Neighborhood\")\n\n# first plot ----------------------------\nfirst<-ggplot(data=minneapolis_long,aes(x=year,y=percent,group=data2,colour=data2))+\n  geom_point(aes(size=total_pct))+\n  geom_line()+\n  geom_text(aes(label=percent),stat=\"identity\",vjust=-1.5,show.legend = F,size=2)+\n  guides(colour = FALSE, size = FALSE)+\n  scale_color_viridis(discrete=TRUE)+\n  labs(title=\"\\nPark spending, points, neighborhood\\n\",\n       # subtitle=\"\\n2012 - 2020\\n\",\n       caption=\"\",\n       colour=\"\",\n       # tag=\"The \\nTrust \\nfor \\nPublic \\nLand\",\n       x=seq(2012,2020,1), y=\"\")+\n  facet_wrap(~data2,labeller = labeller(data2=new_labels))+\n  theme_fivethirtyeight()+\n  theme(axis.text.x = element_text(angle=90,family=\"Montserrat\"),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(color=\"black\",family=\"Montserrat\"),\n        plot.title = element_text(family=\"Montserrat\",hjust = 0.5,size=12),\n        plot.subtitle = element_text(family=\"Montserrat\",hjust = 0.1),\n        # plot.tag = element_text(family=\"Montserrat\",size=10),\n        # plot.tag.position = c(0.05, 0.9),\n        #panel.grid = element_blank(),\n        #panel.grid.major = element_blank(),\n        #panel.grid.minor = element_blank(),\n        plot.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        strip.text.y  = element_text(family=\"Montserrat\"),\n        plot.margin = margin(0,0,0,0,unit=\"pt\"))\n\n\n#####################\n\nsub_minneapolis <- minneapolis%>%\n  filter(year==c(2020,2019,2018))%>%\n  select(city,matches(c(\"year\",\"rank\",\"points\")),-total_points)%>%\n  mutate(med_park_size_points=med_park_size_points/50*100,\n         park_pct_city_points=park_pct_city_points/50*100)%>%\n    group_by(year,rank,amenities_points)%>%\n   mutate(total= rowMeans(across(where(is.numeric))))%>%\n    ungroup()%>%\n  rename(c(\"Basketball\"=\"basketball_points\",\"Dogpark\"=\"dogpark_points\",\n           \"Playground\"=\"playground_points\",\"Recreation and senior centers\"=\"rec_sr_points\",\n           \"Splashground\"=\"splashground_points\",\"Restroom\"=\"restroom_points\"))\n  \n######################  \nmin=1\nmax=100\n\namenities_per_year <-minneapolis%>%\n  filter(year==c(2020,2019,2018))%>%\n  select(city,matches(c(\"year\",\"rank\",\"points\")),-total_points)%>%\n  rename(c(\"Basketball\"=\"basketball_points\",\"Dogpark\"=\"dogpark_points\",\n           \"Playground\"=\"playground_points\",\"Recreation and senior centers\"=\"rec_sr_points\",\n           \"Splashground\"=\"splashground_points\",\"Restroom\"=\"restroom_points\"))%>%\n    janitor::clean_names()%>%\n  mutate(basketball=basketball/10000*10000,\n         dogpark=dogpark/100000*10000,\n         playground=playground/10000*10000,\n         recreation_and_senior_centers=recreation_and_senior_centers/20000*10000,\n         restroom=restroom/100000*10000,\n         splashground=splashground/100000*10000)%>%\n    #select(8:13)%>%\n  pivot_longer(cols=c(8:13),names_to=\"data_points\",values_to=\"points\")%>%\n  select(year,data_points,points,amenities_points)%>%\n  group_by(data_points)%>%\n  mutate(#normalized = ((points-min(points))/(max(points)-min(points)))*100,\n         normalized100 = ((points-min)/(max-min)))%>%ungroup()\n\n\nnormalized_per_year_plot <- ggplot(data=amenities_per_year) +\n  geom_col(aes(x=data_points,y=normalized100,fill=factor(year),color=factor(year))) + \n  scale_color_viridis(discrete=TRUE,option=\"G\")  +\n    guides(color=FALSE)+\n    scale_fill_viridis(discrete=TRUE,option=\"G\") +\n  scale_x_discrete(label=c(\"Basketball\",\"Dogpark\",\"Playground\",\"Recreation\",\"Splashground\",\"Restroom\"))+\n    #annotate(\"text\",label=\"improvements\",x=2019.5,y=700,family=\"Montserrat\")+\n    labs(title=\"Amenities points Normalized100\",\n         #subtitle=\" 2018 - 2020 \",\n         caption=\"\",\n         fill=\"\",\n         color=\"\",\n         tag=\"\")+\n    theme_fivethirtyeight()+\n    theme(axis.ticks.x = element_line(size=2,color=\"red\"),\n          axis.text.x = element_text(family=\"Montserrat\",angle=20,size=5),\n          axis.text.y = element_text(family=\"Montserrat\"),\n          axis.ticks.y = element_blank(),\n          plot.title = element_text(family=\"Montserrat\",size=8),\n          plot.subtitle = element_text(family=\"Montserrat\",vjust=-0.5,hjust=0.3,size=10),\n          plot.caption = element_text(family=\"Montserrat\"),\n          plot.tag = element_text(family=\"Montserrat\",size=10),\n          plot.tag.position = c(0.08, 0.9),\n          plot.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n          panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n          legend.title = element_text(family=\"Montserrat\",hjust=0),\n          legend.background = element_blank(),\n          legend.position = \"top\",\n          legend.key.size = unit(0.3, 'cm'),\n          legend.text = element_text(family=\"Montserrat\",size=8),\n          plot.margin = margin(30,30,30,30,unit=\"pt\"))\n\n##########################   \n\n# sub_minneapolis%>%pivot_longer(cols=c(8:13),names_to=\"data_points\",values_to=\"points\")\n  \n# Level of Minneapolis park feautures  \namenities_per_year_plot <- ggplot(data=amenities_per_year,aes(x=year,y=points)) +\n  geom_col(aes(color=data_points,fill=data_points)) +\n  geom_smooth(aes(y = amenities_points),color=\"red\",method=\"lm\",formula = y ~ splines::bs(x, 5)) +\n  scale_color_viridis(discrete=TRUE)  +\n  guides(color=FALSE)+\n  scale_fill_viridis(discrete=TRUE,label=c(\"Basketball\",\"Dogpark\",\"Playground\",\"Recreation\",\"Splashground\",\"Restroom\")) +\n  labs(title=\"Amenities points by year\",\n       #subtitle=\"three years of points increase\",\n       caption=\"Viz @fgazzelloni DataSource: TidyTuesday week26 Public Park Access,TPL,CityLab\",\n       fill=\"\",\n       color=\"\"\n       #tag=\"Amenities points 2018-2020\"\n       )+\n  theme_fivethirtyeight() +\n  theme(axis.ticks.x = element_line(size=2,color=\"red\"),\n        axis.text.x = element_text(family=\"Montserrat\"),\n        axis.text.y = element_text(family=\"Montserrat\"),\n        axis.ticks.y = element_blank(),\n        plot.title = element_text(family=\"Montserrat\",size=8),\n        plot.subtitle = element_text(family=\"Montserrat\",vjust=-0.5,hjust=0.3,size=10),\n        plot.caption = element_text(family=\"Montserrat\",face=\"bold\"),\n        plot.tag = element_text(family=\"Montserrat\",size=10),\n        plot.tag.position = c(0.08, 0.9),\n        plot.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        legend.title = element_text(family=\"Montserrat\",hjust=0),\n        legend.background = element_blank(),\n        legend.text = element_text(family=\"Montserrat\",size=8),\n        legend.key.size = unit(0.3, 'cm'),\n        legend.position = \"top\",\n        plot.margin = margin(30,30,30,30,unit=\"pt\"))\n  \nsecond <- normalized_per_year_plot | amenities_per_year_plot\n\n\nthird<- ggplot()+\n  geom_blank() +\n  labs(title=\"Minneapolis\")+\n  theme_fivethirtyeight()+\n  theme(plot.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        plot.title = element_text(family=\"Montserrat\",color=\"yellow\"))\n\nfourth <- parks%>%\n  filter(rank<=10)%>%\n  mutate(city=case_when(city==\"Washington, DC\"~\"Washington, D.C.\",\n                                 TRUE~city))%>%\n  count(city)%>%\n  ggplot(aes(label=city,color=city))+\ngeom_text_wordcloud(family=\"Montserrat\") +\n  labs(title=\"Minneapolis ranked the first best 7 times between 2012 - 2020\",\n       tag=\"The \\nTrust \\nfor \\nPublic \\nLand\")+\n  theme_fivethirtyeight()+\n  theme(plot.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        plot.title = element_text(family=\"Montserrat\",size=12,hjust=0.5),\n        plot.tag = element_text(family=\"Montserrat\",size=10,color=\"white\"),\n        plot.tag.position = c(0.04, 0.9))\n \nlibrary(magick)\nlibrary(ggimage)\n\n\n\nimg = \"minneapolis_park.png\"\nthird<-ggbackground(third, img,alpha=.9)\n\none <-third/first \n\ntwo<-fourth/second\n\nfinal <-one|two\n\nbck_color <- \"#a1d99b\"\n\nfinal <- final + plot_annotation(\n  title = \"\\nMinneapolis Park improvment racing\\n\",\n  subtitle=\"'The Trust for Public Land creates parks and protects land for people, ensuring healthy, livable communities for generations to come' \",\n  theme = theme(\n    plot.margin = margin(10,10,10,10),\n    plot.background = element_rect(fill = bck_color, color = NA),\n    panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n    plot.title = element_text(family = \"Montserrat\",vjust=-0.5,face=\"bold\"),\n    plot.subtitle = element_text(family = \"Montserrat\"),\n    plot.caption = element_text(family = \"Montserrat\", size = 9, color = bck_color, \n                                margin = margin(15,0,0,0), hjust = 0.95)\n  )\n)\n\nfinal_plot <- stamp(final,label=\"#TidyTuesday week 26\",color=\"red\",alpha = 1,\n      vjust = 1.8,\n      hjust = 1.2,\n      size = 14,\n      family = \"Montserrat\",\n      fontface = \"bold\",\n      clip = \"on\")\n\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w26\",\"w26_parks.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w22_mario_kart_world/w22_mario_kart_world.html",
    "href": "tidytuesday/cases2021/posts2021/w22_mario_kart_world/w22_mario_kart_world.html",
    "title": "Mario Kart World",
    "section": "",
    "text": "Mario Bross\n\n# https://mkwrs.com/\n# https://www.thegamer.com/mario-kart-64-speedrunner-is-the-first-to-hit-a-190000-trick-breaks-two-world-records-at-once/\n\n\nlibrary(ggcorrplot)\n\n\nlibrary(tidytuesdayR)\nlibrary(rtweet)\nlibrary(DataExplorer)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(viridis)\nlibrary(ggthemes)\nlibrary(extrafont)\nlibrary(hrbrthemes)\nlibrary(ggExtra)\nlibrary(ggtext)\nlibrary(ggrepel)\nlibrary(extrafont)\nlibrary(patchwork)\n# fonts()\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 22)\n\ndrivers <- tuesdata$drivers\nrecords <- tuesdata$records\n\ndriv_players<-plyr::count(drivers$player)\nplayers<-driv_players$x\n\nmy_df <- records%>%\n  arrange(player)%>%\n  filter(player%in%players)%>%\n  mutate(year=year(date))%>%\n  inner_join(drivers,by=c(\"player\",\"year\"))%>%\n  drop_na()\n\nsecond_plot\n\nlibrary(RColorBrewer)\ndisplay.brewer.all()\n\n\n\nplot<-ggplot(my_df,aes(x=date,y=records))+\n  geom_point(aes(group=track,color=system_played,size=record_duration),alpha=0.5)+\n  geom_smooth(color=\"purple\")+\n  scale_color_wsj()+\n  labs(title=\"How did the world records develop over time?\",\n       size=\"Record duration(days)\",\n       color=\"System played\")+\n  xlab(\"World record date(Year)\")+\n  ylab(\"Number of world records\")+\n  theme_wsj()+\n  theme(panel.background = element_blank(),\n        plot.background = element_blank(),\n        legend.title = element_text(size=12),\n        legend.background = element_blank(),\n        legend.key = element_rect(fill=NA),\n        legend.text = element_text(size=12,face=\"bold\"),\n        legend.box.margin = margin(6, 6, 6, 6),\n        plot.title.position = \"plot\",\n        plot.title = element_text(hjust=0,vjust=-1,size=28,color=\"darkblue\"),\n        axis.title = element_text(size=18,color=\"darkred\",face=\"bold\"),\n        panel.grid = element_line(color=\"white\"),\n        panel.grid.major.y = element_blank())\n\n\nplot<-ggMarginal(plot,\n           type=\"histogram\",color=\"blue\",xparams = list(bins=40),\n           fill = \"darkred\", yparams = list(bins=30))\n\n\n\nlabels <-\n  tibble(\n    labels = c(\n      \"<img src='super_mario_run_character_artwork.png'\n      +     width='120' /><br><b style='color:#d6182e'> </b><br><i style='color:#d6182e'> </i></b>\"),\n    x = 1:5,\n    y = rep(1, 5)\n    )\n\nlegend <-\n  ggplot(labels, aes(x, y)) +\n  geom_richtext(aes(label = labels),\n                fill = NA,\n                color = NA,\n                vjust = 0.5) +\n  annotate(\"text\", x = 3.5, y = 1.018,\n           label = \"Mario Kart World Records\",\n           size = 20,color=\"red\",\n           fontface = \"bold\",\n           family = \"Courier New\") +\n  scale_x_continuous(limits = c(0.6, 6.1)) +\n  scale_y_continuous(limits =  c(1, 1.02)) +\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#ebe046\"),\n        plot.margin = unit(c(1,1,0,1), \"cm\"))\n\ncaption <-\n  ggplot(data.frame(x = 1:2, y = 1:10)) +\n  labs(x = NULL, y = NULL,\n       caption = \"Viz @fgazzelloni| Source: Mario Kart World Records | TidyTuesday Week 22\")+\n  theme(line = element_blank(),\n        plot.caption = element_text(size=8, family=\"Courier New\",color=\"#460046\",face=\"bold\"),\n        panel.background = element_rect(fill = \"transparent\"),\n        plot.background = element_rect(fill = \"transparent\",color = \"transparent\"),\n        panel.border = element_rect(color = \"transparent\"),\n        axis.text = element_blank())\n\n\n \n\n###################### SAVING ############################\n\n\n\nfinal <- legend + plot  + caption + \n  plot_layout(ncol = 1,heights = c(0.3, 1, 0))\n\nragg::agg_png(here::here(\"w22\",\"w22_supermario.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"super_mario_w22.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"super_mario_w22.png\",\n            format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w20_us_broadband/w20_us_broadband.html",
    "href": "tidytuesday/cases2021/posts2021/w20_us_broadband/w20_us_broadband.html",
    "title": "US Broadband",
    "section": "",
    "text": "# Week 20 US Broadband\n# source of data:\n# https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-05-11/readme.md\n# https://github.com/microsoft/USBroadbandUsagePercentages\n\n# load libraries ------------------------------------\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(DataExplorer)\n\nlibrary(zipcodeR)\nlibrary(janitor)\nlibrary(stringr)\n\n\n# load data -----------------------------------\ntuesdata <- tidytuesdayR::tt_load(2021, week = 20)\n\nbroadband <- tuesdata$broadband\nbroadband_zipcode <- tuesdata$broadband_zip\n\n#broadband_zipcode<-read.csv(\"https://raw.githubusercontent.com/microsoft/USBroadbandUsagePercentages/master/dataset/broadband_data_zipcode.csv\")\n# contains mean absolute error (MAE), mean signed deviation (MSD)\n\n# check missing data and str------------------------------\nprofile_missing(broadband);head(broadband)\nprofile_missing(broadband_zipcode);head(broadband_zipcode)\n\nstr(broadband);dim(broadband)\nstr(broadband_zipcode);dim(broadband_zipcode)\n\n\n# data wrangling -------------------------------\nnames(broadband)<-make.names(tolower(names(broadband)))\nnames(broadband_zipcode)<-make.names(tolower(names(broadband_zipcode)))\n\nbroadband%>%filter(str_detect(\"-\",broadband$broadband.availability.per.fcc))\nbroadband$broadband.availability.per.fcc[broadband$broadband.availability.per.fcc==\"-\"]<-\"0\"\nbroadband$broadband.availability.per.fcc<-as.double(broadband$broadband.availability.per.fcc)\n\nbroadband%>%arrange(broadband.usage)\nbroadband$broadband.usage[broadband$broadband.usage==\"-\"]<-\"0\"\nbroadband$broadband.usage<-as.double(broadband$broadband.usage)\n\n###########################################################\n\nbroadband <- broadband %>%\n  mutate(county.name=sub(\" County\",\"\",county.name)) %>%\n  separate(county.id,into=c(\"state.id\",\"county.id\"),sep=-3) %>%\n  mutate(county.name = case_when(\n    county.name==\"LaSalle Parish\" ~ \"La Salle Parish\",\n    TRUE~county.name))\n\n# separate the county.id by state and county---------------\n  broadband_zipcode <- broadband_zipcode %>%\n  separate(county.id,into=c(\"state.id\",\"county.id\"),sep=-3)\n\n\n#####################################\n# in broadband_zipcode\n# some postal codes are made of 4 digits, to use \"geocode_zip\"\n# need 5 digits, so add a zero at the begin of the string\n\n# plyr::count(sprintf(\"%05d\", broadband_zipcode$postal.code))\n\nbroadband_zipcode$postal.code<-sprintf(\"%05d\", broadband_zipcode$postal.code)\n\n# broadband%>%filter(str_detect(county.name,\"Bedford\"))\n\n\n##################################################\n# make a unified dataset with broadband, postal codes and geodada------------------------------\nmy_df <- broadband%>%\n  full_join(broadband_zipcode, by= c(\"st\",\"state.id\",\"county.id\"))%>%\n  select(1,2,3,7,8,5,6,9:12) %>%\n  drop_na()\n\n\nnames(my_df)<-c(\"st\",\"state.id\",\"county.id\",\"county.name\",\"postal.code\",\"brd.available\",\"usage.1119\",\"usage.1020\",\"mae\",\"alpha\",\"msd\")\n\nhead(my_df);dim(my_df)\n\n\n#########################################\n# check of the counties in the data sets ----------\nc$county.name.x[!c$county.name.x%in%d$county.name.y]\nd$county.name.y[!d$county.name.y%in%c$county.name.x]\n\nss<-broadband%>%\n  full_join(broadband_zipcode, by= c(\"st\",\"state.id\",\"county.id\")) %>%\n  filter(county.name.x %in% c(\"Bedford city\",\n                              \"Covington city\",\n                              \"Emporia city\",\n                              \"Fairfax city\",\n                              \"Kusilvak Census Area\",\n                              \"Lexington city\",\n                              \"Manassas Park city\",\n                              \"Martinsville city\",\n                              \"Oglala\",\n                              \"Otter Tail\")) %>%\n  group_by(st,state.id,county.id) %>%\n  summarize(unique(county.name.x),unique(county.name.y),unique(postal.code))\n####################################\n\n\n# make a new column with y/n broadband in the county\nmy_df <- my_df %>%\n  mutate(broadband.id=ifelse(brd.available==0,\"no\",\"yes\"))\n\n\n# find the geocodes with postal codes -------------------\ngeocode_zip<-geocode_zip(my_df$postal.code)\n\n\n# add the geocodes------------------------------\ns<-my_df%>%\n  inner_join(geocode_zip,by=c(\"postal.code\"=\"zipcode\"))%>%\n  unite(\"id\",state.id:county.id,sep= \"\")\n\n\n# load the libraries for plotting ---------------------\nlibrary(sf)\nlibrary(raster)\nlibrary(spData)\nlibrary(spDataLarge)\n\nlibrary(maps)\nlibrary(viridis)\nlibrary(ggthemes)\nlibrary(RColorBrewer)\n\n# add font to mac---\nlibrary(showtext)\nlibrary(extrafont)\n#font_import(pattern=\"world of water\")\nloadfonts()\nfonts()\n\n# mapping --------------------------------\n\nmypalette<-display.brewer.pal(7,\"BrBG\")\nus_county_map <- map_data(\"county\")\n\nfinal_plot<-ggplot()+\n  geom_polygon(data=us_county_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"lightblue\")+\n  geom_point(data=subset(s,lat>25&lat<50),\n             aes(x=lng,y=lat, group =st,color=brd.available),\n             alpha=0.3,size=0.5)+\n  scale_color_viridis(labels = scales::percent)+\n  labs(title=\"America's Broadband\",\n       subtitle=\"available values by County\",\n       caption=\"Viz. Federica Gazzelloni | US Broadband,Microsoft GitHub,The Verge | TidyTuesday week20\",\n       color=\"\")+\n  theme_map()+\n  theme(plot.title =element_text(size=40,face=\"bold\",family =\"Courier New\",color=\"black\"),\n        plot.subtitle =element_text(size=25,face=\"bold\",family =\"Courier New\"),\n        plot.caption =element_text(size=9,face=\"bold\",family =\"Courier New\"),\n        plot.title.position = \"panel\",\n        plot.margin = margin(5,5,5,5),\n        legend.text = element_text(size=8,family =\"Courier New\"))\n\n\n################################################################################\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"tidytuesday_Broadband.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################ \nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"tidytuesday_Broadband.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_Broadband.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w43_big_pumpkins/w43_big_pumpkins.html",
    "href": "tidytuesday/cases2021/posts2021/w43_big_pumpkins/w43_big_pumpkins.html",
    "title": "Big Pumpkins",
    "section": "",
    "text": "final week 43 Pumpkins\nrm(list=ls())\n\n# Libraries-----\nlibrary(tidyverse)\nlibrary(extrafont)\nlibrary(showtext)\nshowtext_opts(dpi = 320)\nshowtext_auto(enable=T)\nfont_add_google(\"Eater\",\"Eater\")\n\n\n# Data-----\npumpkins <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-19/pumpkins.csv')\n\n\n# Data wrangling-------\ndf <- pumpkins%>% #\n  filter(!str_detect(state_prov,\"Entries\")) %>%\n  filter(!country==\"Unknown country\") %>%\n  separate(id,into=c(\"year\",\"type\")) %>%\n  mutate(#place=as.integer(place),\n    year=as.integer(year),\n    pct_chart=as.double(pct_chart))%>%\n  mutate(type = factor(type,labels=c(\"F\"=\"Field Pumpkins\",\n                                     \"L\"=\"Long Gourds\",\n                                     \"P\"=\"Pumpkins\",\n                                     \"S\"=\"Squash\",\n                                     \"T\"=\"Tomato\",\n                                     \"W\"=\"Watermelon\"))) %>%\n  count(place,year,type,country,weight_lbs,ott,est_weight,pct_chart,sort=T) %>%\n  mutate(weight_lbs=as.factor(weight_lbs),\n         weight_lbs=as.double(weight_lbs),\n         est_weight=as.factor(est_weight),\n         est_weight=as.double(est_weight),\n         ott=as.factor(ott),\n         ott=as.numeric(ott)) %>%\n  filter(!ott==0) %>%\n  mutate(pct_weight=round(sum(weight_lbs),2),\n         pct_weight=round(weight_lbs/pct_weight*100,2),\n         .after=pct_chart) %>%\n  # I added this new information, so I need to re-run all the models\n  mutate(base=median(weight_lbs[year==2013]),\n         w_ratio=weight_lbs/base) %>% #head\n  arrange(year) %>%\n  select(-n,-base) # %>%count(year,w_ratio)\n\n\n# Set the df for plotting\nmed_ratios <- df%>%\n  filter(type==\"Pumpkins\")%>%\n  filter(year%in%c(\"2013\",\"2020\"))%>%\n  arrange(w_ratio) %>%\n  filter(!country%in%c(\"The Netherlands\",\"Spain\",\"Belgium\",\"Poland\",\"Portugal\"))%>%\n  group_by(country,year) %>%\n  summarize(median_w_ratio=round(median(w_ratio),2))%>%\n  ungroup()%>%\n  pivot_wider(names_from=year,values_from=median_w_ratio)%>%\n  arrange(2013,2020)\n\n# find the values for the secondary axis\nmy_y_axis <- df %>%\n  left_join(med_ratios,by=\"country\")%>%\n  mutate(country_ratio_13=paste0(`2013`,\"-\",country),\n         country_ratio_20=paste0(country,\"-\",`2020`),\n                                 .after=\"country\") \n\nmy_sec_y_axis <- c(\"Italy-0.78\",\"United Kingdom-0.97\",\n                   \"Germany-0.99\",\"United States-0.84\",\n                   \"Finland-0.96\",\"Japan-1.17\",\n                   \"Austria-0.96\",\"Canada-0.87\",\n                   \"Slovenia-1.21\",\"Switzerland-1.42\",\"France-1.13\")\n\nmy_sec_y_axis<- as.factor(my_sec_y_axis)\nmy_sec_y_axis <- rev(my_sec_y_axis)\n\n\n\n# violin plot\nfinal <- my_y_axis%>%\n  filter(type==\"Pumpkins\")%>%\n  filter(year%in%c(\"2013\",\"2020\"))%>%\n  arrange(w_ratio) %>%\n  filter(!country%in%c(\"The Netherlands\",\"Spain\",\"Belgium\",\"Poland\",\"Portugal\"))%>%\n  ggplot(aes(x=(w_ratio),y=fct_reorder(country_ratio_13,-(w_ratio)),group=country)) +\n  geom_jitter(shape=\".\",color=\"gold\")+\n  geom_violin(fill= \"darkorange\", color=\"darkgreen\",alpha=0.8,size=0.3)+\n  geom_boxplot(width=0.1,outlier.colour = NA,fill=\"sandybrown\",color=NA)+\n  scale_color_manual(values=c(\"green\",\"pink\"))+\n  scale_x_discrete(expand = expansion(mult = c(0, .1)))+\n  facet_wrap(~year)+\n  # from: https://cran.r-project.org/web/packages/ggh4x/vignettes/PositionGuides.html\n  guides(y = guide_axis_manual( label_size = c(12, 8)),\n    y.sec = guide_axis_manual(labels = my_sec_y_axis, label_size = c(12,8)))+\n  #label_colour = c(\"gold\", \"blue\")\n  labs(title=\"Pumpkins variability weights\",\n       subtitle=\"on selected countries 2013-2020\",\n       x=\"Ratios (Base 2013)\",y=\"Selected Countries\")+\n  theme(axis.text.x = element_text(angle=0))+\n  ggthemes::theme_solarized() +\n  theme(text = element_text(family=\"Eater\"),\n        strip.background = element_blank(),\n        strip.text = element_text(color=\"gold\",face=\"bold\",size=16),\n        plot.background = element_rect(fill=\"grey33\",color=\"grey33\"),\n        plot.title = element_text(color=\"gold\",face=\"bold\",size=34),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_text(color=\"springgreen4\"),\n        panel.background = element_rect(fill=\"grey33\",color=\"grey33\"),\n        axis.text.y = element_text(color=\"gold\",face=\"bold\"),\n        axis.title.y = element_blank(),\n        axis.title.x = element_text(color=\"gold\",face=\"bold\",family=\"Eater\",hjust=0.5),\n        axis.line.x = element_blank(),\n        axis.text.x = element_text(color=\"gold\",face=\"bold\",size=8),\n        axis.ticks.x = element_line(color=\"gold\",size=2),\n        plot.margin = margin(0.5,1,1.2,1,\"cm\"),\n        panel.spacing=unit(0, \"lines\"))\n\n\n# frame the plot\nlibrary(ggpubr)\ngraphics <- ggarrange(final)\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"\",\n                                              color = c(\"grey28\"), face = \"bold\", size = 3,\n                                              family = \"Eater\"),\n                              left = text_grob(\" \",\n                                               color = c(\"grey28\"), face = \"bold\", size = 5,\n                                               family = \"Eater\"),\n                              right = text_grob(\" \",\n                                                color = c(\"grey28\"), face = \"bold\", size = 10,\n                                                family = \"Eater\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: BigPumpkins - GPW - TidyTuesday week43\\n\",\n                                                 color = \"grey28\",family = \"Eater\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 13)\n)\n\n#source: BigPumpkins.com    Great Pumpkin Commonwealth\n\n# add annotations\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label = \"talking about Pumpkins\",\n           x = 0.75, y = 0.1,colour = \"gold\",size = 6,\n           family = \"Eater\",fontface = \"bold\") +\n  annotate(geom = \"text\", label = \"88% median value\",\n           x = 0.5, y = 0.85,colour = \"gold\",size = 6,\n           family = \"Eater\",fontface = \"bold\") +\n  annotate(geom = \"curve\",curvature=-0.2,\n           x = 0.6, xend=0.4, y = 0.7,yend=0.8,\n           colour = \"gold\",size = 1,\n           arrow=arrow(length=unit(0.03,\"npc\")))+\n  annotate(geom = \"text\", label = \"decreased in variability\",\n           x = 0.7, y = 0.7,colour = \"gold\",size = 3,\n           family = \"Eater\",fontface = \"bold\")\n\n\n\nlibrary(cowplot)\nlibrary(ggimage)\nlibrary(magick)\n\n# add the images for the legend keys\nimgpump <- image_read(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w43/GPCMedium512.png\")\nimgtt <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>% image_resize(\"300x300\")\n\n\n# ggdraw from {cowplot} draw the plot for setting the background colors of the side annotations\nfinal <- cowplot::ggdraw(final_plot) +\n  draw_image(imgtt, x = 0.8, y = 0.4,width = 0.15) +\n  draw_image(imgpump, x = 0.9, y = -0.45,width = 0.06) +\n  theme(plot.background = element_rect(fill = \"orange\",color = \"gold\"))\n\n\n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w43/pumpkins.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w49_world_cup_cricket/w49_world_cup_cricket.html",
    "href": "tidytuesday/cases2021/posts2021/w49_world_cup_cricket/w49_world_cup_cricket.html",
    "title": "World Cup Cricket",
    "section": "",
    "text": "TidyTuesday week49 Cricket author: Federica Gazzelloni\n\nrm(list=ls())\n# libraries----------\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(extrafont)\nloadfonts()\nlibrary(xkcd)\n\nmatches <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-11-30/matches.csv')\n\n# matches%>%View\n\n# data wrangling------------\n# 113 ground, 109 ground_city, 21 ground_country\nmatches <- matches%>% # count(ground,ground_city,ground_country)%>%View\n  mutate(date=lubridate::mdy(match_date))%>%\n  filter(!date==is.na(date)) %>% \n  mutate(points=ifelse(winner==team1,score_team1,score_team2),\n         year=lubridate::year(date))\n\n# exploratory data analysis----------\n# points plot\npoints_yr<-matches %>% # count(date,winner)\n  ggplot(aes(x=(date),y=points))+\n  geom_point(aes(color=factor(year)),show.legend = F,shape=\".\")+\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\")+\n  geom_smooth(size=0.2)+\n  theme_xkcd()+\n  labs(x=\"Years\",y=\"Points rating\",\n       title=\"Points by Years\",\n       caption = \"Observed Values\")+\n  theme(text = element_text(size=12),\n        panel.grid.minor.x = element_line(size=6,color=\"darkseagreen3\"),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size=14),\n        axis.line = element_line(),\n        axis.text.x = element_text(size=7,angle = 15))\n\n# time series | for extra plots------------\n# model sesonality \npr_df<- matches%>%select(ds=date,y=points)\nlibrary(prophet)\nm <-prophet(pr_df)\nfuture <- prophet::make_future_dataframe(m, periods=365)\nforecast <- predict(m,future)\n# tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])\n\nforecast%>%\n  mutate(ds=as.Date(ds,\"%Y-%m-%d\"))%>%\n  ggplot(aes(ds,yhat))+\n  geom_point(data=pr_df,aes(x=ds,y=y),size=0.05)+ # original data\n  geom_line(aes(x=ds,y=yhat_upper),size=0.03)+\n  geom_line(aes(x=ds,y=yhat_lower),size=0.03)+\n  geom_line(col=\"violet\",size=0.5)+\n  geom_smooth()\n\nprophet_plot_components(m, forecast)\n\n# week_trend plot\nweek_trend<- forecast%>%\n  mutate(day=lubridate::wday(ds,label = T,abbr = T,\n                             week_start = getOption(\"lubridate.week.start\", 7),\n                             locale = Sys.getlocale(\"LC_TIME\")),\n         .after=ds) %>%\n  select(ds,day,weekly,yearly,trend) %>%\n  \n  ggplot(aes(x=day,y=weekly,group = 1))+\n  geom_line(color=\"black\")+\n  theme_xkcd()+\n  labs(x=\"Weekdays\",y=\"Points rating\",\n       title=\"Days of the week with higher points\",\n       caption = \"Prophet Time Series\")+\n  theme(text = element_text(size=12),\n        plot.background = element_blank(),\n        plot.title = element_text(size=14),\n        axis.line = element_line(),\n        axis.text.x = element_text(size=8))\n\n\n# flags----------\n# add country code\nlibrary(ggflags)\nlibrary(countrycode)\n#countrycode::codelist_panel%>%View\ncountrycode::codelist%>%filter(str_detect(country.name.en,\"United\"))\n# countrycode::countrycode(matches)\nlibrary(maps)\n\nmatches%>%\n  select(date,year,winner,points,ground,ground_city,ground_country,match_date)%>%\n  mutate(country_code = countrycode(ground_country, \n                                    origin = 'country.name', \n                                    destination = 'iso2c'),\n         country_code=tolower(country_code))\n\n# not matched unambiguously England, Midlothian, Wales, West Indies\n# England, Midlothian, Wales == United Kingdom\n# West Indies ?\nambiguous_values <- matches%>%\n  select(ground,ground_city,ground_country)%>%\n  filter(ground_country==\"West Indies\")%>%\n  count(ground,ground_city,ground_country)\n\nmy_missing_cities<- ambiguous_values%>%\n  pull(ground_city)%>%\n  unlist()\n\n\nflags_df <- matches%>% #count(ground_country)\n  select(date,year,winner,points,ground,ground_city,ground_country,match_date)%>%\n  mutate(country=case_when(ground_country==\"England\"~\"United Kingdom\",\n                                  ground_country==\"Midlothian\"~\"United Kingdom\",\n                                  ground_country==\"Wales\"~\"United Kingdom\",\n                                  TRUE~ground_country))%>%\n  mutate(country=case_when(ground_city==\"Bridgetown\"~\"Barbados\",\n                           ground_city==\"Gros Islet\"~\"Saint Lucia\",\n                           ground_city==\"Kingston\"~\"Jamaica\",\n                           ground_city==\"Port of Spain\"~\"Trinidad and Tobago\",\n                           ground_city==\"Arnos Vale\"~\"Saint Vincent e Grenadine\",\n                           ground_city==\"St John's\"~\"Antigua e Barbuda\",\n                           TRUE~country))%>%\n  mutate(country_code = countrycode(country, \n                                    origin = 'country.name', \n                                    destination = 'iso2c'),\n         country_code=tolower(country_code),.after=winner)\n\n\n# ground country winners dataset--------\nworld1_geo<- rnaturalearth::ne_countries(scale=110,\n                                         returnclass = \"sf\")\n\n\nworld1_geo <- world1_geo%>%filter(!name==c(\"Antarctica\",\"Fr. S. Antarctic Lands\"))\n\npolygon_df <- matches%>%\n  left_join(world1_geo,by=c(\"ground_country\"=\"name\"))%>%\n  select(date,year,points,winner,ground_country,geometry)\n\n# centroids and coords with spData::world-----\nworld2_geo<- spData::world\nworld2_ctr<- st_centroid(world2_geo)\nworld2_ctr_coords<- st_coordinates(world2_ctr)%>%\n  as.data.frame()\n\ncountries <- matches$ground_country\n\nworld2_ctr_coords_my_countries<-cbind(world2_ctr_coords,ground_country=world2_geo$name_long)%>%\n  filter(ground_country%in%countries)%>%\n  left_join(polygon_df%>%select(year,ground_country,winner,points),by=\"ground_country\")\n\n# flags data sets\nflags_df_coords<- flags_df%>%\n  inner_join(world2_ctr_coords_my_countries,by=c(\"ground_country\",\"year\",\"winner\",\"points\"))\n\n# this set will be used\nflags_df_coords2<- flags_df_coords%>%count(country_code,X,Y)\n\n\n\n# map plot----------------\n  # world polygons\nmap_plot <- ggplot(world2_ctr_coords_my_countries)+\n  geom_sf(data=world1_geo,\n          aes(geometry=geometry),\n          fill=\"#f0ebc7\",size=0.2) +\n  # my polygons\n  geom_sf(data=polygon_df,\n          aes(geometry=geometry),color=\"red\",\n          fill=\"#d9ed53\",\n          show.legend = F) +\n  # polygons centroids\n  geom_point(data=world2_ctr_coords,\n             aes(x=X,y=Y),shape=\".\") +\n  # my polygons centroids\n  geom_point(data=world2_ctr_coords_my_countries,\n             aes(x=X,y=Y),size=0.3,color=\"red\") +\n  # my country names\n  geom_text(data=world2_ctr_coords_my_countries%>%  #count(ground_country)\n             filter(!ground_country%in%c(\"Ireland\",\n                                      \"United Arab Emirates\",\n                                      \"Bangladesh\")),\n            aes(x=X,y=Y,label=ground_country),\n            check_overlap = F,\n            vjust=-1.5,hjust=0.5,family=\"Roboto Condensed\") +\n  # flags\n  ggflags::geom_flag(data=flags_df_coords2,\n                     aes(x=X,y=Y,country=country_code), size=4.5) +\n  coord_sf()+\n  ggthemes::theme_map() +\n  theme(text = element_text(family=\"Roboto Condensed\"),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(face=\"bold\"))\n\n# green background plot------------\nbackround_plot<- ggplot()+\n  geom_blank()+\n  ggthemes::theme_map() +\n  theme(plot.background = element_rect(fill=\"darkseagreen3\",color=\"#42f59b\"),\n        panel.background = element_rect(fill=\"darkseagreen3\",color=\"#42f59b\"))\n  \n\n# draw plot------------\nlibrary(cowplot)\nfinal<- ggdraw()+\n  #plot background\n  draw_image(\"R_general_resources/TidyTuesday/TidyTuesday/w49_world_cup_cricket/ball.jpg\",\n             x=0,y=0,scale=1)+\n  draw_image(\"R_general_resources/TidyTuesday/TidyTuesday/w49_world_cup_cricket/ball.jpg\",\n             x=0.4,y=0.4,scale=0.2,width = 1,height = 0.98)+\n  draw_plot(backround_plot,width=1,heigh=0.75,x=0,y=0.1) +\n  # main playing area\n  draw_line(x=c(0.05,0.95),y=c(0.5,0.5),\n            size=90,color=\"#a8e657\",alpha=0.4)+\n  # map with extra labels\n  draw_plot(map_plot) +\n  draw_label(\"Ireland\",x=0.45,y=0.68,size=10,color=\"black\")+\n  draw_label(\"United Arab Emirates\",x=0.57,y=0.58,size=10,color=\"black\")+\n  draw_label(\"Bangladesh\",x=0.7,y=0.57,size=10,color=\"black\")+\n  # red lines \n  draw_line(x=c(0.05,0.05),y=c(0.33,0.665),\n            size=0.2,color=\"red\",alpha=1)+\n  draw_line(x=c(0.95,0.95),y=c(0.33,0.665),\n            size=0.2,color=\"red\",alpha=1)+\n  # crease: popping crease\n  draw_label(\"Popping Crease\",x=0.19,y=0.28,size=12)+\n  draw_line(x=c(0.19,0.18),y=c(0.29,0.37),size=0.4,color=\"red\")+\n  draw_line(x=c(0.18,0.18),y=c(0.38,0.635),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.82,0.82),y=c(0.38,0.635),\n            size=0.5,color=\"white\",alpha=1)+\n  # crease: return crease\n  draw_label(\"Return Crease\",x=0.138,y=0.32,size=12)+\n  draw_line(x=c(0.17,0.15),y=c(0.33,0.42),size=0.4,color=\"red\")+\n  draw_line(x=c(0.05,0.18),y=c(0.42,0.42),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.82,0.95),y=c(0.42,0.42),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.05,0.18),y=c(0.6,0.6),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.82,0.95),y=c(0.6,0.6),\n            size=0.5,color=\"white\",alpha=1)+\n  # crease: bowling crease\n  draw_label(\"Bowling Crease\",x=0.126,y=0.62,size=12)+\n  draw_line(x=c(0.13,0.15),y=c(0.61,0.58),size=0.4,color=\"red\")+\n  draw_line(x=c(0.15,0.15),y=c(0.42,0.6),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.85,0.85),y=c(0.42,0.6),\n            size=0.5,color=\"white\",alpha=1) + \n  draw_plot(week_trend,x=0.25,y=-0.3,scale=0.2,width=1,heigh=1)+\n  draw_plot(points_yr,x=0.01,y=-0.3,scale=0.2,width=1,heigh=1)+\n  # title & caption\n  draw_label(\"Cricket Ground Country Winners \\n1996-2005\",\n             x=0.4,y=0.93,size=34,fontfamily=\"Impact\",\n             fontface=\"bold\")+\n  draw_label(\"Datasource: World Cup Cricket | ESPN Cricinfo\\n#TidyTuesday w49\\nInfographics: Federica Gazzelloni\",\n             x=0.82,y=0.05,size=12,fontfamily=\"Impact\",\n             fontface=\"plain\")\n\n\n# save the plot---------\nragg::agg_png(here::here(\"TidyTuesday/w49/cricket.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w38_billboard/w38_billboard.html",
    "href": "tidytuesday/cases2021/posts2021/w38_billboard/w38_billboard.html",
    "title": "Billboard",
    "section": "",
    "text": "Load libraries:\n\nlibrary(tidyverse)\n\nLoad data:\n\nbillboard <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv')\naudio_features <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/audio_features.csv')\n\nData wrangling and saving data on a csv file:\n\nmy_df <- billboard %>%left_join(audio_features,by=c(\"song\",\"song_id\",\"performer\"))%>%\n  select(-url,-instance,-key,-mode,-valence,-tempo,-time_signature,-previous_week_position,-starts_with(\"spotify\"))\n\n#write_csv(my_df,here::here(\"w38/my_df.csv\"))\nmy_df <- read.csv(here::here(\"w38/my_df.csv\"))\n\nmy_df\n\nI’d like to study the “speackness” variable:\n\nsummary(my_df$speechiness)\n\nDataExplorer::profile_missing(my_df)\n\nSome values are missing (about 13% of the total), we leave them out for this visualization.\n\nmy_df <- my_df%>%drop_na(speechiness)\n\nLoad fonts to use in the theme():\n\nlibrary(extrafont)\n#fonts()\n\nMake a plot:\n\nplot <- my_df %>%#pull(peak_position)%>%summary(peak_position)\n  mutate(speechiness_class=case_when(speechiness<=0.33~\"Most likely music\",\n                                            speechiness>0.33&speechiness<=0.66~\"Contain music and speech\",\n                                            speechiness>0.66&speechiness<=0.75~\"Probably spoken words\",\n                                            speechiness>0.75~\"Exclusively speech-like\"))%>%\n  mutate(peak_position_class=case_when(peak_position<=15~\"low\",\n                                            peak_position>15&peak_position<=30~\"medium\",\n                                            peak_position>30&peak_position<=50~\"high\",\n                                            peak_position>=50~\"top\"))%>%\n  \n  ggplot(aes(x=-log10(speechiness)))+ #aes(x=speechiness))+\n  geom_histogram(binwidth=0.03,aes(color=factor(peak_position_class),fill=factor(peak_position_class)))+\n  #guides(color=\"none\",fill=\"none\")+\n  #scale_x_reverse()+\n  labs(subtitle=\"The Billboard Hot 100 is the music industry standard record chart in the United States for songs, \\npublished weekly by Billboard magazine. (Billboard Top 100 - Wikipedia)\\nCharts show the `Speechiness` distributions based on peak positions on radio play, and online streaming in the United States.\\n\",\n       color=\"Peak position\",fill=\"Peak position\",\n       x=\"Speechiness values (Log10-tranformation)\",y=\"\")+\n  facet_wrap(~speechiness_class,scales=\"free\")+\n  theme(text = element_text(family=\"Luminari\",color=\"midnightblue\",face = \"bold\"),\n        plot.subtitle = element_text(family=\"Luminari\",color=\"midnightblue\",size=14,vjust=-0.5),\n        legend.position = \"top\", #c(0.1,0.85),\n        legend.background = element_blank(),\n        legend.text = element_text(face = \"bold\",color=\"midnightblue\",size=14),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(face = \"bold\",color=\"midnightblue\",size=14),\n        axis.text = element_text(face = \"bold\",color=\"midnightblue\",size=14)\n        )\n\nAdd some features such as phrases of explanation, add some logos and other little information:\n\nlibrary(ggpubr)\ngraphics <- ggarrange(plot)+\n  theme(plot.background = element_rect(fill=NA, color = NA))\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"Top 100 Billboard\",\n                                              color = \"#9A32CD\", face = \"bold\", size = 45,\n                                              family = \"Luminari\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: Top 100 Billboard from Data.World\",\n                                                 color = \"black\",family = \"Luminari\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 15),\n                              left = text_grob(\"#TidyTuesday week38: Top 100 Billboard\", color = c(\"#778899\"), rot = 90,size = 30),\n                              right = text_grob(bquote(\"Top 100 Billboard MUSIC 🎼\"), color = c(\"#778899\"),rot = 90,size = 30),\n                              fig.lab = \"TidyTuesday week38\", fig.lab.face = \"bold.italic\",fig.lab.size = 12,\n                              fig.lab.pos = \"bottom.right\"\n)\n\n\n\nfinal_plot <-\n  final_plot +\n\n  annotate(geom = \"text\", label = \"The Billboard Hot 100 \\nwas first released in August 1958\",\n           x = 0.11, y = 0.74,colour = \"#00D2BE\",size = 4,family = \"Luminari\") +\n  annotate(geom = \"curve\", x = 0.07, xend = 0.09, y = 0.85, yend = 0.78, colour = \"#00D2BE\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"Luminari\",size=1.5) +\n\n  \n  \n  annotate(geom = \"text\", label = \"a good balance hits \\nin all positions\",\n           x = 0.3, y = 0.6,colour =\"#6B8E23\",size = 4,family = \"Luminari\") +\n  annotate(geom = \"curve\", x = 0.25, xend = 0.28, y = 0.53, yend = 0.69, colour = \"#6B8E23\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Luminari\",size=1.5) +\n\n  \n  \n  annotate(geom = \"text\", label = \"Peak positions high \\nare most likely found with \\n`Most likely music`\",\n           x = 0.18, y = 0.63,colour = \"#FF4040\",size = 4,family = \"Luminari\") +\n  annotate(geom = \"curve\", x = 0.11, xend = 0.10, y = 0.63, yend = 0.70, colour = \"#FF4040\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Luminari\",size=1.5) +\n  \n  \n\n  annotate(geom = \"text\", label = \"all music hits \\nthe top high with higher frequency\",x = 0.22, y = 0.25, colour = \"#9A32CD\", size = 5,family = \"Luminari\") +\n\n  annotate(geom = \"text\", label = \"MUSIC 🎼\", x = 0.18, y = 0.03, colour = \"red\", size = 7,family = \"Luminari\")+\n\n\n  annotate(geom = \"text\", label = \"worthy speech hit \\nthe top-high\\n without music \\nvery rarely\", x = 0.62, y = 0.34, colour = \"#FF7256\", size = 5,family = \"Luminari\") +\n  annotate(geom = \"curve\", x = 0.68, xend = 0.64, y = 0.52, yend = 0.41, colour = \"#FF7256\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Luminari\",size=1.5)\n\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\n\n\nimg <- image_read(here::here(\"w38/colored_Billboard_logo.png\"))\nimg2 <- image_read(here::here(\"w38/Billboard_Hot_100_logo.png\"))\n\nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(img, x = 0.85, y = 0.39,width = 0.12)+\n  draw_image(img2, x = 0.1, y = -0.2,width = 0.12)\n\nSave final plot\n\nragg::agg_png(here::here(\"w38/w38_billboard.png\"),\n              res = 320, width = 16, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w42_seafood/w42-seafood.html",
    "href": "tidytuesday/cases2021/posts2021/w42_seafood/w42-seafood.html",
    "title": "Global Seafood",
    "section": "",
    "text": "WEEK42 SEAFOOD\n\n# Load library and data\nlibrary(tidyverse)\n\nfarmed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/aquaculture-farmed-fish-production.csv')\ncaptured_vs_farmed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/capture-fisheries-vs-aquaculture.csv')\ncaptured <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/capture-fishery-production.csv')\nconsumption <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/fish-and-seafood-consumption-per-capita.csv')\nstock <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/fish-stocks-within-sustainable-levels.csv')\nfishery <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/global-fishery-catch-by-sector.csv')\nproduction <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/seafood-and-fish-production-thousand-tonnes.csv')\n\n# make one dataframe \ndf <- farmed %>%\n  full_join(captured_vs_farmed,by=c(\"Entity\",\"Code\",\"Year\",\"Aquaculture production (metric tons)\")) %>%\n  full_join(captured,by=c(\"Entity\",\"Code\",\"Year\",\"Capture fisheries production (metric tons)\")) %>%\n  full_join(consumption,by=c(\"Entity\",\"Code\",\"Year\")) %>%\n  full_join(stock,by=c(\"Entity\",\"Code\",\"Year\")) %>%\n  full_join(fishery,by=c(\"Entity\",\"Code\",\"Year\")) %>%\n  full_join(production,by=c(\"Entity\",\"Code\",\"Year\")) %>%\n  janitor::clean_names()\n\nnames(df);dim(df)\nDataExplorer::profile_missing(df)\n\n\n# set the dataset for the first plot \ndf_group1 <- df %>%\n  filter(is.na(code)) %>%\n  select(-code) %>%\n  filter(str_detect(entity,\"income\")) %>%\n  pivot_longer(cols = 3:19,names_to = \"names\",values_to = \"values\") %>%\n  mutate(values = ifelse(is.na(values),0,values)) %>%\n  filter(values > 0) %>% \n  mutate(entity = gsub(\"excluding high income\",\"*\",entity)) %>% #count(entity)\n  mutate(entity = factor(entity, levels = c('High income','Upper middle income','Middle income',\n                                          'Lower middle income','Low & middle income','Low income',\n                                          'Europe & Central Asia (*)','Latin America & Caribbean (*)',\n                                          'East Asia & Pacific (*)','Middle East & North Africa (*)','Sub-Saharan Africa (*)'))) \n\n\n# choose the color palette  \n# RColorBrewer::brewer.pal.info\n# set the text options \nlibrary(showtext)\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\nfont_add_google(\"Share Tech Mono\", \"techmono\")\n   \n\n# make the first plot: a facet_plot of the World Continents by income level\nfacet_plot <-  ggplot(data = df_group1, aes(x = factor(year), y = values/100000000,group = names,color = names)) +\n  geom_line(size = 1.3) +\n  guides(color = guide_legend(title = \"Production tons sc-%\",ncol = 1,title.position = \"top\", title.hjust = 0.5)) +\n  scale_x_discrete(breaks = seq(1960,2018,10)) +\n  scale_y_continuous(labels = scales::percent) +\n  scale_color_manual(limits = c(\"aquaculture_production_metric_tons\",\"capture_fisheries_production_metric_tons\"),\n                     labels = c(\"aquaculture_production_metric_tons\" = \"Aquaculture\",\n                                \"capture_fisheries_production_metric_tons\" = \"Capture Fisheries\"),\n                     values = RColorBrewer::brewer.pal(2,\"Reds\")) +\n  facet_wrap(vars(entity),scales = \"free\",nrow = 2) +\n  labs(subtitle = \" \", caption = \" \") +\n  ggthemes::theme_fivethirtyeight() +\n  theme(text = element_text(family = \"techmono\",color = \"#FFF8DC\",face = \"bold\"),\n        legend.position = c(0.92,0.3),\n        legend.title = element_text(face = \"bold\",size = 14),\n        legend.box.background = element_blank(),\n        legend.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        legend.key = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        legend.text = element_text(size = 9),\n        strip.text = element_text(size = 9,face = \"bold\"),\n        strip.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_line(size = 0.2),\n        plot.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        panel.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        plot.title = element_text(face = \"bold\",size = 30),\n        plot.margin = margin(0,0,0,0,unit = \"pt\")) \n\n\n\n#-------------\n# seafood supply time-series plot of all countries and selected countries of seafood supply kg per capita FAO yr 2020\n\n\n# data to use in the second plot for the first geom_line for all countries (in grey)\ndf_group2 <- df %>% \n  filter(!is.na(code)) %>%\n  pivot_longer(cols = 14:20,names_to = \"livestock\",values_to = \"livestock_commodity\") %>%\n  select(-4,-5) %>%\n  mutate(livestock = gsub(\"commodity_balances_livestock_and_fish_primary_equivalent_\",\"\",livestock),\n         livestock = gsub(\"_production_5510_tonnes\",\"\",livestock),\n         livestock = gsub(\"[0-9]\",\"\",livestock),\n         livestock = gsub(\"_\",\"\",livestock)) %>%\n  pivot_longer(cols = 5:6,names_to = \"share_of_fish\",values_to = \"fish_stocks\") %>%\n  mutate(share_of_fish = recode(share_of_fish,\n                                share_of_fish_stocks_that_are_overexploited = \"overexploited\",\n                                share_of_fish_stocks_within_biologically_sustainable_levels_fao_2020 = \"sustainable\")) %>%\n  pivot_longer(cols = c(5,7),names_to = \"commercial\",values_to = \"scale_commercial\") %>%\n  mutate(commercial = recode(commercial,\n                             artisanal_small_scale_commercial = \"artisanal\",\n                             industrial_large_scale_commercial = \"industrial\")) %>%\n  rename(seafood_supply = fish_seafood_food_supply_quantity_kg_capita_yr_fao_2020)\n\n\ndf_group2[is.na(df_group2)] <- 0\n\ndf_group2 <- df_group2 %>% \n  filter(seafood_supply > 0) %>% \n  select(year,entity,seafood_supply)\n\n\n\n# data to use in the second geom_line for selected countries\ndf_group3 <- df_group2 %>%\n  filter(entity %in% c(\"Iceland\",\"Maldives\",\"Lesotho\",\"Brazil\",'Sri Lanka',\"Malaysia\",\"Chile\",\"Tanzania\",\"Japan\")) \n\n\n\n# make the second plot: time series of all countries and selected countries of seafood supply kg per capita FAO yr 2020\n seafood_plot <- ggplot() +\n  geom_line(data = df_group2, \n            aes(x = factor(year),y = (seafood_supply),group = entity),color = \"grey75\",size = 0.2) +\n  geom_line(data = df_group3 ,\n            aes(x = factor(year),y = (seafood_supply),group = entity,color = entity),size = 1.2,\n            key_glyph = \"timeseries\") +\n  scale_x_discrete(breaks = seq(1960,2018,5), expand = expansion(add = 0.5)) +\n  scale_y_log10(labels = scales::comma_format()) +\n  scale_color_manual(values = RColorBrewer::brewer.pal(9,\"Set1\")) +\n  guides(color = guide_legend(title = \"Selected Countries seafood production kg per capita FAO yr 2020\",\n                              nrow = 1,title.position = \"top\", title.hjust = 0.5,title.vjust = 0.5)) +\n  labs(x = \"Years\",y = \"Values in log scale\",\n       title = \" \",\n       subtitle = \" \") +\n  ggthemes::theme_fivethirtyeight() +\n  theme(text = element_text(family = \"techmono\",color = \"#FFF8DC\",face = \"bold\"),\n        axis.title.x = element_text(vjust = 0.5,face = \"bold\"),\n        axis.title.y = element_text(vjust = 0.5,face = \"bold\"),\n        plot.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        panel.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        panel.grid.major.x = element_line(size = 0.2,linetype = \"dashed\"),\n        legend.background = element_blank(),\n        legend.text = element_text(size = 14),\n        legend.position = \"top\",\n        legend.title = element_text(face = \"bold\",size = 16),\n        legend.key = element_blank(),\n        plot.title = element_text(face = \"bold\",size = 30),\n        plot.margin = margin(0,0,0,0,unit = \"pt\"))\n\n\n# make one plot\nlibrary(patchwork)  \nplot <- (seafood_plot / facet_plot ) \n  #theme_update(plot.background = element_rect(fill=\"#009ACD\",color=\"#009ACD\"),\n               #panel.background = element_rect(fill=\"#009ACD\",color=\"#009ACD\"),\n               #plot.margin = margin(0,0,0,0,unit = \"pt\"))\n\n\n# load the libraries for final touches\nrequire(ggpubr)\n\n# ggarrange from {ggpubr} frames the plot to make side annotations\ngraphics <- ggpubr::ggarrange(plot) \n\nfinal_plot <- ggpubr::annotate_figure(graphics,\n                              top = text_grob(\"Global Seafood Supply in 182 countries \\n(1960 - 2018)\",\n                                              color = c(\"#FFF8DC\"), face = \"bold\", size = 34,\n                                              family = \"techmono\",vjust = 0.8),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: OurWorldinData.org - TidyTuesday week42\",\n                                                 color = \"#FFF8DC\",family = \"techmono\",\n                                                 hjust = 0.5, vjust = 0.5, x = 0.5, face = \"bold.italic\", size = 14),\n                              left = text_grob(\" \", color = c(\"#778899\"), rot = 90,size = 12),\n                              right = text_grob(bquote(\" \"), color = c(\"#778899\"),rot = 90,size = 10),\n                              fig.lab = \"\", fig.lab.face = \"bold.italic\",fig.lab.size = 8,\n                              fig.lab.pos = \"bottom.right\"\n)\n\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label = \"(*) excluding high income\",\n         x = 0.91, y = 0.1,colour = \"#FFF8DC\",size = 4,family = \"techmono\",fontface = \"bold\") \n  \n  \nlibrary(cowplot)  \nlibrary(ggimage)\nlibrary(magick)\n\n# add the images for the legend keys \n\nimgOWD <- image_read(here::here(\"w42/owd.png\"))\nimgfish <- image_read(here::here(\"w42/fish.png\"))\nimgtt <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\n# ggdraw from {cowplot} draw the plot for setting the background colors of the side annotations\nfinal <- cowplot::ggdraw(final_plot) + \n  draw_image(imgfish, x = 0.03, y = 0.44,width = 0.07) +\n  draw_image(imgfish, x = 0.08, y = 0.37,width = 0.05) +\n  draw_image(imgfish, x = 0.12, y = 0.32,width = 0.03) +\n  draw_image(imgtt, x = 0.85, y = 0.45,width = 0.12) +\n  draw_image(imgOWD, x = 0.9, y = -0.46,width = 0.06) +\n  theme(plot.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\")) \n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w42/w42_seafood.png\"),\n              res = 320, width = 16, height = 14, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w45_maps/w45_maps.html",
    "href": "tidytuesday/cases2021/posts2021/w45_maps/w45_maps.html",
    "title": "Making maps with R",
    "section": "",
    "text": "https://osdatahub.os.uk/downloads/open#CODEPO https://datatricks.co.uk/london-map-in-3-easy-steps https://data.police.uk/data/statistical-data/\n\nlibrary(tidyverse)\nlibrary(spData)\nlibrary(sf)\nlibrary(rgeos)\nlibrary(sp)\n# x <- c(\"ggmap\", \"rgdal\", \"rgeos\", \"maptools\", \"dplyr\", \"tidyr\", \"tmap\")\n#  # install.packages(x) # warning: uncommenting this may take a number of minutes\n# lapply(x, library, character.only = TRUE) # load the required packages\n\n\nspData::cycle_hire_osm\nspData::lnd\n\n\ncoord_lnd_cycl <- data.frame(st_coordinates(cycle_hire_osm$geometry))\n\ncycle_hire_osm <- as.data.frame(cycle_hire_osm)\n\n\ncycle_hire_osm$X <- coord_lnd_cycl$X\ncycle_hire_osm$Y <- coord_lnd_cycl$Y\n\n\ncycle_hire_osm\n\n\nspData::lnd\n\n\nplot(lnd)\n\n\nlondon_data <- lnd\n\nlnd_geo <- data.frame(london_data$GSS_CODE,london_data$HECTARES,london_data$geometry)\n\nnames(lnd_geo)[1]<- \"GSS_CODE\"\n\ncoord_london <- data.frame(st_coordinates(lnd_geo$geometry))\n\nlnd_geo_coord<- merge.data.frame(lnd_geo,coord_london)\n\n\nlnd_geo_coord%>%count(L3)\n\nLONDON MAP!!!!!!\n\nggplot() +\n  geom_polygon(data=lnd_geo_coord,\n               aes(x = X, y = Y,group=L3, fill = L3), \n               colour = \"black\")+\n  labs(x = \"Longitude\", y = \"Latitude\", \n       title = \"Map of Greater London with the borough boundaries\")\n\n\ncycle_hire_osm\n\n\nlibrary(extrafont)\nlibrary(showtext)\nfonts()\nloadfonts()\nfont.families.google()\nfont_add_google(\"Mr Dafoe\", \"MrDafoe\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\nlnd_center<- lnd_geo_coord%>%filter(X>c(-0.3) & X<0.0,\n                                    Y>51.4 & Y<51.6)\n\ncycle_hire_osm%>%count(name)\n\nfinal <-ggplot()+\n     geom_polygon(data=lnd_geo_coord,\n               aes(x = X, y = Y,group=L3, fill = L3), \n               colour = \"black\")+\n     geom_point(data=cycle_hire_osm, mapping=aes(x=X,y=Y),\n                color = 'gold', size=0.2, alpha=0.5)+ \n  coord_map()+\n  scale_fill_gradient(low = \"honeydew2\",high = \"darkgreen\")+\n  labs(x = \"Longitude\", y = \"Latitude\", \n       title = \"Map of Greater London with cycle hire\",\n       subtitle = \"with the borough boundaries\",\n       caption = \"Datasource: #TidyTuesday week45 - {spData} package \\n Infographics: Federica Gazzelloni\")+\n  cowplot::theme_map()+\n  theme(panel.grid.major = element_blank(),\n        axis.title.x=element_blank(), \n        axis.text.y=element_blank(), \n        plot.background = element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        panel.background=element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        plot.title=element_text(color=\"honeydew2\",size=33,family=\"Arial\"),\n        plot.subtitle=element_text(color=\"honeydew2\",size=24,family=\"Arial\"),\n        plot.caption = element_text(family=\"Arial\",color=\"honeydew2\"),\n        legend.position = \"none\")\n\n\n# save final plot\nragg::agg_png(\"~/Documents/R/R_general_resources/30DayMapChallenge/day7_green/green.png\",\n              res = 320, width = 11, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w36_bird_baths/w36_bird_baths.html",
    "href": "tidytuesday/cases2021/posts2021/w36_bird_baths/w36_bird_baths.html",
    "title": "Bird Baths",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggdendro)\nlibrary(dendextend)\nlibrary(ggraph)\nlibrary(tidygraph)\nlibrary(purrr)\nlibrary(rlang)\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 36)\nbird_baths <- tuesdata$bird_baths\n\nbird_baths <- bird_baths %>%\n  drop_na() %>%\n  filter(bird_count>0)  # %>% count(bird_type,sort=TRUE) %>% View()\n\nsurvey_year_id <- bird_baths %>% count(survey_year) %>%\n  mutate(survey_year_id = row_number()) %>% select(-n)\nurban_rural_id <- bird_baths %>% count(urban_rural) %>%\n  mutate(urb_rul_id = row_number()) %>% select(-n)\nbioregions_id <- bird_baths %>% count(bioregions) %>% \n  mutate(bioregions_id = row_number()) %>% select(-n)\nbird_type_id <- bird_baths %>% count(bird_type) %>% \n  mutate(bird_type_id = row_number()) %>% select(-n)\n\n\nbird_baths_numeric <- bird_baths %>%\n  inner_join(survey_year_id,\n             by=\"survey_year\") %>%\n  inner_join(urban_rural_id,\n             by=\"urban_rural\") %>%\n  inner_join(bioregions_id,\n             by=\"bioregions\") %>%\n  inner_join(bird_type_id,\n             by=\"bird_type\") %>%\n  count(survey_year_id,urb_rul_id,bioregions_id,bird_type_id) %>%\n  arrange(survey_year_id,urb_rul_id,bioregions_id,bird_type_id) \n\n\nbird_baths_half_numeric <- bird_baths %>%\n  inner_join(survey_year_id,\n             by=\"survey_year\") %>%\n  inner_join(urban_rural_id,\n             by=\"urban_rural\") %>%\n  inner_join(bioregions_id,\n             by=\"bioregions\") %>%\n  inner_join(bird_type_id,\n             by=\"bird_type\") %>%\n  count(survey_year,survey_year_id,\n        urban_rural,urb_rul_id,\n        bioregions,bioregions_id,\n        bird_type,bird_type_id) %>%\n  arrange(survey_year) \n\nbird_baths_numeric_short <- bird_baths %>%\n  inner_join(survey_year_id,\n             by=\"survey_year\") %>%\n  inner_join(urban_rural_id,\n             by=\"urban_rural\") %>%\n  inner_join(bioregions_id,\n             by=\"bioregions\") %>%\n  inner_join(bird_type_id,\n             by=\"bird_type\") %>%\n  count(survey_year_id,urb_rul_id,bioregions_id,bird_type_id) %>% #View()\n  filter(n<=20)\n\n\nbird_baths_half_numeric_short <- bird_baths %>%\n  inner_join(survey_year_id,\n             by=\"survey_year\") %>%\n  inner_join(urban_rural_id,\n             by=\"urban_rural\") %>%\n  inner_join(bioregions_id,\n             by=\"bioregions\") %>%\n  inner_join(bird_type_id,\n             by=\"bird_type\") %>%\n  count(survey_year,survey_year_id,\n        urban_rural,urb_rul_id,\n        bioregions,bioregions_id,\n        bird_type,bird_type_id) %>% #View()\n  filter(n<=20)\n\n\n\n#-------- data to use\n\n\nbb_piv_w <- bird_baths_half_numeric %>%\n  count(survey_year,bird_type,urban_rural,bioregions) %>%\n  pivot_wider(names_from=c(survey_year,urban_rural,bioregions),values_from=n,values_fill = 0)\n\n\n# https://cran.r-project.org/web/packages/dendextend/vignettes/Cluster_Analysis.html#the-3-clusters-from-the-complete-method-vs-the-real-species-category\nbirds <- column_to_rownames(bb_piv_w,var = \"bird_type\")\n\n\n\n# View(birds)\n\n# build a dendrogram\n\ndend_r <- birds %>%\n  dist(method = \"man\") %>%\n  hclust(method = \"ward.D2\") %>%\n  as.dendrogram %>%\n  ladderize %>%\n  color_branches(k=4)\n\ndend_c <- t(birds) %>%\n  dist(method = \"man\") %>%\n  hclust(method = \"com\") %>%\n  as.dendrogram %>%\n  ladderize%>%\n  color_branches(k=3)\n\n# set the colors\nsome_col_func <- function(n) (\n  colorspace::diverge_hcl(n, h = c(246, 40), c = 96, l = c(65, 90)))\n\n\n# plot the heatmap with the dendrograms\npar(mar = c(5,5,5,5))\n\nlibrary(gplots)\nset_graph_style(plot_margin = margin(1,1,1,1))\n\nplot <- gplots::heatmap.2(as.matrix(birds),\n                          main = \"Bird types concentration\",\n                          srtCol = 35,\n                          Rowv = dend_r,\n                          Colv = dend_c,\n                          trace=\"row\", hline = NA, tracecol = \"darkgrey\",\n                          margins =c(11,8),\n                          key.xlab = \"spotted/unspotted\",\n                          denscol = \"grey\",\n                          density.info = \"density\",\n                          col = some_col_func\n)\n\n## Save the plot as an image ----\n\nragg::agg_png(here::here(\"w36/heat_map.png\"),\n              res = 320, width = 15, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n#------------finish touches\n\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\n\nheat_map <- image_read(here::here(\"w36/heat_map.png\"))\n\nplot <- ggdraw() +\n  draw_image(heat_map)\n\nlibrary(ggpubr)\ngraphics <- ggarrange(plot)\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"\",\n                                              color = c(\"#8a5d24\"), face = \"bold\", size = 24,\n                                              family = \"xkcd\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: Cleary et al, 2016 TidyTuesday week36\",\n                                                 color = \"black\",family = \"xkcd\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n                              left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size = 10),\n                              right = text_grob(bquote(\"\"), color = c(\"#778899\"),rot = 90,size = 10),\n                              fig.lab = \"TidyTuesday week36\", fig.lab.face = \"bold.italic\",fig.lab.size = 8,\n                              fig.lab.pos = \"bottom.right\"\n)\n\nfinal_plot <-\n  final_plot +\n\n  annotate(geom = \"text\", label = \"While wild bird feeding is recognised as one of\nthe most popular forms of\nhuman-wildlife interaction, almost nothing is known\n           about the use of bird baths.\",\n           x = 0.15, y = 0.25,colour = \"black\",size = 3,family = \"xkcd\") +\n\n  annotate(geom = \"text\", label = \"\",\n           x = 0.15, y = 0.65,colour = \"black\",size = 3,family = \"xkcd\") +\n\n  annotate(geom = \"text\", label = \"Urbanisation is one of the leading causes of species extinction\n           due to extensive habitat alteration\",\n           x = 0.82, y = 0.04,colour = \"black\",size = 3,family = \"xkcd\") +\n\n  annotate(geom = \"text\", label = \"Bioregions\",x = 0.85, y = 0.88, colour = \"#FF7F00\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Rural\",x = 0.73, y = 0.58, colour = \"white\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Urban\",x = 0.1, y = 0.5, colour = \"#FF7F00\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.82, xend = 0.76, y = 0.88, yend = 0.72, colour = \"#FF7F00\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.72, xend = 0.68, y = 0.6, yend = 0.65, colour = \"#FF7F00\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.12, xend = 0.2, y = 0.5, yend = 0.43, colour = \"#FF7F00\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n\n  annotate(geom = \"text\", label = \"Comparing Bird types' while enjoing a bird bath\",\n           x = 0.4, y = 0.84,colour = \"#FF7F00\",size = 3,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Avian assemblages at urban and rural bird baths\n           differed between bioregions with aggressive\n           nectar-eating species\",\n           x = 0.67, y = 0.38,colour = \"black\",size = 3,family = \"xkcd\")\n\n\n\nrainbow_lorikeet_img <- image_read(here::here(\"w36/parrot2.png\"))\n\nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(rainbow_lorikeet_img, x = 0.89, y = 0.4,width = 0.12)\n\n\nfinal\n\n\n## Save final plot ----\n\nragg::agg_png(here::here(\"w36/w36_bird_baths.png\"),\n              res = 320, width = 15, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\n\n\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\nimg <- image_read(\"image.png\")\n\n\ntidy_final <- image_read(\"w35_lemurs.png\")\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator = \"atop\",\n                                 gravity = \"southwest\")\n\nimage_write(attached_logo, path = \"w35_lemurs.png\", format = \"png\")"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w16_US_Post_office/w16_US_Post_office.html",
    "href": "tidytuesday/cases2021/posts2021/w16_US_Post_office/w16_US_Post_office.html",
    "title": "US Post Office",
    "section": "",
    "text": "Loading libraries\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(maptools)\nlibrary(data.table)\n\nLoading data\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 16)\npost_offices <- tuesdata$post_offices\n\nWrangling\n\nhead(post_offices)\n\n\nmy_df<-post_offices%>%filter(established>=1639,established<=2000,\n                          discontinued>=1775 ,discontinued<=2002,\n                          !is.na(stamp_index),\n                          !duration<0,\n                          !is.na(gnis_dist),\n                          !stamp_index==55,\n                          !is.na(county1))%>%\n  select(\"duration\",\"gnis_dist\",\"stamp_index\")%>%\n  group_by(stamp_index)%>%\n  summarize(avg_duration=mean(duration),avg_dist=mean(gnis_dist))\n\nSetting data ready for plotting\n\nlibrary(igraph)\nmat <- cor(t(my_df))\nmat[mat<0.995] <- 0\n# Make an Igraph object from this matrix:\nnetwork <- graph_from_adjacency_matrix( mat, weighted=T, mode=\"undirected\", diag=F)\n\n# Basic chart\nplot(network)\n\n\n# color palette\nlibrary(RColorBrewer)\ncoul <- brewer.pal(nlevels(as.factor(my_df$stamp_index)), \"Set3\")\n\n# Map the color to cylinders\nmy_color <- coul[as.numeric(as.factor(my_df$stamp_index))]\n\nSetting for saving plot\n\nragg::agg_png(here::here(\"US_Post_office_space.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\n\n# plotting ############################################\n\npar(bg=\"mediumblue\", mar=c(1,1,1,1))\nset.seed(4)\nplot(network, \n     vertex.label.family=\"Georgia\", \n     edge.curved=0.08,\n     edge.width=2,                                 \n     edge.arrow.size=1,                       \n     edge.arrow.width=1,                          \n     edge.lty=\"solid\",\n     vertex.size=12,\n     vertex.shape=c(\"raster\",\"sphere\"), \n     vertex.color=my_color, \n     vertex.label.cex=0.7,\n     vertex.label.color=\"blue\",\n     vertex.frame.color=\"transparent\"\n)\n\nop <- par(family = \"Luminari\")\n\n#### legend and titles ########################\n\nlegend(x=1.3, y=0.7, \n       legend=paste( levels(as.factor(my_df$stamp_index)), \"stamp*\", sep=\"*\"), \n       col = coul , \n       bty = \"n\", pch=20 , pt.cex = 2, cex = 1,\n       text.col=\"white\" , horiz = F)\ntext(-1.4,1.1,\"US Post Offices\",col=\"white\", cex=1.5)\ntext(-1.3,1,\"Stamps index by distance\",col=\"white\", cex=1.2)\ntext(-1.1,0.9,\"visualization of the distance between offices by different stamps index\",col=\"white\", cex=0.8)\n\ntext(-1,-1.1,\"Viz @fgazzelloni | #TidyTueasday Week 16 | Space Day 14 | DataSource: Harvard Dataverse\",col=\"white\", cex=0.8)\npar(op)\n\nImaging\n\nlibrary(png)\nlibrary(grid)\nlibrary(magick)\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"400x400\")\n\nmypng2<-readPNG(\"satellite2.png\")\nmypng3<-readPNG(\"satellite3.png\")\n\n\ngrid.raster(tidy_logo, x=0.9, y=0.2, width=.08)\ngrid.raster(mypng2, x=.09, y=.7, width=.25)\ngrid.raster(mypng3, x=.9, y=.9, width=.25)\n\n####### final ###################\n\n# dev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w25_du_bois/w25_du_bois.html",
    "href": "tidytuesday/cases2021/posts2021/w25_du_bois/w25_du_bois.html",
    "title": "Dubois Challenge",
    "section": "",
    "text": "Week 25\nDataSource: https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-06-15/readme.md\nDubois Style https://github.com/ajstarks/dubois-data-portraits/blob/master/dubois-style.pdf\nAdd fonts https://cran.rstudio.com/web/packages/showtext/vignettes/introduction.html https://fonts.google.com/specimen/Shadows+Into+Light#standard-styles\ninspirations https://github.com/ivoruaro/tidytuesday/blob/main/2021w25.R https://github.com/nrennie/tidytuesday/blob/main/2021/15-06-2021/15062021.R https://gist.github.com/clauswilke/783e1a8ee3233775c9c3b8bfe531e28a\nimage background https://www.pngwing.com/en/free-png-zfvci\n\n\nload libraries\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(DataExplorer)\nlibrary(ggtext)\nlibrary(DataEditR)\nlibrary(tidyquant)\n\n\nlibrary(RColorBrewer)\n\nlibrary(maps)\nlibrary(rnaturalearth)\nlibrary(sp)\nlibrary(sf)\n\nlibrary(extrafont)\n#library(ggrepel)\n\n#library(viridis)\nlibrary(hrbrthemes)\n\nlibrary(ggimage)\nlibrary(patchwork)\nlibrary(cowplot)\n\nlibrary(ggpattern)\n\n\n# add font -------------------------------------------------\nlibrary(showtext)\nfont_add_google(\"Shadows Into Light\",\"shadow_into_light\")\nfont_add_google(\"Schoolbell\", \"bell\")\nshowtext_auto(enable = TRUE)\n\n# load data ----------------------------------------\ntuesdata <- tidytuesdayR::tt_load('2021-06-15')\n\ntweets <- tuesdata$tweets\n\n# check data -----------------------\nhead(tweets)\n\nprofile_missing(tweets)\n\n# tidying -----------------------------------\ndf_tweets<-tweets%>%\n  arrange(-like_count,-followers)%>%\n  drop_na()\n\nplyr::count(df_tweets$location)\n\n# load map data ------------------------------\n\n# world data full \nworld_full <- ne_countries(scale = \"medium\", returnclass = \"sf\")\nworld_data <- filter(world_full, continent != \"Antarctica\")\n\n# world lat&long\nworld<-map_data(map = \"world\") \n\nmy_world_data<- world%>%\n  full_join(world_data, by = c(\"region\"=\"name\"))%>%\n  select(long,lat,group,order,region,region_wb)\n\n# states lat&long\nstates <- map_data(\"state\")\n\n# choose palette colors ----------------------\n# dubois palette taken from Dubois Style webpage\ndubois_pal <- c(\"black\" = \"#000000\", \n                \"brown\" = \"#654321\", \n                \"tan\" = \"#d2b48c\",\n                \"gold\" = \"#ffd700\",\n                \"pink\"=\"#ffc0cb\",\n                \"red\"=\"#dc143c\",\n                \"green\"=\"#00aa00\",\n                \"blue\"=\"#4682b4\")\n\npalette<-c(\"#000000\",\"#654321\",\"#d2b48c\",\"#ffd700\",\"#ffc0cb\",\"#dc143c\",\"#00aa00\",\"#4682b4\")\n\nstates_palette<-colorRampPalette(c(\"#654321\",\"#d2b48c\",\"#ffd700\",\"#ffc0cb\",\"#dc143c\",\"#00aa00\",\"#4682b4\"))(15537)\n\npal_west <- c(\"#000000\", \"#4682b4\")\npal_est <- c(\"#000000\", \"#4682b4\")\n\npal_fill<-c(\"background\"=\"#e8d8c3\",\n            \"water\"=\"#d9c09e\",\n            \"europe\"=\"#ffd700\",\n            \"canada\"=\"#654921\",\n            \"southAmerica\"=\"#1b1209\")\n\n\n# make the plot ---------------------\n\nworld_west <-ggplot() +\n  geom_polygon(data=my_world_data,aes(x=long,y=lat,group=group,fill=region_wb)) + scale_fill_manual(values=palette) + guides(fill=FALSE)+\n  \n  geom_polygon(data = states,aes(x = long, y = lat, group = group),fill=states_palette,color=\"#000000\",size=0.3)+#scale_fill_manual(values=states_palette) +guides(fill=FALSE)+\n  \n  geom_path(data=world,aes(x=long,y=lat,group=group),size=0.3) +\n  \n  geom_point(data = df_tweets,mapping=aes(x=long, y=lat, size=followers, shape=verified,color=verified),alpha=0.7) +\n  \n  geom_path(data = df_tweets,mapping=aes(x=long, y=lat,group=location),size=0.3,color=\"#654321\") + \n  \n  coord_map(\"ortho\", orientation = c(3.849945, -103.525750, 0)) + \n  \n  #geom_text(data = df_tweets,aes(x=long, y=lat, group=location, label=location), check_overlap = TRUE,color=\"#654321\",size = 3, hjust=0.5, vjust=-1)+\n  \n  #geom_curve(data = df_tweets,aes(x=long, y=lat, group=location, label=location))+\n  \n # annotate(\"text\", x = 0, y = 0,family= \"shadow_into_light\",label=\"World map of \",color = \"#ffc0cb\", size = 4,fontface=\"bold\") +\n  \n  scale_size(guide=FALSE, range = c(1,9)) +\n  scale_shape(guide=FALSE) +\n  scale_color_manual(values = pal_west, aesthetics = c(\"colour\")) +\n  labs(x=\"\",y=\"\",color=\"Verified accounts\") +\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#e8d8c3\", colour = \"#e8d8c3\"),#   element_rect(color=\"#e8d8c3\",fill=\"#e8d8c3\"),\n        panel.background = element_rect(color=\"#e8d8c3\",fill=\"#d9c09e\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"bottom\",\n        legend.text = element_text(family=\"shadow_into_light\"),\n        legend.title = element_text(family=\"shadow_into_light\"))\n\n# world_west\n\n\n\nworld_est <-ggplot() +\n  geom_polygon(data=my_world_data,aes(x=long,y=lat,group=group,fill=region_wb)) + scale_fill_manual(values=palette) + guides(fill=FALSE)+\n  \n  geom_polygon(data = states,aes(x = long, y = lat, group = group),fill=states_palette,color=\"#000000\",size=0.3)+#scale_fill_manual(values=states_palette) +guides(fill=FALSE)+\n  \n  geom_path(data=world,aes(x=long,y=lat,group=group),size=0.3) +\n  \n  geom_point(data = df_tweets,mapping=aes(x=long, y=lat, size=followers, shape=verified,color=verified),alpha=0.7) +\n  \n  geom_path(data = df_tweets,mapping=aes(x=long, y=lat,group=location),size=0.3,color=\"#654321\") + \n  \n  coord_map(\"ortho\", orientation = c(19.982182, 46.595135, 0)) +\n  \n  #geom_text(data = df_tweets,aes(x=long, y=lat, group=location, label=location), check_overlap = TRUE,color=\"#654321\",size = 3, hjust=0, vjust=-1)+\n  \n  #geom_curve(data = df_tweets,aes(x=long, y=lat, group=location, label=location))+\n  \n  #annotate(\"text\", x = 0, y = 0,family= \"shadow_into_light\",label=\"Tweets sized by followers\",color = \"#ffc0cb\", size = 4,fontface=\"bold\") +\n \n  scale_size(guide=FALSE, range = c(1,9)) +\n  scale_shape(guide=FALSE)+\n  scale_color_manual(values = pal_est,aesthetics = c(\"colour\"))+ #, \"fill\")) +\n  labs(caption=\"Viz @fgazzelloni DataSource: WEB Du Bois and Juneteenth #DuBoisChallenge tweets The Intercept #TidyTuesday 2021/25\",\n       x=\"\",y=\"\",color=\"\") +\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#e8d8c3\", colour = \"#e8d8c3\"),\n        panel.background = element_rect(color=\"#e8d8c3\",fill=\"#d9c09e\"),\n        plot.caption = element_text(color=\"#00aa00\",face=\"bold\",family=\"shadow_into_light\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"none\")\n\n# world_est\n\n\nmain_plot <- (world_west + world_est)\n\nplot <-plot_grid(main_plot)\n\nfinal <- plot +\n  theme(plot.background = element_rect(fill = \"#e8d8c3\", colour = \"#e8d8c3\"),\n        plot.margin = margin(t=0,r=1,b=0,l=1,unit=\"pt\"))\n\n\ntitle<- ggplot()+\n  labs(title=\"\\n\\n#DuBoisChalllenge 2021 Twitter Metrics\",\n       subtitle=\"Tweets by number of followers (verified or not) and by selected locations\\n\\nINSPIRED BY:\\n\",\n       tag=\"\\nTHE GEORGIA NEGRO \\nA SOCIAL STUDY \\nby W.E. BURGHARDT\\n\\n\") +\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#e8d8c3\", colour = \"#e8d8c3\"),# element_rect(color=\"#e8d8c3\",fill=\"#e8d8c3\"),\n        panel.background = element_rect(color=\"#e8d8c3\",fill=\"#e8d8c3\"),\n        plot.title = element_text(color=\"#000000\",size=20,face=\"bold\",family=\"bell\",hjust = 0.5,vjust = 0),\n        plot.subtitle = element_text(color=\"#000000\",size=12,face=\"bold\",family=\"bell\",vjust = 0,hjust = 0.5),\n        plot.tag = element_text(color=\"#000000\",size=12,face=\"bold\"),\n        plot.tag.position = \"bottom\",\n        plot.margin = margin(t=0,r=1,b=1,l=1,unit=\"pt\"))\n\ncaption<- ggplot()+\n  labs(title=\"ROUTES OF THE TWEETS BY LOCATIONS\",\n       subtitle=\"THIS CASE IS DEVOTED TO A SERIES OF CHARTS, MAPS AND OTHER DEVICES DESIGNED TO ILLUSTRATE \\nTHE DEVELOPMENT OF THE AMERICA NEGRO IN A SIGLE TYPICAL STATE OF THE UNITED STATES\",\n       tag=\"THE PROBLEM OF THE 20^th CENTURY IS THE PROBLEM OF THE COLOR-LINE\\n\") +\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#e8d8c3\", colour = \"#e8d8c3\"),# element_rect(color=\"#e8d8c3\",fill=\"#e8d8c3\"),\n        panel.background = element_rect(color=\"#e8d8c3\",fill=\"#e8d8c3\"),\n        plot.title = element_text(color=\"#000000\",size=11,face=\"bold\",family=\"bell\",hjust=0.5),\n        plot.subtitle = element_text(color=\"#000000\",size=10,face=\"bold\",family=\"bell\",vjust = -1,hjust = 0.5),\n        plot.tag = element_text(color=\"#000000\",size=8,face=\"bold\"),\n        plot.tag.position = \"bottom\",\n        plot.margin = margin(t=0,r=1,b=0,l=1,unit=\"pt\"))\n  \n\n        \nfinal_plot<-plot_grid(title,final,caption,ncol=1,rel_heights = c(0.4,1,0.15))\n\n\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w25\",\"w25_tweets.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"w25/w25_tweets.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"w25/w25_tweets.png\",\n            format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w32_paralympic/w32_paralympic.html",
    "href": "tidytuesday/cases2021/posts2021/w32_paralympic/w32_paralympic.html",
    "title": "Paralympic",
    "section": "",
    "text": "To set the search() function to check the kind of packages installed in the session:\n\nold <- search()\n\n\nlibrary(tidyverse)\n\nlibrary(extrafont)\n# loadfonts() # to do just once at the beginning of the session\n\nLoad this week data:\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 32)\ntidytuesdayR::readme(tuesdata)\nathletes <- tuesdata$athletes\n\n\nnames(athletes)\n\n\nhead(athletes,3)\n\n\nDataExplorer::profile_missing(athletes)\n\nSee the sports for the Paralympic Games: a total of 11 sports takes place with an avg of 8 each four year round 8,9,9,9,10,10,10,10,10,11\n\nathletes %>% filter(year==\"2016\") %>%count(type) %>% arrange(-n)\n\nSee which country “abbreviation” are missing: 49 rows, 1996 Gold 1\n\nathletes %>% filter(is.na(abb)) %>% count(medal)\n\nWhich Country won the Gold medal at the Paralympic in 1996 with Wheelchair Rugby ?\n\nUSA Rugby was the only US “Team Sport” to capture Gold during the 1996 Summer Paralympics.\n\nsource: Wheelchair rugby at the Summer Paralympics\n\nathletes %>% filter(is.na(abb)) %>% count(gender,type,medal,year)%>%arrange(-year)\n\nFill the row with the information above:\n\nid <- row.names(athletes)\n\nathletes <- cbind(id,athletes)\n\nathletes[athletes$id==\"9796\",\"abb\"]<-\"USA\"\n\n\nathletes%>%filter(abb==\"USA\" & year==\"1996\" & medal==\"Gold\",type==\"Rugby\") \n\n\nathletes %>% filter(is.na(abb)) %>% count(id,gender,type,medal,year)%>%count(medal,year)\n\nIn 1980 the USA won 75 Gold medals as well as Poland, while West Germany won just 68 Gold medals.\nsource\nTo see effectively who are the countries who have won the Paralympic and fill the gaps found, the best way is to check it by the year.\n\nathletes %>% filter(year==\"1980\") %>% count(medal,abb==\"USA\")\n\nLoad the Olympic Games data from last TidyTuesday: add the regions data to our dataset to use {ggflag} and add the round shaped flag to our geoms\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 31)\nregions <- tuesdata$regions\n\nSet up the full dataset with some minor changes:\n\nathletes_full <- athletes %>%\n  mutate(gender=case_when(gender==\"Mixed\" ~ \"Mixed team\",\n                          TRUE ~ gender)) %>%\n  inner_join(regions,by=c(\"abb\"=\"NOC\")) %>%\n  select(year,abb,country,region,type,gender,medal,event,athlete) %>%\n  mutate(abb=tolower(abb),country=tolower(country))\n\n\nDataExplorer::profile_missing(athletes_full)\n\nJust a double chek of the “country” vector and then we drop it:\n\nhead(athletes_full,3)\n\n\nathletes_full %>% count(abb,country,region)\n\n\nathletes_full <- athletes_full %>%\n  select(-country) \n\n10 years from 1980 to 2016 of Summer Paralympic Games:\n\nathletes_full %>% count(year)\n\nabb: abbreviation of country region are 112 , while the region vector contains 104 countries.\n\nChina region id divided in “chn” and “hkg”, only hkg has 198 events\nCzech Republic divided in “cze” and “tch”\nGermany divided in “frg”, “gdr”, “ger”\nRussia divided in “rus” and “urs”\nSerbia divided in “scg”, “srb”, “yug”\n\n\nathletes_full %>% count(region,abb)%>%arrange(region)\n\nAdd the {ggflags} package:\n\nlibrary(ggflags)\nlibrary(countrycode)\n\nAssigning a new name to have the athletes_full set as back up:\n\nmy_df <- athletes_full %>% \n  mutate(country_code = countrycode(region, \n            origin = 'country.name', \n            destination = 'iso2c'),\n         country_code = tolower(country_code)) %>%\n  rename(sport=type) %>%\n  select(year,region,sport,medal,country_code) \n\n\nmy_df %>% DataExplorer::profile_missing()\n\nWhat we want is to make a sigmoid network with geom_segment, geom_sigmoid, and geom_flag: to connect the 50+ highest frequency of countries at the Paralympic Games and the same by sports and Gold medals.\nSet the index vectors for each variable to connect with a sigmoid and rebuild a new set:\n\norder_year <- my_df %>%\n  count(year) %>% \n  mutate(index_year = row_number())\n\n\norder_region <- my_df %>%\n  count(region) %>% arrange(-n) %>%\n  mutate(index_region = row_number())\n\norder_sport <- my_df %>%\n  count(sport) %>% arrange(-n) %>%\n  mutate(index_sport = row_number())\n\n\norder_medal <- my_df %>%\n  count(medal) %>% arrange(-n) %>%\n  mutate(index_medal = row_number())\n\n\nmy_df_ordered <- my_df %>%\n  left_join(order_year) %>% select(-n) %>%\n  left_join(order_region) %>% select(-n) %>%\n  left_join(order_sport) %>% select(-n) %>%\n  left_join(order_medal) %>% select(-n) \n\nAdd the groups vectors and select the first 20 regions/countries by the highest frequency:\n\ngold_medal_sports <- my_df_ordered %>%\n  mutate(group = glue::glue(\"{year}-{region}\"),\n         group2 = glue::glue(\"{region}-{sport}\"),\n         group3 = glue::glue(\"{sport}-{medal}\"),\n         group4 = glue::glue(\"{region}-{medal}\"))\n         \n\nfirst_20_regions<- gold_medal_sports %>% \n  count(region) %>% \n  arrange(-n) %>% \n  filter(n>=259) %>% \n  select(-n) %>% \n  unlist()\n\nMake three more dataset for selected sigmoids data:\n\nsig_short <- gold_medal_sports %>% \n  filter(region %in% first_20_regions)# & year==2016)#  & region==c(\"UK\",\"Italy\",\"USA\")) \n\n\nsig_short_gold <- sig_short%>%filter(medal==\"Gold\")\n\n\nsig_short_gold_yr <- sig_short %>% \n  filter(medal==\"Gold\") %>% \n  count(year,region,index_year,index_region,group) %>% \n  arrange(-n) %>%\n  filter(n>=50)\n\n\nsig_short_gold_sport <- sig_short %>% \n  filter(medal==\"Gold\") %>% \n  count(region,sport,index_region,index_sport,group2) %>% \n  arrange(-n) %>%\n  filter(n>=50)\n\n\nlibrary(scales)\nlibrary(ggbump)\nlibrary(extrafont)\nlibrary(showtext)\nlibrary(cowplot)\nlibrary(ggstream)\nlibrary(colorspace) \nlibrary(ggpubr)\n\n## Automatically use showtext to render text for future devices\nshowtext_auto()\n\n## Tell showtext the resolution of the device,\n## only needed for bitmap graphics. Default is 96\nshowtext_opts(dpi = 320)\n\n## Loading Google fonts (https://fonts.google.com/)\n\nfont_add_google(\"Oswald\", \"oswald\")\nfont_add_google(\"Rock Salt\", \"rock\")\nfont_add_google(\"Amatic SC\" , \"amatic\")\n\n\nfont_add_google(\"Share Tech Mono\", \"techmono\")\nfont_add_google(\"Roboto Condensed\", \"roboto condensed\")\nfont_add_google(\"Gochi Hand\", \"gochi\")\nfont_add_google(\"Schoolbell\", \"bell\") # title\nfont_add_google(\"Covered By Your Grace\", \"grace\")\n\n\n\n\n\nbackground <- \"red\"\ntext_color <- \"grey50\"\n\npalette <- c(\"#0286c3\" , lighten(\"#0286c3\" , 0.5)  , \n             \"#fbb22e\" , lighten( \"#fbb22e\" , 0.5) , \n             \"#168c39\" , lighten(\"#168c39\" , 0.5)  ,\n             \"#ee2f4d\" , lighten(\"#ee2f4d\" , 0.5)  )\n\nOlympic Games color palettes: source: palettes\n\ncolor_paralympics <- c(\"#FF0000\",\"#C4161C\",\"#820000\",\"#ec008c\",\"#c40063\",\"#8B0037\",\"#92278F\",\"#6F2C91\",\"#3D1063\",\n                  \"#0095da\",\"#0063A5\",\"#013B82\",\"#39bb9d\",\n                  \"#39bb9d\",\"#00695E\",\"#B2D235\",\"#88ac2e\",\"#28752B\",\n                  \"#ffd400\",\"#e5A812\",\"#B18906\",\"#f7941E\",\n                  \"#E66A1F\",\"#985006\")\n\nMake the sigmoid network:\n\npara_plot <- ggplot(data=sig_short) +\n  \n  geom_text(\n    aes(x = -2.9, y = index_year+5, label = year), vjust=0, hjust=\"left\", color = \"red\", size = 4.5,family = \"oswald\") +\n\n  geom_text(\n    aes(x = -0.65, y = index_region, label = region), vjust=0, hjust=\"center\", color = \"red\", size = 4.5,family = \"oswald\") +\n  \n  geom_text(aes(x = 1.75, y = index_sport+5, label = sport),family = \"oswald\", hjust=\"center\", vjust=0, color = \"red\", size = 4.5) +\n  \n  geom_text(aes(x = 3.25, y = index_medal+10, label = medal),family = \"oswald\", hjust=0, vjust=0, color = \"red\", size = 4.5) +\n  \n  #################\n  # first sigmoid connecting years to regions\n  \n   geom_point(data = sig_short_gold, aes(x = -2.7, y = index_year+5), color = \"gold\", size = 2, inherit.aes = FALSE) +\n  \n  geom_sigmoid(\n     aes(x = -2.7, xend = -1, y = index_year+5, yend =index_region, group=factor(group)), color = \"#DCDCDC\") + \n  \n  geom_point(data = sig_short_gold, aes(x = -1, y = index_region), shape = 21, colour = \"gold\", fill = NA, size = 7, stroke = 1,inherit.aes = FALSE) +\n  \n  geom_sigmoid(data=sig_short_gold_yr,\n     aes(x = -2.7, xend = -1, y = index_year+5, yend =index_region, group=factor(group),color = region)) +\n  \n\n  ggflags::geom_flag(data = sig_short_gold, aes(x = -1, y = index_region, country = country_code), size=4.5) +\n  \n  ggflags::scale_country() +\n  guides(country=\"none\") +\n  \n  \n  #################\n  # second sigmoid to connect regions to sports\n  \n\n  geom_point(data = sig_short_gold, aes(x = -0.4, y = index_region),color = \"gold\", size = 2, inherit.aes = FALSE) +\n  \n  geom_sigmoid(\n     aes(x = -0.4, xend = 1.4, y = index_region, yend =index_sport+5, group=factor(group2)),color = \"#DCDCDC\") +\n  \n  geom_point(data = sig_short_gold, aes(x = 1.4, y = index_sport+5), color = \"gold\", size = 2, inherit.aes = FALSE) +\n  \n  geom_sigmoid(data=sig_short_gold_sport,\n     aes(x = -0.4, xend = 1.4, y = index_region, yend =index_sport+5, group=factor(group2),color = sport)) +\n \n  \n  ################### \n  # third sigmoid to connect sports to medals\n\n\n  geom_point(data = sig_short_gold, aes(x = 2.10, y = index_sport+5), color = \"gold\", size = 2, inherit.aes = FALSE)+\n  \n  geom_sigmoid(\n     aes(x = 2.10, xend = 3.15, y = index_sport+5, yend =index_medal+10, group=factor(group3)),color = \"#DCDCDC\") +\n  \n  geom_point(data = sig_short_gold, aes(x = 3.15, y = index_medal+10, color = medal), shape = 21, colour = \"gold\", fill = NA, size = 7, stroke = 1, inherit.aes = FALSE) +\n\n  geom_sigmoid(data = sig_short_gold,\n     aes(x = 2.10, xend = 3.15, y = index_sport+5, yend =index_medal+10, group=factor(group3), color = sport)) +\n  \n  \n  #####################\n\n  \n  ylim(0,200) +\n  xlim(-5,4) +\n  scale_y_reverse() +\n  scale_color_manual(values = color_paralympics) +\n  theme_void() +\n  theme(plot.background = element_blank(),\n        panel.background = element_blank(),\n        legend.position = \"none\")\n\n\n\nimg_olympics<-\"https://www.pngall.com/wp-content/uploads/2017/05/Olympic-Rings-Download-PNG.png\"\n\nsigmoid <- ggimage::ggbackground(para_plot, img_olympics,alpha=.2, color=\"#CD919E\")\n\n\nfinal <- ggdraw(\n  sigmoid \n  ) + \n  ggtitle(label=\"Paralympic Games: from 1980 to 2016\") +\n  theme_void() +\n  theme(\n    text = element_text(color = text_color , face = \"bold\"),\n    plot.title = element_text(family = \"amatic\" , size = 40 , hjust = 0.24,vjust=2),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.margin = margin(1,0,1,0, unit = \"cm\"),\n    plot.title.position = \"panel\") +\n  \n    annotate(geom = \"text\" , label = \"Source: Paralympic Medals, IPC, kaggle.com | Graphic: @fgazzelloni\" , x = 0.5 , y = 0 , family = \"rock\" , size = 6) +\n  \n    annotate(\"text\",label=\"The Paralympic Games or Paralympics is the largest international event for disabled athletes \\nand societal change and take place shortly after every Olympic Games in the same host city. \\nThe Paralympic Games are held every two years\", size=2.5,x = 0.78, y = 0.97,family=\"rock\") +\n    \n   annotate(\"text\",label=\"In 1980 the USA won 75 Gold medals \\nas well as Poland, while\\n West Germany won just 68 Gold medals.\", size=3,x = 0.14, y = 0.6,family=\"rock\") + \n    \n   annotate(\"text\",label=\"Which Country won the Gold medal at the Paralympic \\nin 1996 with Wheelchair Rugby ?\\nUSA Rugby was the only US “Team Sport” to capture \\nGold during the 1996 Summer Paralympics.\", size=3,x = 0.15, y = 0.2,family=\"rock\") +\n  \n   annotate(\"text\",label=\"Sigmoid network of the years, countries, sports and medals\", size=3,x = 0.8, y = 0.1,family=\"rock\") +\n  \n   annotate(\"text\",label=\"Countries with the highest frequency in participation\", size=3,x = 0.23, y =0.9,family=\"rock\") +\n  \n# annotate images\ndraw_image(image = (\"Olympic-Torch-PNG-Free-Download.png\"),\n             #\"https://www.pngall.com/wp-content/uploads/2017/05/Olympic-Rings-Download-PNG.png\",\n           x = -0.05 , y = 0.65 , height = 0.45 , width = 0.25) +\n  draw_image(image = \"https://camo.githubusercontent.com/1411a00ca19fc49c4b0099d26246d261baafd979a76c007ae835984f8c1ae3d2/68747470733a2f2f7777772e706172616c796d7069632e6f72672f73697465732f64656661756c742f66696c65732f7374796c65732f6c617267655f6f726967696e616c2f7075626c69632f323031392d31302f4950432532304e4557253230454d424c454d2e4a50473f69746f6b3d5f46534a62623651\",\n           x = 0.55 , y = 0.78 , height = 0.08 , width = 0.25)\n\n\nragg::agg_png(\"w32_paralympic.png\",\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\ntidy_final <- image_read(\"w32_paralympic.png\")\n\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"w32_paralympic.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w14_the_pudding/w14_the_pudding.html",
    "href": "tidytuesday/cases2021/posts2021/w14_the_pudding/w14_the_pudding.html",
    "title": "The Pudding",
    "section": "",
    "text": "Load libraries\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(extrafont)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ragg)\nlibrary(rmarkdown)\nlibrary(hrbrthemes)\nlibrary(wesanderson)\n\nLoad Datasets\n\nsephora <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/sephora.csv')\nulta <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/ulta.csv')\n\nallCategories <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/allCategories.csv')\nallShades <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/allShades.csv')\nallNumbers <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/allNumbers.csv')\n\nLoad fonts\n\nloadfonts()\nfont_add_google(name = \"Amatic SC\", family = \"amatic-sc\")\nfont_add_google(\"Cedarville Cursive\", \"cedarville\")\n\nshowtext_auto(enable = TRUE)\n\npalette <- c(\"#FF0000\",\"#FF7070\",\"#F09200\",\"#FFBF1F\",\"#00A08A\",\"#2989A3\",\"#5BBCD6\",\"#A475D9\")\n\nManipulation of data\n\nsephora_sub<-sephora%>%\n  mutate(shop=rep(\"sephora\",length(brand)),\n         brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name)\n\nulta_sub<-ulta%>%\n  mutate(shop=rep(\"ulta\",length(brand)),\n         brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name)\n\n\nshops<-rbind(sephora_sub,ulta_sub)\n\nManipulation of data\n\nallCategories_sub<-allCategories%>%\n  mutate(brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  separate_rows(categories, convert = TRUE) %>%\n  mutate(categories = fct_reorder(categories, lightness))  %>%\n  select(brand,product,name,hex,lightness,categories)\n\nallShades_sub<-allShades%>%\n  mutate(brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name,hex,hue,sat,lightness)\n\nallNumbers_sub<-allNumbers%>%\n  mutate(brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name,hex,lightness,lightToDark)\n\n################### Full Join of the datasets ##############\n\nmake_up<-full_join(allCategories_sub,\n                   allShades_sub,by.x=hex,by.y=lightness)\nmake_up<-full_join(make_up,\n                   allNumbers_sub,by.x=hex,by.y=lightness)\n\nmake_up_sub<-make_up%>%\n  select(brand,name,hex,hue,sat,lightness)%>%\n  filter(!is.na(hue))%>%\n  arrange(hex)\n\nCounting uniqueness\n\nplyr::count(make_up$brand); #107\nplyr::count(make_up$product);#328\nplyr::count(make_up$name);#1,317\nplyr::count(allCategories_sub$categories)#17\n\nSelection of data for making plots\n\nmy_companies <- sort(c(\"shiseido\",\"maybelline\",\"mac\",\"lancôme\",\"l'oréal\",\"guerlain\",\"estée lauder\",\"clinique\",\"benefit cosmetics\"), decreasing = TRUE)\n\nmake_up_for_plot <- make_up_sub %>%\n  filter(brand %in% my_companies) %>%\n  select(brand, name,hex, hue,sat,lightness) %>%\n  mutate(brand=as.factor(brand)) %>%\n  group_by(brand) %>%\n  mutate(mean_lightness = mean(lightness)) %>%\n  ungroup() %>%\n  mutate(brand = fct_reorder(brand, mean_lightness))\n\n\nlibrary(ggfx)\nlibrary(gridExtra)\n\n\nplot1<-make_up_for_plot%>%\n  ggplot(aes(brand,lightness,col=hex)) + \n  with_blur(\n    geom_boxplot(size=5,show.legend = FALSE)) + \n  geom_jitter(width = 0.15,height = 0.0,size = 1) + \n  scale_colour_identity() + \n  coord_polar() + \n  labs(title = \"Shades of makeup from The Pudding\",\n       subtitle = \"All collected from the US versions of Sephora and Ulta’s websites\",\n       caption = \"107 brands, 328 products, 317 names and 17 categories\",\n       tag = \"The Pudding\",\n       x = \"Lightness\",\n       y = \"Brands)\",\n       colour = \"white\")+\n  theme_void(base_family = \"cedarville\") + \n  theme(plot.background = element_rect(fill = \"black\",color=\"black\"),\n        axis.text.x = element_text(size = 30, vjust = 2,color=\"white\"),\n        plot.title = element_text(size = 56,hjust = 0.5,color=\"white\"),\n        plot.subtitle = element_text(size = 46,hjust = 0.5,color=\"white\"),\n        plot.caption = element_text(size = 36,hjust = 0.5, \n                                    margin = margin(t = 5, b = 10),color=\"white\"),\n        plot.tag = element_text()\n        )\n          \n\nplot2<-make_up_for_plot%>%\n  ggplot(aes(brand,lightness,col=hex)) + \n  with_blur(\n    geom_point(show.legend = FALSE)) + \n  geom_jitter(width = 0.15,height = 0.0,size = 2) + \n  scale_colour_identity() +\n  coord_polar(direction=1) +\n  theme_void() + \n  theme(plot.background = element_rect(fill = \"black\")) + \n  facet_wrap(vars(brand))\n\nFinal plot\n\nlibrary(ggimage)\nrequire(magick)\n\n\nmain_plot <- plot1 + plot2\n\nfinal <- main_plot + \n  labs(title = \"Makeup - The naked truth\",\n       subtitle = \"combination for naming their shades\",\n       caption = \"TidyTuesday W14 - The Pudding - Viz - @fgazzelloni\") + \n  scale_fill_manual(values = palette,\n                    guide = guide_legend(title = NULL)) + \n  theme_void(base_family = \"cedarville\") + \n  theme(plot.background = element_rect(fill = \"#FCEBDA\",color = NA),\n        strip.text.x = element_text(color = NA),\n        axis.text.x = element_text(size = 20, vjust = 2),\n        panel.grid.major = element_line(size = 0.03, linetype = 'solid',colour = \"black\"),\n        plot.margin = margin(10, 10, 5, 10),\n        plot.title = element_text(size = 56,hjust = 0.5, margin = margin(t = 5, b = 10)),\n        plot.subtitle = element_text(size = 40,hjust = 0.5),\n        plot.caption = element_text(hjust = 0.5, size = 26))\n\nSave the plot in a .png file\n\nragg::agg_png(here::here(\"w14_the_pudding\", \"w14_the_pudding.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\nRead the image, attach the Tidytuesday logo and save it\n\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nThe_Pudding_plot <- image_read(here::here(\"w14_the_pudding/w14_the_pudding.png\"))\n\nattached_logo <- image_composite(The_Pudding_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"southeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, \n            path = \"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w14_the_pudding/w14_the_pudding.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w13_UN_votes/w13_UN_votes.html",
    "href": "tidytuesday/cases2021/posts2021/w13_UN_votes/w13_UN_votes.html",
    "title": "UN Votes",
    "section": "",
    "text": "Libraries\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(DT)\nlibrary(unvotes)\nlibrary(tidytuesdayR)\nlibrary(ggplot2)\n\nlibrary(showtext)\nfont_add_google(\"Share Tech Mono\", \"techmono\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = FALSE)\n\nGet data\n\nunvotes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-23/unvotes.csv')\nroll_calls <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-23/roll_calls.csv')\nissues <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-23/issues.csv')\n\nUNvotes_full and UNvotes_sub\n\nunvotes_full <- unvotes %>%\n  inner_join(un_roll_calls, by = \"rcid\") %>%\n  inner_join(un_roll_call_issues, by = \"rcid\")\n\nunvotes_sub <- unvotes_full%>%\n  select(date,country,session,vote,issue)\n\nUN Countries\n\ngerman<-unvotes_full%>%filter(str_detect(country, \"Germ\"))\n#table(german$country)\ncongo<-unvotes_full%>%filter(str_detect(country, \"Congo\"))\n#table(congo$country)\nyemen<-unvotes_full%>%filter(str_detect(country, \"Yemen\"))\n#table(yemen$country)\nguinea<-unvotes_full%>%filter(str_detect(country, \"Guinea\"))\n#table(guinea$country)\n\nunvotes_merged_country_names<-unvotes_sub%>%\n  mutate(country=case_when(country==\"Federal Republic of Germany\"~\"Germany\",\n                           country==\"German Democratic Republic\"~\"Germany\",\n                           country==\"Congo - Brazzaville\"~\"Congo\",\n                           country==\"Congo - Kinshasa\"~\"Congo\",\n                           country==\"Micronesia (Federated States of)\"~\"Micronesia\",\n                           country==\"Myanmar (Burma)\"~\"Myanmar\",\n                           country==\"Yemen Arab Republic\"~\"Yemen\",\n                           country==\"Yemen People's Republic\"~\"Yemen\",\n                           country==\"Guinea-Bissau\"~\"Giunea\",\n                           TRUE~country))%>%\n  select(date,country,vote,issue) %>%\n  arrange(date)\n\nby_country_year\n\nby_country_year <- unvotes_merged_country_names %>%\n  group_by(year = year(date), country) %>%\n  summarize(issue,votes = n(),\n            percent_yes = round(mean(vote == \"yes\")*100,1),\n            percent_no = round(mean(vote == \"no\")*100,1),\n            percent_astain = round(mean(vote == \"abstain\")*100,1))\n\nVisualization\n\nlibrary(graphics)\nbck_color <- \"#FEFCEF\"\nmain_plot<-ggplot(data=by_country_year,\n                  aes(x=year,y=votes,col=votes))+\n  geom_line()+\n  geom_point()+\n  scale_x_continuous(breaks=seq(1946,2019,10))+\n  \n  theme_void()+\n  theme(axis.text.x=element_text(color=bck_color))\n\nUN background image\n\nlibrary(ggimage)\n\n\nUN_img=\"https://camo.githubusercontent.com/654fb54c78403255bbe1457b6a75423f5e370ee075eab4db0a189b886b68b8d7/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f652f65652f554e5f656d626c656d5f626c75652e7376672f3132303570782d554e5f656d626c656d5f626c75652e706e67\"\n\ng<-ggbackground(main_plot, UN_img, alpha=.7,color=\"#94BCFF\")\n\nFinal plot annotations\n\nshowtext_auto(enable = TRUE)\nlibrary(patchwork)\nlibrary(sf)\nlibrary(rnaturalearth)\nlibrary(magick)\nlibrary(grid)\nlibrary(png)\n\nfinal <- g + plot_annotation(\n    title = \"UN Votes from 1946 to 2019\",\n    subtitle=\"on six issues: Colonialism,Arms control and disarmament,Economic development,Human rights,Palestinian conflict Nuclear weapons and nuclear material\",\n    caption = \"Visualization: Federica Gazzelloni | Data: Harvards' UN votes\",\n    theme = theme(\n      plot.margin = margin(10,10,10,10),\n      plot.background = element_rect(fill = bck_color, color = NA),\n      plot.caption = element_text(family = \"techmono\", size = 9, color = bck_color, margin = margin(15,0,0,0), hjust = 0.95)\n    )\n  )\n\nragg::agg_png(here::here(\"render\", paste0(\"UN_votes_\",\n                                          format(Sys.time(),\n                                                 \"%Y%m%d_%H%M%S\"),\n                                          \".png\")),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\nRead the image, attach the Tidytuesday logo and save it\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nUN_votes_plot <- image_read(\"~/R/Projects/TidyTuesday/render/UN_votes_20210326_201814.png\")\n\nattached_logo <- image_composite(UN_votes_plot, tidy_logo,\n                                 #offset = \"0+0\",\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"~/R/Projects/TidyTuesday/render/UN_votes_W13.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w19_water_access/w19_water_access.html",
    "href": "tidytuesday/cases2021/posts2021/w19_water_access/w19_water_access.html",
    "title": "Water Access",
    "section": "",
    "text": "Week 19 Water————\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(raster)\nlibrary(spData) # spatial data\nlibrary(spDataLarge)\nlibrary(tmap)    # for static and interactive maps\nlibrary(leaflet) # for interactive maps\n\n\n# loading data --------------------------\ntuesdata <- tidytuesdayR::tt_load(2021, week = 19)\n\n# manipulation ---------------\nwater <- tuesdata$water\nwater$water_source[is.na(water$water_source)] <- \"unknown\"\nwater_df<-water%>%\n  arrange(row_id)%>%\n  clean_names()%>%\n  mutate(report_date=format(as.Date(report_date,\"%m/%d/%Y\")),\n         report_date=as.Date(report_date),\n         water_source=as.factor(water_source),\n         status_id=as.factor(status_id))%>%\n  select(1:6,9)\n\n# loading africa -------------------\nworld_africa = world[world$continent == \"Africa\", ]\nafrica = st_union(world_africa)\n\n# plotting --------------------\nlibrary(extrafont)\nlibrary(patchwork)\n\nwater_plot<-ggplot() +  \n  geom_sf(data = africa) +\n  geom_point(data = water_df,\n             aes(x=lon_deg,y=lat_deg,color=country_name),\n             alpha=0.5) +\n  labs(title=\"Africa source of water by country\",\n       subtitle=\"\",\n       caption=\"Viz. Federica Gazzelloni DataSource: Water Access Points, WPDX TidyTuesday week 19\")+\n  theme_ps()+\n  theme(legend.position = \"none\",\n        plot.margin = margin(5,5,5,5),\n        plot.title = element_text(size=24,family=\"xkcd\",vjust=-2),\n        plot.caption = element_text(size=8,family=\"xkcd\",hjust = 0.5,vjust=-2))\n\n\n# background ---------\nlibrary(ggimage)\n\n\nimage<-\"frame.png\"\n\nfinal_plot<-ggbackground(water_plot, image, alpha=.7,color=\"#94BCFF\")\n\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"tidytuesday_Water.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################ \nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"W19/tidytuesday_Water.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_Water.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w40_NBER_papers/w40_NBER_papers.html",
    "href": "tidytuesday/cases2021/posts2021/w40_NBER_papers/w40_NBER_papers.html",
    "title": "NBER Papers",
    "section": "",
    "text": "Title: “TidyTuesday Week 40 - NBER Programs Category”\n\n\nAuthor: “Federica Gazzelloni”\n\n\nDate: “9/30/2021”\n\n\nDatasource: https://www.nber.org/\n\n#----Libraries----\n# Load the libraries\nlibrary(tidyverse)\nlibrary(tidymodels)\ntidymodels_prefer()\n#library(nberwp)\nlibrary(extrafont)\n#fonts()\nlibrary(RColorBrewer)\nlibrary(patchwork)\n\n#----Load Data----\n# TidyTuesday week40 datasets\npapers <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/papers.csv')\nauthors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/authors.csv')\nprograms <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/programs.csv')\npaper_authors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/paper_authors.csv')\npaper_programs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/paper_programs.csv')\n\n#----Data Wrangling----\n# Joining sets\nauthors <- authors %>% select(author,name)\nprograms <- programs %>% drop_na()\n\ndf <- papers %>%  #count(paper)                # 29434     4\n  inner_join(paper_authors, by =\"paper\") %>%   # 67090     2\n  full_join(paper_programs, by = \"paper\") %>%  # 53996     2\n  inner_join(authors, by = \"author\") %>%       # 15437     2\n  full_join(programs, by = \"program\") %>%      #    20     3\n  drop_na() \n\n# Make a dataframe with programs category and proportions\ndf_cat <- df %>%\n  count(program_desc,program_category,sort=T) %>%\n  mutate(prop = n/sum(n)*100) %>%\n  pivot_wider(names_from = program_category, values_from = program_desc)\n\ndf_cat\n\n# Set the data ready to use in the plot function\n\ndf_plot <- df %>% count(year,program_category,program_desc) \n\nplot_fin_df <- df_plot %>% filter(program_category == \"Finance\")\nplot_mic_df <- df_plot %>% filter(program_category == \"Micro\")\nplot_mac_df <- df_plot %>% filter(program_category == \"Macro/International\")\n\n#----Plot features----\n# Set all the specifications for the plot function to build\n# Make three tibbles as to be used in the legends\nleg_fin <- tibble(\"Finance\"=paste(df_cat$Finance,\"-\",round(df_cat$prop,2),\"%\"))%>%filter(!str_detect(Finance,\"NA\"))\nleg_mic <- tibble(\"Micro\"=paste(df_cat$Micro, \"-\",round(df_cat$prop,2),\"%\"))%>%filter(!str_detect(Micro,\"NA\"))\nleg_mac <- tibble(\"Macro/International\"=paste(df_cat$`Macro/International`,\"-\",round(df_cat$prop,2),\"%\"))%>%filter(!str_detect(`Macro/International`,\"NA\"))\n\nleg_fin;leg_mic;leg_mac\n\n#Set the `color` option for the plot function\nrequire(RColorBrewer)\n# color\ncut_colors1 <- setNames(brewer.pal(2, \"Set1\"), levels(plot_fin_df$program_desc))\ncut_colors2 <- setNames(brewer.pal(4, \"Paired\"), levels(plot_mac_df$program_desc))\ncut_colors3 <- setNames(c(brewer.pal(name = \"Set3\", n = 12), brewer.pal(name = \"Pastel1\", n = 2)), levels(plot_mic_df$program_desc))\n\n# Unlist legends-dataframe to be used in the legends\n# leg_lab\nleg_fin <- unlist(leg_fin$Finance)\nleg_mac <- unlist(leg_mac$`Macro/International`)\nleg_mic <- unlist(leg_mic$Micro)\n\n# leg_pos  \nset1 = c(0.73,0.78)\nset2 = c(0.7,0.8)\nset3 = c(0.55,0.8)\n\n#----ggcombo-------\n# Make a `ggcombo()` plot building a function for plotting the program categories\n\nggcombo <- function(data1,data2,data3){\n  \n  ggbar_cat <- function(data,leg_pos,leg_lab,leg_col,color){\n    \n    data %>%\n      ggplot(aes(x = year,y = n,group = program_desc,fill = program_desc)) +\n      geom_col() +\n      facet_wrap(vars(program_category), ncol = 1, strip.position = \"right\") +\n      \n      scale_fill_manual(values = color, label = leg_lab, name = paste(data[[1,2]],\"category Impact proportion\")) +\n      scale_y_continuous(position = \"right\") +\n      guides(fill = guide_legend(ncol = leg_col,title.position = \"top\", title.hjust = 0.5)) +\n      ggthemes::theme_fivethirtyeight() +\n      theme(text = element_text(family = \"Roboto Condensed\"),\n            axis.text.x = element_text(face = \"bold\",size = 8),\n            axis.text.y = element_text(),\n            legend.text = element_text(size = 8),\n            legend.key.size = unit(0.3, 'cm'),\n            legend.title = element_text(face = \"bold\"),\n            \n            legend.position = leg_pos,\n            legend.background = element_blank(),\n            strip.placement = \"outside\",\n            strip.text = element_text(face = \"bold\",size = 14))\n  }\n  \n  plot_fin <- ggbar_cat(data1,set1,leg_fin,1,cut_colors1)\n  plot_mac <- ggbar_cat(data2,set2,leg_mac,1,cut_colors2)\n  plot_mic <- ggbar_cat(data3,set3,leg_mic,2,cut_colors3)\n  \n  require(patchwork)\n  plot_fin <- plot_fin +\n    labs(title = \"\\n\",subtitle = \"\\n\")\n  \n  plot_fin/plot_mac/plot_mic\n}\n\n\n# Assign a name to the ggcombo \nplot <- ggcombo(plot_fin_df,plot_mac_df,plot_mic_df)\n\n\n#----Pie chart----\n# Make a pie_chart logo\npie_colors <- brewer.pal(name = \"Set2\", n = 3)\n\npie_df <- df %>%\n  count(program_desc,program_category,sort = T) %>%\n  mutate(prop = n/sum(n)*100)\n\npar_prop <- pie_df %>%\n  group_by(program_category) %>%\n  summarize(par_prop = round(sum(prop),0))\n\npie_plot <- pie_df %>%\n  left_join(par_prop,by = \"program_category\") %>%\n  ggplot(aes(x = \"\", y = prop, fill = program_category)) +\n  geom_col(width = 1, stat = \"identity\") +\n  scale_fill_manual(values = pie_colors,name = \"NBER Programs Category\") +\n  guides(fill = guide_legend(ncol = 1,title.position = \"top\", title.hjust = 0.5)) +\n  ggthemes::theme_fivethirtyeight() +\n  theme(text = element_text(family = \"Roboto Condensed\"),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text = element_blank(),\n        legend.text = element_text(size = 14),\n        legend.key.size = unit(0.5, 'cm'),\n        legend.title = element_text(face = \"bold\",size = 16),\n        legend.position = \"none\",#c(0.21,0.9),\n        legend.background = element_blank(),\n        strip.placement = \"outside\") +\n  annotate(geom = \"text\", label = \"Micro\\n62%\", x = 1.1, y = 20, colour = \"grey20\", size = 14, family = \"Roboto Condensed\") +\n  annotate(geom = \"text\", label = \"Macro\\n28%\", x = 1.2, y = 80, colour = \"grey20\",size = 14, family = \"Roboto Condensed\") +\n  annotate(geom = \"text\", label = \"Finance\\n10%\", x = 1.2, y = 95, colour = \"grey20\", size = 11,family = \"Roboto Condensed\") +\n  coord_polar(\"y\", start = 0) \n\n# save the pie_chart_logo\nragg::agg_png(here::here(\"w40/w40_pie_ep.png\"),\n              res = 320, width = 8, height = 8, units = \"in\")\npie_plot\ndev.off()  \n\n#----Annotations----\n# Annotate the figure first with adding top and bottom information to have it framed with `ggarrange()`\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\nlibrary(ggpubr)\n\ngraphics <- ggarrange(plot)\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"NBER National Bureau of Economic Research\",\n                                              color = c(\"grey28\"), face = \"bold\", size = 34,\n                                              family = \"Roboto Condensed\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: NBER - TidyTuesday week40\\n\",\n                                                 color = \"grey28\",family = \"Roboto Condensed\",\n                                                 hjust = 0.5, x = 0.58, face = \"bold.italic\", size = 16)\n)\n\n\n# Finally, add some other extra information with more annotations\nlibrary(gridExtra)\n\nfinal_plot <-\n  final_plot +\n  \n  annotate(geom = 'segment',y = 0.87, yend = 0.93, x = 0.9,xend = 0.9, color = \"#1E90FF\", size = 10) +\n  \n  annotate(geom = \"text\", label = \"All three Program Categories reached the top level in 2020 with \n           the highest number of paper publications due to Covid19\",\n           x = 0.58, y = 0.90,colour = \"grey20\",size = 6,family = \"Roboto Condensed\",fontface = \"bold\") +\n  \n  annotate(geom = \"text\", label = \"Finance topic started in 1978 \n           but with lack of success since late 1990 \n           when started its continuous growth\",\n           x = 0.25, y = 0.7,colour = \"grey20\",size = 5,family = \"Roboto Condensed\") +\n  \n  annotate(geom = \"text\", label = \"Macro/International topic started in 1975 \n           reaching the highest level among the other \n           categories, after the first decrease in early 1990 decade, \n           most probably for the increased interest in other topics, \n           maintained a steady growth along the years\",\n           x = 0.28, y = 0.5,colour = \"grey20\",size = 4,family = \"Roboto Condensed\") +\n  \n  annotate(geom = \"text\", label = \"Micro topic is the most varied one, \n           and maintained little but steady increase \n           along the whole period\",\n           x = 0.24, y = 0.15,colour = \"grey20\",size = 5,family = \"Roboto Condensed\") \n\n#----Logos----\n# add the logos \nimg_pie <- image_read(here::here(\"w40_NBER_papers/pie_ep.png\"))\nimglogo <- image_read(here::here(\"w40_NBER_papers/nber-logo.png\"))\n\nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(img_pie, x = 0.05, y = 0.35,width = 0.22) +\n  draw_image(imglogo, x = 0.01, y = -0.48,width = 0.2)\n\n\n#----Save final plot----\nragg::agg_png(here::here(\"w40_NBER_papers/w40_NBER_papers.png\"),\n              res = 320, width = 10, height = 12, units = \"in\")\nfinal\ndev.off()\n\n#----Tidytuesday logo----\n# read the image, attach the Tidytuesday logo and save it\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\ntidy_final <- image_read(here::here(\"w40_NBER_papers/w40_NBER_papers.png\"))\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator = \"atop\",\n                                 gravity = \"southeast\")\n\nimage_write(attached_logo, path = \"w40_NBER_papers.png\", format = \"png\")"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w37_formula1/w37_formula1.html",
    "href": "tidytuesday/cases2021/posts2021/w37_formula1/w37_formula1.html",
    "title": "FORMULA1",
    "section": "",
    "text": "TidyTuesday Week37 - FORMULA1\n\nlibrary(tidyverse)\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 37)\n\nresults <- tuesdata$results\nqualifying <- tuesdata$qualifying\nconstructors <- tuesdata$constructors\ndrivers <- tuesdata$drivers\n\n\nmy_df <- qualifying%>%\n  left_join(results%>%select(raceId,driverId,constructorId,points), by=c(\"raceId\",\"driverId\",\"constructorId\")) %>%\n  left_join(constructors,by=\"constructorId\") %>%\n  left_join(drivers%>%select(driverId,forename,surname),by=\"driverId\") %>%\n  count(qualifyId,raceId,driverId,forename,surname,constructorId,name,number,position,points,sort=T) %>%\n  unite(\"driver_name\",forename:surname,sep=\" \",remove=TRUE) %>%\n  count(driverId,driver_name,constructorId,name,number,position,points)%>%\n  arrange(position,-number,-points) %>%\n  filter(position<=10)\n\n\nrank_df<- my_df%>%\n  group_by(name,position)%>%\n  summarize(total=sum(points),.groups=\"drop\")%>%\n  ungroup()%>%\n  arrange(position) %>%\n  pivot_wider(values_from = total,names_from=position)\n\nrank_df[is.na(rank_df)]<-0\n\n\n# rank_df <- column_to_rownames(rank_df,var = \"driver_name\")\n\nrank_df\n\n#library(ggbump)\nlibrary(ggrepel)\nlibrary(extrafont)\n#fonts()\n\nrank_df_long <- rank_df %>%arrange(-`1`)%>% slice(1:10)%>%\n  pivot_longer(cols = 2:11,names_to=\"position\",values_to=\"points\")%>%\n  mutate(position=as.numeric(position),\n         position=factor(position))\n\nsummary_first_position <- rank_df_long%>%filter(name==c(\"Mercedes\",\"Red Bull\",\"Ferrari\"))%>%filter(position==1)%>%summary()\n\nlibrary(hrbrthemes)\nlibrary(GGally)\nlibrary(viridis)\n\ncolors <- c(\"#0EED4D\", \"#008B00\", \"#17B6EB\",\n            \"#C00000\" , \"#FF8700\", \"#00D2BE\",\n            \"#0600EF\", \"#FFF500\", \"#E68C17\", \"#0082FA\")\n\ncolors2 <- c(\"grey70\", \"grey70\", \"grey70\",\n            \"#C00000\" , \"#FF8700\", \"#00D2BE\",\n            \"#0600EF\", \"grey70\", \"grey70\", \"grey70\")\n\n\nplot <- rank_df_long%>%\n  ggplot(aes(x=fct_reorder(position,-position),y=points,group=name,color=factor(name)))+\n  geom_point(aes(size=points),shape = 21, fill = \"white\",  stroke = 5)+\n  geom_line(size=2)+\n  scale_color_manual(values = colors2)+\n  labs(y=\"Points\",x=\"Positions\",\n       color=\"Top 10 Constructors\",size=\"Points\")+\n  theme_gray()+\n  theme(text = element_text(family=\"Impact\",color=\"grey90\"),\n        plot.margin = margin(1,1,1,1,unit = \"pt\"),\n        panel.grid.major.y = element_line(size=2),\n        panel.background = element_rect(color=\"grey20\",fill=\"grey20\"),\n        plot.background = element_rect(color=\"grey20\",fill=\"grey20\"),\n        legend.key = element_blank(),\n        legend.background = element_blank(),\n        legend.text = element_text(color=\"grey90\",size=14),\n        legend.title = element_text(color=\"grey90\",size=14),\n        axis.text = element_text(color=\"grey90\"),\n        axis.title = element_text(size=14),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.y = element_blank()\n  )\n\n\nlibrary(ggpubr)\ngraphics <- ggarrange(plot)+\n  theme(plot.background = element_rect(fill=\"#228B22\", color = NA))\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"FORMULA 1 WINNER CONSTRUCTORS\",\n                                              color = c(\"red\"), face = \"bold\", size = 45,\n                                              family = \"Impact\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: Ergast API, TidyTuesday week37\",\n                                                 color = \"black\",family = \"Impact\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 20),\n                              left = text_grob(\"FORMULA 1\", color = c(\"#778899\"), rot = 90,size = 30),\n                              right = text_grob(bquote(\"FORMULA1\"), color = c(\"#778899\"),rot = 90,size = 30),\n                              fig.lab = \"TidyTuesday week37\", fig.lab.face = \"bold.italic\",fig.lab.size = 12,\n                              fig.lab.pos = \"bottom.right\"\n)\n\n\n\nfinal_plot <-\n  final_plot +\n\n  annotate(geom = \"text\", label = \"Lewis Hamilton\\nNico Rosberg\\n Valtteri Bottas \\n- Mercedes\",\n           x = 0.11, y = 0.85,colour = \"#00D2BE\",size = 4,family = \"Impact\") +\n  annotate(geom = \"curve\", x = 0.07, xend = 0.09, y = 0.85, yend = 0.76, colour = \"#00D2BE\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"Impact\",size=1.5) +\n\n  annotate(geom = \"text\", label = \"Sebastian Vettel\\nMark Webber\\nMax Verstappen - Red Bull\",\n           x = 0.23, y = 0.49,colour = \"#0600EF\",size = 4.5,family = \"Impact\") +\n  annotate(geom = \"curve\", x = 0.25, xend = 0.28, y = 0.53, yend = 0.69, colour = \"#0600EF\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Impact\",size=1.5) +\n\n  annotate(geom = \"text\", label = \"Charles Leclerc\\nFernando Alonso\\n - Ferrari\",\n           x = 0.1, y = 0.63,colour = \"#C00000\",size = 4,family = \"Impact\") +\n  annotate(geom = \"curve\", x = 0.09, xend = 0.10, y = 0.67, yend = 0.70, colour = \"#C00000\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Impact\",size=1.5) +\n\n  annotate(geom = \"text\", label = \"F1\",x = 0.85, y = 0.88, colour = \"red\", size = 5,family = \"Impact\") +\n\n  annotate(geom = \"text\", label = \"MERCEDES, RED BULL and FERRARI\\n reached the higest level of points\\n at being number one\\nwith an average of 418.8 points\",x = 0.7, y = 0.81, colour = \"white\", size = 7,family = \"Impact\")+\n\n\n  annotate(geom = \"text\", label = \"Lewis Hamilton - McLaren\",x = 0.7, y = 0.53, colour = \"#FF8700\", size = 5,family = \"Impact\") +\n  annotate(geom = \"curve\", x = 0.68, xend = 0.64, y = 0.52, yend = 0.41, colour = \"#FF7F00\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Impact\",size=1.5)\n\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\n\n\nlogo_f1_img <- image_read(here::here(\"w37/F1.svg.png\"))\n\n\nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(logo_f1_img, x = 0.1, y = 0.47,width = 0.12)\n\n\n\n## Save final plot ----\n\nragg::agg_png(here::here(\"w37/formula1_second_version.png\"),\n              res = 320, width = 16, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w52_starbucks/w52_strabucks.html",
    "href": "tidytuesday/cases2021/posts2021/w52_starbucks/w52_strabucks.html",
    "title": "Starbucks drinks",
    "section": "",
    "text": "library(tidyverse)\n\nstarbucks <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-21/starbucks.csv')\n\n\nhead(starbucks)\n\n\nmy_coffee<-starbucks%>%count(product_name,sort=T)%>%slice(1:10)%>%select(-n)%>%unlist()\n\n\n\nlibrary(extrafont)\nlibrary(showtext)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=110)\nlibrary(sysfonts)\nfont_add_google(name =\"Black Han Sans\" ,family = \"my_font\")\nfont_add_google(name =\"Odibee Sans\" ,family = \"my_font1\")\n\nfamily = \"my_font\"\nfamily1 = \"my_font1\"\n\n\nimage <- \"w52/cup.png\"\n\ndata<- starbucks%>%\n  mutate(trans_fat_g=as.numeric(trans_fat_g),fiber_g=as.numeric(fiber_g))%>%\n  select(-size,-milk,-serv_size_m_l)%>%\n  filter(product_name%in%my_coffee)%>%\n  arrange(product_name)%>%\n  mutate(product_name =fct_reorder(product_name,-calories)) %>%\n  group_by(product_name)%>%\n  summarise_all(.funs = mean)%>%\n  ungroup()%>%\n  tibble::column_to_rownames(\"product_name\")%>%\n  as.matrix()%>%\n  scale()%>%\n  as.data.frame()%>% \n  rownames_to_column()%>%\n  rename(product=rowname)%>%\n  mutate(product=as.factor(product))%>%\n  pivot_longer(cols=-product,names_to=\"names\",values_to=\"values\")%>%\n  mutate(names=gsub(\"_g|_mg\",\"\",names),\n         names=gsub(\"_\",\" \",names),\n         names=gsub(\"total \",\"\",names))%>%\n  mutate(names=ifelse(names==\"saturated fat\",yes = \"satur fat\",no = names))%>%\n  mutate(names=tools::toTitleCase(names),\n         values=round(values,5))%>%\n  mutate(img = image)%>%\n  group_by(product)%>%\n  mutate(values2 =ifelse(values==max(values),values,NA),\n         values3 =ifelse(values==min(values),values,NA))%>%\n  ungroup()%>%\n  mutate(imagemax=ifelse(!is.na(values2),img,NA),\n         imagemin=ifelse(!is.na(values3),img,NA))\n\nlibrary(RColorBrewer)\n  my_hmap<- data%>%\n    ggplot(mapping=aes(x=fct_reorder(names,values),y=fct_reorder(product,values),\n           fill=factor(values)))+\n  geom_tile(show.legend = F) +\n  ggimage::geom_image(aes(image=imagemax,scale=values),\n                      asp = 1.5, size = 0.1, by = \"width\") +\n  ggimage::geom_image(aes(image=imagemin,scale=values),\n                      asp = 1.5, size = 0.1, by = \"width\") +\n  labs(title=\" \")+\n  scale_fill_manual(values=colorRampPalette(brewer.pal(5, \"BrBG\"))(98))+\n  scale_color_manual(values=colorRampPalette(brewer.pal(5, \"BrBG\"))(98))+\n  theme_void()+\n  theme(text = element_text(family=family1,color=\"#F5F5F5\"),\n        axis.title = element_blank(),\n        axis.text.y = element_text(vjust=0,hjust=0.95,size=16),\n        axis.text.x = element_text(size=11),\n        plot.background = element_blank(),\n        panel.background = element_blank())\n  \n\n\n# build a nice legend\nlibrary(circlize)\ncol_fun = circlize::colorRamp2(c(0, 0.5, 1), c(\"#A6611A\", \"#F5F5F5\", \"#018571\"))\nlgd = ComplexHeatmap::Legend(at = c(0, 0.5, 1),\n                             labels = c(\"  Low\", \"\", \"  High\"),\n                             col_fun = col_fun, \n                             grid_width = unit(3.4, \"cm\"),\n                             labels_gp = gpar(col = \"#F5F5F5\", \n                                              fontsize=11,\n                                              fontface=\"bold\"))\n \nComplexHeatmap::draw(lgd)\ndev.off()\n\nlibrary(cowplot)\nlibrary(grid)\nleg<-grid.grabExpr(ComplexHeatmap::draw(lgd))\nlegend<-plot_grid(leg)\nclass(legend)\n\n# remove bg from pictures\n# https://www.remove.bg/upload\n\n # assemble all the pieces\n library(cowplot)\nfinal<- ggdraw()+\n  draw_image(image=\"w52/bg.jpg\",scale=1.5,x=0)+\n  draw_image(\"w52/title.png\",x=-0.05,y=0.35,scale=0.9)+\n  draw_plot(my_hmap,scale=0.83,x=0.05,y=-0.05)+\n  draw_label(\"STARBUCKS 10' COFFEE\",x=0.48,y=0.9,size=55,color=\"black\",\n             fontfamily = family,fontface = \"bold\")+\n  draw_image(\"w52/cup.png\",scale=0.5,x=-0.435,y=-0.25)+\n  draw_plot(legend,x=-0.422,y=-0.28)+\n  draw_label(\"STARBUCKS\",x=0.067,y=0.17,\n             size=9,color=\"black\",fontfamily = family)+\n  draw_label(\"DataSource: Starbucks Coffee Company | DataViz: Federica Gazzelloni\",\n             x=0.3,y=0.03,size=11,color=\"#F5F5F5\",\n             fontfamily = family1)+\n  draw_image(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\",\n             x=0.45,y=0.45,scale=0.09)\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w52/starbucks.png\"),\n              #res = 320, \n              width = 1200, \n              height = 675, \n              units = \"px\",\n              #pointsize = 12,\n              background = \"white\",\n              scaling = 1)\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w50_spiders/w50_spiders.html",
    "href": "tidytuesday/cases2021/posts2021/w50_spiders/w50_spiders.html",
    "title": "Spiders",
    "section": "",
    "text": "library(tidyverse)\nspiders <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-07/spiders.csv')\n\n# spiders%>%View\nsp_family_graph<-spiders%>%\n  count(family,genus,species,sort=T)%>%\n  select(-n)\n\n# https://stackoverflow.com/questions/24173194/remove-parentheses-and-text-within-from-strings-in-r\nmy_spider_countries<- spiders%>%\n  separate(distribution,into=c(\"country\",\"region\"),sep=\",|;\",remove = FALSE)%>%\n  mutate(country=stringi::stri_trans_totitle(country))%>%\n  mutate(country2=gsub(\"\\\\s*\\\\([^\\\\)]+\\\\)*\",\"\",country))%>%\n  mutate(country2=gsub(\"^D.r.|Dr.\",\"Dem. Rep. \",country2))%>%\n  \n  mutate(country2=gsub(\"^ \",\"\",country2))%>%\n  \n  mutate(country2=gsub(\" To .*$\",\"\",country2))%>% \n  \n  mutate(country2=gsub(\" Or .*$\",\"\",country2))%>% \n  \n  mutate(country2=gsub(\"Is.$\",\"Islands\",country2))%>%\n  \n  mutate(country2=gsub(\"\\\\?$\",\"\",country2))%>%\n  mutate(country2=gsub(\" And .*$\",\"\",country2))%>%#\n  \n  mutate(country2=gsub(\". Introduced$\",\"\",country2))%>%\n  \n  mutate(country2=case_when(str_detect(country2,\"Austral\")~\"Australia\",\n                            #str_detect(country2,\"Rep.\")~\"Republic\",\n                            str_detect(country2,\"Bahama\")~\"Bahamas\",\n                            str_detect(country2,\"Brazi\")~\"Brazil\",\n                            str_detect(country2,\"Brezi\")~\"Brazil\",\n                            str_detect(country2,\"Bosnia Herzegovina\")~\"Bosnia and Herz.\",\n                            #str_detect(country2,\"Canary\")~\"Canary Islands\",\n                            str_detect(country2,\"Caribbean\")~\"Caribbean\",\n                            str_detect(country2,\"Czechia\")~\"Czech Rep.\",\n                            str_detect(country2,\"Cina\")~\"China\",\n                            str_detect(country2,\"Central Africa\")~\"Central African Rep.\",\n                            str_detect(country2,\"Asia\")~\"Asia\",\n                            str_detect(country2,\"Cape Verde\")~\"Cape Verde\",\n                            str_detect(country2,\"Colombia\")~\"Colombia\",\n                            str_detect(country2,\"Columbia\")~\"Colombia\",\n                            str_detect(country2,\"Europ\")~\"Europe\",\n                            str_detect(country2,\"Himalaya\")~\"Himalayas\",\n                            str_detect(country2,\"Indonesia\")~\"Indonesia\",\n                            str_detect(country2,\"Guinea\")~\"Guinea\",\n                            str_detect(country2,\"Usa\")~\"United States\",\n                            str_detect(country2,\"Britain\")~\"United Kingdom\",\n                            str_detect(country2,\"Ecuador\")~\"Ecuador\",\n                            str_detect(country2,\"Ghana\")~\"Ghana\",\n                            str_detect(country2,\"Greece\")~\"Greece\",\n                            str_detect(country2,\"Guadeloupe\")~\"Guadaloupe\",\n                            str_detect(country2,\"Kyrgystan\")~\"Kyrgyzstan\",\n                            str_detect(country2,\"Laos\")~\"Laos\",\n                            str_detect(country2,\"Malaysia\")~\"Malaysia\",\n                            str_detect(country2,\"Spain\")~\"Spain\",\n                            str_detect(country2,\"Reunion\")~\"Réunion\",\n                            str_detect(country2,\"Saint Lucia\")~\"Saint Lucia\",\n                            str_detect(country2,\"São Tomé\")~\"São Tomé Príncipe\",\n                            str_detect(country2,\"Kerguelen\")~\"Kerguelen Islands\",\n                            str_detect(country2,\"St. Vincent\")~\"St. Vincent\",\n                            str_detect(country2,\"Virgin Islands\")~\"Virgin Islands\",\n                            str_detect(country2,\"Mexic\")~\"Mexico\",\n                            TRUE~country2))%>%\n  filter(!str_detect(country2,\"Unknown|West|North|Western|East|Poss|prob|Pres|Prob\"))\n\n\nit_to_from<-my_spider_countries%>%\n  filter(country2==\"Italy\")%>%\n  mutate(region=trimws(region))%>%filter(!is.na(region))%>% #count(region)%>%View\n  mutate(region=gsub(\"\\\\?$\",\"\",region))%>%\n  mutate(region=gsub(\"Central Europe to \",\"\",region))%>%#count(region)%>%View\n  filter(!str_detect(region,\"Central to \"),\n         !region==\"south-eastern Europe\")%>%#count(region)%>%View\n  mutate(region=gsub(\" and|to*$\",\"\",region))%>%\n  mutate(region=case_when(str_detect(region,\"Greece\")~\"Greece\",\n                          str_detect(region,\"Ukraine\")~\"Ukraine\",\n                          str_detect(region,\"Russia\")~\"Russia\",\n                          TRUE~region))%>%\n  mutate(region=gsub(\"\\\\)$\",\"\",region))%>%\n  rename(from=country2,to=region)\n\n#it_to_from%>%count(to)\n\n# library(ggraph)\n# library(igraph)\n# library(tidyverse)\n\nspiders_Balkans <-  c(\"Bulgaria\",\"Albania\",\"Greece\",\"Bosnia\",\"Kosovo\",\"Macedonia\",\n                      \"Montenegro\",\"Romania\",\"Serbia\")%>%as_tibble()%>%\n  rename(to=value)\n\nitaly_to<-it_to_from%>%count(to)%>%select(-n)\nitaly_to<- italy_to%>%filter(!to==\"Balkans\")\nitaly_to <- rbind(italy_to,spiders_Balkans)%>%unlist()\n\n\nworld <- map_data(\"world\")%>%\n  filter(!region==\"Antarctica\")\n\nitaly<- world%>%\n  filter(region==\"Italy\")\n\n\nlibrary(sf)\n# centroids and coords with spData::world-----\nworld2_geo<- spData::world\n# library(countrycode)\n# countrycode::codelist\n\n# italy centroids\nit_centroids<- world2_geo%>%\n  filter(name_long==\"Italy\")%>%\n  st_centroid()%>%\n  st_coordinates()%>%\n  as.data.frame()%>%\n  mutate(from=\"Italy\")%>%\n  rename(long_from=X,lat_from=Y)\n\n# extrapolate the centroids for italy_to countries\nto_country_geom<- world2_geo%>%\n  filter(name_long%in%italy_to) %>% #22 out of  28\n  st_centroid()%>%select(name_long)# %>%count(name_long) \n\n# check missing values\nas.data.frame(italy_to)%>% # count(italy_to) # 28\n  anti_join(to_country_geom,by=c(\"italy_to\"=\"name_long\")) # missing values (\"Malta\",\"North Macedonia\",\"Russia\",\"Sardinia\",\"Sicily\",\"Bosnia\")\n\n\nto_centroids<- to_country_geom%>%\n  st_coordinates()%>%\n  as.data.frame()%>%\n  rename(long_to=X,lat_to=Y)\n\n\n\nto_df<-cbind(to=to_country_geom$name_long,to_centroids)%>%\n  filter(!to%in%c(\"Kosovo\",\"France\"))    \n# 46.261157084423814, 2.3345436786735583\n\n\n\n\nto_and_from<- it_to_from%>%\n  count(family,genus,species,subspecies,year,from,to)%>%\n  select(-n)%>%\n  filter(to%in%to_df$to) %>%\n  left_join(it_centroids,by=\"from\") %>%#count(to)\n  left_join(to_df,by=\"to\")#%>%count(to,long_to,lat_to)\n\n\nbalkans_to<- to_df%>%\n  filter(to%in%c(\"Serbia\",\"Montenegro\",\"Macedonia\",\"Albania\"))%>%\n  merge(it_centroids)\n\n\nlng_rng <- range(to_and_from$long_to)\nlat_rng <- range(to_and_from$lat_to)\n\nlibrary(extrafont)\nloadfonts()\nlibrary(showtext)\nfont_add(family = \"Blackwidow\", regular = \"Blackwidow-o6ga.ttf\") # https://www.fontspace.com/blackwidow-font-f23155\n#font_add(family = \"Montserrat\", regular = \"Montserrat-Regular.ttf\") # https://fonts.google.com/specimen/Montserrat?category=Sans+Serif\nshowtext_auto()\nshowtext_opts(dpi = 320)\n\n# map--------\n\nitaly_map<-ggplot(world)+\n  # rest of the countries ploygons\n  geom_polygon(aes(x=long,y=lat,group=group),\n               alpha=0.5,fill=\"darkcyan\",color=\"grey58\") +\n  # italy polygon\n  geom_polygon(data=italy,\n               aes(x=long,y=lat,group=subregion),\n               color=\"azure4\",fill=\"darkgoldenrod3\") +\n  # name of the countries (to)\n  geom_text(data= to_df,\n            aes(x=long_to,y=lat_to,label=to),\n            color=\"black\",nudge_y = 0.5,nudge_x=0.5,\n            family=\"Blackwidow\",size=6) +\n  # to points\n  geom_point(data= to_df,\n             aes(x=long_to,y=lat_to),\n             color=\"#D16296\",size=4,alpha=0.9,shape=21,stroke=2)+\n  # points connections\n  geom_curve(data= to_and_from,\n               aes(x = long_from, y = lat_from, \n                   xend = long_to, yend = lat_to),\n             curvature = 0.2,size=0.3,\n             color=\"dodgerblue4\",\n             alpha=0.4,\n             arrow = arrow(length = unit(0.25, \"cm\"))) +\n  # adding balkans countries points connections\n  geom_curve(data= balkans_to,\n             aes(x = long_from, y = lat_from, \n                 xend = long_to, yend = lat_to),\n             curvature = 0.2,size=0.3,\n             color=\"dodgerblue4\",\n             alpha=0.4,\n             arrow = arrow(length = unit(0.25, \"cm\"))) +\n  # stroke of centre point of italy\n  geom_point(data= it_centroids,\n             aes(x=long_from,y=lat_from),\n             color=\"#D16296\",size=3,shape=21,stroke=2,alpha=0.9) +\n  # center point of italy\n  geom_point(data= it_centroids,\n             aes(x=long_from,y=lat_from),\n             color=\"yellow2\",size=1) +\n  geom_text(data= it_centroids,\n             aes(x=long_from,y=lat_from,\n                 label=\"Italy\"),\n            family=\"Blackwidow\",nudge_y = 1,\n             color=\"black\",size=10) +\n  geom_curve(aes(x = 12.1, y = 42.8, \n            xend = 2.3345436786735583, yend = 46.261157084423814),\n             curvature = 0.2,size=0.3,\n             color=\"dodgerblue4\",\n             alpha=0.4,\n             arrow = arrow(length = unit(0.25, \"cm\"))) +\n  geom_text(aes(x = 2.3345436786735583, y = 46.261157084423814,\n                label=\"France\"),\n            family=\"Blackwidow\",nudge_y = 1,\n            color=\"black\",size=8)+\n  coord_cartesian(xlim=c(-8.42048,54.28545),ylim=c(28.18548,49.14882))+\n  labs(caption=\"Datasource: World Spiders Database | Majer et al, 2015 | #TidyTuesday week50\\nDataViz: Federica Gazzelloni\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family=\"Roboto Condensed\"),\n        plot.caption = element_text(size=11))\n\n# export the radial plot and save it as .png\n\n# gt table -----------\n# https://gt.rstudio.com/reference/tab_options.html\nlibrary(gt)\nlibrary(tidyverse)\nlibrary(glue)\n\nspiders_italy <-  filter(my_spider_countries, grepl(\"Italy\", country2))\nspiders_italy<- spiders_italy%>%filter(!is.na(subspecies))\n\ntax_tb<-spiders_italy %>%\n  arrange(year)%>%\n  select(Year=year,Family=family,Genus=genus,Species=species,Subspecies=subspecies) %>%\n  gt() %>%\n  tab_header(\n    title = md(\"**Italy-Spiders Taxonomy**\"),\n    subtitle = glue(\"1907 to 1973\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"Datasource: **World Spiders Database** | Majer et al, 2015\")\n  )  %>%\n  tab_options(table.background.color=\"#D16296\")%>%\n  bstfun::as_ggplot()\n\n\n# final touches----------\nlibrary(cowplot)\nfinal_plot<- ggdraw(italy_map)+\n  draw_label(\"Spiders from Italy to?\",x=0.55,y=0.1,\n             fontfamily = \"Blackwidow\",size=65)+\n draw_line(x=c(0.715,0.985),y=c(0.52,0.52),size=45,\n           color=\"#D16296\")+\n  \n draw_label(\"The history of Italian spiders formally begins in 1868,\\na list of 404 species were reported at the time.\\nThere were unbalanced discoveries between \\nnorthen and southern Italy.\\nKnowledge on Italian spiders increased rapidly, \\nbetween 1901-1951\\nSpiders are mostly found in Alto-Adige, Valle D'Aosta,\\nLombardia,Veneto,Calabria and Sardegna.\",\n             x=0.85,y=0.52,size=10,color=\"white\",\n            fontfamily=\"Roboto Condensed\")+\n  draw_plot(tax_tb,scale=0.37,x=0.35,y=0.3)+\n  draw_image(\"w50/arages_small.png\",scale=0.1, x=-0.44,y=0.35)+\n  draw_image(\"w50/ESA.jpg\",scale=0.08,x=-0.44,y=0.25)+\n  draw_image(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\",\n             scale=0.1,x=-0.44,y=0.45) \n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w50/spiders2.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w29_scoobydoo/w29_scoobydoo.html",
    "href": "tidytuesday/cases2021/posts2021/w29_scoobydoo/w29_scoobydoo.html",
    "title": "Scoobydoo",
    "section": "",
    "text": "scooby doo font\nfonts\n\n\nlibrary(gistfo)\nlibrary(carbonate)\n\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(ggtext)\nlibrary(viridis)\nlibrary(extrafont)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ggpubr)\nlibrary(png)\nlibrary(grid)\nlibrary(magick)\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 29)\nscoobydoo <- tuesdata$scoobydoo\nhead(scoobydoo)\n\n\nscoobydoo_long <- scoobydoo%>%\nselect(-imdb,-engagement,-run_time,-trap_work_first,-c(if_it_wasnt_for:door_gag),\n-c(jeepers:rooby_rooby_roo),-c(fred_va:scooby_va),-c(split_up:set_a_trap))%>%\nmutate(caught_other=as.character(caught_other),\ncaught_not=as.character(caught_not),\nunmask_other=as.character(unmask_other))%>%\npivot_longer(cols=contains(\"caught\"),names_to=\"caught\",values_to=\"caught_value\")%>%\npivot_longer(cols=contains(\"captured\"),names_to=\"captured\",values_to=\"captured_value\")%>%\npivot_longer(cols=contains(\"unmask\"),names_to=\"unmask\",values_to=\"unmask_value\")%>%\npivot_longer(cols=contains(\"snack\"),names_to=\"snack\",values_to=\"snack_value\")%>%\npivot_longer(cols=c(non_suspect,arrested),names_to=\"investigate\",values_to=\"investigate_value\")%>%\npivot_longer(cols=c(batman:blue_falcon),names_to=\"super_hero\",values_to=\"super_hero_value\")\n\n\nhead(scoobydoo_long)\n\n\nnames(scoobydoo_long)\n\n\ndim(scoobydoo_long)\n\n\nscoobydoo_long %>% \n  select(date_aired,caught,caught_value) %>%\n  mutate(year=lubridate::year(date_aired)) %>%\n  filter(caught_value==\"TRUE\") %>%\n  ggplot(aes(x=(year/1969)/100000,y=factor(caught),group=caught)) +\n  geom_col(aes(fill=caught)) +\n  guides(fill=\"none\") + \n  labs(title=\"Who caught more within the years?\") +\n  theme_fivethirtyeight() +\n  theme(axis.text.x = element_text(angle=0))\n\nPlotting final:\n\nscooby_family <- \"Scooby Doo\"\n\ncolors <- c(\"Fred\"=\"#0000CD\",\n            \"Scooby\"=\"#8B3E2F\",\n            \"Shaggy\"=\"#228B22\",\n            \"Daphnie\"=\"#FFD700\",\n            \"Velma\"=\"#FF7F00\")\n\ncaught <- scoobydoo_long %>% \n  select(date_aired,caught,caught_value) %>%\n  mutate(year=lubridate::year(date_aired)) %>%\n  filter(caught_value==\"TRUE\",year==\"1969\") %>%\n  ggplot(aes(caught,fill=caught)) +\n  geom_histogram(aes(y = after_stat(count / max(count))),stat=\"count\") + \n  scale_y_continuous(labels = scales::percent) +\n  scale_x_discrete(labels=c(\"Fred\",\"Scooby\", \"Shaggy\")) +\n  scale_fill_manual(values=c(\"#0000CD\",\"#8B3E2F\",\"#228B22\")) +\n  guides(fill=\"none\") +\n  labs(title=\"Caught\",y=\"\") +\n  theme_fivethirtyeight() +\n  theme(text=element_text(size=16,  family=scooby_family),\n        axis.text.x = element_text(size=10),\n        axis.title.x = element_blank())\n\ncaptured <- scoobydoo_long %>% \n  select(date_aired,captured,captured_value) %>%\n  mutate(year=lubridate::year(date_aired)) %>%\n  filter(captured_value==\"TRUE\",year==\"1969\") %>%\n  ggplot(aes(captured,fill=captured)) +\n  geom_histogram(aes(y = after_stat(count / max(count))),stat=\"count\") + \n  scale_y_continuous(labels = scales::percent) +\n  scale_x_discrete(labels=c(\"Daphnie\",\"Fred\",\"Scooby\", \"Shaggy\",\"Velma\")) +\n  scale_fill_manual(values=c(\"#FFD700\", \"#0000CD\",\"#8B3E2F\",\"#228B22\",\"#FF7F00\")) +\n  guides(fill=\"none\") +\n  labs(title=\"Captured\") +\n  theme_fivethirtyeight() +\n  theme(text=element_text(size=16,  family=scooby_family),\n        axis.text.x = element_text(size=10),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank())\n\nunmask <- scoobydoo_long %>% \n  select(date_aired,unmask,unmask_value) %>%\n  mutate(year=lubridate::year(date_aired)) %>%\n  filter(unmask_value==\"TRUE\",year==\"1969\") %>%\n  ggplot(aes(unmask,fill=unmask)) +\n  geom_histogram(aes(y = after_stat(count / max(count))),stat=\"count\") + \n  scale_y_continuous(labels = scales::percent) +\n  scale_x_discrete(labels=c(\"Fred\",\"Scooby\", \"Shaggy\",\"Velma\")) +\n  scale_fill_manual(values=c(\"#0000CD\",\"#8B3E2F\",\"#228B22\",\"#FF7F00\")) +\n  guides(fill=\"none\") +\n  labs(title=\"Unmask\",y=\"\") +\n  theme_fivethirtyeight() +\n  theme(text=element_text(size=16,  family=scooby_family),\n        axis.text.x = element_text(size=10),\n        axis.title.x = element_blank() )\n\nsnack <- scoobydoo_long %>% \n  select(date_aired,snack,snack_value) %>%\n  mutate(year=lubridate::year(date_aired)) %>%\n  filter(snack_value==\"TRUE\",year==\"1969\") %>%\n  ggplot(aes(snack,fill=snack)) +\n  geom_histogram(aes(y = after_stat(count / max(count))),stat=\"count\") + \n  scale_y_continuous(labels = scales::percent) +\n  scale_x_discrete(labels=c(\"Daphnie\",\"Fred\",\"Shaggy\",\"Velma\")) +\n   scale_fill_manual(values=c(\"#FFD700\", \"#0000CD\",\"#228B22\",\"#FF7F00\")) +\n  guides(fill=\"none\") +\n  labs(title=\"Snack\") +\n  theme_fivethirtyeight() +\n  theme(text=element_text(size=16,  family=scooby_family),\n        axis.text.x = element_text(size=10),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank())\n\nrequire(patchwork)\naction_plot <- caught+captured+unmask+snack\n\nimg <- png::readPNG('all5.png')\n\n lealeft <- ggplot()+\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#87cf80\")) + \n  background_image(img) +\n  action_plot \n \n\ngraphics <- ggarrange(lealeft) \n\nfinal_plot <- annotate_figure(graphics,\n               top = text_grob(\"Scooby-Doo 1969: Percent of \", \n                               color = c(\"#778899\"), face = \"bold\", size = 35,family=\"Scooby Doo\"),\n               bottom = text_grob(\"DataViz: @fgazzelloni DataSource: \\n TidyTuesday week29, Scooby-Doo,Kaggle,ScoobyPedia\",\n                                  color = \"#6C7B8B\",family=\"Scooby Doo\",\n                                  hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n               left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size=10),\n               right = text_grob(bquote(\"\"), color=c(\"#778899\"),rot = 90,size=10),\n               fig.lab = \"TidyTuesday week29\", fig.lab.face = \"bold.italic\",fig.lab.size=8,\n               fig.lab.pos=\"bottom.right\"\n)\n\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label=\"Scooby-Doo and Guess Who?\",x = 0.24, y = 0.87, \n           colour = \"#BF3EFF\", size = 9,family=scooby_family) +\n  annotate(geom = \"text\", label=\"Velma\",x = 0.10, y = 0.71, colour = \"#FF7F00\", size = 7,family=scooby_family) +\n  annotate(geom = \"text\", label=\"Shaggy\",x = 0.13, y = 0.82, colour = \"#228B22\", size = 7,family=scooby_family) +\n  annotate(geom = \"text\", label=\"Scooby\",x = 0.23, y = 0.67, colour = \"#8B3E2F\", size = 7,family=scooby_family) +\n  annotate(geom = \"text\", label=\"Fred\",x = 0.33, y = 0.78, colour = \"#0000CD\", size = 7,family=scooby_family) +\nannotate(geom = \"text\", label=\"Daphnie\",x = 0.40, y = 0.72, colour = \"#FFD700\", size = 7,family=scooby_family) \n\n  \nrequire(cowplot)\n\nimg2 <- png::readPNG('car_all5.png')\nimg3 <- png::readPNG('scooby.png')\n\n\nfinal <- ggdraw() +\n  draw_image(img2,  x = 0.4, y = 0.41, scale = .2) +\n  draw_image(img3,  x = -0.41, y = 0.45, scale = .15) +\n  draw_plot(final_plot)\nfinal\n\nSaving:\n\nragg::agg_png(here::here(\"w29\", \"w29_scoobidoo.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w27_animal_rescues/w27_animal_rescues.html",
    "href": "tidytuesday/cases2021/posts2021/w27_animal_rescues/w27_animal_rescues.html",
    "title": "Animal Rescues",
    "section": "",
    "text": "Week 27 TidyTuesday Animal Rescues\nmore reading: Animal rescues by London fire brigade rise 20% in pandemic year - TrackReconstruction - animate bar plot - composition of plots - annotate\n\nlibrary(tidyverse)\nlibrary(ggpubr)\nlibrary(ggthemes)\nlibrary(ggalt)\nlibrary(gganimate)\nlibrary(ggdist)\nlibrary(ggExtra)\nlibrary(ggtext)\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 27)\nanimal_rescues <- tuesdata$animal_rescues\n\nhead(animal_rescues)\n\n\ndim(animal_rescues)\n\n\nnames(animal_rescues)\n\n\nanimal_rescues_small <- animal_rescues %>% \n  select(date_time_of_call,cal_year,incident_notional_cost,animal_group_parent,\n         special_service_type,ward,borough,stn_ground_name,latitude,longitude) %>%\n  mutate(borough=tolower(borough)) %>% \n  drop_na() %>%\n  mutate(animal_group_parent=case_when(stringr::str_detect(animal_group_parent,\"^Unknown\") ~ \"Unknown\",\n                                       TRUE ~ animal_group_parent),\n         cal_year=as.factor(cal_year) ,\n         incident_notional_cost=ifelse(incident_notional_cost==\"NULL\",0,incident_notional_cost),\n         incident_notional_cost=as.numeric(incident_notional_cost),\n         date_time_of_call=as.Date(date_time_of_call,\"%d/%m/%Y\")) %>%\n  rename(date=date_time_of_call,year=cal_year) %>%\n  mutate(month=lubridate::month(date),\n         day=lubridate::day(date)) %>%\n  complete(date = full_seq(date, 1)) %>%\n  mutate(incident_notional_cost_full = round(spline(x = date, y = incident_notional_cost, xout = date)$y))\n  \n\nstr(animal_rescues_small)\n\nanimal_rescues_small %>% count(incident_notional_cost) %>% arrange(-n) #desc(incident_notional_cost))\n\n\nDataExplorer::profile_missing(animal_rescues_small)\n\n\ncalls <- animal_rescues_small%>%group_by(year)%>%count(year)%>%arrange(-n)\n\n\nbar_plot <- ggplot(data=animal_rescues_small%>%drop_na(),aes(x=year,y=borough)) + \n  geom_col(aes(group=borough,fill=borough,color=borough)) +\n  geom_text(data=calls, aes(x= year, y=n, label=n), hjust=0.5,\n           position = position_stack(vjust = 18),fontface = \"bold\"\n            )+\n  guides(color=\"none\",fill=\"none\") +\n  labs(title=\"Numbers of call by Year to the London Fire Brigate for Animal Rescues\",\n       x=\"Year\",y=\"by London Borough\") + \n  ggthemes::theme_calc() +\n  theme(axis.text.y = element_blank(),\n        axis.text.x = element_text(size=8),\n        axis.title.x = element_text(vjust=-2),\n        axis.ticks.x = element_line(size=2,color=\"pink\"),\n        plot.title = element_text(face=\"bold\",size=11),\n        plot.margin = unit(c(0.5,0.5,0.5,0.5), \"cm\"))\n\nbar_plot\n\n\nbox_plot <- animal_rescues_small %>%  drop_na() %>% # count(year)\n  filter(incident_notional_cost<2000) %>%\n  ggplot(aes(x=fct_reorder(animal_group_parent, incident_notional_cost),y=incident_notional_cost, group=animal_group_parent)) +\n  geom_boxplot(aes(color=animal_group_parent),size=0.5,alpha=0.4) +\n  scale_y_continuous(labels = scales::comma) +\n  guides(color=\"none\") +\n  labs(title=\"LFB Animal Rescues - Incident notional cost 2009 - 2021\",\n       color=\"Animal group parent\", y=\"Cost value £\",x=\"\") +\n  coord_flip() +\n  ggthemes::theme_calc() +\n  theme(axis.text.y = element_text(size=8,angle=0),\n        axis.text.x = element_text(size=8,angle=0),\n        axis.title.x = element_text(vjust=-2),\n        axis.ticks.x = element_line(size=2,color=\"pink\"),\n        axis.ticks.y = element_line(size=2,color=\"pink\"),\n        panel.grid.major.y = element_line(size=0.2),\n        plot.title = element_text(face=\"bold\",size=11),\n        plot.margin = unit(c(0.5,0.5,0.5,0.5), \"cm\"))\n\nbox_plot\n\n\nsmoth_line <-animal_rescues_small%>%\n  group_by(month)%>%\n  summarise(med_val=median(incident_notional_cost))%>%\n  ungroup() \n\n\n\ncost_month_plot <- ggplot(data=smoth_line,aes(x=month,y=med_val))+\n  geom_point(shape=21,aes(fill=month)) +\n  geom_line(linetype = 3)+\n  geom_smooth(size=0.3,fill=\"pink\") +\n  geom_boxplot(data=subset(animal_rescues_small,incident_notional_cost<500 & incident_notional_cost>200),\n               aes(x=month,y=incident_notional_cost,group=month,color=month),fill=NA) +\n  geom_text(aes(label=med_val),vjust = -1) +\n  scale_x_discrete(limits =seq(1,12,1), labels=c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\n                                                 \"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"))+\n  guides(fill=\"none\",color=\"none\") + \n  labs(title=\"Cost of incident by month (2009 - 2021)\",\n       x=\"Month\",y=\"Median value £\") +\n  ggthemes::theme_calc() +\n  theme(axis.text.y = element_blank(),\n        axis.text.x = element_text(size=8),\n        axis.title.x = element_text(vjust=-2),\n        axis.ticks.y = element_blank(),\n        axis.ticks.x = element_line(size=2,color=\"pink\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_line(size=0.1),\n        plot.title = element_text(face=\"bold\",size=11),\n        plot.margin = unit(c(0.5,0.5,0.5,0.5), \"cm\"))\n\ncost_month_plot\n\n\nsmoth_line_yr <-animal_rescues_small%>%#count(year)\n  mutate(year=as.numeric(year))%>% #count(year)\n  group_by(year)%>%\n  summarise(tot_val=sum(incident_notional_cost_full))%>%\n  ungroup() \n\n\n\ncost_yr_plot <- ggplot(data=smoth_line_yr,aes(x=year,y=tot_val))+\n  geom_point(shape=21,aes(fill=year)) +\n  geom_line(linetype = 3)+\n  geom_smooth(size=0.3,fill=\"pink\") +\n  geom_text(aes(label=scales::comma(tot_val)),vjust = -1.5,size=3) +\n  scale_x_discrete(limits =seq(1,13,1),labels=seq(2009,2021,1))+\n  guides(fill=\"none\",color=\"none\") + \n  labs(title=\"Annual cost of incidents by Year (2009 - 2021)\",\n       y=\"Annual cost - median value £\",x=\"Year\") +\n  ggthemes::theme_calc() +\n  theme(axis.text.y = element_blank(),\n        axis.text.x = element_text(size=8),\n        axis.title.x = element_text(vjust=-2),\n        axis.ticks.y = element_blank(),\n        axis.ticks.x = element_line(color=\"pink\",size=1),\n        panel.grid.major.x = element_line(size=0.1),\n        panel.grid.major.y = element_blank(),\n        plot.title = element_text(face=\"bold\",size=11),\n        plot.margin = unit(c(0.5,0.5,0.5,0.5), \"cm\"))\n\ncost_yr_plot  \n\n\np1 <- ggarrange(bar_plot, box_plot + \n                font(\"x.text\", size = 9),\n                ncol = 1, nrow = 2)\np2 <- ggarrange(cost_month_plot, cost_yr_plot +\n                font(\"x.text\", size = 9),\n                ncol = 1, nrow = 2)\ngraphics<- ggarrange(p1, p2, ncol = 2, nrow = 1)\n\n\n\n\nfinal_plot <- annotate_figure(graphics,\n               top = text_grob(\"Animal rescues by London fire brigade rise 20% in pandemic year\", \n                               color = c(\"#FF34B3\", \"#FFFFFF\", \"#FFFFFF\"), face = \"bold\", size = 14),\n               bottom = text_grob(\"DataViz: @fgazzelloni DataSource: \\n TidyTuesday and Animal Rescues - London.gov - The Guardian - week27\",\n                                  color = \"blue\",\n                                  hjust = 1, x = 1, face = \"italic\", size = 10),\n               left = text_grob(\"Last year 337 animals were helped compared with 269 in 2019\", color = c(\"#BA55D3\", \"#FFFFFF\", \"#FFFFFF\"), rot = 90,size=10),\n               right = text_grob(bquote(\"The LFB calculates the average cost of each rescue to be £346\"), rot = 90,size=10),\n               fig.lab = \"TidyTuesday week27\", fig.lab.face = \"bold\"\n)\n\nfinal_plot\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w27\",\"w27_animals.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()\n\n##################################################"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w35_lemurs/w35_lemurs.html",
    "href": "tidytuesday/cases2021/posts2021/w35_lemurs/w35_lemurs.html",
    "title": "Lemurs",
    "section": "",
    "text": "inspired by https://github.com/cararthompson/30DayChartChallenge/blob/main/scripts/2.2_animals.R\nrm(list = ls()) ## Load libraries —-\n\nlibrary(tidyverse)\nlibrary(extrafont)\nlibrary(cowplot)\nlibrary(ggExtra)\nextrafont::fonts()\n\n## Read in data ----\nlemurs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-08-24/lemur_data.csv')\n\n#-----------\n\ndf <- lemurs %>%\n  filter(!sex == \"ND\") %>%\n  mutate(year_dob = lubridate::year(dob),\n         month_dob = lubridate::month(dob),\n         .after = dob) %>%\n  mutate(year_dod = lubridate::year(dod),\n         month_dod = lubridate::month(dod),\n         .after = dod) %>%\n  group_by(taxon,sex,birth_type, dob,year_dob,month_dob,dod,year_dod,month_dod,age_max_live_or_dead_y,age_category) %>%\n  summarize(mean_weight = round(mean(weight_g)/1000,2)) %>%\n  ungroup() %>%\n  filter(!mean_weight == 0) %>%\n  filter(!is.na(age_max_live_or_dead_y)) %>%\n  filter(!birth_type == \"unknown\") %>%\n  rename(mum_age_category = age_category,\n         max_age = age_max_live_or_dead_y) %>% #\n  mutate(status = if_else(is.na(dod),\"alive\",\"dead\"),\n         .after = dod) %>%\n  mutate(status_id = case_when(\n    status == \"alive\" ~ 1,\n    status == \"dead\" ~ 0),\n    .after = status )  %>% # DataExplorer::profile_missing()\n  mutate(birth_type = case_when(\n    birth_type == \"CB\" ~ \"captive-born\",\n    birth_type == \"WB\" ~ \"wild-born\",\n    TRUE ~ \"unknown\")) %>%\n  mutate(mum_age_category = case_when(\n    mum_age_category == \"IJ\" ~ \"infant\",\n    mum_age_category == \"young_adult\" ~ \"young\",\n    TRUE ~ mum_age_category)) %>%\n  select(-status) %>%\n  mutate(birth_type_id = if_else(birth_type == \"captive-born\",1,0),\n         sex_id = if_else(sex == \"F\",1,0),\n         mum_age_category_id = case_when(mum_age_category == \"infant\" ~ 1,\n                                         mum_age_category == \"young\" ~ 2,\n                                         mum_age_category == \"adult\" ~ 3)) %>%\n  mutate(sex = if_else(sex == \"F\",\"Female\",\"Male\"))\n\n\ndf <- df %>%\n  mutate(mean_weight_class = case_when(mean_weight<=0.2 ~ \"0.01 - 0.1\",\n                                       mean_weight>0.1 & mean_weight<=0.8 ~ \"0.11 - 0.8\",\n                                       mean_weight>0.8 & mean_weight<=1.45 ~ \"0.81 - 1.45\",\n                                       mean_weight>1.45 & mean_weight<=2.3 ~ \"1.46 - 2.3\",\n                                       mean_weight>2.3 ~ \"2.3 +\")) %>%\n  mutate(mean_weight_class = factor(mean_weight_class))\n\ndf_taxon_id <- df %>% count(taxon,sort = TRUE) %>% mutate(taxon_id = row_number()) %>% select(-n)\ndf_weight_class_id <- df %>% count(mean_weight_class) %>% mutate(weight_class_id = row_number()) %>% select(-n)\n\ndf <- df %>%\n  inner_join(df_weight_class_id, by = \"mean_weight_class\") %>%\n  inner_join(df_taxon_id, by = \"taxon\") %>%\n  select(last_col(),everything())\n# %>% select(-taxon,-mean_weight_class)\n\nhead(df,3)\n#--------\n\n# Create label data\nlabels <- tibble(mum_age_category = c(\"Infant\", \"Young\", \"Adult\"),\n                 mum_age_category_x = c(0, 0, 0),\n                 mum_age_category_y = c(1, 1, 1))\n\n\n\n\n## Create colour scheme and theme ----\nlemurs_hues <- c(\"#d2dbe4\", \"#8a5d24\", \"#646376\", \"#192029\", \"#acb3bf\", \"#596e94\")\n\ntheme_lemurs_light <- function() {\n  theme_minimal() %+replace%\n    theme(text = element_text(colour = lemurs_hues[4]),\n          axis.text = element_text(size = 8),\n          axis.title = element_text(size = 10),\n          axis.ticks = element_blank())\n}\n\n## Plot it ----\n\n\n\n# infant = grey\n# young = light brown\n# adult = light grey\n\np <- ggplot(df) +\n  scale_colour_manual(values = c(lemurs_hues[c(3, 2, 5)]),\n                      labels = c(\"Infant\", \"Young\", \"Adult\")) +\n  scale_fill_manual(values = c(lemurs_hues[c(3, 2, 5)]),\n                      labels = c(\"Infant\", \"Young\", \"Adult\")) +\n  geom_point(aes(x = dob,y = dod, colour = mum_age_category,size = mean_weight),alpha = 0.7) +\n  geom_smooth(aes(x = dob,y = dod, colour = mum_age_category), se = FALSE) +\n      labs(x = \"Year of birth\",\n           y = \"Year of death\",\n           size = \"Years\") +\n      guides(colour = \"none\", size = \"none\") +\n      theme_lemurs_light() +\n  theme(text = element_text(family = \"xkcd\"))\n\n\nmarg <- ggMarginal(p, type = \"densigram\", groupColour = T, groupFill = T, alpha = 0.7)\n\nbm <- ggplot(df, aes(x = mean_weight)) +\n  geom_histogram(aes(y = stat(count),fill = mum_age_category, colour = factor(mum_age_category)),\n                 position = position_dodge(width = 0.3),\n                 bins = 50,\n                 alpha = 0.7, show.legend = T) +\n  guides(color = \"none\") +\n  facet_wrap(vars(sex)) +\n  labs(y = \"N.\",\n       x = \"Lemurs' weight in kg\",\n       fill = \"Lemurs' mother age category\") +\n  scale_fill_manual(values = c(lemurs_hues[c(3, 2, 5)]),\n                    labels = c(\"Infant\", \"Young\", \"Adult\")) +\n  scale_colour_manual(values = c(lemurs_hues[c(3, 2, 5)]),\n                      labels = c(\"Infant\", \"Young\", \"Adult\")) +\n  theme_lemurs_light() +\n  theme(text = element_text(family = \"xkcd\"),\n        legend.position = c(0.5,1.1),\n        legend.justification = \"center\",\n        legend.direction = \"horizontal\"\n        )\n\ntitle <- ggdraw() +\n  draw_label(\"Is Lemurs life expectancy distribution dependent from their mums status at pregnancy?\",\n             fontfamily = \"xkcd\",\n             colour = lemurs_hues[6],\n             hjust = 0.5,\n             size = 22)\n\nsubtitle <- ggdraw() +\n  draw_label(\"Baby lemurs stay with their mothers for about two years. In this time span, the baby lemurs are nursed and protected by their mother.\n             When it grows up the lemur stays in the troop, if it is a female, or otherwise it joins another group. The life span of a lemur is approximately eighteen years\",\n             fontfamily = \"xkcd\",\n             colour = lemurs_hues[4],\n             hjust = 0.5,\n             size = 12)\n\ncaption <- ggdraw() +\n  draw_label(\"TidyTuesday week35 - InfoGraphic: Federica Gazzelloni - Source: Lemurs,Kaggle,Zehr et al, 2014 - Nature\",\n             fontfamily = \"xkcd\",\n             colour = lemurs_hues[4],\n             hjust = 0.5,\n             size = 9)\n\ncombined_p <- plot_grid(title,\n                        subtitle,\n                        marg,\n                        bm,\n                        caption,\n                        ncol = 1,\n                        rel_heights = c(0.05, 0.1, 0.6, 0.2, 0.05))\n\n\n\n\n\nlibrary(ggpubr)\ngraphics <- ggarrange(combined_p)\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"\",\n                                              color = c(\"#8a5d24\"), face = \"bold\", size = 24,\n                                              family = \"xkcd\"),\n                              bottom = text_grob(\"\",\n                                                 color = \"#6C7B8B\",family = \"xkcd\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n                              left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size = 10),\n                              right = text_grob(bquote(\"\"), color = c(\"#778899\"),rot = 90,size = 10),\n                              fig.lab = \"TidyTuesday week35\", fig.lab.face = \"bold.italic\",fig.lab.size = 8,\n                              fig.lab.pos = \"bottom.right\"\n)\n\nfinal_plot <- \n  final_plot +\n  \n  annotate(geom = \"text\", label = \"In the wild, ring-tailed lemurs can live about 20 years. \n           They are the most commonly found species of lemur in zoos, \n           where they can live up to a decade longer.\",\n           x = 0.15, y = 0.65,colour = \"black\",size = 3,family = \"xkcd\") +\n  \n  annotate(geom = \"text\", label = \"\",\n           x = 0.15, y = 0.65,colour = \"black\",size = 3,family = \"xkcd\") +\n  \n  annotate(geom = \"text\", label = \"The Indri,also known as the Babakoto,is the biggest living lemur. \n           A tree-dwelling Madagascar species, the Indri is known to grow as tall as 3 feet, \n           and weigh as much as 10 pounds.\",\n           x = 0.77, y = 0.18,colour = \"black\",size = 3,family = \"xkcd\") +\n  \n  annotate(geom = \"text\", label = \"Adult\",x = 0.83, y = 0.78, colour = \"#FF7F00\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Young\",x = 0.73, y = 0.58, colour = \"#FF7F00\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Infant\",x = 0.1, y = 0.5, colour = \"#FF7F00\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.81, xend = 0.76, y = 0.78, yend = 0.72, colour = \"#FF7F00\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.72, xend = 0.68, y = 0.6, yend = 0.65, colour = \"#FF7F00\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.12, xend = 0.2, y = 0.5, yend = 0.43, colour = \"#FF7F00\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n\n  annotate(geom = \"text\", label = \"Comparing lemurs' life expectancy and weight\",\n         x = 0.5, y = 0.84,colour = \"#FF7F00\",size = 3,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Male and female ring-tailed lemurs are similar physically.\nThey are roughly the same size, measuring about 42.5 cm or 1.4 ft.\n           from head to rump and weighing roughly 2.25 kg or 5 lb.\",\n           x = 0.67, y = 0.38,colour = \"black\",size = 3,family = \"xkcd\") \n\n\n\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\n\nlemur_img <- image_read(\"image.png\")\n#logo_file <- system.file(\"extdata\", \"logo.png\", package = \"cowplot\")\n  \nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(lemur_img, x = 0.04, y = 0.3,width = 0.15)\n  \n\nfinal\n\n\n## Save plot ----\n\nragg::agg_png(here::here(\"w35/w35_lemurs.png\"),\n              res = 320, width = 12, height = 14, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\nimg <- image_read(\"image.png\")\n\n\ntidy_final <- image_read(\"w35_lemurs.png\")\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator = \"atop\",\n                                 gravity = \"southwest\")\n\nimage_write(attached_logo, path = \"w35_lemurs.png\", format = \"png\")"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w44_ultra_trail_running/w44_ultra_trail_running.html",
    "href": "tidytuesday/cases2021/posts2021/w44_ultra_trail_running/w44_ultra_trail_running.html",
    "title": "Ultra Trail Running",
    "section": "",
    "text": "library(tidyverse)\n\nlibrary(tidyquant)\nlibrary(ggpattern)\n\nlibrary(extrafont)\nloadfonts()\nlibrary(showtext)\nfont_add_google(\"Shadows Into Light\",\"shadow_into_light\")\nfont_add_google(\"Schoolbell\", \"bell\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n#font_families()\n\n\nultra_rankings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv')\nrace <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv')\n\n\nMake one dataset using the key primary variable “race_year_id” as a link between the two datasets\nselect the variables needed for making the map\n\nthere are some missing values, we deal with those later on the making\nCountry to fix:\n\nHong Kong, China ~“China”\nFL, United States ~ “US”\n\nLA, United States\n\nPA, United States\n\nUnited States\nMyoko, Japan ~ “Japan”\nUnited Kingdom ~ “UK”\n\n\nrace%>%\n  inner_join(ultra_rankings ,by=\"race_year_id\") %>% \n  mutate(year=lubridate::year(date))%>% #count(year)\n  mutate(participation=tolower(participation))%>%count(age,gender)\n\n\nmap_df <- race%>%\n  inner_join(ultra_rankings ,by=\"race_year_id\")%>%\n  mutate(year=lubridate::year(date))%>%\n  #select(city,country,gender,year,runner)%>%\n  filter(!is.na(country),!is.na(rank)) %>%\n  mutate(country=case_when(country==\"Hong Kong, China\"~\"China\",\n                           country==\"FL, United States\"~\"USA\",\n                           country==\"LA, United States\"~\"USA\",\n                           country==\"PA, United States\"~\"USA\",\n                           country==\"United States\"~\"USA\",\n                           country==\"United Kingdom\"~\"UK\",\n                           country==\"Myoko, Japan\"~\"Japan\",\n                           TRUE~country)) \n\nLet’s see the cities:\n\nmap_df <- map_df %>% #count(year)\n  arrange(city)%>%\n  mutate(city=tolower(city))%>%\n  mutate(city=gsub(\"\\\\d\",\"\",city),\n         city=gsub(\"\\\\?\",NA,city),\n         city=gsub(\"-\",\"\",city)) \n\ndrop the missing values\n\nmap_df<- map_df%>%drop_na()\n\n\nranks <- map_df%>%\n  filter(rank==\"1\")%>%\n  filter(gender==\"W\")%>%\n  count(country,nationality,distance,time_in_seconds,year)%>%\n  dplyr::select(-n)%>%\n  arrange(-distance,time_in_seconds) %>%#count(distance)\n  slice(1:10)\n\n\ncou_yr_m <- c(\"Finland_2018\",\"France_2019\",\"Spain_2019\",\"Indonesia_2019\",\"USA_2018\")\ncountry_m<- c(\"Finland\",\"France\",\"Spain\",\"Indonesia\",\"USA\")\nlatitude_m<- c(60.192059, 46.7111, 40.416775,-6.200000,40.981613)\nlongitude_m<-c(24.945831,1.7191,-3.703790,106.816666,-73.691925)\n\n\ncou_yr_w<-c(\"UK_2016\",\"Nepal_2018\",\"Greece_2016\",\"Poland_2017\",\"Italy_2018\",\"USA_2017\")\ncountry_w<- c(\"UK\",\"Nepal\",\"Greece\",\"Poland\",\"Italy\",\"USA\")\nlatitude_w<- c(43.844264,27.700769,39.366669,50.012100,42.349998,40.981613)\nlongitude_w<- c(-21.086052,85.300140,22.933332,20.985842,14.166667,-73.691925)\n\nmy_map_text_w<- data.frame(cou_yr_w,country_w,latitude_w,longitude_w)\n\nmy_map_text_m<- data.frame(cou_yr_m,country_m,latitude_m,longitude_m)\n\nload the libraries form the map\n\nlibrary(maps)\nlibrary(rnaturalearth)\nlibrary(sp)\nlibrary(sf)\n\nFirst step for the geo codes and geometry\n\ngeocode() {ggmap} finds latitude and longitude for the cities (See ?register_google)\nne_countries() {rnaturalearth} for world country polygons\nsf() {sf} for simple feature list column\nmap_data() {ggplot2} for a data frame of map data (require(“maps”))\n\nDataset is downloaded from:——–207 matches —– kaggle dataset\ngeonames can be another fount for geocodes\nLoad the data form {rnaturalearth} with geometry and join {maps} with map_data()for the lat and lon\n\n# world data full \nworld_full <- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\")\nworld_data <- filter(world_full, continent != \"Antarctica\")\n\n# world lat&long\nworld<-map_data(map = \"world\") #%>%count(subregion)\n# states lat&long\nstates <- map_data(\"state\") # let's see if we use it\n\nworld_geodata<- world %>%\n  full_join(world_data, by = c(\"region\"=\"name\"))%>%\n  select(long,lat,group,order,region,region_wb) #%>%count(region)\n\n# my df with geocodes\nmap_geodata <- map_df%>%\n  left_join(worldcitiespop_match,by=\"city\")%>%\n  janitor::clean_names()\n\n\ngeom_polygon() for the world borders\ngeom_polygon() for the US borders\ngeom_path() for delimiting world regions\n\n\nmap_geodata_dot <- map_geodata %>% \n  arrange(time_in_seconds)%>%\n  mutate(participation=tolower(participation))%>%\n  mutate(elevation=elevation_gain+elevation_loss,.after=elevation_gain)%>%\n  select(-elevation_gain,-elevation_loss) %>%\n  select(country,latitude,longitude,gender,participation,rank)%>%\n  mutate(country_code = countrycode(country, \n            origin = 'country.name', \n            destination = 'iso2c'),\n         country_code=tolower(country_code))\n\nWe do not use these features:\n\ngeom_polygon(data=world_geodata,aes(x=long,y=lat,group=group),fill=“lightslategray”) +\ngeom_polygon(data = states,aes(x = long, y = lat, group = group),fill=NA,color=“#000000”,size=0.3)+\ngeom_path(data=world,aes(x=long,y=lat,group=group),size=0.1,color=“darkslateblue”) +\n\n\npal_gender<- c(\"deepskyblue4\",\"mediumvioletred\")\n\n\nmy_map_text_w\n\nWest world\n\nworld_west<-  ggplot() +\n  \n  geom_point(data = states,aes(x = long, y = lat),color=\"darkslateblue\",shape=\".\") +\n  geom_point(data=world,aes(x=long,y=lat,group=group),shape=\".\",color=\"darkslateblue\") +\n  \n  # now we need to add our data \n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude,color=factor(gender)),\n             alpha=0.7,stroke=1,size=1,shape = 21,fill=NA) +\n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude),\n             alpha=0.7,shape=\".\",color=\"yellow3\",show.legend = T) +\n  geom_point(data=map_geodata,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  geom_text(data=my_map_text_m,mapping=aes(x=longitude_m, y=latitude_m,label=cou_yr_m),\n            family=\"shadow_into_light\",color=\"gold\",hjust=-0.5) +\n  \n  coord_map(\"ortho\", orientation = c(3.849945, -103.525750, 0)) +\n  \n  guides(color = guide_legend(override.aes = list(size = 5)))+\n  scale_color_manual(values = pal_gender,labels=c(\"Male\",\"Female\")) +\n  labs(x=\"\",y=\"\",color=\"Gender\") +\n  theme_void() +\n  theme(text = element_text(family=\"shadow_into_light\",color=\"gold\"),\n        plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n        panel.background = element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = c(0.2,0.5),\n        legend.text = element_text(family=\"shadow_into_light\"),\n        legend.title = element_text(family=\"shadow_into_light\"))\n\n\nworld_west\n\nEast World\n\nworld_east<-  ggplot() +\n  \n  geom_point(data = states,aes(x = long, y = lat),color=\"darkslateblue\",shape=\".\") +\n  geom_point(data=world,aes(x=long,y=lat,group=group),shape=\".\",color=\"darkslateblue\") +\n  \n  # now we need to add our data \n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude,color=gender),\n             alpha=0.7,stroke=1,size=1,shape = 21,fill=NA,show.legend = F) +\n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  geom_point(data=map_geodata,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  \n  geom_text(data=my_map_text_w,mapping=aes(x=longitude_w, y=latitude_w,label=cou_yr_w),\n            family=\"shadow_into_light\",color=\"gold\",hjust=-0.2) +\n  \n  coord_map(\"ortho\", orientation = c(19.982182, 46.595135, 0)) +\n  \n  scale_color_manual(values = pal_gender) +\n  labs(x=\"\",y=\"\",color=\"\") +\n  theme_void() +\n  theme(text = element_text(family=\"shadow_into_light\",color=\"gold\"),\n        plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n        panel.background = element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"none\")\n\n world_east \n\n\nlibrary(patchwork)\nlibrary(cowplot)\n\nmain_plot <- (world_west + world_east)# +\n  #theme_update(plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n  #             panel.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n  #             plot.margin = margin(0,0,0,0,unit = \"pt\"))\n\n\n# load the libraries for final touches\nlibrary(ggpubr)\n\n# ggarrange from {ggpubr} frames the plot to make side annotations\ngraphics <- ggpubr::ggarrange(main_plot)\n\nfinal_plot <- ggpubr::annotate_figure(graphics,\n                              top = text_grob(\"Global State of Ultra Running 2012-2021\",\n                                              color = c(\"gold\"), face = \"bold\", size = 32,\n                                              family=\"shadow_into_light\",vjust = 0.8),\n                              bottom = text_grob(\"DataSource: BjnNowak-Github Repo, RunRepeat.com-TidyTuesday week44\\n30DayMapChallenge day1 - Infographics: Federica Gazzelloni\",\n                                                 color = \"gold\",family=\"shadow_into_light\",\n                                                 hjust = 0.5, vjust = 0.5, x = 0.5, \n                                                 face = \"bold.italic\", size = 14))\n\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label = \"Top 6 Countries with faster Female runners at distances between 164 and 173 km\",\n         x = 0.5, y = 0.9,colour = \"gold\",size = 4,family = \"shadow_into_light\",fontface = \"bold\")+\n  annotate(geom = \"text\", label = \"Ranking number one faster\",\n         x = 0.91, y = 0.12,colour = \"gold\",size = 4,family = \"shadow_into_light\",fontface = \"bold\")\n\n\nlibrary(cowplot)\nlibrary(ggimage)\nlibrary(magick)\n\n# add the images for the legend keys\nimgrunners <- image_read(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w44/runner.png\")\n\n\n# ggdraw from {cowplot} draw the plot for setting the background colors of the side annotations\nfinal <- cowplot::ggdraw(final_plot) +\n  draw_image(imgrunners, x = 0.9, y = -0.45,width = 0.06) +\n  theme(plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"))\n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w44/w44_runners.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w33_bea_Infrastructure_Investment/w33_bea_Infrastructure_Investment.html",
    "href": "tidytuesday/cases2021/posts2021/w33_bea_Infrastructure_Investment/w33_bea_Infrastructure_Investment.html",
    "title": "Bea Infrastructure Investment",
    "section": "",
    "text": "Introduction\nThe measurement of infrastructure in the U.S. National Economic Accounts (NEAs) considers different metrics, provided are the resources devoted to different types of infrastructure each year and a useful overview of trends.\nClassification of investment categories is provided by North American Industry Classification System (NAICS)\n\nTypes of infrastructure:\n\nBasic: transportation and utilities\nSocial: pubblic safety, education and health\nDigital: it excludes servers owned by private firms outside of NAICS 518 and 519\n\nthe analysis spans through 70 Years of investments from 1947 to 2017.\n\n\nThis analysis starts with analysing the classification of the investment categories by looking at:\n\n\nThe original datasets provided by the website are very useful to check whether the category and the meta category variables are homogeneous within the data sets:\n1 - Investment data set:\nInvestment data set is extracted from the original .xlsx file and shows the basic structure of the group categories on which the analysis is based.\n\ndf_inv_raw <- readxl::read_excel(\"infrastructure-data-may-2020.xlsx\", sheet = \"cu$inv\",skip = 2)\n\n\ndf_inv_raw <- df_inv_raw %>% \n  rename(group = ...1, category = ...2) %>% \n  filter(!is.na(category)) %>% \n  mutate(\n    meta_cat = if_else(!is.na(group), category, NA_character_), \n    group_num = group,\n    .after = \"category\"\n    ) \n\n\nDT::datatable(df_inv_raw %>% select(meta_cat,group,category))\n\nIn addtion it contains the gross investment variable which is the variable that will be used in the analysis as one of the factors to construct the Implicit Price Deflators index.\n\nnames(investment)\n\n2 - Chain investment data set:\nIt is extracted as the same as the investment set and it contains the same group of category variables except for one element in the category which is missing, it will be shown in more details further below in the analysis.\nIt doesn’t contains the gross investment variable but it the gross investment chain instead.\n\nnames(chain_investment)\n\n3 - IPD: Implicit Price Deflators data set:\n\nDT::datatable(df_IPD_inv_raw %>% select(meta_cat,group,category))\n\n\nipd <- df_IPD_inv_raw %>%\n  fill(meta_cat, group_num) %>%\n  pivot_longer(names_to = \"year\", values_to = \"gross_inv_ipd\", cols = `1947`:`2017`,\n               names_transform = list(year = as.integer)) %>% \n  filter(is.na(group)) %>% \n  select(-group) \n\nIPD set contains one more meta category as well as one more group number for the GDP element of the vector, which corresponds to group category number 0.\nIn fact the script for the IPD variable changes slightly with the addition of one more line of code.\nIt also contains the gross investment ipd variables whixh is the object of this study.\n\n ipd <- ipd %>%\n  mutate(meta_cat = if_else(category == \"GDP\", \"GDP\", meta_cat)) \n\nnames(ipd)\n\n\n\n\nData can also be loaded via:\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 33)\ntidytuesdayR::readme(tuesdata)\n\n\n\n\n\n\nThe original data sets are very useful to check whether the investments classified within their categories are homogeneous within the other data sets.\nThe analysis starts with checking of the three data sets, to see what are the common categories and if there are any differences. Next step would be to unify the three data sets to make a model for the Implicit Price Deflators.\n\nThe first data set Investment is the one used for understanding the composition of the variables. The other two are quite similar except for the investment variable, and two other differences in group category.\nLet’s start having a look at any missing values:\n\ninvestment <- tuesdata$investment\nDataExplorer::profile_missing(investment)\n\nNo values are missing in investment which is made of 5 variables:\n\ncategory: Category of investment (60 categories)\nmeta_cat: Group category of investment (16 meta categories)\ngroup_num: Group number of investment (1 to 20 number of sub-group of investment category)\nyear: Year of investment (from 1947 to 2017)\ngross_inv: Gross investment in millions of USD (which ranges from -194 to 500 900 millions $)\n\nThe meta_cat vector is the Group category of investment, and it has a sub-group numeric version named group_num, and a sub-sub-group of more specific categories of investments named: category.\nThe last variable is gross_inv i.e. Gross investment which is the sum of gross private domestic investment, government gross investment, and balance on current account, national income and product accounts.\n\nDT::datatable(head(investment,3))\n\n\n\n\n16 meta_cat:\n\nDT::datatable(investment%>%count(meta_cat))\n\n\ninvestment <- investment %>%\n  mutate(meta_cat = case_when(meta_cat==\"Total basic infrastructure\" ~ \"Basic\",\n                              TRUE~meta_cat ))\n\n\n\n\n\n20 sub-group of the meta_cat corresponding to group_num:\n\nDT::datatable(investment %>% count(group_num))\n\n\n\n\n\n60 sub-sub-group category vector:\n\nDT::datatable(investment %>% count(category))\n\nThe list of category contains a specification of the classification method for some of the elements in the vector, such as:\n\nPrivate communications equipment in NAICS 515, 517, 518, and 519\nPrivate computers in NAICS 515, 517, 518, and 519\nOffice buildings, NAICS 518 and 519\nPrivate software in NAICS 515, 517, 518, and 519\n\nThese elements are part of the Digital meta category of investment and the numbers at the ends are to specify that they are classified by the NAICS and only those classified in North America are accepted within the list of digital investments. So, other form of digital investments are not considered in this study.\n\ninvestment <- investment %>%\n  mutate(category = case_when(\n    category==\"Private communications equipment in NAICS 515, 517, 518, and 519\"~\"Private communications equipment\",\n    category==\"Private computers in NAICS 515, 517, 518, and 519\"~\"Private computers\",\n    category==\"Office buildings, NAICS 518 and 519\"~\"Office buildings\",\n    category==\"Private software in NAICS 515, 517, 518, and 519\"~\"Private software\",\n    TRUE~category)) \n\n\n\n\nExploratory analysis on Gross investments shows an increase in investments in the private sector as the most flourishing category within the last 70 years, followed by basic, S&L and social investments in infrastructures. Digital infrastructure and transports are still below 200 000 millions $. To be noted is that the private category for gross investment is still divided by amount of investments, but as a whole it releases the stronger increase over time.\n\nplot1\n\nA second visualization of the gross investment shows the category with the highest level of gross investment within the last 70 years in millions $.\n\nplot2\n\n\nplot3\n\n\nBefore continuing with other visualizations of investment trends, let’s check the other data sets to see the differences and then decide if to make a unified dataframe to use for comparison of gross investments, chained investments with implicit price deflactors (IPDs).\nThe first 4 variables are in common within all datasets, the next step is to check whether there are differences within the first 4 variables.\nThe second set doesn’t contains differences in classification when compared with investment set.\n\nchain_investment <- tuesdata$chain_investment\nDataExplorer::profile_missing(chain_investment)\n\n\nchain_investment <- chain_investment%>% \n  mutate(meta_cat = case_when(meta_cat==\"Total basic infrastructure\" ~ \"Basic\",\n                              TRUE~meta_cat ))\n\n59 chain investment categories:\n\nchain_investment <- chain_investment %>% \n  mutate(category=case_when(category==\"Private communications equipment in NAICS 515, 517, 518, and 519\"~\"Private communications equipment\",\n                            category==\"Private computers in NAICS 515, 517, 518, and 519\"~\"Private computers\",\n                            category==\"Office buildings, NAICS 518 and 519\"~\"Office buildings\",\n                            category==\"Private software in NAICS 515, 517, 518, and 519\"~\"Private software\",\n         TRUE~category)) \n\n“Office buildings” is the only category in “investment” df which doesn’t appear in “chain_investment” df.\n\ncat <- chain_investment %>% count(category) %>% select(-n) %>% unlist()\ninvestment %>% filter(!category %in% cat) %>% \n  count(category)\n\n\nImplicit Price Deflators (IPDs). An implicit price deflator is the ratio of the current-dollar value of a series, such as gross domestic product (GDP), to its corresponding chained-dollar value, multiplied by 100.\n\nipd <- tuesdata$ipd\nDataExplorer::profile_missing(ipd)\n\n\nmeta_inv <- investment%>%count(meta_cat)%>%select(-n)%>%unlist()\nipd%>%filter(!meta_cat%in%meta_inv)%>%count(meta_cat)\n\n\nipd <- ipd%>%\n  mutate(meta_cat = case_when(meta_cat==\"Total basic infrastructure\" ~ \"Basic\",\n                              meta_cat==\"Infrastructure\"~\"Total infrastructure\",\n                              meta_cat==\"Health care\"~\"Health\",\n                                TRUE~meta_cat ))\n\n\nipd <- ipd %>%\n  mutate(category=case_when(category==\"Private communications equipment in NAICS 515, 517, 518, and 519\"~\"Private communications equipment\",\n                            category==\"Private computers in NAICS 515, 517, 518, and 519\"~\"Private computers\",\n                            category==\"Office buildings, NAICS 518 and 519\"~\"Office buildings\",\n                            category==\"Private software in NAICS 515, 517, 518, and 519\"~\"Private software\",\n         TRUE~category)) \n\n60 categories are in the “Implicit Price Deflators” df\n\nipd_cats <-ipd %>% count(category)%>%unlist()\n\ncomparing it with the “investment” and “chain investment” categories, 6 of those have a slightly different name, the best wat to handle this for obtaining a unified data set made of the three sets is to have homogeneous values for the category variable.\nThese are the 6 categories in ipd to be changed:\n\ncat_investment <- investment%>%count(category)%>%select(-n)%>%unlist()\nipd_cats_to_be_renamed <- ipd%>%filter(!category%in%cat_investment)%>%count(category)%>%select(-n)%>%unlist()\n\nipd_cats_to_be_renamed\n\nThese 6 categories are in the investment data set and we want to use these names for the category variable for all the sets:\n\nselected_categories <- investment %>% filter(!category %in% ipd_cats) %>% count(category,group_num) %>% arrange(group_num)\n\nselected_categories\n\n\nipd <- ipd %>% \n  mutate(category = case_when(\n    category == \"Basic\" ~ \"Total basic infrastructure\",\n    category == \"Social\" ~ \"Total social infrastructure\",\n    category == \"Digital\" ~ \"Total digital infrastructure\",\n    category == \"Health care\" ~ \"Health\",\n    category == \"Communications structures\" ~ \"Private communications structures\",\n    TRUE ~ category\n  ))\n\nLet’s see how meta_cat of these 6 categories perform:\n\nplot4\n\n\ntotal_inv_df <- ipd %>% \n  count(category,meta_cat,year,gross_inv_ipd) %>% \n  group_by(year,meta_cat) %>%\n  summarize(total=ifelse(!is.na(round(sum(gross_inv_ipd))),round(sum(gross_inv_ipd)), 0)) %>%\n  ungroup() %>%\n  filter(!total==0) \n\n\nlibrary(extrafont)\nlibrary(showtext)\nshowtext_auto()\nshowtext_opts(dpi = 320)\nfont_add_google(\"Roboto Condensed\", \"roboto condensed\")\n\n\nplot5\n\n\nlibrary(patchwork)\nlibrary(ggpubr)\nlibrary(cowplot)\n\n\nimg <- png::readPNG('images.png')\n\n \n\ngraphics <- ggarrange(plot5) \n\nfinal_plot <- annotate_figure(graphics,\n               top = text_grob(\"IPDs Group investment categories\\n\", \n                               color = c(\"#FFD700\"), face = \"bold\", size = 34,\n                               family=\"roboto condensed\"),\n               bottom = text_grob(\"BEA: measurement of infrastructure in the U.S. National Economic Accounts (NEAs)\\nInfographic: @fgazzelloni\\n DataSource: TidyTuesday Week33: BEA Infrastructure Investment\",\n                                  color = \"#6C7B8B\",family=\"roboto condensed\",\n                                  hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n               left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size=10),\n               right = text_grob(bquote(\"\"), color=c(\"#778899\"),rot = 90,size=10),\n               fig.lab = \"TidyTuesday week33\", fig.lab.face = \"bold.italic\",fig.lab.size=8,\n               fig.lab.pos=\"bottom.right\"\n)\n\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label=\"values of the implicit price deflator ratio\",x = 0.25, y = 0.92, \n           colour = \"black\", face=\"bold\",size = 7,family=\"roboto condensed\") +\n  annotate(geom = \"text\", label=\"Digital just started in 1978 and followed \\nwith a deep decline during the last 40 years\",x = 0.70, y = 0.68, colour = \"#FF7F00\", size = 5,family=\"roboto condensed\") \n\n  \n\nfinal <- ggdraw() +\n  draw_image(img,  x = -0.4, y = -0.48, scale = .15) +\n  draw_plot(final_plot)\n\nfinal\n showtext.auto(enable = FALSE) \n\n\nragg::agg_png(\"w33_bea2.png\",\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\nInvestment on Electric power only appear starting from 1993 with a ratio of 336:\n\nlist<-total_inv_df %>% filter(year==1992)%>%count(meta_cat)%>%select(-n)%>%unlist()\ntotal_inv_df %>% filter(year==1993,!meta_cat%in%list)\n\nmeta_cat are the Group category of investment, there are 4 values which are different within the sets:\n\nHealth care = Health\nInfrastructure = Total infrastructure\nBasic = Total basic infrastructure\nGDP\n\nWe need to add GDP as further meta_cat for both investment and chain_investment sets, and chenge the other three values into common values as shown above.\n\ninv_meta_cats <- investment %>% count(meta_cat) %>% select(-n) %>% unlist()\n\nipd %>% filter(!meta_cat %in% inv_meta_cats) %>% count(meta_cat)\n\nGDP is the only left meta_cat category, that it is not present in the other sets.\n\nipd %>% filter(!meta_cat %in% inv_meta_cats) %>% count(meta_cat)\n\nWhat about category variable? What are the differences in ipd set when compared with the other two?\nAs seen investment and chain_investment sets have the same category variables except for one variable which is “Office buildings”, so next step is to find the differences of this vector in ipd set:\n\ncat_inv <- investment %>% count (category) %>% select(-n) %>% unlist\nipd %>% filter(!category %in% cat_inv) %>% count(category)\n\nwe need to convert these values in ipd set:\n\nBasic = Total basic infrastructure\nCommunications structures = Private communications structures\nDigital = Total digital infrastructure\nGDP\nHealth care = Health\nSocial = Total social infrastructure\n\nFinally, GDP is the category group number 0 which is not in investment and chain investment sets, but only in IPD. While “Office buildings” is only in investment.\n\nipd <- ipd %>% \n  mutate(category = case_when(\n    category==\"Basic\"~\"Total basic infrastructure\",\n    category==\"Communications structures\"~\"Private communications structures\",\n    category==\"Digital\"~\"Total digital infrastructure\",\n    category==\"Health care\"~\"Health\",\n    category==\"Social\"~\"Total social infrastructure\",\n    TRUE~category))\n\n\nipd %>% filter(!category %in% cat_inv) %>% count(category)\n\nThe new data sets will contain the 4 common variables plus these other three:\n\ngross_inv: Gross investment in millions of USD\ngross_inv_chain: Gross investment (chained 2021 dollars) in millions of USD\ngross_inv_ipd: Implicit Price Deflators (IPDs)\n\nThe Implicit Price Deflators (IPDs) is obtained as an index result of:\n[ (gross_inv *100) / (gross_inv_chain *100) ] *100\nThe ipd set contains some missing values, these values are the results of 0 investments for some of the selected categories within the years.\n\nipd %>% filter(is.na(gross_inv_ipd)) %>% count(meta_cat,category)\n\nLet’s calculate the gross_inv_ipd vector with the formula, assigning its value to a different name vector and then check the missing values. To do this we need to join the three sets together:\n\ninvestment_full <- investment%>%\n  full_join(chain_investment,by=c(\"category\",\"meta_cat\",\"group_num\",\"year\")) %>%\n  full_join(ipd,by=c(\"category\",\"meta_cat\",\"group_num\",\"year\")) %>%\n  #filter(meta_cat==\"GDP\"| category==\"Office buildings\") %>% \n  mutate(gross_inv_chain = if_else(category==\"Office buildings\",0,gross_inv_chain),\n         gross_inv_ipd = if_else(gross_inv<=0,0,gross_inv_ipd),\n         gross_inv_ipd2 = if_else(gross_inv_chain==0,0,((gross_inv/100)/(gross_inv_chain/100))*100),\n         gross_inv_ipd2 = round(gross_inv_ipd2,2))\n  #DataExplorer::profile_missing()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w51_spice_girls/w51_spice_girls.html",
    "href": "tidytuesday/cases2021/posts2021/w51_spice_girls/w51_spice_girls.html",
    "title": "Spice Girls",
    "section": "",
    "text": "library(tidyverse)\n\nstudio_album_tracks <- readr::read_csv(\"https://github.com/jacquietran/spice_girls_data/raw/main/data/studio_album_tracks.csv\")\n\n\nstudio_album_tracks%>%select(contains(\"key\"))%>%distinct()%>%arrange(key)\n\ndf<-studio_album_tracks%>%select(danceability,\n                                 year=album_release_year,\n                                 #mode,\n                                 energy,\n                                 loudness,\n                                 speechiness,\n                                 acousticness,\n                                 instrumentalness,\n                                 liveness,valence,duration_ms,tempo)\n\nugly <- ggthemr::define_palette(\n  swatch = c('black', 'red', 'green', 'blue', 'brown', 'purple', 'yellow'), \n  gradient = c(lower = 'red', upper = 'green')\n)\n\nggthemr::ggthemr(ugly)\n\nlibrary(extrafont)\nloadfonts()\nfamily=\"Impact\"\n\nviolins<-df%>%\n  select(-year,-instrumentalness)%>%\n  #recipe()%>%\n  #step_normalize(all_numeric())\n  scale()%>%as.data.frame()%>%mutate(year=df$year)%>%\n  #mutate(duration_ms=duration_ms/sum(duration_ms))%>%#count(duration_ms)\n  pivot_longer(cols=c(1:8),names_to=\"variables\",values_to=\"values\")%>%\n  #pull(values)%>%summary()\n  mutate(variables=tools::toTitleCase(variables),\n         variables=case_when(variables==\"Duration_ms\"~\"Duration in ms\",\n                             TRUE~variables))%>%\n  #mutate(across(variables, factor, levels=c(\"\")\n  ggplot(aes(x=factor(year),y=values,fill=variables))+\n  geom_boxplot(alpha=0.7)+\n  geom_violin(alpha=0.5)+\n  geom_point(color=\"gold\",size=0.2)+\n  facet_wrap(vars(variables),scales=\"free\",nrow = 2)+\n  scale_fill_brewer(type = \"seq\", palette = \"Spectral\")+\n  guides(fill=\"none\")+\n  labs(x=\"\",title=\"\")+\n  theme(text = element_text(family=family),\n        axis.title.y = element_blank(),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        panel.grid = element_line(size=0.3),\n        strip.text = element_text(color=\"hotpink\",size=12),\n        strip.background = element_rect(color=\"black\",fill=\"black\"),\n        axis.line = element_line(color=\"hotpink\",size=2),\n        axis.text.x = element_text(color=\"gold\",size=10),\n        axis.text.y = element_text(color=\"darkolivegreen2\",size=10))\n\n#violins\nbg<-ggplot()+\n  geom_blank()+\n  theme_void()+\n  theme(plot.background = element_rect(color=\"black\",fill=\"black\"))\n\nlibrary(cowplot)\n\nfinal<-ggdraw()+\n  draw_plot(bg)+\n  draw_image(\"w51/spice_bg.png\",scale = 1,\n             y=0.2) +\n # draw_image(\"w51/spices_image.jpg\",scale = 1.2) +\n            # scale=0.4,x=0.25,y=-0.28)+\n  draw_plot(violins,height = 0.55,y=-0.04)+\n  draw_label(\"What Makes a Song Likeable?\",\n             x=0.5,y=0.95,size=42,color=\"gold\",\n             fontfamily = family,fontface = \"bold\")+\n  draw_label(\"What Makes a Song Likeable?\",\n             x=0.5,y=0.95,size=41,color=\"hotpink\",\n             fontfamily = family,fontface = \"bold\")+\n  draw_label(\"DataViz: Federica Gazzelloni\",\n             angle=90,size=9,x=0.02,y=0.8,\n             fontfamily=family)+\n  draw_label(\"DataSource: Spice Girls by Jacquie Tran\",\n             angle=0,size=9,x=0.8,y=0.49,\n             fontfamily=family)+\n  \n  draw_label(\"1996\",\n             angle=15,size=25,x=0.5,y=0.87,\n             fontfamily=family)+\n  draw_label(\"1997\",\n             angle=15,size=23,x=0.65,y=0.83,\n             fontfamily=family)+\n  draw_label(\"2000\",\n             angle=15,size=27,x=0.8,y=0.85,\n             fontfamily=family)+\n  \n  \n  draw_label(\"1996\",color=\"white\",\n             angle=15,size=24,x=0.5,y=0.87,\n             fontfamily=family)+\n  draw_label(\"1997\",color=\"white\",\n             angle=15,size=22,x=0.65,y=0.83,\n             fontfamily=family)+\n  draw_label(\"2000\",color=\"white\",\n             angle=15,size=26,x=0.8,y=0.85,\n             fontfamily=family) +\n  draw_label(\"scaled values\",color=\"white\",\n             angle=0,size=6,x=0.96,y=0.46,\n             fontfamily=family)\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w51/spicegirls.png\"),\n              res = 320, width = 8, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/index.html",
    "href": "tidytuesday/cases2021/index.html",
    "title": "TidyTuesday 2021",
    "section": "",
    "text": "Starbucks drinks\n\n\nNetworks\n\n\n\n\n\n\nDec 21, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpice Girls\n\n\nNetworks\n\n\n\n\n\n\nDec 14, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpiders\n\n\nNetworks\n\n\n\n\n\n\nDec 7, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorld Cup Cricket\n\n\nNetworks\n\n\n\n\n\n\nNov 30, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDr. Who\n\n\nNetworks\n\n\n\n\n\n\nNov 23, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearning with afrilearndata\n\n\nNetworks\n\n\n\n\n\n\nNov 9, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaking maps with R\n\n\nNetworks\n\n\n\n\n\n\nNov 2, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUltra Trail Running\n\n\nNetworks\n\n\n\n\n\n\nOct 26, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBig Pumpkins\n\n\nNetworks\n\n\n\n\n\n\nOct 19, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal Seafood\n\n\nNetworks\n\n\n\n\n\n\nOct 12, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRegistered Nurses\n\n\nNetworks\n\n\n\n\n\n\nOct 5, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNBER Papers\n\n\nNetworks\n\n\n\n\n\n\nSep 28, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEmmy Awards\n\n\nNetworks\n\n\n\n\n\n\nSep 21, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBillboard\n\n\nNetworks\n\n\n\n\n\n\nSep 14, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFORMULA1\n\n\nNetworks\n\n\n\n\n\n\nSep 7, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBird Baths\n\n\nNetworks\n\n\n\n\n\n\nAug 31, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLemurs\n\n\nNetworks\n\n\n\n\n\n\nAug 24, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStarTrek\n\n\nNetworks\n\n\n\n\n\n\nAug 17, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBea Infrastructure Investment\n\n\nNetworks\n\n\n\n\n\n\nAug 10, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParalympic\n\n\nNetworks\n\n\n\n\n\n\nAug 3, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOlympic Medals\n\n\nNetworks\n\n\n\n\n\n\nJul 27, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUS drought\n\n\nNetworks\n\n\n\n\n\n\nJul 20, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScoobydoo\n\n\nNetworks\n\n\n\n\n\n\nJul 13, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInternational Independence Days\n\n\nNetworks\n\n\n\n\n\n\nJul 6, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnimal Rescues\n\n\nNetworks\n\n\n\n\n\n\nJun 29, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUS Public Parks\n\n\nNetworks\n\n\n\n\n\n\nJun 22, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDubois Challenge\n\n\nNetworks\n\n\n\n\n\n\nJun 15, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat Lakes Fish\n\n\nNetworks\n\n\n\n\n\n\nJun 8, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSurvivors\n\n\nNetworks\n\n\n\n\n\n\nJun 1, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMario Kart World\n\n\nNetworks\n\n\n\n\n\n\nMay 25, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAsk a Manager Survey\n\n\nNetworks\n\n\n\n\n\n\nMay 18, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUS Broadband\n\n\nNetworks\n\n\n\n\n\n\nMay 11, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWater Access\n\n\nNetworks\n\n\n\n\n\n\nMay 4, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCeo Departures\n\n\nNetworks\n\n\n\n\n\n\nApr 27, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNETFLIX & Upwards\n\n\nNetworks\n\n\n\n\n\n\nApr 20, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUS Post Office\n\n\nNetworks\n\n\n\n\n\n\nApr 13, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal deforestation\n\n\nEnvironment\n\n\n\nFederica Gazzelloni\n\n\nApr 6, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Pudding\n\n\nConnections\n\n\n\nFederica Gazzelloni\n\n\nMar 30, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUN Votes\n\n\nSocial Networks\n\n\n\nFederica Gazzelloni\n\n\nMar 23, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tidytuesday/cases2023/index.html",
    "href": "tidytuesday/cases2023/index.html",
    "title": "TidyTuesday 2023",
    "section": "",
    "text": "The content is in development. Interested in contributing to Unlocking the power of data visualization with R? Check out our call for contributions.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tidytuesday/cases2022/index.html",
    "href": "tidytuesday/cases2022/index.html",
    "title": "TidyTuesday 2022",
    "section": "",
    "text": "The content is in development. Interested in contributing to Unlocking the power of data visualization with R? Check out our call for contributions.\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]