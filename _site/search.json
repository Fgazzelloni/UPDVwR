[
  {
    "objectID": "mapchallenges/cases2021/posts2021/day25_interactive/day25_interactive.html",
    "href": "mapchallenges/cases2021/posts2021/day25_interactive/day25_interactive.html",
    "title": "Interactive",
    "section": "",
    "text": "Load packages\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(rjson)\nlibrary(jsonlite)\nlibrary(leaflet)\nlibrary(RCurl)\n\ninteractive <- \n  leaflet() %>%\n  #addTiles() %>%  # use the default base map which is OpenStreetMap tiles\n  addProviderTiles(\"Stamen.Terrain\") %>%\n  addMarkers(lng=12.493569397016822, lat=41.894753434569274,\n             popup=\"The birthplace of R\")\n\n\n\nhtmlwidgets::saveWidget(widget=interactive,\n           file=\"interactive.html\",\n           selfcontained=TRUE)"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day15_nopc/day15_nopc.html",
    "href": "mapchallenges/cases2021/posts2021/day15_nopc/day15_nopc.html",
    "title": "Map made without using a Computer",
    "section": "",
    "text": "Overview\nThis is America hand made map."
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day20_movement/day20_movement.html",
    "href": "mapchallenges/cases2021/posts2021/day20_movement/day20_movement.html",
    "title": "Movement",
    "section": "",
    "text": "https://datacatalog.worldbank.org/search?fq=(geographical_extent%2Fcoverage%2Fany(geo:geo%2Fname%20eq%20%27Italy%27))%20and%20(Resources%2Fany(res:res%2Fformat%20eq%20%27TIFF%27))&q=\nhttps://datacatalog.worldbank.org/search/dataset/0038055/Derived-map-of-global-electricity-transmission-and-distribution-lines\nhttps://zenodo.org/record/3538890#.YZulSEbMJo4\nhttps://github.com/carderne/gridfinder\nhttps://rspatial.org/raster/spatial/8-rastermanip.html\nhttps://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/transport-networks\n\n\nlibrary(raster)\nlibrary(tidyverse)\n\n\nit <- rgeoboundaries::gb_adm0(\"italy\")\n\nit: xmin: 6.626621 ymin: 35.49285 xmax: 18.52038 ymax: 47.09178\n\nflights_fortified <- readRDS(\"~/Documents/R/R_general_resources/30DayMapChallenge/day20_movement/data/flights_fortified.rds\")\n\nmy_df <-flights_fortified %>%\n   filter(long>=6.626621 & long<=18.52038)%>%\n  filter(lat>=35.49285 & lat<=47.09178) \n\nmy_df%>%count(name)\n\n\nflights_points <- my_df %>%\n  group_by(group) %>%\n  filter(row_number() == 1 | row_number() == n())\n\n\nragg::agg_png(here::here(\"R_general_resources/30DayMapChallenge/day20_movement/movement_alitalia.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nggplot()+\n  geom_sf(data = it, fill = NA, color = \"#295C9C\", size = 0.4) + \n  geom_path(aes(long, lat, group = id, color = name), \n            alpha = 0.0, size = 0.0, \n            data = my_df) +\n  geom_path(aes(long, lat, group = id, color = name), \n            alpha = 0.2, size = 0.3, color = \"#f9ba00\", \n            data = my_df[my_df$name == \"Alitalia\", ]) +\n  \n  geom_point(data = flights_points[flights_points$name == \"Alitalia\", ], \n             aes(long, lat), alpha = 0.8, size = 0.1, colour = \"white\") +\n  theme(panel.background = element_rect(fill = \"#05050f\", colour = \"#05050f\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks.length = unit(0, \"cm\"),\n        legend.position = \"none\") +\n  coord_sf()\ndev.off()\n\n\nlibrary(cowplot)\n\nfinal <- ggdraw()+\n  draw_image(here::here(\"day20_movement/movement_alitalia.png\"),\n             x = 0.01, y = 0,width = 0.98) +\n  draw_label(label=\"Alitalia flights \",\n             x=0.5,y=0.12,size=25,color=\"white\",fontface = \"bold\",\n             angle = 0) +\n  draw_text(\"Data: openflights - #30DayMapChallenge Day20 Movement\\nInfographics: Federica Gazzelloni\",\n            x=0.5,y=0.05,size=11,color=\"white\")\n\n\n# save final plot\nragg::agg_png(here::here(\"day20_movement/movement2.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day22_boundaries/day22_boundaries.html",
    "href": "mapchallenges/cases2021/posts2021/day22_boundaries/day22_boundaries.html",
    "title": "Boundaries",
    "section": "",
    "text": "https://www.tug.org/pracjourn/2007-4/walden/color.pdf\n\n\nlibrary(ggplot2)\nlibrary(rgeoboundaries)\nlibrary(sf)\nlibrary(spData)\nspData::world\n\n\nrgeoboundaries::gb_clear_cache()\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day22_boundaries/boundaries_base.png\"),\n              res = 320, width = 6, height = 6, units = \"in\")\nworld <- gb_adm1()\nworld_lambert <- st_transform(world, \"+proj=laea +x_0=0 +y_0=0 +lon_0=0 +lat_0=0\")\nworld_lambert%>%\n  ggplot()+\n  geom_sf(aes(geometry=geometry),\n          fill = rgb(red = 0.5, green = 0.7, blue = 0.5, alpha = 0.5),\n          col=\"grey45\",size=0.08)+\n  coord_sf()+\n  ggthemes::theme_fivethirtyeight()+\n  theme(panel.background = element_rect(color=rgb(red = 0.2, green = 0.1, blue = 0.3, alpha = 0.5),\n                                        fill=rgb(red = 0.2, green = 0.4, blue = 0.5, alpha = 0.5)),\n        plot.background = element_blank()\n  )\ndev.off()\n\n\nlibrary(cowplot)\nfinal1<- ggdraw()+\n  draw_image(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day22_boundaries/boundaries_base.png\")+\n  draw_label(\"World Boundaries\",x=0.5,y=0.1,fontface=\"bold\",size=24,color = \"#2B2933\")+\n  draw_text(\"Data: {rgeoboundaries}-#30DayMapChallenge Day 22 Boundaries\\nInfographics: Federica Gazzelloni\",\n            x=0.5,y=0.04,size=10)\n\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day22_boundaries/boundaries.png\"),\n              res = 320, width = 6, height = 6, units = \"in\")\nfinal1\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day5_osm/day5_osm.html",
    "href": "mapchallenges/cases2021/posts2021/day5_osm/day5_osm.html",
    "title": "Osm",
    "section": "",
    "text": "source: https://parametricsforarchitecture.wordpress.com/2020/07/21/urban-design-masterplanning-desktop-analysis-automation-through-rstudio-and-shiny/\n\nlibrary(sf)\nlibrary(osmdata)\nlibrary(leaflet)\n\n\navailable_tags(\"water\")\n\n\nlocation <- \"Berlin\"\n\nberlin_osm <- getbb(location)%>%\n  opq()%>%\n  add_osm_feature(\"water\")%>%\n  osmdata_sf()\n\n\nberlin_water <- berlin_osm$osm_points\n\nberlin_water%>%head\n\n\nberlin_geo <- data.frame(berlin_water$osm_id, \n                         berlin_water$geometry)\n\nnames(berlin_geo)[1]<- \"osm_id\"\n\n\nberlin_data <- merge.data.frame(berlin_water, berlin_geo)\n\ncoord <- data.frame(st_coordinates(berlin_data$geometry))\nberlin_data$X <- coord$X\nberlin_data$Y <- coord$Y\n\n\nlibrary(magick)\nimg <- magick::image_read(\"~/Documents/R/R_general_resources/30DayMapChallenge/day5_osm/logo.png\")\n\n\nmap <- leaflet() %>%\n  addTiles() %>%\n  setView(lat=52.517317, lng=13.412364, zoom = 14) %>%\n  \n  addProviderTiles(providers$Stamen.Toner)  %>%\n  addProviderTiles(providers$Stamen.TonerLines,\n                   options = providerTileOptions(opacity = 0.35)) %>%\n  addProviderTiles(providers$Stamen.TonerLabels)%>%\n  \n  addCircleMarkers(data = berlin_data,\n                   lat = ~Y,\n                   lng = ~X,\n                   radius = 2.5,\n                   popup = ~water,\n                   color = \"midnightblue\") %>%\n  addCircleMarkers(data = berlin_data,\n                   lat = ~Y,\n                   lng = ~X,\n                   radius = 0.05,\n                   popup = ~water,\n                   color = \"cyan\")\n\nsave the plot as .png\n\nlibrary(extrafont)\nlibrary(showtext)\nfont_add_google(\"Schoolbell\", \"bell\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\n\nplot <- ggplot()+\n  geom_blank()+\n  xlim(0,1932) + ylim(0,1326)+\n  theme_void()+\n  theme(plot.background = element_rect(color = \"grey14\",fill=NA, size=3))\n\n\nlibrary(cowplot)\nlibrary(magick)\n\nimage_map<- magick::image_read(\"~/Documents/R/R_general_resources/30DayMapChallenge/day5_osm/map.png\")\n\n\nfinal <- cowplot::ggdraw(plot)+\n  draw_image(image_map,x = 0.02, y = 0,width =0.95)+\n  draw_label(label=\"Datasource: {osmdata} #30DayMapChallenge Day5 - map: Federica Gazzelloni\",x=0.5,y=0.03,\n             fontfamily = \"bell\") +\n  draw_label(label=\"BERLIN WATER\",x=0.45,y=0.92,size=50,fontfamily = \"bell\",fontface=\"bold\")\n\n\n# save final plot\nragg::agg_png(\"~/Documents/R/R_general_resources/30DayMapChallenge/day5_osm/osmdata.png\",\n              res = 320, width = 11, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day23_ghsl_data/day23_ghsl_data.html",
    "href": "mapchallenges/cases2021/posts2021/day23_ghsl_data/day23_ghsl_data.html",
    "title": "Ghsl data",
    "section": "",
    "text": "Italy 1km resolution, population in 2015\n\n\nData source\n\nhttps://cidportal.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/GHS_POP_MT_GLOBE_R2019A/GHS_POP_E2015_GLOBE_R2019A_54009_1K/V1-0/GHS_POP_E2015_GLOBE_R2019A_54009_1K_V1_0.zip\nhttps://cidportal.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/GHS_POP_MT_GLOBE_R2019A/GHS_POP_E1975_GLOBE_R2019A_54009_1K/V1-0/GHS_POP_E1975_GLOBE_R2019A_54009_1K_V1_0.zip\nhttps://gist.github.com/leeolney3/61f88791b70a4781aa62717ce77d4d70\n\n\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\nlibrary(sf)\nlibrary(raster)\nlibrary(tidyverse)\nlibrary(ggtext)\n\npop2015 = raster(here::here(\"day23_ghsl_data/GHS_POP_E2015_GLOBE_R2019A_54009_1K_V1_0.tif\"))\n\nit = ne_countries(scale=10,country = 'italy', returnclass = \"sf\")\nit2 = st_transform(it, crs(pop2015))\n\n# reduce the raster to it data\nit_crop = raster::crop(pop2015, raster::extent(it2))\nit_mask = raster::mask(it_crop, it2)\nit_df = as.data.frame(it_mask, xy=TRUE)\n\nit_df2<-it_df%>%\n  rename(year_2015=3)%>%\n  dplyr::filter(!is.na(year_2015))\n\n\nlibrary(extrafont)\nloadfonts()\nfont=\"Roboto Condensed Light\"\n\n\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day23_ghsl_data/ghsl.png\"),\n              res = 320, width = 6, height = 6, units = \"in\")\nggplot() +\n  geom_raster(data=it_df2,\n              aes(x=x, y=y, fill=year_2015)) +\n  colorspace::scale_fill_continuous_sequential(palette = \"PuBuGn\", begin = 0.9, end = 0.4,\n                                               breaks=c(0,200,20000),\n                                               trans=\"pseudo_log\",\n                                               labels=scales::comma)+\n  theme_void() +\n  coord_fixed() +\n  theme(text = element_text(color=\"#FCB9B2\",family=font),\n        plot.background = element_rect(fill=\"#151E3F\", color=NA),\n        legend.position=\"top\",\n        legend.justification = \"center\",\n        plot.title=element_markdown(lineheight=1.3, size=25, hjust = .5),\n        plot.caption=element_text(size=8, margin=margin(t=-5,b=10), hjust=.5,color=\"#FCB9B2\"),\n        plot.margin=margin(.3,0,0,0, unit=\"cm\"),\n        legend.margin=margin(t=-5)\n  ) +\n  guides(fill = guide_colorbar(title.position = \"top\",\n                               barwidth = unit(11, \"lines\"),\n                               barheight = unit(.4, \"lines\"))) +\n  labs(fill=\"\",\n       title=\"Population in Italy - 2015\",\n       caption=\"Data source: Global Human Settlement Layer (GHSL) data #30DayMapChallenge\n       Map: Federica Gazzelloni\")\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day24_historical/day24_historical.html",
    "href": "mapchallenges/cases2021/posts2021/day24_historical/day24_historical.html",
    "title": "Historical",
    "section": "",
    "text": "The data are from:\n\nhttps://webs.ucm.es/info/cliwoc/\nhttps://jcheshire.com/wp-content/uploads/2016/10/shipping_map.zip\nhttps://jcheshire.com/visualisation/mapping-historic-tracks-ggplot2/\n\n\nrm(list=ls())\n\nlibrary(rgdal)\nlibrary(ggplot2)\nlibrary(png)\n\nwrld <- rgdal::readOGR(\"data/shipping_map/ne_110m_admin_0_countries.shp\")\nwrld.f <- fortify(wrld, region=\"sov_a3\")\n\nbdata <- read.csv(\"data/shipping_map/british_shipping_example.csv\")\n\n# btitle <- readPNG(\"data/shipping_map/brit_titles.png\")\ncompass <- readPNG(\"data/shipping_map/windrose.png\")\nearth <- readPNG(\"data/shipping_map/earth_raster.png\")\n\n\n\nlibrary(sysfonts)\nlibrary(showtext)\nshowtext_opts(dpi = 320)\nfont_add_google(\"Roboto Condensed\")\nshowtext_auto()\nfont= \"Roboto Condensed\"\n\n\nmap <- ggplot(wrld.f, aes(x = long, y = lat))+\n  annotation_raster(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +\n  geom_polygon(aes(group=group),\n               size = 0.1, colour= \"black\", fill=\"#D6BF86\",alpha=0.4) +\n  geom_path(data= bdata,aes(long,lat,group = paste(trp, group.regroup, sep = \".\"),\n                            colour=nat), size = 0.2, alpha = 0.5, lineend = \"round\") +\n  #annotation_raster(btitle, xmin = 30, xmax = 140, ymin = 51, ymax = 87) +\n  annotation_raster(compass, xmin = -125, xmax = -165, ymin = 5, ymax = 45) +\n  scale_x_continuous(\"\", breaks=NULL)+\n  scale_y_continuous(\"\", breaks=NULL)+\n  guides(colour = guide_legend(override.aes = list(size = 3)))+\n  coord_equal() +\n  labs(title=\"Map of 18th Century Shipping Expeditions\",\n       subtitle=\"1781 - 1799\",\n       color=\"Nationality of the ships\",\n       caption = \"DataSource: Climatological Database for the World's Oceans 1750-1850\\n#30DayMapChallenge Historical\\nGraphic:Federica Gazzelloni\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(color=\"midnightblue\",family=\"Roboto Condensed\"),\n        panel.background = element_rect(fill='#BAC4B9',colour='black'),\n        legend.position = c(0.1,0.2),\n        legend.background = element_blank(),\n        legend.text = element_text(color=\"white\",size=8),\n        legend.key = element_blank(),\n        legend.title = element_text(color=\"white\",size=10),\n        plot.title = element_text(size=40),\n        plot.subtitle = element_text(size=18),\n        plot.caption = element_text(size=12)\n        )\n\n# save map plot\nragg::agg_png(here::here(\"data/historical.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nmap\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day8_blue/day8_blue.html",
    "href": "mapchallenges/cases2021/posts2021/day8_blue/day8_blue.html",
    "title": "Blue",
    "section": "",
    "text": "This is day 8 - blue for #30DayMapChallenge. I am looking at the ggplot2-book map chapter. In this case I’d like to understand how to make modification of a .tif image positioning it inside a ggplot.\nLoad the {ozmaps} for the geometry of Australia."
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day8_blue/day8_blue.html#first-sat-vis-of-australia",
    "href": "mapchallenges/cases2021/posts2021/day8_blue/day8_blue.html#first-sat-vis-of-australia",
    "title": "Blue",
    "section": "First sat vis of Australia",
    "text": "First sat vis of Australia\nThen, select the raster images from source.\nSee which raster images are available with loading the {bomrang} package and using the syntax below.\nOnce you have found the file name, you can obtain the file searching on google tab with this string: “ftp://ftp.bom.gov.au/anon/gen/gms/” with the final name of the file\nFor example google this, it might take a little while: ftp://ftp.bom.gov.au/anon/gen/gms/IDE00422.202001072100.tif\nIt pops up a window asking you to identify as a “guest”, (it might probably saying that it couldn’t connect you, but then split all the pictures. You need to search for the desired picture, if it didn’t prompt with the one you were searching for, mind it is .tif type of file and you might need to choose a picture from your current year, such as 2021 - as the pictures from 2020 are not available anymore.)\n\n# sf::gdal_read() \n# bomrang::get_available_imagery()\n\n# with - bomrang - find the avalable images\nfiles <- bomrang::get_available_imagery() %>%\n  stringr::str_subset(\"202001072100\") \n\n# use curl_download() to obtain a single file, and purrr to \n# vectorise this operation\npurrr::walk2(\n  .x = paste0(\"ftp://ftp.bom.gov.au/anon/gen/gms/\", files),\n  .y = file.path(\"raster\", files),\n  .f = ~ download.file(url = .x, destfile = .y)\n)\n\nSet the path of the image that you have downloaded and saved inside a “raster” folder in you project subfolder.\n\nimg_vis  <- file.path(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day8_blue/raster\", \"IDE00422.202111072100.tiff\")\nimg_inf <- file.path(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day8_blue/raster\", \"IDE00421.202111072100.tiff\")\n\nRead the picture with {stars}, it releases information about the picture but we miss the coordinates??\n\nlibrary(stars)\nsat_vis <- read_stars(img_vis, RasterIO = list(nBufXSize = 600, nBufYSize = 600))\nsat_inf <- read_stars(img_inf, RasterIO = list(nBufXSize = 600, nBufYSize = 600))\n\nA ggplot can be made with the image using a geom_stars()\n\nblue_world <- ggplot() + \n  geom_stars(data = sat_vis) + \n  coord_equal()\n\nblue_world\n\nThe image can be easily modified:\n\nfinal <- blue_world +\n  labs(title=\"Globe Observer\",\n       subtitle=\"Sat View of Australia\\n#30DayMapChalleng Day 8 - Blue\",\n       caption=\"Datasource:Australian Bureau of Meterorology (BOM)\\nInfographic: Federica Gazzelloni\")+\n  ggthemes::theme_map()+\n  theme(legend.position = \"none\",\n        plot.background = element_rect(color=\"#1a1c3d\",fill=\"#1a1c3d\"),\n        plot.title = element_text(color=\"#9a9ddb\",size=35),\n        plot.subtitle = element_text(color=\"#9a9ddb\",size=15),\n        plot.caption = element_text(color=\"#9a9ddb\",size=12))\n\n\n# save final plot\nragg::agg_png(\"~/Documents/R/R_general_resources/30DayMapChallenge/day8_blue/blue.png\",\n              res = 320, width = 11, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day8_blue/day8_blue.html#second-sat-vis-of-australia",
    "href": "mapchallenges/cases2021/posts2021/day8_blue/day8_blue.html#second-sat-vis-of-australia",
    "title": "Blue",
    "section": "Second sat vis of Australia",
    "text": "Second sat vis of Australia\n\nlibrary(showtext)\nlibrary(extrafont)\nfonts()\nloadfonts()\nfont_add_google(\"Gochi Hand\", \"gochi\")\nfont_add_google(\"Schoolbell\", \"bell\")\nfont_add_google('Syncopate', 'Syncopate')\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\nChoose the image and download it with curl_download()\n\nfiles <- bomrang::get_available_imagery() %>%\n  stringr::str_subset(\"202001072100\") \ncurl::curl_download(\"raster/ftp://ftp.bom.gov.au/anon/gen/gms/IDE00422.202111082100.tif\",\n                    \"sat_vis.tif\")\nimg_vis  <- file.path(\"/Users/federica/Documents/R/R_general_resources/Maps/raster\", \"IDE00422.202111082100.tif\")\nlibrary(stars)\nsat_vis <- read_stars(img_vis, RasterIO = list(nBufXSize = 600, nBufYSize = 600))\n#sat_inf <- read_stars(img_inf, RasterIO = list(nBufXSize = 600, nBufYSize = 600))\noz_states <- st_transform(oz_states, crs = st_crs(sat_vis))\ncities <- oz_capitals %>% \n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326, remove = FALSE)\ncities <- st_transform(cities, st_crs(sat_vis))\n\n\nfinal2 <- ggplot() + \n  geom_stars(data = sat_vis, show.legend = FALSE) +\n  geom_sf(data = oz_states, fill = \"#6354c4\", color = \"#a7c2cc\",size=0.3) + \n  geom_sf(data = cities, color = \"#15191f\") + \n  coord_sf() + \n  theme_void() + \n  #scale_fill_gradient(low = \"black\", high = \"white\")+\n  geom_sf_text(data = cities, mapping = aes(label = city),color=\"#ced9eb\",check_overlap = T,family=\"gochi\") +\n   labs(title=\"Globe Observer\",\n       subtitle=\"Sat View of Australia\\n#30DayMapChalleng Day 8 - Blue\",\n       caption=\"Datasource:Australian Bureau of Meterorology (BOM)\\nInfographic: Federica Gazzelloni\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(family=\"gochi\"),\n        legend.position = \"none\",\n        plot.background = element_rect(color=\"#1a1c3d\",fill=\"#1a1c3d\"),\n        plot.title = element_text(color=\"#9a9ddb\",size=35,family=\"Syncopate\",hjust=0.5),\n        plot.title.position = \"panel\",\n        plot.subtitle = element_text(color=\"#9a9ddb\",size=15,vjust=-1,hjust=0.07),\n        plot.caption = element_text(color=\"#9a9ddb\",size=12,hjust=0.8))\n\n\n# save final plot\nragg::agg_png(\"~/Documents/R/R_general_resources/30DayMapChallenge/day8_blue/blue2.png\",\n              res = 320, width = 11, height = 8, units = \"in\")\nfinal2\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day1_points/day1_points.html",
    "href": "mapchallenges/cases2021/posts2021/day1_points/day1_points.html",
    "title": "Points",
    "section": "",
    "text": "Overview\nThis map is made with data from TidyTuesday 2021 week44 Race.\n\nlibrary(tidyverse)\n\nlibrary(tidyquant)\nlibrary(ggpattern)\n\n\nlibrary(extrafont)\n\n# loadfonts()\nlibrary(showtext)\nfont_add_google(\"Shadows Into Light\",\"shadow_into_light\")\nfont_add_google(\"Schoolbell\", \"bell\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n#font_families()\n\n\nultra_rankings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv')\nrace <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv')\n\n\nMake one dataset using the key primary variable “race_year_id” as a link between the two datasets\nselect the variables needed for making the map\n\nthere are some missing values, we deal with those later on the making\nCountry to fix:\n\nHong Kong, China ~“China”\nFL, United States ~ “US”\n\nLA, United States\n\nPA, United States\n\nUnited States\nMyoko, Japan ~ “Japan”\nUnited Kingdom ~ “UK”\n\n\nrace%>%\n  inner_join(ultra_rankings ,by=\"race_year_id\") %>% \n  mutate(year=lubridate::year(date))%>% #count(year)\n  mutate(participation=tolower(participation))%>%count(age,gender)\n\n\nmap_df <- race%>%\n  inner_join(ultra_rankings ,by=\"race_year_id\")%>%\n  mutate(year=lubridate::year(date))%>%\n  #select(city,country,gender,year,runner)%>%\n  filter(!is.na(country),!is.na(rank)) %>%\n  mutate(country=case_when(country==\"Hong Kong, China\"~\"China\",\n                           country==\"FL, United States\"~\"USA\",\n                           country==\"LA, United States\"~\"USA\",\n                           country==\"PA, United States\"~\"USA\",\n                           country==\"United States\"~\"USA\",\n                           country==\"United Kingdom\"~\"UK\",\n                           country==\"Myoko, Japan\"~\"Japan\",\n                           TRUE~country)) \n\nLet’s see the cities:\n\nmap_df <- map_df %>% #count(year)\n  arrange(city)%>%\n  mutate(city=tolower(city))%>%\n  mutate(city=gsub(\"\\\\d\",\"\",city),\n         city=gsub(\"\\\\?\",NA,city),\n         city=gsub(\"-\",\"\",city)) \n\ndrop the missing values\n\nmap_df<- map_df%>%drop_na()\n\n\nranks <- map_df%>%\n  filter(rank==\"1\")%>%\n  filter(gender==\"W\")%>%\n  count(country,nationality,distance,time_in_seconds,year)%>%\n  dplyr::select(-n)%>%\n  arrange(-distance,time_in_seconds) %>%#count(distance)\n  slice(1:10)\n\n\ncou_yr_m <- c(\"Finland_2018\",\"France_2019\",\"Spain_2019\",\"Indonesia_2019\",\"USA_2018\")\ncountry_m<- c(\"Finland\",\"France\",\"Spain\",\"Indonesia\",\"USA\")\nlatitude_m<- c(60.192059, 46.7111, 40.416775,-6.200000,40.981613)\nlongitude_m<-c(24.945831,1.7191,-3.703790,106.816666,-73.691925)\n\n\ncou_yr_w<-c(\"UK_2016\",\"Nepal_2018\",\"Greece_2016\",\"Poland_2017\",\"Italy_2018\",\"USA_2017\")\ncountry_w<- c(\"UK\",\"Nepal\",\"Greece\",\"Poland\",\"Italy\",\"USA\")\nlatitude_w<- c(43.844264,27.700769,39.366669,50.012100,42.349998,40.981613)\nlongitude_w<- c(-21.086052,85.300140,22.933332,20.985842,14.166667,-73.691925)\n\nmy_map_text_w<- data.frame(cou_yr_w,country_w,latitude_w,longitude_w)\n\nmy_map_text_m<- data.frame(cou_yr_m,country_m,latitude_m,longitude_m)\n\nload the libraries form the map\n\nlibrary(maps)\nlibrary(rnaturalearth)\nlibrary(sp)\nlibrary(sf)\n\nFirst step for the geo codes and geometry\n\ngeocode() {ggmap} finds latitude and longitude for the cities (See ?register_google)\nne_countries() {rnaturalearth} for world country polygons\nsf() {sf} for simple feature list column\nmap_data() {ggplot2} for a data frame of map data (require(“maps”))\n\nDataset is downloaded from:——–207 matches —– kaggle dataset\ngeonames can be another fount for geocodes\nLoad the data form {rnaturalearth} with geometry and join {maps} with map_data()for the lat and lon\n\n# world data full \nworld_full <- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\")\nworld_data <- filter(world_full, continent != \"Antarctica\")\n\n# world lat&long\nworld<-map_data(map = \"world\") #%>%count(subregion)\n# states lat&long\nstates <- map_data(\"state\") # let's see if we use it\n\nworld_geodata<- world %>%\n  full_join(world_data, by = c(\"region\"=\"name\"))%>%\n  select(long,lat,group,order,region,region_wb) #%>%count(region)\n\n# my df with geocodes\nmap_geodata <- map_df%>%\n  left_join(worldcitiespop_match,by=\"city\")%>%\n  janitor::clean_names()\n\n\ngeom_polygon() for the world borders\ngeom_polygon() for the US borders\ngeom_path() for delimiting world regions\n\n\nmap_geodata_dot <- map_geodata %>% \n  arrange(time_in_seconds)%>%\n  mutate(participation=tolower(participation))%>%\n  mutate(elevation=elevation_gain+elevation_loss,.after=elevation_gain)%>%\n  select(-elevation_gain,-elevation_loss) %>%\n  select(country,latitude,longitude,gender,participation,rank)%>%\n  mutate(country_code = countrycode(country, \n            origin = 'country.name', \n            destination = 'iso2c'),\n         country_code=tolower(country_code))\n\nWe do not use these features:\n\ngeom_polygon(data=world_geodata,aes(x=long,y=lat,group=group),fill=“lightslategray”) +\ngeom_polygon(data = states,aes(x = long, y = lat, group = group),fill=NA,color=“#000000”,size=0.3)+\ngeom_path(data=world,aes(x=long,y=lat,group=group),size=0.1,color=“darkslateblue”) +\n\n\npal_gender<- c(\"deepskyblue4\",\"mediumvioletred\")\n\n\nmy_map_text_w\n\nWest world\n\nworld_west<-  ggplot() +\n  \n  geom_point(data = states,aes(x = long, y = lat),color=\"darkslateblue\",shape=\".\") +\n  geom_point(data=world,aes(x=long,y=lat,group=group),shape=\".\",color=\"darkslateblue\") +\n  \n  # now we need to add our data \n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude,color=factor(gender)),\n             alpha=0.7,stroke=1,size=1,shape = 21,fill=NA) +\n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude),\n             alpha=0.7,shape=\".\",color=\"yellow3\",show.legend = T) +\n  geom_point(data=map_geodata,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  geom_text(data=my_map_text_m,mapping=aes(x=longitude_m, y=latitude_m,label=cou_yr_m),\n            family=\"shadow_into_light\",color=\"gold\",hjust=-0.5) +\n  \n  coord_map(\"ortho\", orientation = c(3.849945, -103.525750, 0)) +\n  \n  guides(color = guide_legend(override.aes = list(size = 5)))+\n  scale_color_manual(values = pal_gender,labels=c(\"Male\",\"Female\")) +\n  labs(x=\"\",y=\"\",color=\"Gender\") +\n  theme_void() +\n  theme(text = element_text(family=\"shadow_into_light\",color=\"gold\"),\n        plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n        panel.background = element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = c(0.2,0.5),\n        legend.text = element_text(family=\"shadow_into_light\"),\n        legend.title = element_text(family=\"shadow_into_light\"))\n\n\nworld_west\n\nEast World\n\nworld_east<-  ggplot() +\n  \n  geom_point(data = states,aes(x = long, y = lat),color=\"darkslateblue\",shape=\".\") +\n  geom_point(data=world,aes(x=long,y=lat,group=group),shape=\".\",color=\"darkslateblue\") +\n  \n  # now we need to add our data \n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude,color=gender),\n             alpha=0.7,stroke=1,size=1,shape = 21,fill=NA,show.legend = F) +\n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  geom_point(data=map_geodata,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  \n  geom_text(data=my_map_text_w,mapping=aes(x=longitude_w, y=latitude_w,label=cou_yr_w),\n            family=\"shadow_into_light\",color=\"gold\",hjust=-0.2) +\n  \n  coord_map(\"ortho\", orientation = c(19.982182, 46.595135, 0)) +\n  \n  scale_color_manual(values = pal_gender) +\n  labs(x=\"\",y=\"\",color=\"\") +\n  theme_void() +\n  theme(text = element_text(family=\"shadow_into_light\",color=\"gold\"),\n        plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n        panel.background = element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"none\")\n\n world_east \n\n\nlibrary(patchwork)\nlibrary(cowplot)\n\nmain_plot <- (world_west + world_east)# +\n  #theme_update(plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n  #             panel.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n  #             plot.margin = margin(0,0,0,0,unit = \"pt\"))\n\n\n# load the libraries for final touches\nlibrary(ggpubr)\n\n# ggarrange from {ggpubr} frames the plot to make side annotations\ngraphics <- ggpubr::ggarrange(main_plot)\n\nfinal_plot <- ggpubr::annotate_figure(graphics,\n                              top = text_grob(\"Global State of Ultra Running 2012-2021\",\n                                              color = c(\"gold\"), face = \"bold\", size = 32,\n                                              family=\"shadow_into_light\",vjust = 0.8),\n                              bottom = text_grob(\"DataSource: BjnNowak-Github Repo, RunRepeat.com-TidyTuesday week44\\n30DayMapChallenge day1 - Infographics: Federica Gazzelloni\",\n                                                 color = \"gold\",family=\"shadow_into_light\",\n                                                 hjust = 0.5, vjust = 0.5, x = 0.5, \n                                                 face = \"bold.italic\", size = 14))\n\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label = \"Top 6 Countries with faster Female runners at distances between 164 and 173 km\",\n         x = 0.5, y = 0.9,colour = \"gold\",size = 4,family = \"shadow_into_light\",fontface = \"bold\")+\n  annotate(geom = \"text\", label = \"Ranking number one faster\",\n         x = 0.91, y = 0.12,colour = \"gold\",size = 4,family = \"shadow_into_light\",fontface = \"bold\")\n\n\nlibrary(cowplot)\nlibrary(ggimage)\nlibrary(magick)\n\n# add the images for the legend keys\nimgrunners <- image_read(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w44/runner.png\")\n\n\n# ggdraw from {cowplot} draw the plot for setting the background colors of the side annotations\nfinal <- cowplot::ggdraw(final_plot) +\n  draw_image(imgrunners, x = 0.9, y = -0.45,width = 0.06) +\n  theme(plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"))\n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w44/w44_runners.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day7_green/day7_green.html",
    "href": "mapchallenges/cases2021/posts2021/day7_green/day7_green.html",
    "title": "Green",
    "section": "",
    "text": "https://osdatahub.os.uk/downloads/open#CODEPO https://datatricks.co.uk/london-map-in-3-easy-steps https://data.police.uk/data/statistical-data/\n\nlibrary(tidyverse)\nlibrary(spData)\nlibrary(sf)\nlibrary(rgeos)\nlibrary(sp)\n# x <- c(\"ggmap\", \"rgdal\", \"rgeos\", \"maptools\", \"dplyr\", \"tidyr\", \"tmap\")\n#  # install.packages(x) # warning: uncommenting this may take a number of minutes\n# lapply(x, library, character.only = TRUE) # load the required packages\n\n\nspData::cycle_hire_osm\nspData::lnd\n\n\ncoord_lnd_cycl <- data.frame(st_coordinates(cycle_hire_osm$geometry))\n\ncycle_hire_osm <- as.data.frame(cycle_hire_osm)\n\n\ncycle_hire_osm$X <- coord_lnd_cycl$X\ncycle_hire_osm$Y <- coord_lnd_cycl$Y\n\n\ncycle_hire_osm\n\n\nspData::lnd\n\n\nplot(lnd)\n\n\nlondon_data <- lnd\n\nlnd_geo <- data.frame(london_data$GSS_CODE,london_data$HECTARES,london_data$geometry)\n\nnames(lnd_geo)[1]<- \"GSS_CODE\"\n\ncoord_london <- data.frame(st_coordinates(lnd_geo$geometry))\n\nlnd_geo_coord<- merge.data.frame(lnd_geo,coord_london)\n\n\nlnd_geo_coord%>%count(L3)\n\nLONDON MAP!!!!!!\n\nggplot() +\n  geom_polygon(data=lnd_geo_coord,\n               aes(x = X, y = Y,group=L3, fill = L3), \n               colour = \"black\")+\n  labs(x = \"Longitude\", y = \"Latitude\", \n       title = \"Map of Greater London with the borough boundaries\")\n\n\ncycle_hire_osm\n\n\nlibrary(extrafont)\nlibrary(showtext)\nfonts()\nloadfonts()\nfont.families.google()\nfont_add_google(\"Mr Dafoe\", \"MrDafoe\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\nlnd_center<- lnd_geo_coord%>%filter(X>c(-0.3) & X<0.0,\n                                    Y>51.4 & Y<51.6)\n\ncycle_hire_osm%>%count(name)\n\nfinal <-ggplot()+\n     geom_polygon(data=lnd_geo_coord,\n               aes(x = X, y = Y,group=L3, fill = L3), \n               colour = \"black\")+\n     geom_point(data=cycle_hire_osm, mapping=aes(x=X,y=Y),\n                color = 'gold', size=0.2, alpha=0.5)+ \n  coord_map()+\n  scale_fill_gradient(low = \"honeydew2\",high = \"darkgreen\")+\n  labs(x = \"Longitude\", y = \"Latitude\", \n       title = \"Map of Greater London with cycle hire\",\n       subtitle = \"with the borough boundaries\",\n       caption = \"Datasource: #TidyTuesday week45 - {spData} package \\n Infographics: Federica Gazzelloni\")+\n  cowplot::theme_map()+\n  theme(panel.grid.major = element_blank(),\n        axis.title.x=element_blank(), \n        axis.text.y=element_blank(), \n        plot.background = element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        panel.background=element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        plot.title=element_text(color=\"honeydew2\",size=33,family=\"Arial\"),\n        plot.subtitle=element_text(color=\"honeydew2\",size=24,family=\"Arial\"),\n        plot.caption = element_text(family=\"Arial\",color=\"honeydew2\"),\n        legend.position = \"none\")\n\n\n# save final plot\nragg::agg_png(\"~/Documents/R/R_general_resources/30DayMapChallenge/day7_green/green.png\",\n              res = 320, width = 11, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day4_hexagons/day4_hexagons.html",
    "href": "mapchallenges/cases2021/posts2021/day4_hexagons/day4_hexagons.html",
    "title": "Hexagons",
    "section": "",
    "text": "library(tidyverse)\n\nlibrary(sf)\nlibrary(raster)\n\n\nlibrary(spData)\nlibrary(spDataLarge) \n\nlibrary(tmap)    # for static and interactive maps\nlibrary(leaflet) # for interactive maps\n\n\nmy_df <- spData::boston.c\n\n\nleaflet() %>%\n  addProviderTiles(providers$CartoDB.Positron) %>%\n  setView(lng = -71.0589, lat = 42.3601, zoom = 12)\n\nsave the leaflet map as .png\n\nlibrary(RColorBrewer)\nlibrary(rcartocolor)\n\n\nlibrary(ggimage)\nbck_color <- \"#FEFCEF\"\n\nimage<- \"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day4_hexagons/boston_city.png\"\n\nmain_plot<-my_df %>%\n  ggplot(aes(x=LON,y=LAT,group=CHAS,FILL=TRACT))+\n  geom_path(color=\"grey70\",size=0.2)+\n  geom_hex(color=\"grey60\",size=0.2,bins=60,alpha=0.8)+\n  geom_point(data=my_df,aes(x=LON,y=LAT,group=LSTAT),shape=\".\",color=\"gold\",alpha=0.7)+\n  scico::scale_fill_scico(palette = \"bilbao\")+\n  ggthemes::theme_map()\n\ng<-ggimage::ggbackground(main_plot, image, alpha=.7)\ng\n\n\ndata(us.cities)\n\n ma<-us.cities%>%filter(country.etc==\"MA\")\n range(ma$lat)\n range(ma$long)\n\nboston<-us.cities%>%filter(str_detect(name,\"Boston\"))\ncapitals <- subset(us.cities, capital == 2)\n\n\nma_section<- ggplot(data=capitals,aes(long, lat)) +\n  borders(\"state\", xlim = c(-71.5, -70.08), ylim = c(41.55 ,42.5), fill = hcl.colors(286, \"BrwnYl\")) +\n  geom_hex(data=my_df,mapping=aes(x=LON,y=LAT,group=RAD),bins=90,show.legend = F)+\n  geom_point(boston, mapping=aes(long, lat),color=\"red\") +\n  geom_point(data=my_df,aes(x=LON,y=LAT,group=LSTAT),shape=\".\",color=\"gold\",alpha=0.4)+\n  rcartocolor::scale_fill_carto_c(type = \"diverging\", palette = \"Fall\", direction = -1)+\n  coord_quickmap()+\n  theme_nothing()+\n  theme(plot.background = element_rect(fill=\"grey80\",color=\"grey80\"),\n        panel.background = element_rect(fill=\"grey80\",color=\"grey80\"))\n\nma_section<-ma_section+\n  theme_gray()+\n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        plot.background = element_rect(fill=\"grey95\",color=\"grey80\"),\n        panel.grid.major.x = element_blank())\n\n# save final plot\nragg::agg_png(here::here(\"~/Documents/R/R_general_resources/30DayMapChallenge/day4_hexagons/ma_section.png\"),\n              res = 320, width = 12, height = 8.5, units = \"in\")\nma_section\ndev.off()\n\n\nlibrary(extrafont)\nloadfonts()\nfonts()\nfamily<- \"Scooby Doo\"\n# final touches\nlibrary(cowplot)\nlibrary(magick)\n\nimage_ma_section<- magick::image_read(\"~/Documents/R/R_general_resources/30DayMapChallenge/day4_hexagons/ma_section.png\")\n\nimage_boston_sym <- magick::image_read(\"~/Documents/R/R_general_resources/30DayMapChallenge/day4_hexagons/boston_symbol.png\")\n\nfinal <- cowplot::ggdraw(g)+\n  draw_image(image_ma_section,x = 0.05, y = -0.41,width = 0.15)+\n  draw_image(image_boston_sym,x = 0.008, y = 0.42,width = 0.08)+\n  draw_label(label=\"Datasource: {spData} Boston.c\\nInfographic: Federica Gazzelloni\",x=0.5,y=0.05, fontfamily = family) +\n  draw_label(label=\"Boston city lower status population\\npercentage values\",x=0.45,y=0.93, fontfamily = family,size=30)\n\n# save final plot\nragg::agg_png(\"~/Documents/R/R_general_resources/30DayMapChallenge/day4_hexagons/hexagons.png\",\n              res = 320, width = 12, height = 8.5, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day14_newtool/day14_newtool.html",
    "href": "mapchallenges/cases2021/posts2021/day14_newtool/day14_newtool.html",
    "title": "Newtool",
    "section": "",
    "text": "library(cowplot)\nlibrary(tidyverse)\n\nlibrary(showtext)\nlibrary(extrafont)\nsysfonts::font_info_google(\"Dancing Script\")\nfonts()\nloadfonts()\nfont_add_google(\"Roboto Condensed\",\"Scooby Doo\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\n\nch_image<- magick::image_read(here::here(\"R_general_resources/30DayMapChallenge/day14_newtool/unfolded.png\"))\n\ng <- grid::circleGrob(gp = grid::gpar(fill = NA,col=\"white\",lwd=0.5))\n\n\nfinal <- cowplot::ggdraw()+\n  draw_image(ch_image,x = 0.01, y = 0,width = 0.98)+\n\n  draw_label(label=\"high density concentration found\\nin some areas\\nmore than others\",\n             x=0.6,y=0.65,fontfamily=\"Scooby Doo\",size=10,color=\"gold\") +\n\n  draw_label(label=\"Chicago Income less than 10k (%)\",\n             x=0.45, y=0.95, size=32, fontfamily=\"Scooby Doo\",\n             color = \"black\",fontface = \"bold\") +\n\n  draw_line(x = c(0.52, 0.6),y = c(0.38, 0.5),color = \"gold\", size = 0.2)+\n\n  draw_line(x = c(0.535, 0.63),y = c(0.51, 0.51),color = \"gold\", size = 9)+\n\n  draw_label(label=\"Chicago\",\n             x=0.582, y=0.51, size=19, fontfamily=\"Scooby Doo\",\n             color = \"black\",fontface = \"bold\",\n             lineheight = 1.1,\n             alpha = 1) +\n  draw_grob(g, scale = 0.15,x = 0,y = -0.08)+\n\n  draw_text(\"Datasource: unfolded - #30DayMapChallenge Day14 New Tool\\nInfographics: Federica Gazzelloni\",\n            x=0.5,y=0.05,family=\"Scooby Doo\",size=12)\n\n\n\n\n# save final plot\nragg::agg_png(here::here(\"R_general_resources/30DayMapChallenge/day14_newtool/newtool.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day21_elevation/day21_elevation.html",
    "href": "mapchallenges/cases2021/posts2021/day21_elevation/day21_elevation.html",
    "title": "Elevation",
    "section": "",
    "text": "Datasource: http://www.cpom.ucl.ac.uk/csopr/icesheets2/dems.php?ais_subject=dem&user_type=normal\n\nlibrary(raster)\nlibrary(tidyverse)\n\nlibrary(extrafont)\nloadfonts()\nfont=\"Verdana\"\n\n\nantaritca_tif <- raster(here::here(\"R_general_resources/30DayMapChallenge/day21_elevation/photo.tif\"))\n\nantaritca_aggr <- raster::aggregate(antaritca_tif, fact = 2, fun = \"mean\") %>%\n  as.data.frame(xy = TRUE)  %>%\n  rename(elevation = 3)\n\nantaritca_aggr <- antaritca_aggr%>%filter(!elevation==\"NaN\")\nantaritca_aggr <- antaritca_aggr%>%filter(elevation>0)\n\n\nragg::agg_png(here::here(\"R_general_resources/30DayMapChallenge/day21_elevation/elevation.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\n\nggplot(antaritca_aggr) +\n  geom_point(aes(x, y, color=elevation), size = 0.01)+\n\n  annotate(\"text\", 23.5, 33, hjust = 0.5, vjust = 1, label = \"elevation\", family = font,\n           fontface = \"bold\", size = 6, color = \"white\") +\n\n  scale_color_gradient(low=\"#1e83bd\",high=\"white\")+\n\n  labs(title=\"Antarctic Ice Sheet\",color=\"Elevation\",\n       subtitle=\"Surface Elevation Change (SEC)\",\n    caption = \"DataSource: CPOM CryoSat - #30DayMapChallenge Elevation - Graphic: Federica Gazzelloni\\n\"\n  ) +\n  coord_sf() +\n\n  theme_void(base_size = 12, base_family = font) +\n  theme(\n    legend.position = c(0.11, 0.1),\n    legend.title = element_blank(),\n    legend.text = element_text(color = \"grey97\", size = 11),\n    plot.background = element_rect(fill = \"#272a3b\", color = NA),\n    plot.title.position = \"panel\",\n    plot.title = element_text(size=35,face=\"bold\",color=\"grey97\",hjust = 0.1,vjust = -1),\n    plot.subtitle = element_text(size=15,face=\"bold\",color=\"grey97\",hjust = 0.1,vjust = -1.1),\n    plot.caption = element_text(color = \"grey97\", hjust = 0.5, lineheight = 1,vjust=1)\n  )\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day3_polygons/day3_polygons.html",
    "href": "mapchallenges/cases2021/posts2021/day3_polygons/day3_polygons.html",
    "title": "Polygons",
    "section": "",
    "text": "This is the reference for identifying ISO3 codes: ISO3 reference"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day3_polygons/day3_polygons.html#isole-åland",
    "href": "mapchallenges/cases2021/posts2021/day3_polygons/day3_polygons.html#isole-åland",
    "title": "Polygons",
    "section": "Isole Åland",
    "text": "Isole Åland\nLe Isole Åland appartenevano alle province che l’Impero svedese dovette cedere all’Impero russo col Trattato di Fredrikshamn nel settembre 1809, e vennero a far parte del semi-autonomo Granducato di Finlandia.\nWe need “wrld_simpl” for the shapefiles:\n\nlibrary(tidyverse)\nlibrary(maptools)\ndata(wrld_simpl)\n#unique(wrld_simpl$ISO3)\nplot(wrld_simpl %>% subset(., ISO3 %in% c(\"ALA\")))\n\n\nala<- wrld_simpl$ISO3[wrld_simpl$ISO3==\"ALA\"]\nshape_df <- fortify(wrld_simpl, region = 'ISO3')\n\nshape_df%>%\n  filter(id==\"ALA\")%>%count(group)\n\nshape_short<- shape_df%>%\n  filter(id==\"ALA\")%>%\n  mutate(group_names=case_when(group==\"ALA.1\"~\"Åland\",\n                               group==\"ALA.2\"~\"Lemland\",\n                               group==\"ALA.3\"~\"Eckero\",\n                               group==\"ALA.4\"~\"Lumparland\",\n                               group==\"ALA.5\"~\"Vardo\"))\n\nmade with ggplot2:\n\nlibrary(extrafont)\nloadfonts()\nfonts()\nfamily<- \"Arial Rounded MT Bold\"\n\n\n\nala_pol_map <- ggplot() +\n  geom_polygon(data =shape_short , aes(x = long, y = lat, group = group_names, \n               fill = group_names), color = 'black') +\n  geom_point(aes(x=19.944444, y=60.098611),color=\"darkred\",size=4)+\n  \n  \n  ggtitle(label = \" \")+\n  scale_fill_viridis_d()+\n  guides(fill=guide_legend(title.position =\"top\"))+\n  labs(fill=\"\",\n       captions=\"\\n#30DayMapChallenge Day3 Polygons\\n\\nDatasource: wrld_simpl {maptools} - Infographics: Federica Gazzelloni\\n\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family=family),\n        legend.text = element_text(family=family,size=14),\n        legend.direction = \"vertical\",\n        legend.background = element_blank(),\n        legend.key = element_rect(size=3),\n        plot.caption = element_text(hjust=0.5,vjust=2,size=11,colour = \"black\",family=family),\n        plot.title = element_text(size=34,vjust=1),\n        plot.title.position = \"panel\",\n        plot.background = element_rect(fill=NA, color=NA, size=20)\n        )\n\n\n# final touches\nlibrary(cowplot)\nlibrary(magick)\n\nimage<- magick::image_read(here::here(\"day3_polygons/capitol.png\"))\n\nfinal <- cowplot::ggdraw(ala_pol_map)+\n  draw_image(image,x = 0.8, y = 0.38,width = 0.1)+\n  draw_label(label=\"Mariehamn\",x=0.3,y=0.2, fontfamily = family) +\n  draw_label(label=\"Polygons - Åland Islands\",x=0.3,y=0.95, fontfamily = family,size=40) +\n  draw_line(x = c(0.345, 0.467),y = c(0.2, 0.385),color = \"darkred\", size = 0.5)\n\n# save final plot\nragg::agg_png(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day3_polygons/polygons.png\",\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day9_monochrome/day9_monochrome.html",
    "href": "mapchallenges/cases2021/posts2021/day9_monochrome/day9_monochrome.html",
    "title": "Monochrome",
    "section": "",
    "text": "library(tidyverse)\nlibrary(sf)\nlibrary(spData)\nspData::world\n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day9_monochrome/monochrome.png\"),\n              res = 320, width = 6, height = 6, units = \"in\")\n\n\nworld_europe = world[world$continent == \"Europe\", ]\nitaly = world[world$name_long == \"Italy\", ]\nplot(st_geometry(italy), expandBB = c(0, 0.2, 0.1, 1), col = \"gray\", lwd = 3)\nplot(world_europe[0], add = TRUE)\ndev.off()\n\n\nlibrary(cowplot)\nlibrary(magick)\n\n\nmono_it <- image_read(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day9_monochrome/monochrome.png\")\n\nlibrary(showtext)\nlibrary(extrafont)\nsysfonts::font_info_google(\"Josefin Sans\")\n#fonts()\n#loadfonts()\nfont_add_google(\"Josefin Sans\",\"josefin\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\nempty<-ggplot()+geom_blank()+xlim(0,50)+ylim(0,50)+theme_void()\n\ng <- grid::circleGrob(gp = grid::gpar(fill = NA,color=\"black\"))\n\n\nfinal <- ggdraw()+\n  draw_plot(empty)+\n  draw_image(mono_it, x = 0, y = 0,width = 1)+\n  draw_text(\"Monochrome Italy\",x=0.5,y=0.91,angle=0,family=\"josefin\")+\n  draw_text(\"Datasource: spData::world\\nInfographics: Federica Gazzelloni\",x=0.5,y=0.15,family=\"josefin\",size=9)+\n  draw_grob(g, scale = 1)\n\n\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day9_monochrome/monochrome.png\"),\n              res = 320, width = 6, height = 6, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day28_earth_not_flat/day28_earth_not_flat.html",
    "href": "mapchallenges/cases2021/posts2021/day28_earth_not_flat/day28_earth_not_flat.html",
    "title": "Earth_not_flat",
    "section": "",
    "text": "https://github.com/schochastics/roughsf\nhttps://leonawicz.github.io/mapmate/articles/usage_and_limitations.html\n\n\nlibrary(mapmate)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nRColorBrewer::display.brewer.all()\npal <- rev(brewer.pal(11, \"Blues\"))\n\ndata(annualtemps)\ndata(borders)\ndata(bathymetry)\n\nid <- \"frameID\"\nannualtemps\ntemps <- mutate(annualtemps, frameID = Year - min(Year) + 1) %>%\n  filter(frameID == 1)  # subset to first frame\nbrdrs <- mutate(borders, frameID = 1)\nbath <- mutate(bathymetry, frameID = 1)\n\n\nsave_map(annualtemps,\n         z.name = \"z\",\n         id = \"Year\",\n         col = pal,\n         lat = 30,\n         lon= 20,\n         rotation.axis= 22,# defaults to 23.4 degrees\n         type = \"density\",\n         contour = \"overlay\",\n         save.plot = FALSE,\n         return.plot = TRUE)\n\n\n\n\n\n#------\nlibrary(sf)\nlibrary(tidyverse)\n\nworld <- rnaturalearth::ne_countries(scale = 50,\n                                     type = \"countries\",\n                                     returnclass = \"sf\")\n\n# little <- rnaturalearth::ne_countries(scale = 50,\n#                                      type = \"tiny_countries\",\n#                                      returnclass = \"sf\")\n# little_coord<- st_coordinates(little)\n# little_coord<-as.data.frame(little_coord)\n# ggplot(little_coord,aes(x=X,y=Y))+\n#   geom_point()+\n#   coord_map(\"ortho\", orientation = c(25.849945, 16.525750, 0))\n# x_little<- little_coord$X\n# y_little<- little_coord$Y\n\n\n\nworld_cr<- st_coordinates(world)\nworld_cr<-as.data.frame(world_cr)%>%\n  fortify()\n\nearth<-ggplot(world_cr,aes(x=X,y=Y,group=L3))+\n  geom_line(aes(color= factor(L3)),\n            size=0.15,show.legend = F)+\n  geom_point(shape=\".\")+\n  labs(x=\"\",y=\"\")+\n  coord_map(\"ortho\", orientation = c(5.849945, 56.525750, 0)) +\n  theme(plot.background = element_blank(), # element_rect(fill=\"#11657A\",color=\"#11657A\"),\n        panel.background = element_blank(), #element_rect(fill=\"#11657A\",color=\"#11657A\"),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank()\n        )\n\ng <- grid::circleGrob(gp = grid::gpar(fill = \"#68aade\",color=\"#68aade\"))\n\n# set the text options\nlibrary(showtext)\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\nfont_add_google(\"Share Tech Mono\", \"techmono\")\n\nlibrary(cowplot)\nfinal <- ggdraw()+\n  draw_image(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day28_earth_not_flat/space.png\",\n             scale=1.4,height=1)+\n  draw_grob(g, scale = 1)+\n  draw_plot(earth)+\n  #draw_image(mono_it, x = 0, y = 0,width = 1)+\n  draw_text(\"The Earth is not flat\",color=\"white\",\n            x=0.15,y=0.96,angle=0,size=23,\n            family=\"techmono\",fontface=\"bold\")+\n  draw_text(\"DataSource: rnaturalearth\\n#30DayMapChallenge-The Earth is not flat\\nGraphic: Federica Gazzelloni\",\n            x=0.855,y=0.05,\n            family=\"techmono\",\n            size=11,color=\"white\")\n\n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resources/30DayMapChallenge/day28_earth_not_flat/earth_not_flat.png\"),\n              res = 320, width = 12, height = 10, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day27_heatmap/day27_heatmap.html",
    "href": "mapchallenges/cases2021/posts2021/day27_heatmap/day27_heatmap.html",
    "title": "Heatmap",
    "section": "",
    "text": "mapmate vignettes\n\nhttps://rdrr.io/github/leonawicz/mapmate/f/vignettes/mapmate.Rmd\nhttps://leonawicz.github.io/mapmate/articles/usage_and_limitations.html\n\n\nrm(list=ls())\nlibrary(mapmate)\nlibrary(dplyr)\nlibrary(RColorBrewer)\npal <- rev(brewer.pal(11, \"BrBg\"))\nRColorBrewer::display.brewer.all()\n\ndata(annualtemps)\ndata(borders)\ndata(bathymetry)\n\n\n\n\nid <- \"frameID\"\ntemps <- mutate(annualtemps, frameID = Year - min(Year) + 1) %>% \n  filter(frameID == 1)  # subset to first frame\n\nmy_df<- temps%>%full_join(borders,by=c(\"lon\",\"lat\"))\n\n\nbrdrs <- mutate(borders, frameID = 1)\nbath <- mutate(bathymetry, frameID = 1)\n\nsave_map(brdrs, id = id, \n         type = \"maplines\", save.plot = FALSE, return.plot = TRUE)\n\n\nsave_map(my_df, id = id, \n         col = pal, \n         type = \"density\", contour = \"overlay\", save.plot = FALSE, \n         return.plot = TRUE)"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day30_metamapping/day30_metamapping.html",
    "href": "mapchallenges/cases2021/posts2021/day30_metamapping/day30_metamapping.html",
    "title": "Metamapping Day",
    "section": "",
    "text": "Overview\nThis is the collage of all maps made for 2021."
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day26_choropleth/day26_choropleth.html",
    "href": "mapchallenges/cases2021/posts2021/day26_choropleth/day26_choropleth.html",
    "title": "Choropleth",
    "section": "",
    "text": "How to read a .shp file in r:\n\nhttps://datacarpentry.org/r-raster-vector-geospatial/06-vector-open-shapefile-in-r/\n\n\n\nInspiration:\n\nhttps://gist.github.com/leeolney3/8f26d720c1884fccab282bad23dc6038\n\n\nrm(list=ls())\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(biscale)\nlibrary(cowplot)\n\nlibrary(sysfonts)\nlibrary(showtext)\nshowtext_opts(dpi = 320)\nfont_add_google(\"Covered By Your Grace\", \"grace\")\nshowtext_auto()\nf1= \"grace\"\nf2= \"grace\"\n\n######################################\n# datasource: https://datacatalog.worldbank.org/search/dataset/0042041/International-Poverty-Line---Subnational-Poverty\n\n\n\n# 1. poverty data\n# https://datacatalog.worldbank.org/search/dataset/0042041/International-Poverty-Line---Subnational-Poverty\n# for example poor190_ln means Poverty rate at $1.9\nlibrary(readxl)\npoverty_data <- read_excel(\"day26_choropleth/data/global-subnational-poverty-atlas-gsap-data.xlsx\")\npoverty_data%>%head\n\n# 2. population data\nlibrary(readr)\nPopulation_EstimatesData <- read_csv(\"day26_choropleth/data/Population-EstimatesData.csv\")\nPopulation_EstimatesData%>%head\n\n\n\n# Join the sets\nmy_df <- poverty_data%>%\n  select(region,code,contains(\"poor\"), median_ln,mean_ln) %>%\n  pivot_longer(cols=starts_with(\"poor\"),names_to=\"poor_cat\",values_to=\"poor_rate\") %>%\n  pivot_longer(cols=starts_with(\"npoor\"),names_to=\"npoor_cat\",values_to=\"poor_numb\")\n\n\n\nmy_df2 <- Population_EstimatesData%>%\n  janitor::clean_names()%>%\n  select(country_name,country_code,starts_with(\"x\"))%>%\n  pivot_longer(cols=contains(\"x\"),names_to=\"year\",values_to=\"pop\") %>%\n  mutate(year=gsub(\"x\",\"\",year))%>%\n  filter(year>2000,year<2021) %>%\n  group_by(country_name,country_code,year)\n\n\nmy_df2$pop[is.na(my_df2$pop)]<-0\n\n\nmy_df3 <- my_df2%>%\n  group_by(country_name,country_code,year)%>%\n  summarize(tot_pop=sum(pop),.groups=\"drop\")%>%\n  ungroup()\n\n\n# 3. map\n# load data\nlibrary(tmap)\ndata(\"World\")\n\nmy_df4 <- my_df3%>%\n  left_join(my_df,by=c(\"country_code\"=\"code\"))%>%\n  left_join(World %>%select(country_code=iso_a3,geometry),by=\"country_code\")\n\n\n\nmy_df5 = bi_class(my_df4,\n                  x=tot_pop,\n                  y=poor_numb,\n                  style = \"quantile\", dim = 3)\n\n\nmap = ggplot() +\n  geom_sf(data=my_df5,\n          aes(fill=bi_class, geometry=geometry),\n          size=.1,show.legend=F, color=\"white\") +\n  bi_scale_fill(pal=\"GrPink\", dim=3) +\n  coord_sf(expand=F) +\n  theme_void() +\n  theme(plot.background = element_rect(fill=\"#212A2E\", color=NA))\n\n# save map plot\nragg::agg_png(here::here(\"R_general_resources/30DayMapChallenge/day26_choropleth/map.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nmap\ndev.off()\n\n############################## ############################## ##############################\n\nlegend = bi_legend(pal = \"GrPink\",\n                   dim = 3,\n                   ylab = \"Vunerables in the area\",\n                   xlab = \"Population density\",\n                   size = 2.5) +\n  theme(panel.border = element_blank(),\n        axis.text = element_blank(),\n        axis.title.x = element_text(size = 16, family=f1, hjust=0,\n                                    color = \"white\", margin=margin(t=-5)),\n        axis.title.y = element_text(size = 16, family=f1, hjust=0,\n                                    color = \"white\", margin=margin(r=-5)),\n        legend.text = element_text(size = 14),\n        panel.background = element_blank(),\n        panel.grid.major=element_blank(),\n        plot.background = element_blank(),\n        legend.text.align = 0)\n\n\n\nlibrary(cowplot)\np1 = ggdraw() +\n  draw_image(image = here::here(\"day26_choropleth/data/map.png\"),\n             x=0,y=0,scale=2) +\n  draw_plot(legend, x=0.75, y=0.05, width= 0.3, height= 0.3) +\n  draw_line(x = c(-0.1, 0.36),y = c(0.95, 0.95),color = \"#212A2E\", size = 30) +\n  draw_label(\"World focus on:\", x=0.02, y=0.92,\n             fontfamily = f2, hjust=0, vjust=0,size=52, color=\"white\", fontface=\"bold\") +\n  draw_label(\"Population density per sq mile\\n\\nand\\n\\nNumber of vulnerable people\\n\\nin the area\",\n             x=0.13, y=0.55,\n             fontfamily = f2, hjust=0, vjust=0, size=22, color=\"white\",\n             lineheight = 0.4) +\n  draw_label(\"Datasource: datacatalog.worldbank.org | #30DayMapChallenge choropleth\\nGraphic: Federica Gazzelloni \",\n             x=0.5, y=0.05, size = 18, fontfamily = f2, color=\"white\") +\n  theme(plot.background = element_rect(fill=\"#212A2E\", color=NA),\n        panel.background = element_rect(fill=\"#212A2E\", color=NA),\n        plot.margin=margin(.5,.5,.5,.5, unit=\"cm\"))\n\n# save final plot\nragg::agg_png(here::here(\"day26_choropleth/choropleth.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\np1\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day12_population/day12_population.html",
    "href": "mapchallenges/cases2021/posts2021/day12_population/day12_population.html",
    "title": "Population",
    "section": "",
    "text": "# Rnaturalearth & tmap\n\nlibrary(tidyverse)\nlibrary(sp)\n\nlibrary(tmap)\nlibrary(tmaptools)\n\n# from tmap\ndata(metro, land, World)\nclass(World) # class sf\nclass(land)\nmetro%>%data.frame()%>%head\n\n\n# old-style crs object detected (for my R version)\nst_crs(metro)=st_crs(4283)\nst_crs(World)=st_crs(4283)\nst_crs(land)=st_crs(4283)\n\n\n\nWorld_sh<- World%>%filter(!continent==\"Antarctica\")\n\ntmap_mode(\"plot\")\n\ntm <-tmap::tm_shape(World_sh)+\n  tm_polygons(\"economy\",\n              title=\"\",\n              palette=(viridisLite::cividis(7))) +\n\n  tm_shape(World_sh) +\n  tm_borders(\"white\", lwd = .5) +\n  tm_text(\"continent\",\n          size = \"AREA\",\n          col=\"white\") +\n\n  tm_shape(metro)+\n  tm_bubbles(\"pop2030\",\n             col=\"white\",\n             alpha=0.5,\n             title.size = \"Pop 2030\"\n             ) +\n\n  tm_shape(metro)+\n  tm_bubbles(\"pop1950\",\n             col=\"darkred\",\n             alpha=0.3,\n             title.size = \"Pop 1950\") +\n  tm_credits(\"(c) World Pop {tmap} #30DayMapChallenge - Graphics: Federica Gazzelloni\", \n             col = \"white\",\n             position=c(0.35,0.01))+\n  tm_layout(title=\"World Population 1950 vs 2030\",\n            title.position = c(0.4,0.1),\n            title.color = \"white\",\n            title.fontface = \"bold\",\n            \n            bg.color =\"#185e6e\",#  \"#202254\",\n            inner.margins = c(0, .02, .02, .02),\n            legend.text.color = \"white\",\n            legend.title.size = 1,\n            legend.text.size = 0.5,\n            legend.position = c(0.05,0.05),\n            legend.bg.color = NA,\n\n            earth.boundary=T,\n            earth.boundary.color=\"green\",\n            earth.boundary.lwd=3,\n            space.color=\"midnightblue\"\n\n            )\n\n\n## save an image (\"plot\" mode)\ntmap_save(tm, filename = \"world_map.png\")"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day18_water/day18_water.html",
    "href": "mapchallenges/cases2021/posts2021/day18_water/day18_water.html",
    "title": "Water",
    "section": "",
    "text": "John Snow data\n\nlibrary(tidyverse)\n\nlibrary(rgdal)\nlibrary(maptools)\nlibrary(ggmap)\nlibrary(sp)\nlibrary(sf)\nlibrary(HistData)\nlibrary(leaflet)\nlibrary(OpenStreetMap)\nlibrary(osmdata)\nlibrary(spData)\n\n\nlibrary(stars)\nlnd_img <- file.path(\"GBD/Comunicable_diseases/John_snow/SnowGIS/OSMap_Grayscale.tif\")\nsat_vis <- read_stars(lnd_img\n                     # RasterIO = list(nBufXSize = 600, nBufYSize = 600)\n                      )\n\n\n\npumps <- st_read(\"GBD/Comunicable_diseases/John_snow/SnowGIS/Pumps.shp\")\npumps <- st_transform(pumps, crs = st_crs(sat_vis))\npumps2<- data.frame(st_coordinates(pumps$geometry))\n\n\n\nlibrary(extrafont)\nlibrary(showtext)\n\n\n\n## Automatically use showtext to render text for future devices\nshowtext_auto()\n\n## Tell showtext the resolution of the device,\n## only needed for bitmap graphics. Default is 96\nshowtext_opts(dpi = 320)\n\n## Loading Google fonts (https://fonts.google.com/)\n\nfont_add_google(\"Oswald\", \"oswald\")\n\n\n\n\nggplot() +\n  geom_stars(data = sat_vis, show.legend = FALSE) +\n  scale_fill_viridis_d(alpha = 1,\n                       begin = 0.9,\n                       end = 0,\n                       direction = -1,\n                       option = \"B\",\n                       aesthetics = \"fill\")+\n  geom_polygon(data=pumps2,\n               aes(x = X, y = Y),\n               colour = \"midnightblue\",alpha=0.3)+\n  geom_point(data=pumps2,\n             aes(x = X, y = Y),\n             colour = \"midnightblue\")+\n  geom_point(data = pumps2, aes(x = X, y = Y), shape = 21,\n             colour = \"gold\", fill = NA,\n             size = 7, stroke = 1,inherit.aes = FALSE) +\n    coord_equal()+\n  labs(title=\"John Snow Colera map of the pumps\")+\n  ggthemes::theme_map()+\n  theme(text = element_text())\n\n\nragg::agg_png(\"js_map.png\",\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\nlibrary(cowplot)\nfinal<-ggdraw()+\n  draw_image(\"R_general_resources/30DayMapChallenge/day18_water/js_map.png\",\n             x = 0.01, y = 0,width = 0.98) +\n\n  draw_line(x = c(0.2, 0.8),y = c(0.8, 0.97),color = \"green\", size = 25) +\n  draw_label(label=\"John Snow's 1854 investigation \\nof a Cholera outbreak in London\",\n             x=0.5,y=0.89,size=20,color=\"grey20\",fontface = \"bold\",\n             angle = 12) +\n\n  draw_line(x = c(0.6, 0.9),y = c(0.6, 0.67),color = \"green\", size = 20) +\n  draw_label(label=\"Pumps locations\\nvectors of the infections\",\n             x=0.75, y=0.63, size=16, angle=10,\n             color = \"black\",fontface = \"bold\",\n             lineheight = 1.1,\n             alpha = 1) +\n  draw_line(x = c(0.6, 0.58),y = c(0.6, 0.5),color = \"green\", size = 1) +\n  #draw_grob(g, scale = 0.15,x = 0,y = -0.08)+\n  draw_line(x = c(0.2, 0.805),y = c(0.05, 0.05),color = \"green\", size = 21) +\n  draw_text(\"Datasource: blog.rtwilson.com - #30DayMapChallenge Day18 water\\nInfographics: Federica Gazzelloni\",\n            x=0.5,y=0.05,size=14,fontface = \"bold\")\n\n\n\n\n# save final plot\nragg::agg_png(here::here(\"R_general_resources/30DayMapChallenge/day18_water/water.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day6_red/day6_red.html",
    "href": "mapchallenges/cases2021/posts2021/day6_red/day6_red.html",
    "title": "Red",
    "section": "",
    "text": "library(tidyverse)\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 30)\n\ndrought <- tuesdata$drought\n\n\nintensity_impacts<- c(\"D0\"=\"Abnormally Dry\",\n                      \"D1\"=\"Moderate Drought\",\n                      \"D2\"=\"Severe Drought\",\n                      \"D3\"= \"Extreme Drought\",\n                      \"D4\"=\"Exceptional Drought\")\n\ndrought_short <- drought %>%\n  dplyr::select(-map_date,-stat_fmt) %>%\n  filter(!drought_lvl==\"None\",!area_pct==0)\n\n\nlibrary(sf)\nlibrary(raster)\nlibrary(spData)\nlibrary(spDataLarge)\n\nlibrary(maps)\nlibrary(viridis)\nlibrary(ggthemes)\n\n\nlibrary(zipcodeR)\nzipcodeR::download_zip_data()\n\ngeo_codes<- zipcodeR::search_state(drought_short$state_abb)%>%\n  dplyr::select(major_city,county,state,lat,lng,\n                population,population_density,\n                land_area_in_sqmi,water_area_in_sqmi,\n                housing_units,occupied_housing_units,\n                median_home_value,median_household_income) %>%\n  drop_na()\n\n\nmy_geo_codes_df<-geo_codes%>%\n  dplyr::select(state,lat,lng)\n\n\ndrought_short_map <- drought_short %>%\n  arrange(valid_start)%>%\n  mutate(year=lubridate::year(valid_start),\n         month=lubridate::month(valid_start))%>%\n  filter(str_detect(valid_start,\"2021\")) %>%\n  #filter(month==c(1,2,3)) %>%\n  group_by(month,state_abb,drought_lvl) %>%\n  summarize(med_area_pct=round(median(area_pct),2))%>%\n  ungroup() %>%\n  filter(!med_area_pct==0) %>%\n  left_join(my_geo_codes_df,by=c(\"state_abb\"=\"state\")) %>%\n  mutate(month = month.name[month])\n\n\nmy_df <- drought_short_map%>%count(month,sort=T)%>%\n  dplyr::select(-n)%>%\n  mutate(month_id=row_number())%>%\n  inner_join(drought_short_map,by=\"month\")\n\n\nlibrary(extrafont)\n#loadfonts()\n#fonts()\n\ndroughts_family <- \"Roboto Condensed\"\n\nlibrary(gganimate)\nlibrary(cartography)\n\nred.pal<-c(\"red\", \"orangered\", \"firebrick1\", \"brown3\", \"firebrick\")\n\n\nus_county_map <- map_data(\"county\")\nus_state_map <- map_data(\"state\")\n\nggplot() +\n  geom_point(data=subset(my_df,lat>25&lat<50),\n             aes(x=lng,y=lat,color=factor(drought_lvl)),\n             alpha=0.5,size=.4) +\n  \n  geom_polygon(data=us_county_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"darkred\",size=0.2) +\n  \n  geom_polygon(data=us_state_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"red\",size=0.4) +\n  \n  scale_color_manual(labels = intensity_impacts,\n                     values=red.pal) +\n  ggthemes::theme_map() +\n  theme(legend.position = \"none\",\n        legend.title = element_text(family = droughts_family),\n        legend.text = element_text(size=8,family =droughts_family),\n        legend.background = element_blank(),\n        legend.box.background = element_blank(),\n        legend.key = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(family = droughts_family),\n        plot.title =element_text(size=25,face=\"bold\",family =droughts_family,color=\"black\"),\n        plot.subtitle =element_text(size=12,face=\"bold\",family =droughts_family),\n        plot.caption =element_text(size=9,family =droughts_family,hjust = 0),\n        plot.caption.position = \"panel\",\n        plot.title.position = \"panel\") +\n\n# gganimate specific bits:\n       labs(title=\"US Drought variation - Month: {closest_state}\",\n       subtitle=\"\",\n       caption=\"US Drought map: available values by County - Jan to July 2021\\n\n       #30DayMapChallenge day6-red - graphic: Federica Gazzelloni\")+\n        transition_states(month) +\n        ease_aes('linear')\n\n\n# Save at gif:\nanim_save(\"drought_red.gif\")"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day13_naturalearth/day13_naturalearth.html",
    "href": "mapchallenges/cases2021/posts2021/day13_naturalearth/day13_naturalearth.html",
    "title": "Naturalearth",
    "section": "",
    "text": "The resource I am going to use today are: rforpoliticalscience us census\n\nlibrary(tidyverse)\nlibrary(reshape2)\nlibrary(rnaturalearth)\nlibrary(rvest)\nlibrary(countrycode)\n\n\nlibrary(ggflags)\n\nlibrary(ggimage)\n\nlibrary(ggthemes)\n\n\nlibrary(readr)\nCOLDAT_colonies <- read_csv(here::here(\"day13_naturalearth/coldat/COLDAT_colonies.csv\"))\ncol_df <- COLDAT_colonies  #%>%head\ncol_df <- data.frame(col_df[1:9])\ncol_df%>%names\n\nTidy data from wide to long:\n\nlong_col <- col_df %>%\n  pivot_longer(cols=c(2:9), names_to=\"colony\",values_to=\"value\")%>%\n  filter(!value==0) \n\nEncoding(long_col$country) <- \"latin1\"\n  \nlong_col <- long_col%>%\n  mutate(country=tolower(country))\n\nGet natural earth world country polygons:\n\nrequire(rnaturalearth)\nmap <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\nmap <- map %>%\n  mutate(country=tolower(name_long))\n\nmap%>%select(contains(\"iso\"),country,name_long)%>%head\n\n\ncountry<- unique(long_col$country)\n\nrequire(countrycode)\n\ncountrycode::codelist%>%head\n\n\nlong_col$iso2c<- countrycode::countrycode(long_col$country,\n                         origin = 'country.name', \n                         destination = 'iso2c')\n\ncol_map <- sp::merge(map, long_col, \n                 by.x = \"iso_a2\", \n                 by.y = \"iso2c\", \n                 all.x = TRUE)\n\n\ncol_map <- col_map%>%\n  separate(colony,into=c(\"x\",\"colony\"))%>%\n  mutate(colony=as.factor(colony))\n\ncol_map <- col_map%>%select(-x)\n\n\nlibrary(rvest)\ncoord <- read_html(\"https://developers.google.com/public-data/docs/canonical/countries_csv\")\n\ncoord_tables <- coord %>% html_table(header = TRUE, fill = TRUE)\n\ncoord <- coord_tables[[1]]\n\ncol_map <- merge(col_map, coord, by.x= \"iso_a2\", by.y = \"country\", all.y = TRUE)\n\n\ncol_map <- col_map%>%mutate(country_iso=tolower(iso_a2))\n\ncol_map%>%select(latitude,longitude)%>%head\n\n\nlibrary(RColorBrewer)\nRColorBrewer::display.brewer.all()\nRColorBrewer::display.brewer.pal(9,\"BrBG\")\n\n\ncol_map%>%select(subregion,country_iso)%>%head\n\n\ncs_america<-col_map[which(col_map$subregion==\"Central America\"|col_map$subregion==\"South America\"),]\ncs_america%>%select(country_iso)\ncs_america%>%head\n\n\nlibrary(ggflags)\n\nlibrary(RColorBrewer)\n# RColorBrewer::display.brewer.pal(9,\"BrBG\")\ncut_colors <- setNames(c(brewer.pal(name = \"BrBG\", n = 4),\n                         \"darkred\"),\n                       levels(cs_america$colony_factor))\n\nflags <- cs_america%>% # select(contains(\"colony\"))\n  count(longitude,latitude,colony) \n\n\nlabels <- cs_america%>%\n  count(longitude,latitude,sovereignt,country_iso) \n\ncs_america %>%\n  filter(!is.na(subregion))%>%\n  ggplot()+\n  geom_sf(aes(fill=gdp_md_est),position=\"identity\") + # gdp_md_est\n  scale_fill_distiller(type = \"seq\",\n  palette = 2,\n  direction = -1,\n  values = NULL,\n  space = \"Lab\",\n  na.value = \"grey50\",\n  guide = \"colourbar\",\n  aesthetics = \"fill\")+\n  #scale_fill_manual(values = cut_colors) +\n  \n  ggflags::geom_flag(data=labels,aes(x=longitude,y=latitude,country=factor(sovereignt)),size=4) +\n  ggrepel::geom_text_repel(data=labels,\n                      aes(x=longitude+1,y=latitude+1,label=factor(sovereignt)),\n                      fill=\"darkorange\",max.overlaps = 100,\n             label.padding = unit(1,\"pt\"))+\n  ggthemes::theme_map()+\n  theme(legend.position = c(-0.1,0.4))\n\n\nlibrary(showtext)\nlibrary(extrafont)\nsysfonts::font_info_google(\"Josefin Sans\")\n#fonts()\n#loadfonts()\nfont_add_google(\"Josefin Sans\",\"josefin\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\noptions(scipen = 999)\nnaturalearth <- col_map %>%\n  filter(!is.na(subregion))%>%\n  ggplot()+\n  geom_sf(aes(fill=gdp_md_est),color=\"#e3bf86\",size=0.2,position=\"identity\") + # gdp_md_est\n  scale_fill_distiller(type = \"seq\",\n                       label = scales::unit_format(unit = \"M\", scale = 1e-6),\n                       palette = 2,\n                       direction = -1,\n                       values = NULL,\n                       space = \"Lab\",\n                       na.value = \"grey50\",\n                       guide = \"colourbar\",\n                       aesthetics = \"fill\")+\n  coord_sf(crs = sf::st_crs(5368))+ # https://epsg.io/\n  labs(title = \"NATURAL EARTH GDP ESTIMATION\",\n       subtitle=\"rnaturalearth data #30DayMapChallenge\",\n       caption = \"Data: rnaturalearth - View: EPSG:5368 - Graphics: Federica Gazzelloni\",\n       fill=\"GDP est.\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family = \"josefin\",face = \"bold\"),\n        plot.title = element_text(size=25),\n        plot.subtitle = element_text(size=15),\n        plot.caption = element_text(size=12),\n        legend.position = c(0,0),\n        legend.background = element_blank(),\n        legend.title = element_text(vjust=1),\n        plot.background = element_rect(colour = \"#7d9ac7\",fill=\"#7d9ac7\"),\n        panel.background = element_rect(colour = \"#7d9ac7\",fill=\"#7d9ac7\")\n        )\n\n\n# save final plot\nragg::agg_png(here::here(\"day13_naturalearth/naturalearth2.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nnaturalearth\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day16_urban_rural/day16_urban_rural.html",
    "href": "mapchallenges/cases2021/posts2021/day16_urban_rural/day16_urban_rural.html",
    "title": "Urban_rural",
    "section": "",
    "text": "library(cbsodataR)\nlibrary(tidyverse)\nlibrary(sf)\n\n\n\n# https://www.cbs.nl/en-gb/onze-diensten/open-data/statline-as-open-data/cartography\n# https://simplemaps.com/data/nl-cities\n\n\n\n#----\n\ndata_house <- cbs_get_data(\"83765NED\",\n                     select=c(\"WijkenEnBuurten\",\n                              \"Appartement_48\",\n                              \"ScholenBinnen3Km_98\")) %>%\n  mutate(WijkenEnBuurten = str_trim(WijkenEnBuurten),#boroughs\n         houses = Appartement_48,\n         schools=ScholenBinnen3Km_98)\n\n\n# Retrieve data with municipal boundaries from PDOK\nmunicipalBoundaries <- st_read(\"https://geodata.nationaalgeoregister.nl/cbsgebiedsindelingen/wfs?request=GetFeature&service=WFS&version=2.0.0&typeName=cbs_gemeente_2017_gegeneraliseerd&outputFormat=json\")\n\n\n# obtain the coordinates\nas.data.frame(st_coordinates(municipalBoundaries$geometry))\n\ndf <- municipalBoundaries$statnaam\ndf<- as.data.frame(df)\n\ndf_xy <- municipalBoundaries%>%\n  select(statnaam,geometry) %>%\n  st_centroid()%>%\n  st_coordinates()\n\n\n\nstate <- cbind(df,df_xy)%>%\n  filter(df%in%c(\"Amsterdam\",\"The Hague\",\n                 \"Utrecht\",\"Rotterdam\",\n                 \"Eindhoven\",\n                 \"Groningen\",\"Breda\",\n                 \"Apeldoorn\"))\n\n\n\nlibrary(showtext)\nlibrary(extrafont)\n#fonts()\n#loadfonts()\nfont_add_google(\"Roboto Condensed\",\"RobotoCondensed\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\n\n# Link data from Statistics Netherlands to geodata\ndata_house <-\n  municipalBoundaries %>%\n  left_join(data_house, by=c(statcode=\"WijkenEnBuurten\"))\n\n# Create a thematic map\nplot <- data_house %>%\n  ggplot() +\n  geom_sf(aes(fill = schools)) +\n  geom_text(data=state,aes(x=X,y=Y,label=df),\n            color=\"gold\",fontface=\"bold\",family=\"RobotoCondensed\")+\n  scale_fill_gradient(low=\"#c97d2c\",high = \"darkblue\")+\n  labs(title = \"The Netherlands: Hurban and Rural\",\n       subtitle=\"Schools near by...\",\n       caption=\"Datasource: cbs.nl opendata - #30DayMapChallenge\\nGraphics: Federica Gazzelloni\\n\",\n       fill = \"Schools\") +\n  coord_sf()+\n  theme_void()+\n  theme(text = element_text(color=\"gold\",face=\"bold\",family=\"RobotoCondensed\"),\n        plot.background = element_rect(color = \"grey20\",fill=\"grey60\",size=2),\n        legend.position = c(0.1,0.08),\n        plot.caption = element_text(hjust=0.5,size=11),\n        plot.caption.position = \"panel\",\n        plot.title = element_text(size=25,hjust=0.2,vjust=-1.5),\n        plot.subtitle = element_text(size=18,hjust=0.06,vjust=-1))\n\n\nlibrary(cowplot)\nfinal <- cowplot::ggdraw(plot)+\n  draw_label(\"The Hague\",x=0.4,y=0.5,color=\"gold\",\n             fontface = \"bold\",fontfamily=\"RobotoCondensed\")\n\n\n# save final plot\nragg::agg_png(here::here(\"R_general_resources/30DayMapChallenge/day15_urban_rural/urban_rural.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()\n\n\n\n# data for oland capitals\n\nlibrary(readr)\n\nnl <- read_csv(\"R_general_resources/30DayMapChallenge/day15_urban_rural/nl.csv\")\n\n\nnl%>%count(city,population)%>%arrange(-population)\n\nnl%>%\n  filter(!lat<20)%>%\n  ggplot(aes(x=lng,y=lat))+\n  geom_point()+\n  ggrepel::geom_text_repel(aes(label=capital))"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day17_land/day17_land.html",
    "href": "mapchallenges/cases2021/posts2021/day17_land/day17_land.html",
    "title": "Land",
    "section": "",
    "text": "library(cowplot)\nlibrary(tidyverse)\n\nlibrary(showtext)\nlibrary(extrafont)\n# sysfonts::font_add(\"\")\n#fonts()\n#loadfonts()\nfont_add_google(\"Cinzel\",\"Cinzel\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\n\nnyc_image<- magick::image_read(here::here(\"R_general_resources/30DayMapChallenge/day17_land/unfolded.png\"))\n\ng <- grid::circleGrob(gp = grid::gpar(fill = NA,col=\"white\",lwd=0.5))\n\n\nfinal <- cowplot::ggdraw()+\n  draw_image(nyc_image,x = 0.01, y = 0,width = 0.98)+\n\n  draw_label(label=\"New York's population\",\n             x=0.6,y=0.63,fontfamily=\"Cinzel\",size=10,color=\"gold\") +\n\n\n  draw_label(label=\"New York landscape\",\n             x=0.15, y=0.95, size=19, fontfamily=\"Cinzel\",\n             color = \"black\",fontface = \"bold\",\n             lineheight = 1.1,\n             alpha = 1) +\n  #draw_grob(g, scale = 0.15,x = 0,y = -0.08)+\n\n  draw_text(\"Made with: studio.unfolded.ai - #30DayMapChallenge Day17 Land\\nInfographics: Federica Gazzelloni\",\n            x=0.5,y=0.05,family=\"Cinzel\",size=12,fontface = \"bold\")\n\n\n\n\n# save final plot\nragg::agg_png(here::here(\"R_general_resources/30DayMapChallenge/day17_land/land.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day2_lines/day2_lines.html",
    "href": "mapchallenges/cases2021/posts2021/day2_lines/day2_lines.html",
    "title": "Lines",
    "section": "",
    "text": "Overview\nThis map of France is created with data from the {maps} R-package.\n\nlibrary(maps)\nlibrary(tidyverse)\n\n\nlibrary(extrafont)\nloadfonts()\nlibrary(showtext)\nfont_add_google(\"Schoolbell\", \"bell\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\n# set the colors\n# source: https://www.rdocumentation.org/packages/colorspace/versions/2.0-2/topics/rainbow_hcl\nwheel <- function(col, radius = 1, ...)\n  pie(rep(1, length(col)), col = col, radius = radius, ...)\nwheel(rainbow(96))\n\n# load the map data\nfrance_map <- map_data(\"france\")\n\n\nfrance_plot<- ggplot() +\n  geom_line(data =france_map,aes(x=long,y=lat,group=region,\n                                 color=factor(region)),show.legend = F,size=0.2)+\n  scale_color_manual(values = rainbow(96))+\n  labs(title=\"Regions of France\",\n       #subtitle = \"#30DayMapChallenge Day 2 - lines\",\n       caption = \"Datasource: maps R-package - Dataviz: Federica Gazzelloni\\n#30DayMapChallenge Day 2 - lines\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family = \"bell\"),\n        plot.title = element_text(size=40,family=\"bell\",face=\"bold\",vjust=-0.5,hjust=0.2),\n        #plot.subtitle = element_text(vjust=1,size=15,vjust=-10),\n        plot.caption = element_text(hjust=0.5,size=10,vjust=1),\n        plot.background = element_rect(color =\"grey80\",fill=\"grey80\"),\n        plot.margin = margin(0,15,5,15,unit = \"pt\"))\n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/30DayMapChallenge/day2_lines/lines.png\"),\n              res = 320, width = 6, height = 6, units = \"in\")\nfrance_plot\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day29_null/day29_null.html",
    "href": "mapchallenges/cases2021/posts2021/day29_null/day29_null.html",
    "title": "Null",
    "section": "",
    "text": "Overview\nThis map is a .tif image of the Earth downloaded from Earth-SAT."
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day19_islands/day19_islands.html",
    "href": "mapchallenges/cases2021/posts2021/day19_islands/day19_islands.html",
    "title": "Islands",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day19_islands/day19_islands.html#japan",
    "href": "mapchallenges/cases2021/posts2021/day19_islands/day19_islands.html#japan",
    "title": "Islands",
    "section": "Japan",
    "text": "Japan\nsource: https://cran.r-project.org/web/packages/ggfortify/vignettes/plot_map.html\n\nlibrary(mapdata)\n\n# Check all available geospatial objects:\n# help(package='mapdata')\n \njapan<- ggplot2::map_data(\"japan\")\n# Map of Japan:\nmap('japan',col=\"black\", lwd=1, mar=rep(0,4) )\n\n\njapan <- map_data(\"japan\") %>% \n  select(lon = long, lat, group, id = region)\nhead(japan)\n\n\ncities <- get('world.cities')\ncities <- cities[cities$country.etc == 'Japan', ]\nhead(cities)\n\n\njp_pop<- cities%>%\n  count(name,pop,lat,long)%>%\n  arrange(-pop)%>%\n  slice(1:10)\n\n\nfull <- japan%>%\n  full_join(jp_pop,by=c(\"lon\"=\"long\",\"lat\"))\n\n\nlibrary(extrafont)\nlibrary(showtext)\nlibrary(cowplot)\nlibrary(ggstream)\nlibrary(colorspace)\n\n\n## Automatically use showtext to render text for future devices\nshowtext_auto()\n\n## Tell showtext the resolution of the device,\n## only needed for bitmap graphics. Default is 96\nshowtext_opts(dpi = 320)\n\n## Loading Google fonts (https://fonts.google.com/)\nfont_add_google(\"Covered By Your Grace\", \"grace\")\n\n\nlibrary(RColorBrewer)\nn <- 47\nqual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]\ncol_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))\n\nlibrary(RColorBrewer)\nfinal<- ggplot() +\n  geom_point(data = cities, \n             mapping = aes(x = long, y = lat),\n               colour = 'blue', size = 0.1) +\n  \n  geom_polygon(data=japan,\n               mapping = aes(x = lon,y = lat,group = group,fill=id)) +\n  \n   geom_point(data=full,\n               mapping = aes(x = lon,y = lat, group = group,\n                             size=pop),alpha=0.4,color=\"black\") +\n  \n  geom_text(aes(x = 132, y = 40),label = \"Japan\",size=20,family=\"grace\") +\n  geom_text(aes(x = 142, y = 45),label = \"Hokkaido\",size=12,family=\"grace\") +\n  geom_text(aes(x = 142, y = 37),label = \"Honshu\",size=12,family=\"grace\") +\n  geom_text(aes(x = 132, y = 30),label = \"Kyushu\",size=12,family=\"grace\") +\n  geom_text(aes(x = 138, y = 33),label = \"Shikoku\",size=12,family=\"grace\") +\n  geom_text(aes(x = 130, y = 25),label = \"Okinawa Island\",size=12,family=\"grace\") +\n  \n  ggrepel::geom_text_repel(data = jp_pop, \n             mapping = aes(x = long, y = lat,label=name),family=\"grace\") +\n  \n  scale_fill_manual(values=col_vector)+\n  scale_size_area(label = scales::comma,max_size=6)+\n  guides(fill=guide_legend(ncol=2,keywidth =  unit(0.1, 'cm')),\n         size=guide_legend(ncol=4)) +\n  \n  labs(title=\"Japanese Archipelago\",\n       subtitle=\"Japan is the largest island country in East Asia and the fourth largest island country in the world - Wiki\",\n       size=\"Population\",fill=\"Regions\",\n       caption = \"Datasource: {ggplot2}::map_data - #30DayMapChallenge - Infographics: Federica Gazzelloni\")+\n  coord_map() +\n  ggthemes::theme_map()+\n  theme(text = element_text(family=\"grace\",size=12),\n        legend.position = c(-0.3,0.1),\n        legend.background = element_blank(),\n        legend.key.size = unit(0.1, 'cm'),\n        plot.title = element_text(size=25,vjust=-2),\n        plot.subtitle = element_text(vjust=-5),\n        plot.caption = element_text(size=14)\n        )\n\nfinal\n\n\n# save final plot\nragg::agg_png(here::here(\"R_general_resources/30DayMapChallenge/day19_islands/islands.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day10_raster/day10_raster.html",
    "href": "mapchallenges/cases2021/posts2021/day10_raster/day10_raster.html",
    "title": "Raster",
    "section": "",
    "text": "library(tidyverse)\nlibrary(afriadmin)\nlibrary(afrihealthsites)\nlibrary(afrilearndata)\nlibrary(tmap)\n\n\nafriadmin::afcountries\n#afriadmin::afcountrynames(afcountries$name)\n\ncountries<- afriadmin::afcountries$name\n\nafrilearndata::africapitals\nafrilearndata::afrihighway\nafrilearndata::afripop2000\nafrilearndata::afripop2020  \nafrilearndata::africountries\nafriadmin::sf_af_gadm0\nafrihealthsites::sf_healthsites_af\n\n\nsf::st_crs(africountries)=st_crs(4326)\nsf::st_crs(afrihighway)=st_crs(4326)\nsf::st_crs(africapitals)=st_crs(4326)\n\n\ntmap_mode(\"plot\")\n\npop_00 <- tmap::tm_shape(africountries) +\n  tm_polygons(col = \"#42ecf5\") +\n  \n  tm_shape(afripop2000)+\n  tm_raster(title=\"Population density\",\n            palette = rev(viridisLite::inferno(5)),\n            breaks = c(0,2,20,200,2000,25000)) +\n  \n  tm_shape(afrihighway) +\n  tm_lines(col=\"#f5b342\") +\n  \n  tm_shape(africountries)+\n  tm_borders() +\n  tm_text(text =\"iso_a3\", \n          fontface = \"bold\",\n          col=\"midnightblue\",\n          size = \"pop_est\",\n          title.size = \"\",\n          legend.size.show = TRUE,\n          sizes.legend.text = \"Pop\"\n          ) +\n  \n  tm_shape(africapitals) +\n  tm_symbols(col=\"midnightblue\",scale = 0.2) +\n  \n  tm_layout(title=\"2000\",\n            title.position = c(0.8,0.9),\n            legend.title.size = 1,\n            legend.text.size = 0.5,\n            legend.position = c(\"left\",\"bottom\"),\n            legend.bg.color = NA\n            )\n  \n    \npop_20 <- tmap::tm_shape(africountries) +\n  tm_polygons(col = \"#42ecf5\") +\n  \n  tm_shape(afripop2020)+\n  tm_raster(title=\"Population density\",\n            palette = rev(viridisLite::inferno(5)),\n            breaks = c(0,2,20,200,2000,25000)) +\n  \n  tm_shape(afrihighway) +\n  tm_lines(col=\"#f5b342\") +\n  \n  tm_shape(africountries)+\n  tm_borders() +\n   tm_text(text =\"iso_a3\", \n          fontface = \"bold\",\n          col=\"midnightblue\",\n          size = \"pop_est\",\n          title.size = \"\",\n          legend.size.show = TRUE,\n          sizes.legend.text = \"Pop\"\n          ) +\n  \n  tm_shape(africapitals) +\n  tm_symbols(col=\"midnightblue\",scale = 0.2) +\n  \n  tm_layout(title=\"2020\",\n            title.position = c(0.8,0.9),\n            legend.title.size = 1,\n            legend.text.size = 0.5,\n            legend.position = c(\"left\",\"bottom\"),\n            legend.bg.color = NA\n            )  \n  \nmy_raster<-tmap_arrange(pop_00,pop_20,ncol = 2)\n\n\n# save final plot\nragg::agg_png(here::here(\"day10_raster/raster.png\"),\n              res = 320, width = 8, height = 6, units = \"in\")\nmy_raster\ndev.off()\n\n\nlibrary(showtext)\nlibrary(extrafont)\nsysfonts::font_info_google(\"Josefin Sans\")\n#fonts()\n#loadfonts()\nfont_add_google(\"Josefin Sans\",\"josefin\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\n# final touches\nlibrary(cowplot)\nlibrary(magick)\n\nraster_image<- magick::image_read(here::here(\"day10_raster/raster.png\"))\n\ng <- grid::circleGrob(gp = grid::gpar(fill = NA,color=\"black\"))\n\n\nfinal <- cowplot::ggdraw()+\n  draw_image(raster_image,x = 0.1, y = 0,width = 0.7)+\n  draw_label(label=\"Africa\",x=0.3,y=0.2,fontfamily=\"josefin\",size=40) +\n  draw_label(label=\"density increased\\nin some areas\\nmore than others\",x=0.52,y=0.35,fontfamily=\"josefin\",size=8) +\n  draw_label(label=\"Population density transition 2000-2020\", x=0.45, y=0.95, size=30, fontfamily=\"josefin\") +\n  \n  draw_line(x = c(0.52, 0.5),y = c(0.38, 0.48),color = \"black\", size = 0.2)+\n  \n  draw_line(x = c(0.52, 0.6),y = c(0.38, 0.5),color = \"black\", size = 0.2)+\n  \n  draw_text(\"Datasource: afrilearndata\\n#TidyTuesdat week46 and #30DayMapChallenge day10 Raster\\nInfographics: Federica Gazzelloni\",x=0.5,y=0.05,family=\"josefin\",size=11)+\n  draw_grob(g, scale = 0.2,x = 0,y = 0.03)\n\n# save final plot\nragg::agg_png(here::here(\"day10_raster/raster2.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/posts2021/day11_3D/day11_3D.html",
    "href": "mapchallenges/cases2021/posts2021/day11_3D/day11_3D.html",
    "title": "3d",
    "section": "",
    "text": "source: https://ggplot2-book.org/maps.html\n\nlibrary(rayshader)\nlibrary(tidyverse)\n\n\nfiles <- bomrang::get_available_imagery() %>%\n  stringr::str_subset(\"202111100700\")\n\ncurl::curl_download(\"ftp://ftp.bom.gov.au/anon/gen/gms/IDE00427.202111110800.tif\",\n                    \"IDE00427.202111110800.tif\")\n\nlocaltif=raster::raster(\"day11_3D/IDE00427.202111110800.tif\")\n\n#And convert it to a matrix:\nelmat = rayshader::raster_to_matrix(localtif)\n\nrequire(rayshader)\n#We use another one of rayshader's built-in textures:\nearth1 <- elmat %>%\n  sphere_shade(colorintensity = 2,\n               zscale = 1/2,\n               texture=\"unicorn\") %>%\n  plot_map()\n\n# save plot\nragg::agg_png(here::here(\"day11_3D/3D.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nelmat %>%\n  sphere_shade(colorintensity = 2,\n               zscale = 1/2,\n               texture=\"unicorn\") %>%\n  plot_map()\ndev.off()\n\n# fonts\n\nlibrary(showtext)\nlibrary(extrafont)\n#fonts()\n#loadfonts()\nfont_add_google(\"Shadows Into Light\",\"ShadowsIntoLight\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\n\n\n# final touches\nlibrary(cowplot)\nlibrary(magick)\n\nimage_3D<- magick::image_read(here::here(\"day11_3D/3D.png\"))\n\n\nfinal <- cowplot::ggdraw()+\n  draw_image(image_3D,x = 0.1, y = 0,width = 0.7) +\n  draw_label(label=\"Australia perspective\",x=0.3,y=0.15,\n             fontfamily=\"ShadowsIntoLight\",size=20) +\n\n\n  draw_label(label=\"World 3D Sat-view (8am 11.11.2021-GMT+11)\", x=0.45, y=0.9,\n             size=30,\n             fontfamily=\"ShadowsIntoLight\") +\n\n  draw_text(\"Datasource: bom.gov.au and #30DayMapChallenge day11 3D\\nInfographics: Federica Gazzelloni\",\n            x=0.5,y=0.05,family=\"ShadowsIntoLight\",size=12)\n\n\n\nragg::agg_png(here::here(\"day11_3D/world_3D.png\"),\n              res = 320, width = 8, height = 6, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2021/index.html",
    "href": "mapchallenges/cases2021/index.html",
    "title": "30DayMapChallenge 2021",
    "section": "",
    "text": "Metamapping Day\n\n\n\n\n\n\n\n\n\nNov 30, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNull\n\n\n\n\n\n\n\n\n\nNov 29, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Earth is not flat\n\n\n\n\n\n\n\n\n\nNov 28, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHeatmap\n\n\n\n\n\n\n\n\n\nNov 27, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChoropleth Map\n\n\n\n\n\n\n\n\n\nNov 26, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInteractive Map\n\n\n\n\n\n\n\n\n\nNov 25, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHistorical Map\n\n\n\n\n\n\n\n\n\nNov 24, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Challenge 3: GHSL\n\n\n\n\n\n\n\n\n\nNov 23, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoundaries\n\n\n\n\n\n\n\n\n\nNov 22, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nElevation\n\n\n\n\n\n\n\n\n\nNov 21, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMovement\n\n\n\n\n\n\n\n\n\nNov 20, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIsland(s)\n\n\n\n\n\n\n\n\n\nNov 19, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWater\n\n\n\n\n\n\n\n\n\nNov 18, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLand\n\n\n\n\n\n\n\n\n\nNov 17, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUrban / Rural\n\n\n\n\n\n\n\n\n\nNov 16, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMap made without using a Computer\n\n\n\n\n\n\n\n\n\nNov 15, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMap with a New Tool\n\n\n\n\n\n\n\n\n\nNov 14, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMap Challenge 2: Natural Earth\n\n\n\n\n\n\n\n\n\nNov 13, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPopulation\n\n\n\n\n\n\n\n\n\nNov 12, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3d\n\n\n\n\n\n\n\n\n\nNov 11, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRaster\n\n\n\n\n\n\n\n\n\nNov 10, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonochrome\n\n\n\n\n\n\n\n\n\nNov 9, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlue\n\n\nThis map Globe Observer shows Sat View of Australia, data is from the Australian Bureau of Meterorology and the {ozmaps} for the geometry of Australia.\n\n\n\n\n\n\nNov 8, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreen\n\n\n\n\n\n\n\n\n\nNov 7, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRed\n\n\n\n\n\n\n\n\n\nNov 6, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Challenge 1: OpenStreetMap\n\n\n\n\n\n\n\n\n\nNov 5, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHexagons\n\n\n\n\n\n\n\n\n\nNov 4, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPolygons\n\n\n\n\n\n\n\n\n\nNov 3, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLines\n\n\n\n\n\n\n\n\n\nNov 2, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPoints\n\n\n\n\n\n\n\n\n\nNov 1, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "mapchallenges/cases2023/index.html",
    "href": "mapchallenges/cases2023/index.html",
    "title": "30DayMapChallenge 2023",
    "section": "",
    "text": "My Favourite\n\n\n\n\n\n\n\n\n\nNov 30, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPopulation\n\n\n\n\n\n\n\n\n\nNov 29, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIs This A Chart Or A Map\n\n\n\n\n\n\n\n\n\nNov 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDot\n\n\n\n\n\n\n\n\n\nNov 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMinimal\n\n\n\n\n\n\n\n\n\nNov 26, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAntarctica\n\n\n\n\n\n\n\n\n\nNov 25, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlack&White\n\n\n\n\n\n\n\n\n\nNov 24, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3d\n\n\n\n\n\n\n\n\n\nNov 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNorth Is Not Always Up\n\n\n\n\n\n\n\n\n\nNov 22, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRaster\n\n\n\n\n\n\n\n\n\nNov 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutdoors\n\n\n\n\n\n\n\n\n\nNov 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5 Minute Map\n\n\n\n\n\n\n\n\n\nNov 19, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAtmosphere\n\n\n\n\n\n\n\n\n\nNov 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlow\n\n\n\n\n\n\n\n\n\nNov 17, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOceania\n\n\n\n\n\n\n\n\n\nNov 16, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpenStreetMap\n\n\n\n\n\n\n\n\n\nNov 15, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEurope\n\n\n\n\n\n\n\n\n\nNov 14, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChoropleth\n\n\n\n\n\n\n\n\n\nNov 13, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSouth America\n\n\n\n\n\n\n\n\n\nNov 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRetro\n\n\n\n\n\n\n\n\n\nNov 11, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNorth America\n\n\n\n\n\n\n\n\n\nNov 10, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHexagons\n\n\n\n\n\n\n\n\n\nNov 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfrica\n\n\n\n\n\n\n\n\n\nNov 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigation\n\n\n\n\n\n\n\n\n\nNov 7, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAsia\n\n\n\n\n\n\n\n\n\nNov 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalog Map\n\n\n\n\n\n\n\n\n\nNov 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Bad Map\n\n\n\n\n\n\n\n\n\nNov 4, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPolygons\n\n\n\n\n\n\n\n\n\nNov 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLines\n\n\n\n\n\n\n\n\n\nNov 2, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPoints\n\n\n\n\n\n\n\n\n\nNov 1, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day5_analog-map/day5_analog-map.html",
    "href": "mapchallenges/cases2023/posts2023/day5_analog-map/day5_analog-map.html",
    "title": "Analog Map",
    "section": "",
    "text": "Overview\nThis is a postage stamp map of Portofino, Italy emitted by Poste Italiane in 1974."
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day20_outdoors/day20_outdoors.html",
    "href": "mapchallenges/cases2023/posts2023/day20_outdoors/day20_outdoors.html",
    "title": "Outdoors",
    "section": "",
    "text": "Overview\n\nlibrary(tidyverse)\nlibrary(rnaturalearth)\n#?rnaturalearth::ne_countries()\nlibrary(rnaturalearthhires)\n#?rnaturalearthhires::coastline10\nlibrary(sf)\n\n\nsysfonts::font_add_google(\"Smooch Sans\",\"Smooch Sans\")\nshowtext::showtext_auto()\n\n\nsf_world <- ne_countries(returnclass = \"sf\")\ncoasts <- rnaturalearthhires::coastline10\n\ncoastlines<-  coasts%>%\n  st_as_sf()%>%\n  mutate(scalerank=as.integer(scalerank),\n         scalerank=as.factor(scalerank)\n         )\n\nggplot()+\n  geom_sf(data=sf_world,fill=\"#88398a\",color=NA)+\n  geom_sf(data=coastlines,\n  mapping=aes(color=scalerank),\n          show.legend = T)+\n  scale_color_viridis_d()+\n  coord_sf(crs = 'ESRI:54030',clip = \"off\")+\n  labs(title=\"Coastlines\",color=\"Scalerank\",\n       subtitle=\"#30DayMapChallenge 2023 Day 20 Outdoors\",\n       caption=\"DataSource: {rnaturalearthhires} | Map: @fgazzelloni\")+\n  theme(text=element_text(family=\"Smooch Sans\",size=40,face=\"bold\"),\n        plot.title = element_text(hjust = 0.5),\n        plot.subtitle = element_text(hjust = 0.5),\n        plot.caption  = element_text(hjust = 0.5),\n        plot.background = element_rect(color=\"#bfd0dd\",fill=\"#bfd0dd\"),\n        panel.background = element_rect(color=\"#bfd0dd\",fill=\"#bfd0dd\"),\n        legend.background = element_rect(color=\"#bfd0dd\",fill=\"#bfd0dd\"))\nshowtext::showtext_end()\n\n\nggsave(\"day20_outdoors.png\",bg=\"#bfd0dd\",height = 4)"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day21_raster/day21_raster.html",
    "href": "mapchallenges/cases2023/posts2023/day21_raster/day21_raster.html",
    "title": "Raster",
    "section": "",
    "text": "Overview\nMap of Alaska Elevation colors indicate the high and low level. Data is from QGis Raster Sample Data.\nHow to color a Raster Map with R.\n\n# Install and load necessary packages\n# install.packages(c(\"ggplot2\", \"raster\"))\nlibrary(tidyverse)\nlibrary(raster)\nlibrary(rasterVis)\n\n\nhttps://stackoverflow.com/questions/33359284/r-plot-background-map-from-geotiff-with-ggplot2\n\n\nalaska <- \"data/SR_50M_alaska_nad.tif\"\nalaska_raster <- raster(alaska)\nctab <- rep(RColorBrewer::brewer.pal(n = 8, name = \"RdBu\"),200)\ncolortable(alaska_raster) <- ctab\ngplot(alaska_raster, maxpixels = 10e5) +\n  geom_tile(aes(fill = factor(value))) +\n  scale_fill_manual(values = ctab,guide = \"none\") +\n  coord_equal()+\n  ggthemes::theme_map()\n\n\nalaska <- \"data/SR_50M_alaska_nad.tif\"\nalaska_raster <- raster(alaska)\n\n\nalaska_df <- as.data.frame(rasterToPoints(alaska_raster))\nval <- unique(alaska_df$SR_50M_alaska_nad)\n\nFonts:\n\nlibrary(sysfonts)\nfont_add_google(\"Raleway\",\"Raleway\")\nshowtext::showtext_auto()\n\nColors:\n\ncolors <- c(\"#001F3F\",\"#008080\",\"#00BCD4\",\"#4CAF50\",\n            \"#8BC34A\",\"#FFD700\")\n\nMap:\n\nmap <- gplot(alaska_raster, maxpixels = 10e5) +\n  geom_tile(aes(fill = value)) +\n  scale_fill_gradientn(colors=rev(colors))+\n  coord_equal()+\n  labs(title=\"Alaska\",\n       subtile=\"#30DayMapChallenge 2023 Day 21 Raster\",\n       caption=\"Colors indicate the high and low level of elevation in Alaska\\nDataSource: QGis Raster Sample Data | Map: @fgazzelloni\",fill=\"Elevation\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(family=\"Raleway\",color=\"#f6f7f9\",\n                          size=40),\n        panel.grid = element_line(color=\"#f6f7f9\"),\n        plot.title = element_text(hjust=0.5,vjust=-0.1,\n                                  size=120,\n                                  face=\"bold\"),\n        plot.caption = element_text(lineheight = 0.4),\n        legend.position = \"bottom\",\n        legend.background = element_blank(),\n        legend.text = element_text(color=\"#f6f7f9\",\n                                   lineheight = 0.4),\n        plot.background = element_rect(color=\"grey50\",fill=\"grey50\"),\n        panel.background = element_rect(color=\"grey50\",fill=\"grey50\"))\nshowtext::showtext_end()\n\n\nggsave(map,\"day21_raster2.png\",\n       dpi=320,\n       bg=\"grey50\")"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day13_choropleth/day13_choropleth.html",
    "href": "mapchallenges/cases2023/posts2023/day13_choropleth/day13_choropleth.html",
    "title": "Choropleth",
    "section": "",
    "text": "Overview\nAIDS: percentage contribution of each country’s change to the total change\nDataSource: https://aidsinfo.unaids.org/\n\nlibrary(tidyverse)\n\n\naids <- read_csv(\"data/Epidemic transition metrics_Trend of new HIV infections.csv\")\n\naids%>%head\n\n\naids_avg <- aids %>%\n  select(!contains(\"Footnote\"))%>%\n  select(Country,'2010','2010_lower','2010_upper','2020','2020_lower','2020_upper')%>%\n  janitor::clean_names()%>%\n  mutate(x2010=as.numeric(str_extract(x2010,\"([0-9]+)\")),\n         x2010_lower=as.numeric(str_extract(x2010_lower,\"([0-9]+)\")),\n         x2010_upper=as.numeric(str_extract(x2010_upper,\"([0-9]+)\")),\n         avg_2010=(x2010_upper-x2010_lower)/2,\n         x2020=as.numeric(str_extract(x2010,\"([0-9]+)\")),\n         x2020_lower=as.numeric(str_extract(x2020_lower,\"([0-9]+)\")),\n         x2020_upper=as.numeric(str_extract(x2020_upper,\"([0-9]+)\")),\n         avg_2020=(x2020_upper-x2020_lower)/2,\n         aids_change=(avg_2020-avg_2010),\n         aids_change2=round(aids_change/sum(aids_change,na.rm = T),5))%>%\n  select(1,8,9,10,11)\n\naids_avg %>%\n  select(aids_change,aids_change2)%>%\n  summary()\n\n\n\n\n\nlibrary(sf)\nlibrary(tmap)\ndata(\"World\")\n\naids_map <- aids_avg%>%\n  left_join(World %>%select(country=name,geometry),by=\"country\")%>%\n  st_as_sf()%>%\n  st_transform(crs=\"ESRI:54030\")\n\n\ntext <- tibble(text=c(\"In dark/light grey are Countries whose Estimates were not available at the time of publication\"))\n\n\nggplot()+\n  geom_sf(data=World,color=\"grey25\",fill=\"grey75\")+\n  geom_sf(data=aids_map,\n          mapping=aes(geometry=geometry,fill=aids_change),\n          color=\"red\")+\n  scale_fill_gradient(labels=scales::label_percent(),low=\"white\",high = \"red\")+\n  coord_sf(crs=\"ESRI:54030\",clip = \"off\")+\n  labs(title=\"Epidemic transition of new HIV infections\",\n       subtitle=\"Metrics Trend 2010-2020\",\n       caption=\"#30DayMapChallenge 2023 Day 13 - Choropleth\\nPercentage contribution of each country's change to the total change\\nDataSource: Global data on HIV epidemiology and response (aidsinfo.unaids.org)\\nMap: @fgazzelloni\",\n       fill=\"HIV Change (%)\\nIn dark/light grey are Countries\\nwhose Estimates were not available\\nat the time of publication\\nProj:ESRI:54030\")+\n  theme(text=element_text(face=\"bold\"),\n        panel.grid = element_line(color=\"grey25\"),\n        plot.title = element_text(size=20.5),\n        plot.subtitle = element_text(color=\"grey25\"),\n        plot.caption = element_text(color=\"grey25\"),\n        legend.title = element_text(size=4),\n        legend.text = element_text(size=8))\n\n\nggsave(\"day13_choropleth.png\",height = 5)"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day1_points/day1_points.html",
    "href": "mapchallenges/cases2023/posts2023/day1_points/day1_points.html",
    "title": "Points",
    "section": "",
    "text": "Let’s have a look at the {spatstat} package for spatial point patterns usage:\n\ninstall.packages(\"spatstat\")\n\nLoad necessary libraries:\n\nlibrary(tidyverse)\nlibrary(spatstat)\n\nFor this challenge I’ll have a look at the Bovine Tuberculosis dataset from the {spatstat} package.\nA geospatial data of 873 farm locations with detected bovine tuberculosis in Cornwall, UK, over the years 1989-2002.\n?btb\n\nspatstat.data::btb\n\nLocations of cattle herds in Cornwall (United Kingdom) that have tested positive for bovine tuberculosis in the observation region, which is the polygon of Cornwall, annotated with marks including the year of testing, and spoligotype (a qualitative genetic marker).\n\ndata(btb)\n\n\nsummary(btb)\n\n\nsummary(btb)\n    plot(subset(btb, select=spoligotype), cols=2:5)\n\n\nborders <- tibble(lon = btb$window$bdry[[1]]$x,\n       lat = btb$window$bdry[[1]]$y)\n       \ndat <- tibble(lon=btb$x,\n       lat=btb$y)\n\n\nggplot()+\n  geom_point(data=borders,\n             aes(lon,lat),\n             size=0.1) +\n  geom_point(data=dat,\n             aes(lon,lat))+\n  labs(title=\"Farm Locations\")\n\nCompute the Kernel densities using the density() function, and specify the bandwidth parameter sigma with the cross-validation by function bw.diggle.\n\nden <- density(btb, sigma = bw.diggle)\nplot(den)\n\n\ndescription <- data.frame(text=\"Locations of cattle herds in Cornwall (United Kingdom)\\ntested positive for bovine tuberculosis over the years 1989-2002.\",\n                          caption=\"\\nResource: Diggle, P.J., Zheng, P. and Durr, P. (2005)\\nNonparametric estimation of spatial segregation in a multivariate point process: bovine tuberculosis in Cornwall, UK.\\n#30DayMapChallenge 2023 Day1- Points | Map: Federica Gazzelloni\")\n\n\nlibrary(stars)\nst_as_stars(den)%>%\nst_as_sf(as_points = TRUE)%>%\n  ggplot()+\n  geom_sf(size=0.4,color=\"#4CAF50\")+\n  geom_point(data=borders,\n             aes(lon,lat),\n             size=0.8,\n             shape=21,\n             stroke=0.1,\n             color=\"#FFFFFF\",\n             fill=\"#0074D9\") +\n  geom_point(data=dat,\n             aes(lon,lat),\n             shape=21,\n             stroke=0.1,\n             color=\"#CCCCCC\",\n             fill=\"#FF5733\",\n             size=1.1)+\n  labs(title=\"Bovine Tuberculosis\",\n       subtitle=description$text,\n       caption=paste(\"DataSource: {spatstat} package\",description$caption))+\n  ggthemes::theme_map()+\n  theme(plot.background = element_rect(colour = \"#FFFFFF\",fill=\"#FFFFFF\"),\n        panel.background = element_rect(colour = \"#FFFFFF\",fill=\"#FFFFFF\"),\n        plot.title = element_text(size = 14),\n        plot.subtitle = element_text(size=11),\n        plot.caption = element_text(hjust = 0))\n\n\nggsave(\"day1_points.png\")"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day17_flow/day17_flow.html",
    "href": "mapchallenges/cases2023/posts2023/day17_flow/day17_flow.html",
    "title": "Flow",
    "section": "",
    "text": "Overview\n\nlibrary(tidyverse)\nlibrary(sf)\n\n\nrivers <- read_sf(\"data/HydroRIVERS_v10_eu_shp\")\n\n\nrivers%>%select(LENGTH_KM)%>%summary()\n\n\nggplot()+\n    geom_sf(data=rivers,\n          linewidth=0.1,aes(color=DIST_DN_KM),\n          show.legend = F)+\n  scale_color_gradient(low = \"white\",high = \"black\")+\n  ggnewscale::new_scale_color()+\n      geom_sf(data=rivers,\n          linewidth=0.5,aes(color=DIST_UP_KM),\n          show.legend = F)+\n  scale_color_gradient(low = \"white\",high = \"red\")+\n  scale_y_continuous(limits = c(35,45))+\n  scale_x_continuous(limits = c(-10,10))+\n  ggthemes::theme_map()\n\n\nggsave(\"day17_flow.png\",bg=\"grey\")"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day9_hexagons/day9_hexagons.html",
    "href": "mapchallenges/cases2023/posts2023/day9_hexagons/day9_hexagons.html",
    "title": "Hexagons",
    "section": "",
    "text": "Hexagons map of Covid19 data in Italy. For this challenge I will be using the {covid19italy} package for mapping Covid19 cases in Italy.\n\nlibrary(\"sf\")\nlibrary(\"tidyverse\")\nlibrary(\"rnaturalearth\")\nlibrary(\"covid19italy\")\n\n\nitaly_geo <- ne_states(#scale = \"large\",\n                   country = \"Italy\",\n                   returnclass = \"sf\") |>\n  st_geometry() |> ## \n  st_transform(3003) \n\n\nitaly_map <- ne_states(#scale = \"large\",\n                   country = \"Italy\",\n                   returnclass = \"sf\")\n\nitaly_map%>%names\n\n\nitaly_map_region <- italy_map%>%count(region)\n\n\nitaly_geo |> \n  ggplot() +\n  geom_sf(fill = \"white\", color = \"pink\") +\n  geom_sf(data=italy_map,\n          mapping=aes(fill=region),\n          color=\"pink\",\n          inherit.aes = F)+\n  labs(fill=\"\")+\n  ggthemes::theme_map()+\n  theme(legend.position = \"bottom\",\n        legend.key.size = unit(5,units=\"pt\"),\n        legend.text = element_text(size=5))\n\n\n\n\nhexgrid <- st_make_grid(italy_geo,\n                        cellsize = 1e4, \n                        what = 'polygons',\n                        square = FALSE ## !\n                        ) %>%\n  st_as_sf()\n\n\nhexgrid_italy <- hexgrid[c(unlist(st_contains(italy_geo, hexgrid)), \n                        unlist(st_overlaps(italy_geo, hexgrid))) ,] \n\n\nitaly_geo |> \n  ggplot() +\n  geom_sf(fill = \"#8c8b8b\", color = \"#7cb3b8\") +\ngeom_sf(data = hexgrid_italy, \n        color = \"#43605b\") +\n  labs(title = \"Italy\", \n       caption = \"#30DayMapChallenge | Day 9: Hexagons | Map: @fgazzelloni\")+\n  ggthemes::theme_map()\n\n\n\n\n\nitaly_geo |> \n  ggplot() +\n  geom_sf(color = \"pink\") +\n  geom_sf(data=italy_map,\n          mapping=aes(fill=region),\n          alpha=0.5,\n          color=NA,\n          inherit.aes = F)+\n  geom_sf(data = hexgrid_italy_reg, \n          fill=NA,\n        color = \"#43605b\") +\n    labs(title = \"Italy\", \n       caption = \"#30DayMapChallenge | Day 9: Hexagons | Map: @fgazzelloni\")+\n  labs(fill=\"\")+\n  ggthemes::theme_map()+\n  theme(legend.position = \"bottom\",\n        legend.key.size = unit(5,units=\"pt\"),\n        legend.text = element_text(size=5))\n\n\nitaly_map_region_covid <- italy_map_region %>%\n  left_join(covid19italy::italy_region %>% \n              filter(date == max(date)), \n            by = c(\"region\" = \"region_spatial\"))\n\nitaly_map_region_covid%>%names\n\n\nitaly_geo |> \n  ggplot() +\n  geom_sf(color = \"#8c8b8b\") +\n  geom_sf(data=italy_map_region_covid,\n          mapping=aes(fill=death),\n          color=NA,\n          inherit.aes = F)+\n  geom_sf(data = hexgrid_italy_reg, \n          fill=NA,\n        color = \"#FFDAB9\") +\n  scale_fill_gradientn(colors=rev(c(\"#FF4500\",\"#FFA500\",\"#FFD700\")))+\n    ggtext::geom_richtext(x=2401390 ,y=4837570,\n                        hjust = 1,\n                        vjust=0,\n                        label=\"Italy\",\n                        fill = NA, \n                        color=\"#8c8b8b\",\n                        label.color = NA,\n                        size=25,\n                        family = \"Roboto Condensed\")+\n      ggtext::geom_richtext(x=2401390 ,y=4737570,\n                        hjust = 0.8,\n                        vjust=0,\n                        color=\"#8c8b8b\",\n                        label=\"Total number of Covid19 death cases\",\n                        fill = NA, \n                        label.color = NA,\n                        size=4,\n                        family = \"Roboto Condensed\")+\n    labs(caption = \"#30DayMapChallenge 2023 Day 9 Hexagons\\nDataSource: {covid19italy} data| Map: @fgazzelloni\",\n       fill=\"N. Deaths\")+\n  ggthemes::theme_map()+\n  coord_sf(clip = \"off\")+\n  theme(text=element_text(color=\"#8c8b8b\",family=\"Roboto Condensed\"),\n        plot.caption = element_text(hjust = 0.5,size=8,face = \"bold\"),\n        legend.position = \"bottom\",\n        legend.background = element_rect(color=\"#8c8b8b\",fill=\"#FFDAB9\"),\n        legend.key.size = unit(10,units=\"pt\"),\n        legend.text = element_text(size=5))+\n   ggspatial::annotation_scale()\n\n\nggsave(\"day9_hexagons.png\", \n       dpi = 320, bg=\"#FFDAB9\")\n\nSource of inspiration: https://github.com/umemasiddiqi/30DayMapChallenge/blob/main/2023/11092023/Pak-Hexagon.R\n\n\n\nSource of data: https://covid19r.github.io/covid19italy/articles/geospatial_visualization.html"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day3_polygons/day3_polygons.html",
    "href": "mapchallenges/cases2023/posts2023/day3_polygons/day3_polygons.html",
    "title": "Polygons",
    "section": "",
    "text": "Overview\n\nlibrary(tidyverse)\nlibrary(sf)\n\nUseful Data-source:\n\nData description: https://geodacenter.github.io/data-and-lab/sids/\nVignette: https://r-spatial.github.io/spdep/articles/sids.html\nMore datasets: https://geodacenter.github.io/data-and-lab/\n\nWe are interested in:\n\nMalaria in Colombia in 1998\n\n\nmc <- read_sf(\"data/coldept.gpkg\")\n\n\nmc%>%names\n\n\nplot(mc[\"MALARI98\"])\n\n\nmc1 <- mc[\"MALARI98\"]\nggplot(mc1)+\n  geom_sf(aes(fill=MALARI98))\n\n\ntext <- tibble(title=c(\"Mapping Malaria:\\nColombia's 1998 Battle Against the Silent Killer\"),\n           caption=c(\"DataSource: geodacenter | Malaria98 Data Prepared by Luis Galvis\\n#30DayMapChallenge 2023 Day3 Polygons | Map: @fgazzelloni\"),\n           annotation=c(\"In 1998, Colombia faced a notable challenge with malaria incidence. While the disease persisted in many parts of the country, the situation was relatively better compared to some high-burden countries in sub-Saharan Africa. Malaria incidence rates were significant, but they were considerably lower than those reported in some of the hardest-hit regions globally. Despite this relatively lower burden, malaria remained a concern in Colombia, and efforts to combat the disease were still critical. The country, like many others, continued to work on strategies for prevention, diagnosis, and treatment, with a focus on reducing the impact of this infectious disease on its population.\"))\n\n\nggplot(mc1)+\n  geom_sf(aes(fill=MALARI98),color=\"#2D4F6B\",\n          linewidth=0.8)+\n  scale_y_continuous(breaks = 34:36) +\n  scale_fill_gradient(low = \"#A8DCAA\",high = \"#FF704D\")+\n  #scale_fill_gradientn(colours = sf.colors(20)) +\n  geom_segment(aes(x=-60,xend=-66,\n                   y=-0.5, yend=-0.5),\n               color=\"#b6d5e3\",inherit.aes = F,\n               linewidth=350)+\n  ggtext::geom_textbox(data = text,\n                       aes(x=-63,y=3.3,\n                           label = annotation),\n                         inherit.aes = F,\n              size = 3, \n              family=\"Roboto Condensed\",\n              width = unit(9.5, \"line\"), \n              alpha = 0.9,\n              color=\"#333333\",\n              fill=\"#f5f5f5\",\n              box.colour = \"#f5f5f5\") +\n  coord_sf(clip = \"off\")+\n  labs(title=text$title,\n       caption=text$caption,\n       fill=\"n\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(color=\"#333333\",family = \"Roboto Condensed\"),\n        plot.title = element_text(color=\"#2D4F6B\",\n                                  lineheight = 1.1,\n                                  hjust = 0,vjust = 0.1,\n                                  size=14,face = \"bold\"),\n        plot.caption = element_text(color=\"#2D4F6B\",\n                                    hjust = 0,size=9),\n        legend.background = element_blank(),\n        legend.position = c(0,0))\n\n\nggsave(\"day3_polygons.png\",\n       dpi=320,\n       width = 7.5,\n       bg = \"#C2E9FB\")"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day16_oceania/day16_oceania.html",
    "href": "mapchallenges/cases2023/posts2023/day16_oceania/day16_oceania.html",
    "title": "Oceania",
    "section": "",
    "text": "Oceania is divided into:\n\nAustralasia (largest city: Sydney)\nMelanesia (largest city: Jayapura)\nMicronesia (largest city: Tarawa)\nPolynesia (largest city: Honolulu)\n\nData is scraped from Wikipedia: https://en.wikipedia.org/wiki/Oceania\nLoad necessary libraries:\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(ggmap)\nlibrary(sf)\nlibrary(rnaturalearth)\n\n\noceania <- read_html(\"https://en.wikipedia.org/wiki/Oceania\")\n\noceania %>%\n  html_nodes(\"table\") %>%\n  .[[2]] %>%\n  html_table(fill = TRUE)\n\n\noceania_rank <- oceania %>%\n  html_nodes(\"table\") %>%\n  .[[3]] %>%\n  html_table(fill = TRUE,header = F)\n\n# distinct(oceania_rank[-c(1,2),1])\n# distinct(oceania_rank[-c(1,2),10])\noceania_rank_tb <- oceania_rank[-c(1,2),-c(1,10)]\nnames(oceania_rank_tb) <- oceania_rank[2,-c(1,10)]%>%unlist()\noceania_rank_tb <- rbind(oceania_rank_tb[1:4],oceania_rank_tb[5:8])%>%\n  drop_na()%>%\n  janitor::clean_names()\n\n\ncity.geo <- geocode(oceania_rank_tb$city_name)\n\noceania_city.geo <- cbind(oceania_rank_tb,city.geo)%>%\n  mutate(city_name=gsub(\"[, ].*$\",\"\",city_name))\n\n\nworldmap <- ne_countries(scale = 'large', type = 'map_units',\n                         returnclass = 'sf')\n# have a look at these two columns only\nhead(worldmap[c('name', 'continent')])\n\n\noceania_basemap <- worldmap[worldmap$continent == 'Oceania',]\nggplot() + \n  geom_sf(data = oceania_basemap) + \n  coord_sf(crs='ESRI:54009')\n\n\nggplot() + \n  geom_sf(data = oceania_basemap) + \n  coord_sf( crs= \"+proj=ortho +lat_0=-25 +lon_0=120\")\n\n\noceania_city.geo_sf<- oceania_city.geo%>%\n  st_as_sf(coords = c(\"lon\",\"lat\"),crs=\"EPSG:4326\")\n\n\nggplot() + \n  geom_sf(data = oceania_basemap) + \n  geom_sf(data=oceania_city.geo_sf,\n          mapping=aes(size=pop),\n          shape=21,stroke=0.5,show.legend = F)+\n  coord_sf(crs= \"+proj=ortho +lat_0=-25 +lon_0=120\")+\n  ggthemes::theme_map()\n\n\northo<- \"+proj=ortho +lat_0=-15.736352 +lon_0=171.740558\"\nocean <- st_point(x = c(0,0)) %>%\n  st_buffer(dist = 6371000) %>% #6,371km ratius of the earth\n  st_sfc(crs = ortho)\n\n\noceania_city.geo_sf_coords <- oceania_city.geo_sf%>%\n  sf::st_coordinates()%>%\n  cbind(oceania_city.geo_sf)\n\n\nlibrary(tmap)\ndata(\"World\")\nplot(World)\n\n\n#devtools::install_github(\"signaux-faibles/rsignauxfaibles\")\nlibrary(rsignauxfaibles)\n\n\noceania_city.geo%>%\n  count(city_name)\n\n\ncity.colors <- rep(RColorBrewer::brewer.pal(10,\"Set3\"),2)\n\n\nggplot() + \n  geom_sf(data = ocean, \n          fill = \"#3e5d8b\", \n          color = \"#263c52\") + #grey34\n  geom_sf(data = World,fill=\"grey64\",alpha=0.5) + \n  geom_sf(data = oceania_basemap,\n          fill=\"#43605b\",color=\"grey64\",\n          alpha=0.5) + \n  geom_sf(data=oceania_city.geo_sf,\n          mapping=aes(size=pop,color=city_name),\n          fill=\"grey\",\n          #color=\"grey34\",\n          alpha=0.2,\n          shape=21,stroke=0.7,\n          show.legend = F)+\n  scale_size_discrete()+\n  ggnewscale::new_scale(new_aes = \"size\")+\n  geom_sf_text(data=oceania_city.geo_sf_coords,\n            mapping=aes(x=X,y=Y,label=city_name,size=pop), \n            nudge_x = c(0, .15, rep(0, 10), 0, 0),\n            nudge_y = c(0, -.2, rep(0, 10), -.15, 0),\n            fun.geometry = sf::st_centroid,\n            #size=1.9,\n            color=\"white\",\n            face=\"bold\",\n            family=\"Roboto Condensed\")+\n  scale_size_manual(values=seq(0.5,2,0.075))+\n  coord_sf(crs= ortho)+\n  labs(title=\"Population Peaks: Exploring Oceania's Cities\",\n       caption = \"#30DayMapChallenge 2023 Day 16 Oceania\\nDataSource: Wikipedia | Map: @fgazzelloni\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(family = \"Roboto Condensed\",face=\"bold\",size=14,color=\"white\"),\n        plot.title = element_text(hjust=0.5),\n        plot.caption = element_text(hjust=0.5),\n        legend.position = \"none\")\n\n\nggsave(\"day16_oceania.png\",bg=\"#263c52\")\n\n\n\n\nhttps://en.wikipedia.org/wiki/Oceania\nhttps://www.r-bloggers.com/2019/04/zooming-in-on-maps-with-sf-and-ggplot2/\nhttps://gist.github.com/rafapereirabr/26965dd851debad32ad2e659024ba451\nhttps://rpubs.com/mdavril_gsu/794598"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day11_retro/day11_retro.html",
    "href": "mapchallenges/cases2023/posts2023/day11_retro/day11_retro.html",
    "title": "Retro",
    "section": "",
    "text": "A place that has undergone significant changes over time is the city of Berlin, Germany. Berlin has a rich and complex history, and its geography and political boundaries have been dramatically transformed, especially during the 20th century.\nFor this challenge I decided to use four layers representing the German Empire in 1871 and 1945, coupled with additional layers for Germany in 1989, specifically focusing on Berlin East and West, to craft a retro map that chronicles the profound historical shifts in Germany’s territorial landscape.\nAnd capture the evolution of Germany from its imperial unification in 1871 through the post-World War II division into East and West, culminating in the transformative reunification of 1989.\nThe inclusion of specific layers for Berlin East and West, accentuated by the fall of the Berlin Wall, emphasizes the city’s symbolic role and adds a poignant narrative layer to the map.\nData is from the Max Planck Institute for Demographic Research via https://censusmosaic.demog.berkeley.edu/data/historical-gis-files\nLoad necessary libraries\n\nlibrary(sf)\nlibrary(ggplot2)\n\n\n\n\ngerman_empire_1871 <- read_sf(\"data/german_empire_1871\")\n\n\ngerman_empire_1871%>%class\n\n\ngerman_empire_1871%>%names\n\n\nggplot(german_empire_1871)+\n  geom_sf(aes(fill=NAME),show.legend = F)\n\n\n\n\n\ngerman_empire_1945<- read_sf(\"data/german_empire_1945\")\n\n\nggplot()+\n  geom_sf(data=german_empire_1871,color=\"red\")+\n  geom_sf(data=german_empire_1945,color=\"blue\")\n\n\n\n\n\ngermany_1989 <- read_sf(\"data/germany_1989\")\n\n\nggplot()+\n  geom_sf(data=german_empire_1871,aes(color=\"1871\"))+\n  geom_sf(data=german_empire_1945,aes(color=\"1945\"))+\n  geom_sf(data=germany_1989,aes(color=\"1989\"))+\n  coord_sf(crs = 'EPSG:3068',clip = \"off\") + \n  scale_color_manual(name = \"Year\", \n                    values = c(\"#536878\", \"#8B4513\",\"#B8860B\"), \n                    labels = c(\"1\" = \"1871\", \"2\" = \"1945\",\"3\"=\"1989\")) +\n  labs(caption = \"#30DayMapChallenge 2023 Day 11 - Retro\\nDataSource: censusmosaic - historical-gis-files | Map: @fgazzelloni\") + \n  theme(text=element_text(color=\"#2F4F4F\"),\n        plot.background = element_rect(color=\"#FDF5E6\",fill=\"#FDF5E6\"),\n        panel.background = element_rect(color=\"#FDF5E6\",fill=\"#FDF5E6\"))+\n  ggspatial::annotation_scale()\n\n\n\n\n\ngermany_89_berlin<- germany_1989%>%\n  dplyr::filter(GEN%in%c(\"Berlin Ost\",\"Berlin West\"))\ngermany_89_berlin\n\n\n\n\n\ntext <- dplyr::tibble(text=c(\"In 1871, the German territory underwent a transformative change with the establishment of the German Empire, unifying diverse states under Prussian leadership. In 1945, after World War II, Germany faced significant territorial alterations with the division into East and West, symbolized by the Berlin Wall. The reunification in 1989 marked a historic shift, leading to the dissolution of the wall and the restoration of a unified Germany, symbolizing the end of the Cold War division and reshaping the nation borders. On November 9, 1989, the fall of the Berlin Wall became a momentous event, symbolizing the end of separation and a new era for Germany\"))\n\n\n\n\n\nlibrary(showtext)\nshowtext::showtext_auto()\nlibrary(sysfonts)\nsysfonts::font_add_google(\"Libre Baskerville\",\"Libre Baskerville\")\ntheme_set(theme_minimal(base_family = \"Libre Baskerville\"))\n\n\n\n\n\nggplot()+\n  geom_sf(data=german_empire_1871,aes(color=\"1871\"),key_glyph = draw_key_rect)+\n  geom_sf(data=german_empire_1945,aes(color=\"1945\"),key_glyph = draw_key_rect)+\n  geom_sf(data=germany_1989,aes(color=\"1989\"),key_glyph = draw_key_rect)+\n  geom_sf(data=germany_89_berlin,aes(fill=GEN),color=\"#B8860B\")+\n  ggtext::geom_textbox(data=text,inherit.aes = F,\n                       x=100000,y=-850000,\n                       aes(label=text),\n                       width = unit(1, \"npc\"),\n                       lineheight=0.45,\n                       size=5.1)+\n  coord_sf(crs = 'EPSG:3068',clip = \"off\") + \n  scale_color_manual(name = \"Year\", \n                    values = c(\"#536878\", \"#8B4513\",\"#B8860B\")) +\n  scale_fill_manual(name = \"Berlin\", \n                  values = c(\"#CD5C5C\",\"#4682B4\")) +\n  labs(title=\"Germany Through Time:\",\n  subtitle=\"A Retro Cartographic Journey of Shifting Borders (1871-1989)\",\n       caption = \"#30DayMapChallenge 2023 Day 11 - Retro\\nDataSource: Censusmosaic - Historical-gis-files | Map: @fgazzelloni\") + \n  theme(text=element_text(color=\"#2F4F4F\",size=24),\n        plot.title = element_text(size=16),\n        plot.caption = element_text(hjust = 0.5,vjust = 1,\n                                    face=\"bold\",\n                                    size=12,\n                                    lineheight = 0.5),\n        plot.background = element_rect(color=\"#FDF5E6\",fill=\"#FDF5E6\"),\n        panel.background = element_rect(color=\"#FDF5E6\",fill=\"#FDF5E6\"))+\n  ggspatial::annotation_scale()\nshowtext_end()\n\n\nggsave(\"~/Documents/R/R_general_resources/EDA_and_maps/30DayMapChallenge/2023/day11_retro/day11_retro.png\",\n       dpi = 220,\n       width = 7,\n       height = 6.7)"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day8_africa/day8_africa.html",
    "href": "mapchallenges/cases2023/posts2023/day8_africa/day8_africa.html",
    "title": "Africa",
    "section": "",
    "text": "For this challenge I looked at an interesting resource: Analyzing US Census Data: Methods, Maps, and Models in R, also found the {idbr} package R Interface to the US Census Bureau International Data Base API.\nSource: https://walker-data.com/census-r/working-with-census-data-outside-the-united-states.html\n\n\nYou might need a tidycensus API key to use the {idbr} function get_idb() to donwload census data, then go to https://api.census.gov/data/key_signup.html and add your details. It will send you an email with the API key.\nThen use your key in the tidycensus::census_api_key() function:\ntidycensus::census_api_key(key=\"xxx\",\n                           install = TRUE)\n                           \n                      \n\nlibrary(tidycensus)\ntidycensus::census_api_key(key=\"xxx\",\n                           install = TRUE)\n\nTo check whether the key is set do:\nreadRenviron(\"~/.Renviron\")\nSys.getenv(\"CENSUS_API_KEY\")\n\n\n\nNow you are all set to get ready downloading your favorite census data.\n\nlibrary(idbr)\nlibrary(tidyverse)\n\n\n\nHere the tfr variable is selected as interested in the differences in total fertility rate in 2021 in Africa.\nGet the data for all countries and then select only Africa countries.\n\ndata <- get_idb(\n  country = \"all\",\n  year = 2021,\n  variables = \"tfr\",\n  geometry = TRUE,\n)\n\n\ndata %>% head()\n\n\ndata%>%\n  names\n\nHave a look at the global total fertility rate in 2021.\n\nggplot(data, aes(fill = code)) + \n  theme_bw() + \n  geom_sf() + \n  coord_sf(crs = 'ESRI:54030') + \n  scale_fill_viridis_d()+\n  guides(fill=guide_legend(nrow = 10,title = \"\"))+\n  theme(legend.key.size = unit(2,units = \"pt\"),\n        legend.text = element_text(size=2),\n        legend.position = \"bottom\")\n\n\n\n\nhttps://en.wikipedia.org/wiki/List_of_African_countries_by_population\n\nlibrary(rvest)\n\n\nafri_data <- read_html(\"https://en.wikipedia.org/wiki/List_of_African_countries_by_population\")\n\n\nafri_countries <- afri_data %>%\n  html_nodes(\"table\") %>%\n  .[[1]] %>%\n  html_table(fill = TRUE)\n\nafri_countries %>% names()\n\n\nafri_countries <- afri_countries%>%select(Country)%>%\n  unlist()\n\n\n\n\n\n\nafrica <- get_idb(\n  country = afri_countries,\n  year = 2021,\n  variables = \"tfr\",\n  geometry = TRUE,\n)\n\n\nafrica %>% head()\n\nCheck the range of the tfr:\n\nsummary(africa$tfr)\n\nSet a color range:\n\ncol.range<- c(2,7)\n\n\n\n\n\nggplot(africa, aes(fill = tfr)) + \n  geom_sf(color=\"white\") + \n  geom_sf_text(aes(label=name),size=2,family=\"Roboto Condensed\")+\n  scale_fill_continuous(low = \"#fff7ec\", \n                        high = \"#7F0000\",\n                        limits=col.range)+\n  ggtext::geom_richtext(x=0,y=0,\n                        hjust = 0.8,\n                        vjust=1.5,\n                        label=\"Africa\",\n                        fill = NA, \n                        label.color = NA,\n                        size=25,\n                        family = \"Gill Sans\")+\n    ggtext::geom_richtext(x=0,y=0,\n                        hjust = 0.8,\n                        vjust=6,\n                        label=\"Total fertility rate by country in 2021\",\n                        fill = NA, \n                        label.color = NA,\n                        size=4,\n                        family = \"Gill Sans\")+\n  coord_sf(crs = 'ESRI:54030',clip = \"off\") + \n  labs(caption=\"#30DayMapChallenge 2023 - Day 8 Africa\\nDataSource: wikipedia & {idbr} package | Map @fgazzelloni\\n\\n'Scale on map varies by more than 10%, scale bar may be inaccurate' {ggspatial}\",\n       fill=\"Total fertility rate (tfr)\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(family = \"Gill Sans\"),\n        plot.title = element_text(face=\"bold\",size=14,hjust=0.5),\n        plot.subtitle = element_text(hjust=0.5),\n        plot.caption = element_text(hjust=0),\n        legend.position = c(0.75,-0.02),\n        legend.key.size = unit(9,units = \"pt\"),\n        legend.text = element_text(size=7.5),\n        legend.title = element_text(face=\"bold\",size=8),\n        legend.background = element_rect(color=\"#edece6\",fill=\"#edece6\"))+\n  ggspatial::annotation_scale()\n\n\n\n\nggsave(\"day8_africa.png\",bg=\"#ebe7d8\")"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day2_lines/day2_lines.html",
    "href": "mapchallenges/cases2023/posts2023/day2_lines/day2_lines.html",
    "title": "Lines",
    "section": "",
    "text": "library(\"topo.ridges\")\nlibrary(ggplot2)\n\n\n\nraster::raster()\nPackage used is {topo.ridges} source: https://github.com/nstauffer/topo.ridges Data are from https://datagateway.nrcs.usda.gov/\n1- Land Use Land Cover: Cropland Data Layer by State\n2- NASS_NY.zip folder\n\nelev_raster2 <- raster::raster(\"data/cdl_30m_r_ny_2022_utm18.tif\")\n\n\nraster::plot(elev_raster2)\n\n\nelev_raster_lowres2 <- raster::aggregate(elev_raster2,\n                                        fact = 2)\n# saveRDS(elev_raster_lowres2,\"data/elev_raster_lowres2.rds\")\n\n\n\n\n\nmap <- topo.ridges::ridgemap(elev_data = elev_raster2,\n                             line_color = \"white\",\n                             background_color = \"gray10\",\n                             line_count = 300,\n                             y_scalar = 75,\n                             scale_factor = 1.25,\n                             line_weight = 0.5,\n                             min_height = 0)\n\n\nggsave(filename = \"day2_lines.png\")"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day12_south-america/day12_south-america.html",
    "href": "mapchallenges/cases2023/posts2023/day12_south-america/day12_south-america.html",
    "title": "South America",
    "section": "",
    "text": "For this challenge I look back at day 8 Africa and the total fertility rate for replicating the steps for South America.\nDatasource: Analyzing US Census Data: Methods, Maps, and Models in R, and the {idbr} package R Interface to the US Census Bureau International Data Base API.\nSource: https://walker-data.com/census-r/working-with-census-data-outside-the-united-states.html\n\n\nNow you are all set to get ready downloading your favorite census data.\n\nlibrary(idbr)\nlibrary(tidyverse)\n\n\n\nHere the tfr variable is selected as interested in the differences in total fertility rate in 2021 in South America.\n\ndata <- get_idb(\n  country = \"all\",\n  year = 2021,\n  variables = \"tfr\",\n  geometry = TRUE,\n)\n\ndata %>% head()\n\nHave a look at the global total fertility rate in 2021.\n\nggplot(data, aes(fill = code)) + \n  theme_bw() + \n  geom_sf() + \n  coord_sf(crs = 'ESRI:54030') + \n  scale_fill_viridis_d()+\n  guides(fill=guide_legend(nrow = 10,title = \"\"))+\n  theme(legend.key.size = unit(2,units = \"pt\"),\n        legend.text = element_text(size=2),\n        legend.position = \"bottom\")\n\n\n\n\nhttps://en.wikipedia.org/wiki/South_America\n\nlibrary(rvest)\n\n\nsouth_america_data <- read_html(\"https://en.wikipedia.org/wiki/South_America\")\n\n\nsouth_america_countries <- south_america_data %>%\n  html_nodes(\"table\") %>%\n  .[[3]] %>%\n  html_table(fill = TRUE)\n\nsouth_america_countries %>% names()\n\n\nsouth_america_countries <- south_america_countries%>%select('Country / Territory')%>%\n  unlist()\n\n\n\n\n\n\nsa <- get_idb(\n  country = south_america_countries,\n  year = 2021,\n  variables = \"tfr\",\n  geometry = TRUE,\n)\n\n\nsa %>% head()\n\nCheck the range of the tfr:\n\nsummary(sa$tfr)\n\nSet a color range:\n\ncol.range<- c(1,3)\n\n\nggplot(sa, aes(fill = tfr)) + \n  geom_sf(color=\"white\") + \n  geom_sf_text(aes(label=name),size=3,family=\"Roboto Condensed\")+\n  scale_fill_continuous(low = \"#006400\", \n                        high = \"#FF4500\",\n                        limits=col.range)+\n  ggtext::geom_richtext(x=0,y=0,\n                        hjust = 2,\n                        vjust=1.5,\n                        label=\"South<br>America\",\n                        fill = NA, \n                        label.color = NA,\n                        size=25,\n                        family = \"Gill Sans\")+\n    ggtext::geom_richtext(x=0,y=0,\n                        hjust = 1.4,\n                        vjust=-3,\n                        label=\"Total fertility rate by country in 2021\",\n                        fill = NA, \n                        label.color = NA,\n                        size=6,\n                        family = \"Gill Sans\")+\n  coord_sf(crs = 'ESRI:54030',clip = \"off\") + \n  labs(caption=\"#30DayMapChallenge 2023 - Day 12 South America\\nDataSource: wikipedia & {idbr} package | Map @fgazzelloni\\n\\n'Scale on map varies by more than 10%, scale bar may be inaccurate' {ggspatial}\",\n       fill=\"Total fertility rate (tfr)\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(family = \"Gill Sans\"),\n        plot.caption = element_text(hjust=0),\n        legend.position = c(0.8,0.1),\n        legend.key.size = unit(10,units = \"pt\"),\n        legend.text = element_text(size=10),\n        legend.background = element_rect(color=\"#E6D2B8\",fill=\"#E6D2B8\"))+\n  ggspatial::annotation_scale()\n\n\n\n\nggsave(\"day12_south-america.png\",\n       bg=\"#F4EBD9\")"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day6_asia/day6_asia.html",
    "href": "mapchallenges/cases2023/posts2023/day6_asia/day6_asia.html",
    "title": "Asia",
    "section": "",
    "text": "For this #30DayMapChallenge 2023 Day6 - Asia let’s explore the Population estimation for Regions and major Cities, from different sources.\nAlso, we will be looking at how to get started with {ggmap} to find the geocodes for the major cities in Asia.\n\n\nLet’s scrap the table of the Major Cities in Asia along with the Population level from Wikipedia.org.\nLoad the first set of libraries:\n\nlibrary(rvest)\nlibrary(stringr)\nlibrary(tidyverse)\n\n\nhtml.population <- read_html('https://en.wikipedia.org/wiki/List_of_Asian_cities_by_population_within_city_limits')\n\ndf.asia_cities <- html.population %>%\n  html_nodes(\"table\") %>%\n  .[[2]] %>%\n  html_table(fill = TRUE)\n\ndf.asia_cities %>% names()\n\nSelect only the vectors of interest and clean data.\n\ndf.asia_cities <- df.asia_cities[-1,c(1,2,4)]\n\nasia_cities <- df.asia_cities %>%\n    mutate(Population = str_replace_all(Population, \"\\\\[.*\\\\]\",\"\") %>% parse_number(),\n           City_full= str_c(df.asia_cities$City, df.asia_cities$Nation, sep = ', ')) %>%\n    select(City, Nation, City_full, Population)%>%\n    filter(!str_detect(Nation,\"Russia|Turkey\"))\n\n\nasia_cities %>% head()\n\n\n\n\nTo find the Asia City Geocodes we use the geocode() function from the {ggmap} package.\n\n\n\n\n\n\nIn order to get started with {ggmap} follow these steps:\n\nInstall the package from source:\nremotes::install_github(“dkahle/ggmap”)\nGet started with Google Maps Platform https://developers.google.com/maps all you need to do, if you do not have access to the platform yet, is to get started a free trial by adding your bank account information (if you do not want to continue after the trials ends you can stop it without charges)\nGo to on the left-side bar menu and select Overview then ENABLE APIs\nGo to APIs & Services to check enabled APIs\nGo to Keys and Credentials and click +CREATE CREDENTIALS on the top-side bar\nCopy the API key and paste it in the register_google() function, the option write = T will save the credentials for future use in your .Renviron file:\nggmap::register_google(, write = T)\n\n\n\n\nOnce you are all set try:\n\nlibrary(ggmap)\n\n\ndata.geo <- geocode(asia_cities$City_full)\ndata.geo%>%head\n\n\nasia_cities_full <- cbind(asia_cities, data.geo)\n# inspect\nasia_cities_full %>% head() \n\n\n\n\nLet’s have a look at the map of Asia with {ggmap}.\n\nmap.asia <- get_map('Asia', zoom = 3)\nmap.asia %>% ggmap()\n\nFor this challenge we will be using another package for the polygons of Asia, the {rworldmap} package.\ninstall.packages(\"rworldmap\")\n\nlibrary(rworldmap)\n\n\nworldmap <- rworldmap::getMap(resolution = \"high\")\ndim(worldmap)\n\nHave a look at the regions and choose Asia.\n\nt(t(table(worldmap$REGION)))\n\n\nasia <- worldmap[which(worldmap$REGION==\"Asia\"),]\nasia%>%class\n\nAs it is a spatial polygon dataframe, and we’d like to use the geom_sf() function from the {ggplot2} package, we transform it to a simple feature object with st_as_sf() function from the {sf} package.\n\nlibrary(sf)\n\n\nasia_sf <- asia %>%\n  st_as_sf()\n\nasia_sf %>% class()\n\n\n\nTo map the continent with population estimation by state we can set the option fill= POP_EST.\n\nasia_sf %>%\n  ggplot()+\n  geom_sf(aes(fill=POP_EST))+\n  scale_fill_continuous()\n\n\n\nInteresting is looking at a different classification of the population classes, and we do this by using the classIntervals() function from the {classInt} package for classifying the Population Estimation by quantile.\nLet’s have a look at the population quantiles first. What we can see are the min and the max levels, and the values of the three quantiles, 25%, 50% (median), and the 75%. Which estimation of population follow in each quantile class.\nThe median population estimate for Asia is around 18 million, with some regions having populations of less than 1.5 billion people.\n\nquantile(asia_sf$POP_EST, na.rm=TRUE)\n\n\nasia_sf%>%\n  ggplot(aes(POP_EST))+\n  geom_histogram(aes(fill=SOVEREIGNT),bins = 20)+\n  geom_vline(aes(xintercept = mean(POP_EST)),color=\"lightblue\")+\n  geom_vline(aes(xintercept = median(POP_EST)),color=\"midnightblue\")+\n  geom_text(aes(x=9000000,y=9,label=\"median\"),size=2)+\n  geom_text(aes(x=50000000,y=9,label=\"mean\"),size=2)+\n  scale_x_log10(labels=scales::comma_format(scale = 1/1000),n.breaks =8)+\n  scale_fill_viridis_d()+\n  labs(x=\"Population Estimation (Thousands)\",\n       title=\"Asia Population Distribution\",\n       caption=\"DataSource: {rworldmap} | Graphic: @fgazzelloni\")+\n  ggthemes::theme_clean()+\n  theme(legend.text = element_text(size=5),\n        legend.key.size = unit(5,units = \"pt\"))\n\nWe use the {classInt} package to find custom intervals of the population. And set up a new object called brks.\n\nlibrary(classInt)\n\n\nbrks <- classIntervals(asia_sf$POP_EST,\n                       n=10, \n                       style=\"quantile\")\nbrks\n\nSet the color scheme:\n\nbrks <- brks$brks\ncolors <- RColorBrewer::brewer.pal(length(brks), \"Spectral\")\n\nFinalize the dataset to use for the map with the population estimation interval cuts.\n\nregion_pop <- asia_sf%>%\n  select(POP_EST)%>%\n  mutate(breaks=case_when(POP_EST > 0 & POP_EST < 625493.5 ~ \"[0,625493.5)\",\n                          POP_EST >= 625493.5 & POP_EST < 2691158 ~ \"[625493.5,2691158)\",\n                          POP_EST >= 2691158 & POP_EST < 4728016 ~ \"[2691158,4728016)\",\n                          POP_EST >= 4728016 & POP_EST < 6834942 ~ \"[4728016,6834942)\",\n                          POP_EST >= 6834942 & POP_EST < 17788961 ~ \"[6834942,17788961)\",\n                          POP_EST >= 17788961 & POP_EST < 23822783 ~ \"[17788961,23822783)\",\n                          POP_EST >= 23822783 & POP_EST < 28625005 ~ \"[23822783,28625005)\",\n                          POP_EST >= 28625005 & POP_EST < 65905410 ~ \"[28625005,65905410)\",\n                          POP_EST >= 65905410 & POP_EST < 141564781 ~ \"[65905410,141564781)\",\n                          POP_EST >= 141564781 & POP_EST <= 1338612968 ~ \"[141564781,1338612968]\"))\n\nSet some information about Asia Population on a text box with the geom_textbox() function from the {ggtext} package.\n\ntext <- tibble(asia_text=c(\"As of 2022, Asia's 4.6B population thrives in diverse urban centers. Mumbai's density soars at 20.7K/km², while Tokyo boasts 6.3K/km². Asia's remarkable density and cultural richness make it the world's most populous and dynamic continent.\"))\n\n\n\n\n\n\n\nregion_pop %>%\n  ggplot()+\n  geom_sf(aes(fill=breaks))+\n  scale_fill_manual(breaks=c(\"[0,625493.5)\",\"[625493.5,2691158)\",\n                               \"[2691158,4728016)\",\"[4728016,6834942)\",\n                             \n                             \"[6834942,17788961)\",\"[17788961,23822783)\",\n                               \"[23822783,28625005)\",\"[28625005,65905410)\",\n                               \"[65905410,141564781)\",\"[141564781,1338612968]\"),\n                      values=rev(colors))+\n  geom_point(data=asia_cities_full,\n             mapping=aes(lon,lat,size=Population),\n             shape=21,stroke=0.5,\n             alpha=0.7,\n             color=\"grey90\",\n             inherit.aes = F)+\n  scale_size_continuous(labels=scales::comma_format())+\n  geom_text(data=asia_cities_full,\n             mapping=aes(lon,lat,label=City),fontface=\"bold\",\n            check_overlap = T,\n            size=2.1,color=\"white\")+\n  ggtext::geom_textbox(data=text,\n                       mapping=aes(x=60,y=-6,label=text),\n                       size=1.8,width = 0.4,fill=\"grey90\",\n                       family = \"Gill Sans\",\n                       inherit.aes = F)+\n  geom_curve(x=50,xend=67,y=0,yend=20,\n               linewidth=0.2,curvature = -0.5,\n               arrow = arrow(angle=30, \n                             length = unit(0.1, \"inches\"),\n                             ends = \"last\", type = \"open\"),\n      color=\"white\")+\n    geom_curve(x=86,xend=140,y=-5,yend=33,\n               linewidth=0.2,\n               arrow = arrow(angle=30, \n                             length = unit(0.1, \"inches\"),\n                             ends = \"last\", type = \"open\"),\n      color=\"white\")+\n  labs(fill=\"Regions Population\",\n       size=\"Cities Population\",\n       title=\"Asia - Population Level\",\n       caption=\"#30DayMapChallenge 2023 Day6 - ASIA\\nDataSource: Wikipedia & ggmap | Map @fgazzelloni\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(color=\"white\", family = \"Gill Sans\"),\n        plot.title = element_text(face=\"bold\",size=14),\n        plot.caption = element_text(hjust = 0),\n        plot.background = element_rect(fill=\"#4A4A4A\",color=\"#4A4A4A\"),\n        panel.background = element_rect(fill=\"#4A4A4A\",color=\"#4A4A4A\"),\n        legend.background = element_blank(),\n        legend.key = element_rect(color=\"#4A4A4A\",fill=\"#4A4A4A\"),\n        legend.position = \"right\",\n        legend.text = element_text(size=5.5),\n        legend.key.size = unit(5.5,units = \"pt\"))\n\n\nggsave(\"day6_asia.png\",\n       width = 7,height = 4,\n       bg=\"#4A4A4A\")\n\n\n\n\n\nhttps://cran.r-project.org/web/packages/ggmap/readme/README.html\nhttps://www.r-bloggers.com/2017/09/mapping-the-largest-cities-in-asia-using-r/"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day10_north-america/day10_north-america.html",
    "href": "mapchallenges/cases2023/posts2023/day10_north-america/day10_north-america.html",
    "title": "North America",
    "section": "",
    "text": "library(tidyverse)\nlibrary(rnaturalearth)\n\n\ncanada_disasters<- read.delim(\"data/CDD.txt\")\n\ncanada_disasters%>%#count(PLACE)\n  filter(!str_detect(PLACE,\"[0-9]+\"))%>%\n  count(PLACE)\n\n\ncanada<- ne_states(\"canada\",returnclass = \"sf\")\nggplot(canada)+\n  geom_sf(aes(fill=name))+\n  scale_fill_viridis_d(option = \"mako\", name=\"Regions\",\n                       direction = -1, end = .9)+\n  labs(#subtitle=\"Mapping Regions\",\n       caption = \"#30DayMapChallenge 2023 - Day 10: North America\\nDataSource {rnaturalearth} | Map: @fgazzelloni)\")+\n  ggtitle(\"Canada: Mapping Regions\") +\n  ggthemes::theme_map()+\n  theme(text=element_text(family=\"Roboto Condensed\",face=\"bold\"),\n        plot.title = ggtext::element_markdown(size=18),\n        plot.caption = element_text(hjust = 0.5),\n        legend.key.size = unit(5,units = \"pt\"),\n        legend.text = element_text(size=5),\n        legend.position = \"right\")+\n   ggspatial::annotation_scale()\n\n\nggsave(\"day10_north-america.png\",bg=\"white\")\n\n\ncanada%>%count(name)"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day14_europe/day14_europe.html",
    "href": "mapchallenges/cases2023/posts2023/day14_europe/day14_europe.html",
    "title": "Europe",
    "section": "",
    "text": "Eurostat data with R. We use the {eurostat} package\nLoad Libraries\n\nlibrary(tidyverse)\nlibrary(eurostat)\nlibrary(sf)\nlibrary(ggthemes)\nlibrary(rvest)\nlibrary(ggmap)\n\n\n\n\neu_geo <- get_eurostat_geospatial(resolution = 10, \n                        nuts_level = 0, \n                        year = 2016) \n  \neu_geo %>%\n  ggplot() +\n  geom_sf()\n\n\nsearch_eurostat(\"youth\")\n\n\n\n\n\nyth_demo_010 <- get_eurostat(\"yth_demo_010\", time_format = \"num\")\n\n\nyth08_20 <- yth_demo_010%>%\n  filter(age==\"TOTAL\",\n         sex==\"T\",\n         time%in%c(2008,2022))%>%\n  select(geo,time,sex,values)\n\n\nyth08_20%>%dim\n\n\ndata <- yth08_20%>% \n  inner_join(eu_geo, by = \"geo\") %>% \n  st_as_sf()\n\n\n\n\n\nydata <- data%>%\n  janitor::clean_names()%>%\n  mutate(name_latn=str_to_title(name_latn))%>%\n  select(geo,geometry,sex,time,values,name_latn)%>%\n  pivot_wider(names_from = \"time\",values_from = \"values\",names_prefix = \"Y\")%>%\n  mutate(change=round((as.numeric(Y2022)-as.numeric(Y2008))/as.numeric(Y2008),3)) \n  \nydata\n\n\n\n\n\neu_cities <- read_html(\"https://en.wikipedia.org/wiki/List_of_European_cities_by_population_within_city_limits\")\n\neu_cities <- eu_cities%>%\n  html_nodes(\"table\") %>%\n  .[[1]] %>%\n  html_table(fill = TRUE)\n\neu_cities<- eu_cities[,-1]\neu_cities %>% names()\n\n\neu_cities<- eu_cities %>% \n  mutate(City=str_replace_all(City, \"\\\\[.*\\\\]\",\"\"))%>%\n  select(City,Country)\n\n\ncity.geo <- geocode(eu_cities$City)\neu_cities <- cbind(eu_cities,city.geo)\n\n\nggplot(ydata)+\n  geom_sf(aes(fill=change),inherit.aes = F)+\n  geom_sf(aes(color=geo),fill=NA,alpha=0.5)+\n  ggrepel::geom_text_repel(data=eu_cities,\n                           aes(x=lon,y=lat,label=City),\n                           size=3,color=\"#ebe7d8\",\n                           family=\"Roboto Condensed\",\n                           inherit.aes = F)+\n  scale_x_continuous(limits = c(-10, 35)) +\n  scale_y_continuous(limits = c(35, 65)) +\n  scale_fill_continuous(type = \"viridis\",\n                        name = \"% change\",\n                        guide = guide_colorbar(\n                          direction = \"vertical\", \n                          title.position = \"top\",\n                          label.position = \"right\", \n                          barwidth = unit(8, \"pt\"),  \n                          barheight = unit(50, \"pt\"), \n                          ticks = TRUE))+\n  coord_sf(clip = \"off\")+\n  labs(color=\"Country Code\",\n       title=\"European Child and Youth Population\",\n       subtitle = \"% change 2008-2022\",\n       caption=\"#30DayMapChallenge 2023 Day 14 Europe\\nDatasource: {eurostat} & Wikipedia | Map: @fgazzelloni\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(size=14,color=\"#ebe7d8\",family=\"Roboto Condensed\"),\n        plot.title = element_text(face=\"bold\",hjust = -1),\n        plot.caption = element_text(hjust = 0.5,size=9),\n        legend.background = element_blank(),\n        legend.position = c(1.1,0.3),\n        legend.title = element_text(size=8),\n        legend.text = element_text(size=6),\n        legend.key.size = unit(5,units = \"pt\"))\n\n\nggsave(\"day14_europe.png\",height = 5,bg=\"#121007\")"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day19_5-minute-map/day19_5-minute-map.html",
    "href": "mapchallenges/cases2023/posts2023/day19_5-minute-map/day19_5-minute-map.html",
    "title": "5 Minute Map",
    "section": "",
    "text": "Overview\nA 5-minute map made with {tmap} package to visualize the Estimate Population change 1950-2030.\n\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(tmaptools)\n\n\ndata(\"World\")\ndata(\"metro\")\ndat <- metro%>%\n  mutate(pop_change=(pop2030-pop1950)/pop1950)%>%\n  select(pop_change)\n\n\nmap<- tm_shape(World, projection = 8857) +\n    tm_polygons()+\n  tm_shape(dat) + \n  tm_bubbles(size = \"pop_change\") +\n  tm_style(\"col_blind\") +\n  tm_format(\"World\")+\n  tm_layout(title= '1950-2030')+\n  tm_credits(\"{tmap} | @fgazzelloni\",position = c(0.8,0.05))\n\n\n# save map\ntmap_mode(\"plot\")\ntmap_save(map, \"day19_5-minute-map.png\", \n          scale = 0.7, \n          width = 5.125, \n          outer.margins = 0)"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day4_a-bad-map/day4_a-bad-map.html",
    "href": "mapchallenges/cases2023/posts2023/day4_a-bad-map/day4_a-bad-map.html",
    "title": "A Bad Map",
    "section": "",
    "text": "Load necessary libraries\n\nlibrary(ggplot2)\nlibrary(maps)\n\n\n\nExtract map data for the United States\n\nus_map <- map_data(\"world\")\n\n\n\nCreate a “bad” map with exaggerated 3D view\n\nggplot(data = us_map, \n       aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"lightblue\", color = \"black\") +\n  coord_map(\"ortho\", orientation = c(90, 0, 0)) +\n  labs(title = \"Exaggerated 3D View of the United States\",\n       caption=\"#30DayMapChallenge 2023 Day4 - A Bad Map | Map: @fgazzelloni\")+\n  theme_void() +\n    theme(text=element_text(color=\"lightblue\"),\n          plot.title = element_text(face=\"bold\",size=18,hjust=0.5),\n          plot.caption = element_text(size=9,hjust=0.5))\n\n\nggsave(\"day4_a_bad_map.png\",bg=\"#211e1c\")"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day15_openstreetmap/day15_openstreetmap.html",
    "href": "mapchallenges/cases2023/posts2023/day15_openstreetmap/day15_openstreetmap.html",
    "title": "OpenStreetMap",
    "section": "",
    "text": "OpenStreetMap data\nResources: https://rspatialdata.github.io/osm.html\n\nlibrary(tidyverse)\nlibrary(osmdata)\nlibrary(ggmap)\n\nLet’s check available features, there are 263 features.\n\navailable_features()\n\n\n\n?getbb\n\nvalencia_bb <- getbb(\"valencia\")\n\n\n\n\n\navailable_tags(\"location\")\n\n\nvalencia <-valencia_bb%>%\n  opq() %>%\n  add_osm_feature(key = \"location\",value=\"underground\") %>%\n  osmdata_sf()\n\nvalencia$osm_points%>%head\n\n\nvalencia_map<- ggmap::get_map(location = \"Valencia\",\n                              maptype = \"stamen_terrain\",\n                              zoom=13)\n\n\nggmap(valencia_map) +\n  geom_sf(\n    data = valencia$osm_polygons,\n    inherit.aes = FALSE,\n    colour = \"#cc161d\",\n    fill = \"#be2d42\",\n    size = 2\n  ) +\n    geom_sf(\n    data = valencia$osm_points,\n    inherit.aes = FALSE,\n    colour = \"#cc161d\",\n    fill = \"#be2d42\",\n    size = 0.2\n  ) +\n  labs(x = \"\", y = \"\")\n\n\n\n\n\nosmdata::available_tags(\"amenity\")\n\n\nvalencia_schools <-\n  valencia_bb%>%\n  opq() %>%\n  add_osm_feature(key=\"amenity\",value=\"school\")%>%\n  osmdata_sf()\n\n\nvalencia_map2<- ggmap::get_map(location = \"Valencia\",\n                              maptype = \"stamen_terrain_lines\",\n                              zoom=13)\n\n\nggmap(valencia_map2) +\n  geom_sf(\n    data = valencia$osm_polygons,\n    inherit.aes = FALSE,\n    colour = \"#cc161d\",\n    fill = \"#be2d42\",\n    size = 2\n  ) +\n    geom_sf(\n    data = valencia$osm_points,\n    inherit.aes = FALSE,\n    colour = \"#cc161d\",\n    size = 0.2\n  ) +\n    geom_sf(\n    data = valencia_schools$osm_polygons,\n    inherit.aes = FALSE,\n    fill = \"#40E0D0\",color=\"#A0522D\",\n    size = 0.2\n  ) +\n  labs(title=\"València\")+\n  ggthemes::theme_map(base_size = 14,base_family = \"Gill Sans\")\n\n\nvalencia_streets <- valencia_bb %>%\n  opq() %>%\n  add_osm_feature(\"highway\", c(\"motorway\", \"primary\", \"secondary\", \"tertiary\")) %>%\n  osmdata_sf()\n\n# retrieving data of small streets in Lagos\nvalencia_small_streets <- valencia_bb %>%\n  opq() %>%\n  add_osm_feature(key = \"highway\", value = c(\"residential\", \"living_street\", \"unclassified\", \"service\", \"footway\")) %>%\n  osmdata_sf()\n\n# retrieving data of rivers in Lagos\nvalencia_rivers <- valencia_bb %>%\n  opq() %>%\n  add_osm_feature(key = \"waterway\", value = \"river\") %>%\n  osmdata_sf()\n\n\nggmap(valencia_map2)+\n    geom_sf(data = valencia_streets$osm_lines, \n            inherit.aes = FALSE, \n            color = \"#ffbe7f\", linewidth = .2, alpha = .8) +\n  geom_sf(data = valencia_small_streets$osm_lines, \n          inherit.aes = FALSE, \n          color = \"#a6a6a6\", linewidth = .01, alpha = .8) +\n  geom_sf(data = valencia_rivers$osm_lines, \n          inherit.aes = FALSE, \n          color = \"#7fc0ff\", size = .8, alpha = .5)+\n  geom_sf(\n    data = valencia$osm_polygons,\n    inherit.aes = FALSE,\n    colour = \"#cc161d\",\n    fill = \"#be2d42\",\n    size = 2\n  ) +\n    geom_sf(\n    data = valencia$osm_points,\n    inherit.aes = FALSE,\n    aes(colour = \"#cc161d\"),\n    size = 0.2\n  ) +\n    geom_sf(\n    data = valencia_schools$osm_polygons,\n    inherit.aes = FALSE,\n    aes(fill = \"#40E0D0\",color=\"#A0522D\"),\n    size = 0.2,key_glyph = draw_key_pointrange\n  ) +\n    geom_sf(\n    data = valencia_schools$osm_polygons,\n    inherit.aes = FALSE,\n    color=\"#A0522D\",fill=NA,\n    size = 0.2,\n  ) +\n  scale_color_manual(values=c(\"#40E0D0\",\"#cc161d\"),labels=c(\"Schools\",\"Underground\"))+\n  scale_fill_manual(values=c(\"#40E0D0\"))+\n  guides(fill=\"none\",\n         color=guide_legend(title.position =\"left\"))+\n  coord_sf(clip=\"off\")+\n  labs(title=\"València, ES\",\n       subtitle=\"#30DayMapChallenge2023 Day 15 - OpenStreetMap\",\n       caption=\"DataSource: {osmdata} | Map: @fgazzelloni\",\n       color=\"\")+\n  ggthemes::theme_map(base_size = 14,base_family = \"Gill Sans\")+\n  theme(plot.title = element_text(hjust = 0.5,size=20),\n        plot.subtitle = element_text(size=10,hjust = 0.5),\n        plot.title.position = \"plot\",\n        legend.box.background = element_blank(),\n        #legend.background = element_blank(),\n        legend.position = c(0.8,0.05))+\n   ggspatial::annotation_scale(hjust=1)\n\n\nggsave(\"day15_openstreetmap.png\",\n       scale = 0.5,\n       limitsize=F,\n       bg=\"#f0f0f0\")"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day7_navigation/day7_navigation.html",
    "href": "mapchallenges/cases2023/posts2023/day7_navigation/day7_navigation.html",
    "title": "Navigation",
    "section": "",
    "text": "Overview\nThis Leaflet map represents 3D flights of European free-tailed bat spotted from 2017-08-08 to 2017-08-15. There are 8 individual.local.identifier for bats taxonomy Tadarida teniotis.\nThe study results can be accessed on https://www.movebank.org/ and contains data from: European free-tailed bats use topography and nocturnal updrafts to fly high and fast.\n\nO’Mara MT, Amorim F, McCracken GF, Mata V, Safi K, Wikelski M, Beja P, Rebelo H, Dechmann DKN. 2021. Data from: European free-tailed bats use topography and nocturnal updrafts to fly high and fast. Movebank Data Repository. https://doi.org/10.5441/001/1.52nn82r9\n\n\n# install.packages(\"leaflet\")\nlibrary(leaflet)\nlibrary(tidyverse)\n\nData can be downloaded from the www.movebank.org. In summary, during the day, flying animals use environmental energy sources such as thermal updrafts and wind gradients, but these are considered unavailable at night due to lower thermal potential and difficulty finding uplift sources. Surprisingly, some bat species have been observed flying at high altitudes at night, making energetically costly ascents and reaching remarkable airspeeds. This study confirms that bats utilize orographic uplift to ascend over 1,600 meters and achieve sustained airspeeds of 135 km/h. Wind patterns and topography predict areas suitable for high-altitude ascents, which bats adeptly navigate, capitalizing on vertical wind energy in the nocturnal landscape.\n\nbats <- read.csv(\"data/3D flights of European free-tailed bats.csv\")\nbats %>% glimpse\n\n\nbats%>%\n  count(tag.local.identifier,individual.local.identifier )\n\n\ndat <- bats%>%\n  select(individual.local.identifier,timestamp,long=location.long,lat=location.lat, ground.speed,height.above.msl)%>%\n  mutate(date=(as.Date(timestamp)),.after = timestamp)%>%\n  select(-timestamp)\n\ndat %>% head\n\n\ndat%>%\n  pull(date)%>%\n  range()\n\n\nRdYlBu <- colorFactor(\"RdYlBu\", domain = dat$individual.local.identifier)\n\n\nleaflet(dat) %>%\n  addTiles() %>%\n   addTiles(group = \"OSM (default)\") %>%\n  addProviderTiles(providers$Esri.WorldStreetMap)%>%\n  addCircles(lng = ~long,lat = ~lat,\n                   color=~RdYlBu(individual.local.identifier), \n                   popup = ~individual.local.identifier)%>%\n  addMiniMap()%>%\n  mapOptions()%>%\n  addMeasure()%>%\n  addScaleBar()\n\n\nlibrary(htmlwidgets)\n library(htmltools)\n\nsaveWidget(map, file=\"day7_navigator.html\",title = \"3D flights of European free-tailed bats\")"
  },
  {
    "objectID": "mapchallenges/cases2023/posts2023/day18_atmosphere/day18_atmosphere.html",
    "href": "mapchallenges/cases2023/posts2023/day18_atmosphere/day18_atmosphere.html",
    "title": "Atmosphere",
    "section": "",
    "text": "This challenge is all about wind movements. The selected area is Italy, also some parts of the surrounding territories can be seen. I am going to use the {rWind} package for downloading the information about wind speed and direction vectors (u,v) for today, Nov 18, 2023.\nIn order to be able to interpolate the information from {rWind}, I’ll use the {oce} package which provide a type of interpolating function for calculating the Barnes interpolation with: oce::interpBarnes() function.\nLoad necessary libraries\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(giscoR)\nlibrary(classInt)\nlibrary(metR)\n# install.packages(\"rWind\")\n# install.packages(\"oce\")\nlibrary(rWind)\nlibrary(oce)\n\n\n\n\ntime_range <- seq(ymd_hms(paste(2023, 11, 18, 00, 00, 00, \n                                sep = \"-\")),\n                  ymd_hms(paste(2023, 11, 18, 00, 00, 00, \n                                sep = \"-\")),\n                  by = \"1 hours\"\n                  )\n\n\n\n\n\nmean_wind_data2 <- rWind::wind.dl_2(time_range, \n                                   3.472, 36.368, 23.906, 46.665) %>%\n  rWind::wind.mean()\n\n[1] \"2023-11-18 downloading...\"\n\neur_wind_df2 <- as.data.frame(mean_wind_data2)\neur_wind_df2%>%head\n\n           time  lat lon    ugrd10m     vgrd10m        dir     speed\n3016 2023-11-18 46.5 3.5  0.1880054  1.34282470   7.970025 1.3559219\n3017 2023-11-18 46.5 4.0 -0.3119946  0.68282470 335.443507 0.7507264\n3018 2023-11-18 46.5 4.5  0.2880054  0.48282468  30.816114 0.5621981\n3019 2023-11-18 46.5 5.0  0.7280053  0.34282470  64.783804 0.8046866\n3020 2023-11-18 46.5 5.5 -0.5019946 -0.53717530 223.061014 0.7352251\n3021 2023-11-18 46.5 6.0 -0.7519946 -0.03717529 267.169854 0.7529129\n\n\n\n\n\nggplot(eur_wind_df2)+\n  geom_point(aes(lon,lat,color=speed),size=1.5,alpha=0.9)\n\n\n\n\n\n\n\n\n\neur_sf <- giscoR::gisco_get_countries(\n        year = \"2020\", epsg = \"4326\",\n        resolution = \"10\", region = c(\"Europe\", \"Asia\")\n    )\n\n\n\n\nggplot(eur_wind_df2)+\n  geom_point(aes(lon,lat,color=speed),size=2)+\n  geom_sf(data=eur_sf,inherit.aes = F,\n          fill=NA,\n          show.legend = F)+\n  scale_color_gradient(low=\"#f6f7f9\",high = \"#250c5f\")+\n  scale_x_continuous(limits = c(3.472,23.906))+\n  scale_y_continuous(limits = c(36.368,46.665))+\n  theme(panel.background = element_rect(color=\"#f6f7f9\",fill=\"#f6f7f9\"))\n\n\n\n\n\n\n\n\nHere I try to make the Barnes interpolation on the first level grid.\noce::interpBarnes\nAnd have a look at the information provided with the contour() function.\n\nwu <- oce::interpBarnes(\n        x = eur_wind_df2$lon,\n        y = eur_wind_df2$lat,\n        z = eur_wind_df2$ugrd10m\n    )\nwv <- oce::interpBarnes(\n        x = eur_wind_df2$lon,\n        y = eur_wind_df2$lat,\n        z = eur_wind_df2$vgrd10m\n    )\ncontour(wu$xg,wu$yg,wu$zg)\n\n\n\n\n\n\n\n\neur_wind_pts <- eur_wind_df2 %>%\n    sf::st_as_sf(coords = c(\"lon\", \"lat\")) %>%\n    sf::st_set_crs(4326)\n\neur_wind_pts \n\nSimple feature collection with 3082 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3.5 ymin: 24 xmax: 36.5 ymax: 46.5\nGeodetic CRS:  WGS 84\nFirst 10 features:\n           time     ugrd10m     vgrd10m        dir     speed         geometry\n3016 2023-11-18  0.18800537  1.34282470   7.970025 1.3559219 POINT (3.5 46.5)\n3017 2023-11-18 -0.31199460  0.68282470 335.443507 0.7507264   POINT (4 46.5)\n3018 2023-11-18  0.28800535  0.48282468  30.816114 0.5621981 POINT (4.5 46.5)\n3019 2023-11-18  0.72800535  0.34282470  64.783804 0.8046866   POINT (5 46.5)\n3020 2023-11-18 -0.50199460 -0.53717530 223.061014 0.7352251 POINT (5.5 46.5)\n3021 2023-11-18 -0.75199460 -0.03717529 267.169854 0.7529129   POINT (6 46.5)\n3022 2023-11-18 -0.08199463 -1.27717530 183.673347 1.2798046 POINT (6.5 46.5)\n3023 2023-11-18 -0.86199460  0.84282470 314.355763 1.2055655   POINT (7 46.5)\n3024 2023-11-18 -0.02199463  1.67282460 359.246707 1.6729692 POINT (7.5 46.5)\n3025 2023-11-18  0.47800535 -1.37717520 160.858564 1.4577725   POINT (8 46.5)\n\n\n\n eur_wind_grid <- eur_wind_pts %>%\n    sf::st_make_grid(n = c(80, 100)) %>%\n    sf::st_sf() %>%\n    dplyr::mutate(id = row_number())\n\n\n\n\nggplot(eur_wind_grid)+\n  geom_sf()\n\n\n\n\n\n\n\n\nFor more information about this type of analysis have a look at this tutorial: https://milospopovic.net/mapping-wind-data-in-r/\n\neur_wind_grid_agg <- \n    sf::st_join(eur_wind_pts, eur_wind_grid, \n      join = sf::st_within) %>%\n    st_drop_geometry() %>%\n    group_by(id) %>%\n    summarise(\n      n = n(), u = mean(ugrd10m), \n      v = mean(vgrd10m), speed = mean(speed)\n    ) %>%\n    dplyr::inner_join(eur_wind_grid, by=\"id\") %>%\n    dplyr::select(n, u, v, speed, geometry) %>%\n    sf::st_as_sf() %>%\n    na.omit()\n\n\n\n\nggplot(eur_wind_grid_agg)+\n  geom_sf(aes(fill=speed))\n\n\n\n\n\n\n\n\nThe Centroids:\n\ncoords <- eur_wind_grid_agg %>%\n    st_centroid() %>%\n    st_coordinates() %>%\n    as_tibble() %>%\n    rename(lon = X, lat = Y)\n\n\neur_df <- coords %>%\n    bind_cols(sf::st_drop_geometry(eur_wind_grid_agg))\n\n\neur_df %>%\n        ggplot() +\n        geom_point(aes(lon,lat,color=speed))\n\n\n\n\n\n\n\nRepete the procedure with the adjusted grid.\n\nwu <- oce::interpBarnes(\n        x = eur_df$lon,\n        y = eur_df$lat,\n        z = eur_df$u\n    )\n\n\ndimension <- data.frame(lon = wu$xg, wu$zg) %>% dim()\n\n\nudf <- data.frame(\n        lon = wu$xg,\n        wu$zg\n    ) %>%\n        gather(key = \"lata\", value = \"u\", 2:dimension[2]) %>%\n        mutate(lat = rep(wu$yg, each = dimension[1])) %>%\n        select(lon, lat, u) %>%\n        as_tibble()\n\n\nwv <- oce::interpBarnes(\n        x = eur_df$lon,\n        y = eur_df$lat,\n        z = eur_df$v\n    )\n\n\nvdf <- data.frame(lon = wv$xg, wv$zg) %>%\n        gather(key = \"lata\", value = \"v\", 2:dimension[2]) %>%\n        mutate(lat = rep(wv$yg, each = dimension[1])) %>%\n        select(lon, lat, v) %>%\n        as_tibble()\n\n\ndf <- udf %>%\n        bind_cols(vdf %>% select(v)) %>%\n        mutate(vel = sqrt(u^2 + v^2))\n\n\nhead(df)\n\n# A tibble: 6 × 5\n    lon   lat      u      v   vel\n  <dbl> <dbl>  <dbl>  <dbl> <dbl>\n1   3.5    24  0.698 0.141  0.712\n2   4      24  0.448 0.0845 0.456\n3   4.5    24 -0.525 0.0523 0.528\n4   5      24 -1.20  0.377  1.26 \n5   5.5    24 -1.61  0.383  1.65 \n6   6      24 -1.01  1.30   1.65 \n\n\n\n\n\n\ndf %>%\n        ggplot() +\n        metR::geom_streamline(\n            data = df,\n            aes(\n                x = lon, y = lat, dx = u, dy = v,\n                color = sqrt(..dx..^2 + ..dy..^2)\n            ),\n            L = 2, res = 2, n = 60,\n            arrow = NULL, lineend = \"round\",\n            alpha = .85\n        ) \n\n\n\n\n\n\n\n\ndf %>%\n  ggplot() +\n  metR::geom_streamline(data = df,\n                        aes(x = lon, y = lat, dx = u, dy = v,\n                            color = sqrt(..dx..^2 + ..dy..^2)),\n                        L = 2, \n                        res = 2, \n                        n = 60,arrow = NULL, \n                        lineend = \"round\",\n                        alpha = .85) +\n  geom_sf(data = eur_sf,\n          fill = NA,\n          linewidth = 0.8,\n          alpha = .99) +\n    scale_x_continuous(limits = c(3.472,23.906))+\n    scale_y_continuous(limits = c(36.368,46.665))+\n  scale_color_gradient(low=\"#f6f7f9\",high = \"orange\")+\n  labs(title=\"Whispers of the Breeze: Italy's Today Wind Speed\",\n       subtitle=\"#30DayMapChallenge 2023 Day 18 Atmosphere\",\n       caption=\"DataSource: {rWind} | Map: @fgazzelloni\")+\n  ggthemes::theme_map()+\n  theme(legend.position = \"none\",\n        plot.background = element_rect(color=\"#dedede\",fill=\"#dedede\"),\n        plot.title = element_text(hjust=0.5,size=16,face=\"bold\"),\n        plot.subtitle = element_text(hjust=0.5,size=11,face=\"bold\"),\n        plot.caption = element_text(hjust=0.5,size=10,face=\"bold\"))\n\n\n\n\n\nggsave(\"day18_atmosphere.png\",\n       height = 5,\n       bg=\"#dedede\")\n\n\n\n\n\nhttps://milospopovic.net/mapping-wind-data-in-r/\nhttps://semba-blog.netlify.app/10/25/2018/processing-satellite-wind-speed-data-with-r/\nhttps://stackoverflow.com/questions/55583611/how-to-create-contour-with-wind-animation-using-gganimate\nhttps://www.r-bloggers.com/2018/11/plotting-wind-highways-using-rwind/"
  },
  {
    "objectID": "mapchallenges/cases2022/index.html",
    "href": "mapchallenges/cases2022/index.html",
    "title": "30DayMapChallenge 2022",
    "section": "",
    "text": "Remix\n\n\n\n\n\n\n\n\n\nNov 30, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut of my comfort zone\n\n\n\n\n\n\n\n\n\nNov 29, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3d\n\n\n\n\n\n\n\n\n\nNov 28, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMusic\n\n\n\n\n\n\n\n\n\nNov 27, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIslands\n\n\n\n\n\n\n\n\n\nNov 26, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColour Friday: 2 Colors\n\n\n\n\n\n\n\n\n\nNov 25, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFantasy\n\n\n\n\n\n\n\n\n\nNov 24, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMovement\n\n\n\n\n\n\n\n\n\nNov 23, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNull\n\n\n\n\n\n\n\n\n\nNov 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData: Kontur Population Dataset\n\n\n\n\n\n\n\n\n\nNov 21, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMy favourite\n\n\n\n\n\n\n\n\n\nNov 20, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobe\n\n\n\n\n\n\n\n\n\nNov 19, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColour Friday: Blue\n\n\n\n\n\n\n\n\n\nNov 18, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Map Without Computer\n\n\n\n\n\n\n\n\n\nNov 17, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMinimal\n\n\n\n\n\n\n\n\n\nNov 16, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFood / Drink\n\n\n\n\n\n\n\n\n\nNov 15, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHexagons\n\n\n\n\n\n\n\n\n\nNov 14, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5 Minute Map\n\n\n\n\n\n\n\n\n\nNov 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScale\n\n\n\n\n\n\n\n\n\nNov 12, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColour Friday: Red\n\n\n\n\n\n\n\n\n\nNov 11, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Bad Map\n\n\n\n\n\n\n\n\n\nNov 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpace\n\n\n\n\n\n\n\n\n\nNov 9, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData: OpenStreetMap\n\n\n\n\n\n\n\n\n\nNov 8, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRaster\n\n\n\n\n\n\n\n\n\nNov 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUkraine\n\n\n\n\n\n\n\n\n\nNov 5, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColour Friday: Green\n\n\n\n\n\n\n\n\n\nNov 4, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPolygons\n\n\n\n\n\n\n\n\n\nNov 3, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLines\n\n\n\n\n\n\n\n\n\nNov 2, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPoints\n\n\n\n\n\n\n\n\n\nNov 1, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day20_my_favourite/day20_my_favourite.html",
    "href": "mapchallenges/cases2022/posts2022/day20_my_favourite/day20_my_favourite.html",
    "title": "My favourite",
    "section": "",
    "text": "TidyTuesday week 6 2022\noriginal Dubois collection:\n\nhttps://www.loc.gov/collections/african-american-photographs-1900-paris-exposition/?sb=shelf-id_desc&sp=1&st=grid\nhttps://github.com/ajstarks/dubois-data-portraits/blob/master/plate01/georgia-negro.dsh\n\n\n\nLoad data\n\nlibrary(tidyverse)\nairmen <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-08/airmen.csv')\n\n\n# data wrangling--------\ndf <-airmen%>%\n  select(name,graduation_date,graduated_from,\n         pilot_type,\n         military_hometown_of_record,state,\n         number_of_aerial_victory_credits)%>%\n  mutate(pilot_type=str_replace_all(pilot_type,\"Liaison\",\"Liason\"))%>%\n  filter(!is.na(graduation_date),!is.na(state))%>%\n  arrange(desc(graduation_date))%>%\n  mutate(id=row_number())%>%\n  relocate(id)\n\n# 48 states abbr to be chacked\ndf%>%count(state)\n\ndf%>%mutate(year=lubridate::year(graduation_date))%>%count(year)\n\n# map data -----\nus_states_df <-\n  df%>%\n  mutate(state_name=usdata::abbr2state(state),\n         .after=state)%>% \n  filter(!is.na(state_name)) %>%   # 41 us states selected\n  mutate(state_name = tolower(state_name)) \n\nmy_states<-\n  us_states_df%>%\n  count(state_name)%>%\n  select(-n)%>%unlist()\n\n# US states coordinates \nstates<- map_data(\"state\")\n\nmy_states_coords<- \n  states%>%\n  filter(region%in%my_states)%>%\n  left_join(us_states_df,by=c(\"region\"=\"state_name\"))%>%\n  mutate(number_of_aerial_victory_credits=ifelse(number_of_aerial_victory_credits==1.5,\n                                                 2,number_of_aerial_victory_credits))\n\n# World coordinates\nworld<-map_data(map = \"world\") %>%\n  filter(!region==\"Antarctica\")\n\n\n# alabama $ french morocco\nal_frmo<-data.frame(region=c(\"french morocco\",\"alabama\"),\n                    lat=c(30.427755,32.318230),\n                    long=c(-9.598107,-86.902298))\n\n\n\n# dubois colors -------\nstates_palette<-colorRampPalette(c(\"#654321\",\"#d2b48c\",\"#ffd700\",\"#ffc0cb\",\"#dc143c\",\"#00aa00\",\"#4682b4\"))(5)\n\n# fonts---------\nlibrary(extrafont)\nlibrary(showtext)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nlibrary(sysfonts)\n#font_families_google()\nfont_add_google(name=\"Barlow Condensed\",family=\"dubois\")\n\n\n# make the map plots ---------------------\n\nworld_west <-\n  ggplot() +\n  geom_polygon(data=world,aes(x=long,y=lat,group=group),\n               fill=\"wheat2\",color=\"#654321\") +\n  geom_polygon(data = states,\n               aes(x = long, y = lat, group = group),\n               fill=\"wheat2\",color=\"#654321\",size=0.1) +\n  \n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==1),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05) +\n  \n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==2),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05) +\n  \n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==3),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05)+  \n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==4),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05)+\n  \n  geom_point(data=al_frmo,aes(x=long,y=lat),color=\"red\")+\n  \n  scale_fill_manual(values=states_palette)+\n  coord_map(\"ortho\", orientation = c(3.849945, -103.525750, 0)) +\n  \n  labs(title=\" \\n \\n \",\n       subtile=\" \\n \\n \",\n       x=\"\",y=\"\",fill=\"Aerial victories\") +\n  theme_void() +\n  theme(legend.position = c(0.5,1.2),\n        legend.direction = \"horizontal\")\n\n\nworld_est <-  \n  ggplot() +\n  geom_polygon(data=world,aes(x=long,y=lat,group=group),\n               fill=\"wheat2\",color=\"#654321\") +\n  geom_polygon(data = states,\n               aes(x = long, y = lat, group = group),\n               fill=\"wheat2\",color=\"#654321\",size=0.1) +\n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==1),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05)+\n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==2),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05)+\n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==3),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05)+  \n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==4),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05) + \n  \n  geom_point(data=al_frmo,aes(x=long,y=lat),color=\"red\")+\n  \n  scale_fill_manual(values=states_palette)+\n  coord_map(\"ortho\", orientation = c(10.050474, 55.740732,0)) + #9.982182, 49.595135, 0)) + \n  labs(title=\" \\n \\n \",subtile=\" \\n \\n \",x=\"\",y=\"\",color=\"\") +\n  theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n# draw curved text-----------------------\nt<-2*pi\n\ndf_text_left <- \n  data.frame(x = cos(t),\n             y = sin(t),\n             xend = cos(t + 1.8),\n             yend = sin(t + 1.8))\n\np <-ggplot(df_text_left) +\n  geomtextpath::geom_textcurve(aes(x, y, xend = xend, yend = yend),\n                               label = c(\"Afican-American pilots victory\"),\n                               curvature = 0.2, vjust = 1) +\n  coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.2))\n\n\nq <-ggplot(df_text_left) +\n  geomtextpath::geom_textcurve(aes(-x, y, xend =- xend, yend = yend),\n                               label = c(\"Army Air Force during WWII\"),\n                               curvature = -0.2, vjust = -0) +\n  coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.2))\n\nlibrary(patchwork)\ntext_curved <-(p+q)\ntext_curved <- text_curved & theme_void()\n\n# draw circle and a curve-----------\ng <- grid::circleGrob(gp = grid::gpar(fill = \"#baa388\",color=\"#654321\",size=0.5))\n\n\n# final touches----------\nlibrary(cowplot)\nfinal_plot<-ggdraw()+\n  draw_image(\"duboisbg.jpeg\",\n             scale = 1.6)+\n  draw_grob(g, scale=0.542,x=-0.223,y=-0.1) +\n  draw_grob(g, scale=0.542,x=0.229,y=-0.1) +\n  draw_plot(world_west,scale=0.6,x=-0.229,y=-0.07)+\n  draw_plot(world_est,scale=0.6,x=0.229,y=-0.07) +\n  draw_image(\"https://tile.loc.gov/storage-services/service/pnp/ppmsca/33800/33863r.jpg\",\n             scale=0.3,x=0.4,y=0.35) +\n  draw_label(\"#30DayMapChallenge 2022 Day 20: My favourite\\nTuskegee Airmen: Aerial Victories\\nAir Force Historical Research Agency\\nGraduation 1942 - 1948\", \n             fontfamily=\"dubois\",color=\"#291c10\",\n             x=0.5,y=0.9,size=25,fontface = \"bold\")+\n  draw_label(\"DataSource: Tuskegee Airmen | Viz @fgazzelloni \\n #DuBoisChallenge | #TidyTuesday 2022/06\", \n             fontfamily=\"dubois\",color=\"#291c10\",\n             x=0.5,y=0.12,size=14,fontface = \"bold\")+\n  draw_plot(text_curved,x=0,y=0.05,scale = 0.5)+\n  draw_label(\"This paper focus on their aerial victory credits. \n             The most famous of the 332d Fighter Group commanders was Col.Benjamin O. Davis,Jr.\n             The 99th Fighter Squadron deployed from Tuskegee, Alabama, to French Morocco in April 1943.\",\n             fontfamily=\"dubois\",color=\"#291c10\",\n             x=0.5,y=0.04,size=14,fontface = \"bold\")\n\n\n# save the plot--------\nragg::agg_png(\"day20_my_favorite.png\",\n              res = 320, width = 12, height = 10, units = \"in\")\nfinal_plot\n\ndev.off()"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day9_space/day9_space.html",
    "href": "mapchallenges/cases2022/posts2022/day9_space/day9_space.html",
    "title": "Space",
    "section": "",
    "text": "This Global map is created with a tool called fourmilab.ch/yoursky and represent some particular constellations that can be spotted from that point of view."
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day7_raster/day7_raster.html",
    "href": "mapchallenges/cases2022/posts2022/day7_raster/day7_raster.html",
    "title": "Raster",
    "section": "",
    "text": "Load the library\n\nlibrary(tidyverse)\n# Set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Island Moments\",\n                family=\"Island Moments\")\n\n# Load the raster layer\nload(\"predictions.RData\")\npredictions$layer\n# More info about the predictions raster layer can be found \n# else where: [here](https://fgazzelloni.github.io/How-to-Spatial-Modeling-with-R/)\n\n# Make the map and save it as .png\nlibrary(raster)\n# quartz()\nshowtext::showtext_opts(dpi=120)\nagg_png(filename =\"raster.png\",\n        width = 680,\n        height = 680,\n        units = \"px\",\n        pointsize = 8,\n        res = 80,\n        scaling = 1.2,\n        bitsize = 8,\n        background=\"grey90\")\nraster::plot(predictions,\n             xlim=c(-125,-100),ylim=c(35,55),axes=F)\ndev.off()\n\n# Draw the plot\nlibrary(cowplot)\n\nggdraw()+\n  draw_image(\"raster.png\")+\n  draw_label(\"Oregon Spotted Frogs: Rana Pretiosa\",\n             fontfamily=\"Island Moments\",\n             x=0.5,y=0.9,size=18) +\n  draw_label(\"Crane Prairie Reservoir, Deschutes County\",\n             fontfamily=\"Island Moments\",\n             lineheight = 0.5,\n             size=12,\n             x=0.5,y=0.88)+\n  draw_label(\"Habitat study September-November 2018\\nGreen areas show the most probable spotting locations\\nas result of the prediction\",\n             fontfamily=\"Island Moments\",\n             lineheight = 0.5,hjust = 0,\n             size=12,\n             x=0.5,y=0.7)+\n  draw_label(\"#30DayMapChallenge 2022 Day 7: Raster | DataSource: Oregon Spotted Frogs: Rana Pretiosa\\nMap: Federica Gazzelloni (@fgazzelloni)\",\n             fontfamily=\"Island Moments\",\n             x=0.5,y=0.1)+\n  draw_label(\"Credits: Results based on a study by Dr. Michael J Adams from the Forest and Rangeland Ecosystem Science Center in Oregon.\",\n             fontfamily=\"Island Moments\",\n             lineheight = 0.5,hjust = 0,\n             x=0.15,y=0.03)\n\n# Save it!\nggsave(\"final.png\",dpi=200,\n       width=6.5, height=5.57)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day24_fantasy/day24_fantasy.html",
    "href": "mapchallenges/cases2022/posts2022/day24_fantasy/day24_fantasy.html",
    "title": "Fantasy",
    "section": "",
    "text": "library(tidyverse)\nlibrary(sf)\nlibrary(scico)\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Patrick Hand\",\n                family=\"Patrick Hand\")\n\n\n\n#########\n\nprojection_bonne <- c(\"+proj=bonne +lat_1=10\")\n\n\nworld_graticule <- sf::st_graticule(lon=seq(-180,180, 15),\n                                    lat = seq(-90,90, 7.5),\n                                    ndiscr = 5000,\n                                    margin = 0.00000000001) %>%\n  st_transform(projection_bonne)\n\n\n\nworld_pol <- rnaturalearth::ne_countries(returnclass = \"sf\")\n\nggplot() +\n  geom_sf(data = world_graticule, \n          linewidth = 0.1, \n          color = \"white\", \n          alpha = 0.6) +\n  geom_sf(data=world_pol,aes(fill=economy))+\n  coord_sf()+\n  scico::scale_fill_scico_d(direction = -1)+\n  labs(fill=\"Economy\",\n       caption = \"#30DayMapChallenge2022 Day 24: Fantasy\\nDataSource: {rnaturalearth} & proj=bonne | Map: Federica Gazzelloni (@fgazzelloni)\") + \n  ggthemes::theme_map()+\n  theme(text=element_text(color=\"navy\",family=\"Patrick Hand\"),\n        plot.background = element_rect(fill=\"#a8bd3a\",color=\"grey80\"),\n        plot.caption = element_text(size=5,lineheight = 1.1),\n        legend.key.size = unit(7,units=\"pt\"),\n        legend.position = c(0,-0.1),\n        legend.text = element_text(color=\"navy\",size=6),\n        legend.title = element_text(color=\"navy\"),\n        legend.background = element_blank())\n\n\nggsave(\"day24_fantasy.png\",\n       width = 5.42,\n       height = 3.2)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day1_points/day1_points.html",
    "href": "mapchallenges/cases2022/posts2022/day1_points/day1_points.html",
    "title": "Points",
    "section": "",
    "text": "Overview\nMalaria prevalence in children, data recorded at villages in The Gambia, Africa. Data is from {geoR} package.\nLoad the libraries\n\nlibrary(tidyverse)\nlibrary(geoR)\nlibrary(sf)\nlibrary(afrilearndata)\nlibrary(cowplot)\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name = \"Mukta\",family=\"Mukta\")\n\nLoad data and transform UTM coords into Lat and Long\n\ndata(package=\"geoR\")\n# ?gambia\ngambia %>% head\n\n\ngambia1 <- gambia %>%\n  select(x,y) %>%\n  sf::st_as_sf(coords = c(1,2), \n               crs = \"+proj=utm +zone=28\") %>%\n  # utm tranformation to longlat\n  sf::st_transform(crs = \"+proj=longlat +datum=WGS84\")  %>%\n  sf::st_coordinates() %>%\n  cbind(gambia) %>%\n  rename(long=X,lat=Y) \n\n\n# gambia.borders\n# gambia.borders %>%DataExplorer::profile_missing()\n# NA in the borders coords \nst_write(gambia.borders,\n        \"gambia_borders.csv\",\n         layer_options = \"GEOMETRY=AS_XY\")\n  \n# replacing null geometries with empty geometries\ngambia.borders2 = st_read(\"gambia_borders.csv\",\n                          options = c(\"X_POSSIBLE_NAMES=X\",\n                                      \"Y_POSSIBLE_NAMES=Y\"),\n                          crs=\"+proj=utm +zone=28\") \n  \ngambia.borders3 <- gambia.borders2 %>%\n  sf::st_as_sf(coords = c(1,2), \n              crs = \"+proj=utm +zone=28\") %>%\n  # utm tranformation to longlat\n  sf::st_transform(crs = \"+proj=longlat +datum=WGS84\") \n           \n \ngambia.borders4 <- gambia.borders3 %>%\n  sf::st_coordinates() %>%\n  as.data.frame()%>%\n  rename(long=X,lat=Y) \n  \n\n# check the bbox\n# bbox = left,bottom,right,top\n# bbox = min Longitude , min Latitude , max Longitude , max Latitude \n# gambia.borders3%>%\n#  st_bbox()\n\nMake the map\n\nmap <- gambia1 %>%\n  filter(pos==1) %>%\n  ggplot(aes(long,lat)) +\n  geom_point(shape=21,stroke=0.5,size=2,color=\"grey40\") +\n  geom_point(aes(color=age)) +\n  geom_point(data=gambia1 %>%\n               filter(pos==1,phc==1) ,\n             inherit.aes = TRUE,\n             shape=\"H\",stroke=0.1,size=2,color=\"red\") +\n  coord_map()+\n  scale_color_gradient2() +\n  geom_path(data = gambia.borders4, aes(long,lat),size=0.1)+\n  labs(title=\"Malaria prevalence in children\",\n       subtitle=\"data recorded at villages in The Gambia, Africa\",\n       caption=\"#30DayMapChallenge 2022 day 1 Points\\nDataSource: Gambia data from {geoR} package\\nMap: Federica Gazzelloni\",\n       color=\"Age in days\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(family=\"Mukta\"),\n        legend.position = c(0.1,-0.1),\n        legend.direction = \"horizontal\",\n        legend.background = element_blank(),\n        legend.key.size = unit(10,units=\"pt\"),\n        legend.text = element_text(size=4),\n        legend.title = element_text(size=5),\n        plot.title = element_text(vjust=3,hjust=0.5),\n        plot.subtitle = element_text(vjust=3,hjust=0.5),\n        plot.caption = element_text(vjust=-9,hjust=0.5),\n        plot.title.position = \"panel\",\n        # margin(t = 0, r = 0, b = 0, l = 0, unit = \"pt\")\n        plot.margin = margin(10,1,20,1,unit = \"pt\"),\n        plot.background = element_rect(color = \"black\",fill=\"grey95\",size=0.05),\n        panel.background = element_rect(color = \"grey95\",fill=\"grey95\"))\n\n\n# add a little Africa on a side\n# remotes::install_github(\"afrimapr/afrilearndata\")\n# library(afrilearndata)\nafr_sf <- afrilearndata::africountries\n# afr_sf%>%head\n\ngamb_sf <- afr_sf%>%filter(name_sw==\"Gambia\")\n\n\nafrimap<-   ggplot()+\n  geom_sf(data=afr_sf,\n          aes(fill=pop_est),\n          size=0.1,\n          show.legend = F,alpha=0.1) +\n  geom_sf(data=gamb_sf,\n          fill=\"brown\",alpha=0.9)+\n  theme_void()\n\nDraw the plot\n\ncowplot::ggdraw()+\n  draw_plot(map)+\n  draw_plot(afrimap,scale = 0.2,\n            x=0.3,y=0.25)\n\nSave it\n\nggsave(\"day1_points.png\",\n       dpi=300,\n      bg=\"grey95\",\n       width = 6,height = 3.5)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day4_color_friday_green/day4_color_friday_green.html",
    "href": "mapchallenges/cases2022/posts2022/day4_color_friday_green/day4_color_friday_green.html",
    "title": "Color friday green",
    "section": "",
    "text": "library(osmdata)\nlibrary(mapdeck)\nlibrary(cowplot)\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Island Moments\",\n                family=\"Island Moments\")\n\n\n\nms <- opq(c(12.4146,41.7836,12.5327,42.0064)) %>% \n  add_osm_feature (key = \"highway\") %>%\n  osmdata_sf (quiet = FALSE)\n\n# save(ms,file=\"data/ms.RData\")\n# mapdeck::set_token(\"your-token\") easy to get just register on the web-site mapbox.com\n# restrict the polygons to road access\nlines<- ms$osm_lines%>%filter(!is.na(access))\n# style: https://docs.mapbox.com/api/maps/styles/\n# fonts: curl \"https://api.mapbox.com/fonts/v1/fgazzelloni?access_token=pk.eyJ1IjoiZmdhenplbGxvbmkiLCJhIjoiY2w5enphdHR3MGtkMjN2bnZja2s1eWRuaCJ9.akYCOcUXC7OJ7PkF1JZ86A\n\n# make the map\nmapdeck(style = 'mapbox://styles/mapbox/navigation-night-v1',\n        location =  c(12.4924,41.8903),\n        padding=1,\n        zoom = 12) %>%\n  add_path(data = lines,\n           layer_id = \"ms\",\n           stroke_colour = \"#2e7521\",\n           stroke_width = 0,\n           stroke_opacity = 0,\n           tooltip = \"ROAD_NAME\",\n           auto_highlight = TRUE,\n           legend = FALSE,\n           update_view = FALSE) %>%\n  add_polygon(data = ms$osm_polygons,\n              layer_id = \"ms\",\n              stroke_colour = \"#6ced55\",\n              stroke_width = 20,\n              stroke_opacity = 200,\n              fill_opacity = 0,\n              update_view = FALSE) \n\n\n# draw the map\nggdraw()+\n  draw_image(\"base_map.png\")+\n  draw_label(\"#30DayMapChallenge 2022 Day 4: Color Friday Green | DataSource: osmdata Rome, Italy | Map: Federica Gazzelloni (@fgazzelloni)\",\n             x=0.5,y=0.02,size=7,\n             fontfamily = \"Island Moments\",\n             color=\"#6ced55\")+\n  labs(title=\"Historic district of Rome\") + \n  theme_bw()+\n  theme(plot.title = element_text(family=\"Island Moments\",face=\"bold\",color=\"#6ced55\"),\n        plot.background = element_rect(colour = \"#43605b\",fill = \"#43605b\"),\n        panel.background = element_rect(colour = \"#43605b\",fill = \"#43605b\")) \n \n\n# save it! \n# ggsave(\"day4_color_friday_green_2.png\",\n#        dpi=200,\n#        width = 8.86,\n#        height = 6.04)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day12_scale/day12_scale.html",
    "href": "mapchallenges/cases2022/posts2022/day12_scale/day12_scale.html",
    "title": "Scale",
    "section": "",
    "text": "library(leaflet)\nhurricanecolors <- RColorBrewer::brewer.pal(12,\"Paired\")\n \n  leaflet(atlStorms2005) %>%\n  addTiles %>%\n  addPolylines(color = hurricanecolors,opacity=.8) %>%\n  addLegend(colors = rep(hurricanecolors,2),labels = atlStorms2005$Name,\n            title = \"Tropical Storms of 2005\",bins =24)\n\n######## ######## ######## ######## ######## ######## ######## \n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(leaflet.extras)\n# leaflet.extras::\nlibrary(leaflet.providers)\nleaflet.providers::get_providers()\nleaflet.providers::providers_loaded()\nleaflet.providers::use_providers(get_providers(\"1.4.0\"))\n\ndf <-atlStorms2005%>%as.data.frame()\ncentroids <- atlStorms2005%>%\n  st_as_sf()%>%\n  as.data.frame()\n\n\n\n\ndf2 <- atlStorms2005%>%\n  st_as_sf()%>%\n  st_centroid()%>%\n  st_coordinates()%>%\n  unique()%>%\n  cbind(df)%>%\n  mutate(X=as.numeric(X),Y=as.numeric(Y),\n         log_press=log10(MinPress),\n         MaxWind=as.numeric(MaxWind),\n         MinPress=as.numeric(MinPress))\n\nscaleBarOptions(\n  maxWidth = 100,\n  metric = TRUE,\n  imperial = TRUE,\n  updateWhenIdle = TRUE\n)\n\ndf2%>%\n  st_as_sf(coords=c(1,2))%>%\n  st_centroid()\n\n\npal <- leaflet::colorNumeric(palette = \"Y10rRd\",\n                             domain = df2$MaxWind)\nmap_leaflet <- leaflet(df2,\n        options = leafletOptions(zoomControl = FALSE,maxZoom = 10)) %>%\n  setView(lng =-47.4, lat =  39.75 , zoom = 10) %>%\n  addTiles() %>%\n  addProviderTiles(\"OpenTopoMap\") %>%\n  addPolylines(lng = ~X,lat = ~Y,\n               color = hurricanecolors,opacity=.8) %>%\n  addLegend(colors = rep(hurricanecolors,2),labels = atlStorms2005$Name,\n            title = \"Tropical Storms of 2005\",bins =24) %>%\n  addCircles(lng = ~X,lat=~Y,\n             radius = ~ MaxWind^log_press/10, \n             stroke = T,\n             weight = ~log_press^1,\n             color=\"navy\") %>%\n  addScaleBar( options = scaleBarOptions())%>%\n  addLegend(pal = pal, \n            values = ~MaxWind,\n            opacity = 0.5,\n            position = \"bottomright\")\n\nlibrary(htmlwidgets)\nlibrary(htmltools)\nsaveWidget(map_leaflet, file=\"day12_scale.html\")"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day28_3D/day28_3D.html",
    "href": "mapchallenges/cases2022/posts2022/day28_3D/day28_3D.html",
    "title": "3d",
    "section": "",
    "text": "library(tidyverse)\nlibrary(sf)\nlibrary(tigris)\nlibrary(rayshader)\nlibrary(PrettyCols)\nlibrary(stars)\n\n# inspiration:\n# https://github.com/Pecners/30DayMapChallenge/blob/main/R/day_21_kontur/colorado.R\n\n# url <- \"https://geodata-eu-central-1-kontur-public.s3.amazonaws.com/kontur_datasets/kontur_population_US_20220630.gpkg.gz\"\n# downloader::download(url, dest=\"data/kontour_pop_cr.zip\", mode=\"wb\") \n\ndata <- st_read(\"data/kontur_population_US_20220630.gpkg\")\n# save(data,file=\"data/data.RData\")\n\ns <- tigris::states() |> \n  st_transform(crs = st_crs(data))\n# save(s,file=\"data/s.RData\")\n\ns%>%count(NAME)\n\nor <- s |> \n  filter(NAME == \"Oregon\")\n\n\nor_d <- st_intersection(data, or)\n# save(or_d,file=\"data/or_d.RData\")\nload(\"data/or_d.RData\")\n\nbb <- st_bbox(or_d)\nyind <- st_distance(st_point(c(bb[[\"xmin\"]], bb[[\"ymin\"]])), \n                    st_point(c(bb[[\"xmin\"]], bb[[\"ymax\"]])))\nxind <- st_distance(st_point(c(bb[[\"xmin\"]], bb[[\"ymin\"]])), \n                    st_point(c(bb[[\"xmax\"]], bb[[\"ymin\"]])))\n\nxind / yind\n\nsize <- 2500\nrast <- st_rasterize(or_d |> \n                       select(population, geom),\n                     nx = floor(size * (xind/yind)), ny = size)\n# save(rast,file=\"data/rast.RData\")\nload(\"data/rast.RData\")\n\nmat <- matrix(rast$population, \n              nrow = floor(size * (xind/yind)), \n              ncol = size)\n\npal <- \"pink_greens\"\n\nc1 <- prettycols(\"TangerineBlues\")\ncolors <- c(c1[c(6:8, 2:4)])\n# swatchplot(colors)\n\nscico::scico_palette_show()\ncolors <- scico::scico(6,palette=\"bamako\")\n\ntexture <- grDevices::colorRampPalette(colors, bias = 2)(256)\n# swatchplot(texture)\n\nrgl::rgl.close()\n\nmat |> \n  height_shade(texture = texture) |> \n  plot_3d(heightmap = mat, \n          solid = FALSE,\n          soliddepth = 0,\n          z = 20,\n          shadowdepth = 0,\n          windowsize = c(800,800), \n          phi = 90, \n          zoom = 1, \n          theta = 0, \n          background = \"white\") \n\nrayshader::render_camera(phi = 50, \n                         zoom = .85, \n                         theta = 45)\nrender_snapshot(title_text = \"#30DayMapChallenge Day 28:3D | Graphics: @fgazzelloni\\n\\nOregon Population density, US\",\n                title_color = \"navy\",\n                title_font = \"Comic Sans\",\n                title_size = 25,\n                title_bar_alpha = 0.5,\n                title_bar_color = \"#a5a7c4\",\n                vignette = 0.2,\n                filename = \"day28_3D2.png\")"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day16_minimal/day16_minimal.html",
    "href": "mapchallenges/cases2022/posts2022/day16_minimal/day16_minimal.html",
    "title": "Minimal",
    "section": "",
    "text": "library(tidyverse)\nlibrary(spData)\nlibrary(RColorBrewer)\nlibrary(rcartocolor)\n\n# Load libraries\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Kanit\",\n                family=\"Kanit\")\n\n\n\nmy_df <- spData::boston.c\nmy_df %>%\n  ggplot(aes(x=LON,y=LAT,group=MEDV))+\n  geom_hex(aes(fill=MEDV),\n           size=0.05,\n           color=\"grey20\",\n           bins=60,\n           alpha=0.8)+\n  coord_equal()+\n  labs(title=\"\\nBoston Housing\",\n       subtitle=\"UTM Zone 19\",\n       caption=\"Median values of owner-occupied housing in USD 1000\\n#30DayMapChallenge 2022 Day 16: Minimal\\nDataSource: Boston Housing from {spData::boston.c}\\nMap: Federica Gazzelloni\")+\n  scico::scale_fill_scico(palette = \"lajolla\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family=\"Kanit\",color=\"gold\"),\n        plot.title = element_text(size=20),\n        legend.background = element_blank())\n\n\nggsave(\"day16_minimal.png\",\n       bg=\"black\",\n       width = 8.25,\n       height = 6.31,\n       dpi=280)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day15_food_drink/day15_food_drink.html",
    "href": "mapchallenges/cases2022/posts2022/day15_food_drink/day15_food_drink.html",
    "title": "Food / Drink",
    "section": "",
    "text": "Overview\nMap of European Countries Foodborne Campylobacter Outbreaks, data is from www.efsa.europa.eu\nSource:\n\nhttps://www.r-bloggers.com/2016/10/mapping-efsas-food-consumption-data-with-tmap/\n\nUpdates:\n\nhttps://rdrr.io/cran/tmaptools/man/deprecated_functions.html\n\nFoodborne outbreak:\n\nhttps://www.efsa.europa.eu/en/microstrategy/FBO-dashboard\n\n\nlibrary(tidyverse)\ndf <- readxl::read_excel(\"data/FBO_dashboard_2015-2020.xlsx\",\n                         skip = 2)\n\n\ndf1 <- df%>%\n  select(1,contains(\"outbreak\"))\n\n\nnames(df1) <- c(\"country\",unlist(df1[1,2:23]))\n\n\ndf2 <- df1%>%\n  filter(!is.na(country))\n\ndf2%>%head\n\n\ndf2[is.na(df2)]<-\"0\"\n\n\ndf3 <- df2%>%\n  select(-country)%>%\n  mutate(across(where(is.character),as.numeric))%>%\n  cbind(country=df2$country)%>%\n  relocate(country)%>%\n  #select(-\"0\") %>%\n  pivot_longer(cols = 2:23,names_to=\"agent\",values_to=\"values\")%>%\n  mutate(agent=case_when(str_detect(agent,\"other|Other|unknwon|Unknown\")~\"Other\",\n                         TRUE~agent)) %>%\n  filter(!agent==\"Other\")\n\n\nlibrary(tmap)\ndata(\"World\")\n\nEU <- World%>%\n  filter(continent==\"Europe\")\n\n\ntm_shape(EU)+\n  tm_polygons()+\n  tm_text('name',size = .1,\n          col = \"black\",\n          bg.color = \"white\")\n\n\nsetdiff(df3$country,EU$name)  \nsetdiff(EU$name,df3$country)\n\n\ndf4 <- df3%>%\n  mutate(country=case_when(str_detect(country,\"Bos\")~\"Bosnia and Herz.\",\n                           country==\"Czechia\"~\"Czech Rep.\",\n                           country==\"Republic of North Macedonia\"~\"Macedonia\",\n                           TRUE~country))%>%\n  filter(!country%in%c(\"Cyprus\",\"Malta\"))\n\n\nsetdiff(df4$country,EU$name)  \nsetdiff(EU$name,df4$country)\n\n\nlibrary(rgdal)\nlibrary(raster) \n\ndf5 <- df4%>%\n  group_by(country)%>%\n  summarise(agents_mean=mean(values)) %>%\n  ungroup()\n\n\neu1 <- EU%>%\n  filter(!name%in%c(\"Albania\",\"Belarus\",\n                    \"Kosovo\",\"Moldova\",\n                    \"Russia\",\"Slovenia\",\n                    \"Ukraine\"))%>%\n  left_join(df5,by=c(\"name\"=\"country\"))\n\n\nlibrary(sf)\neu1%>%st_bbox()\n\nall <- World%>%\n  left_join(df5,by=c(\"name\"=\"country\"))\n\n\ntmap_mode(\"plot\")\ndata(World, metro, rivers, land)\n\n\nspread_df <-  df3%>%\n    spread(agent,values)%>%\n    mutate(country=case_when(str_detect(country,\"Bos\")~\"Bosnia and Herz.\",\n                             country==\"Czechia\"~\"Czech Rep.\",\n                             country==\"Republic of North Macedonia\"~\"Macedonia\",\n                             TRUE~country))%>%\n    filter(!country%in%c(\"Cyprus\",\"Malta\"))\n    \n\ndf_map<-  EU%>%\n    filter(!name%in%c(\"Albania\",\"Belarus\",\n                      \"Kosovo\",\"Moldova\",\n                      \"Russia\",\"Slovenia\",\n                      \"Ukraine\"))%>%\n    left_join(spread_df,by=c(\"name\"=\"country\"))\n\n\ndf_map%>%st_bbox()\nbbox <- c(xmin=-34.524754,\n          ymin=20.053389,\n          xmax=31.516092,\n          ymax=80.657144)\n\n\nmap <- tm_shape(df_map,bbox=bbox) +\n  tm_polygons(col='Campylobacter',\n              title = \"Agents\") +\n  tm_text('iso_a3',\n          fontfamily = \"Roboto Condensed\",\n          root = 2,\n          size = .5,\n          col = \"black\",\n          bg.color = \"white\") +\n  tm_credits(\n    text=\"#30DayMapChallenge 2022 Day 15: Food/drink\\nDataSource: www.efsa.europa.eu | Map: Federica Gazzelloni\",\n    align = \"center\",\n    size=4,\n    fontface = \"bold\",\n    fontfamily = \"Roboto Condensed\",\n    position = \"center\")+\n  tm_scale_bar(text.size = 0.5,width = 0.4,\n               position = c(0.5,0.1))+\n  tm_style(\"natural\", \n           inner.margins = .01)+\n  tm_layout(title=\"European countries\\nFoodborne Campylobacter outbreaks\",\n            main.title.fontfamily=\"Roboto Condensed\",\n            legend.text.size=0.8,\n            legend.text.fontfamily=\"Roboto Condensed\",\n            legend.just = 2,\n            legend.width = 0.4)\n\n\ntmap_save(map,\"day15_food_drink.png\",width = 6.58,\n          height=7.24\n          ) # Saving 6.58 x 7.24 in image"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day3_polygons/day3_polygons.html",
    "href": "mapchallenges/cases2022/posts2022/day3_polygons/day3_polygons.html",
    "title": "Polygons",
    "section": "",
    "text": "source: https://walker-data.com/census-r/mapping-census-data-with-r.html\nLoad libraries\n\nlibrary(tidyverse)\n#library(kableExtra)\nlibrary(tidycensus)\noptions(tigris_use_cache = TRUE)\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Poor Story\",family=\"Poor Story\")\n\n# Census API key\n# census_key <- \"bd6ed5f4a30d3672816bb179889338b50ca87a3f\"\n# census_api_key(census_key, install = TRUE)\n\n# Find census data\n# https://api.census.gov/data.html\n\n# Dataset used to identify geography availability in the 5-year ACS Detailed Tables\nacs5_vars <- load_variables(2020, \"acs5\")\n# save(acs5_vars,file=\"data/acs5_vars.RData\")\n############## PRIVATE HEALTH INSURANCE ############## \n# female\n# select the variable of interest: B27002_030\nacs5_vars%>%\n  filter(geography==\"tract\",\n         concept==\"PRIVATE HEALTH INSURANCE STATUS BY SEX BY AGE\",\n         label==\"Estimate!!Total:!!Female:\") \n\n\nprivate_h_insurance_f <- get_acs(\n  geography = \"tract\", \n  variables = \"B27002_030\",\n  state = \"NY\", # fips 41\n  year = 2020,\n  geometry = TRUE\n)\n# save(private_h_insurance_f,file=\"data/private_h_insurance_f.RData\")\n\n# male\n# select the variable of interest: B27002_002\nacs5_vars%>%\n  filter(geography==\"tract\",\n         concept==\"PRIVATE HEALTH INSURANCE STATUS BY SEX BY AGE\",\n         label==\"Estimate!!Total:!!Male:\") \n\n\nprivate_h_insurance_m <- get_acs(\n  geography = \"tract\", \n  variables = \"B27002_002\",\n  state = \"NY\", # fips 41\n  year = 2020,\n  geometry = TRUE\n)\n# save(private_h_insurance_m,file=\"data/private_h_insurance_m.RData\")\n\n# Map\nggplot(private_h_insurance_f) +\n  geom_sf(aes(fill=estimate),\n          size=0.2,\n          show.legend = T) +\n  scale_fill_gradient2(name=\"Female\",\n                       low=\"white\",mid=\"grey80\",high=\"navy\")+\n  geom_sf(data = private_h_insurance_m, \n          aes(color=estimate),\n          size=0.2,\n          fill=NA)+\n  scale_color_gradient2(name=\"Male\",\n                        low=\"white\",mid=\"grey40\",high=\"gold\")+\n  labs(title=\"Private health insurance status in New York\",\n       subtitle=\"Female and Male all ages\",\n       caption=\"5-year ACS Detailed Tables - Year 2020\\n#30DayMapChallenge 2022 Day 3: Polygons\\nDataSource: census.gov | Map: Federica Gazzelloni (@fgazzelloni)\") +\n  ggthemes::theme_map() +\n  theme(text = element_text(family=\"Poor Story\"),\n        plot.caption = element_text(lineheight = 1.5),\n        legend.position = c(0.85,0.3),\n        #legend.direction = \"horizontal\",\n        legend.background = element_blank(),\n        legend.text = element_text(size=6),\n        legend.key.size = unit(8,units = \"pt\"))\n\n\n# ggsave(\"day3_polygons.png\",\n#        bg=\"white\",\n#        dpi=200)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day14_hexagons/day14_hexagons.html",
    "href": "mapchallenges/cases2022/posts2022/day14_hexagons/day14_hexagons.html",
    "title": "Hexagons",
    "section": "",
    "text": "# Load the library\nlibrary(tidyverse)\nlibrary(geojsonio)\nlibrary(sf)\n# Set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Island Moments\",\n                family=\"Island Moments\")\n\n\n\nus_covid <- read_csv(\"~/Documents/R/R_general_resources/30DayMapChallenge/2022/day14_hexagons/data/covid_cases_by_County.csv\")\n\n\ncovid_data <- us_covid%>%\n  select(county,\n         county_fips,\n         state,\n         county_population,\n         covid_cases_per_100k) %>%\n  distinct()\n\n\n# source: https://walker-data.com/tidycensus/reference/get_decennial.html\nlibrary(tidycensus)\noptions(tigris_use_cache = TRUE)\n\n\ntarr <- get_acs(geography = \"county\",\n                variables = \"B19013_001\",\n                geometry = TRUE, \n                year = 2020)\n\n# save(tarr,file=\"data/tarr.RData\")\nload(\"data/tarr.RData\")\n\ntarr%>%count(NAME)\n\ntarr2 <- tarr%>%\n  separate(NAME,into=c(\"county\",\"name\"),remove=F,sep=\",\")\n\n\ncoords <- tarr2%>%\n  st_centroid() %>%\n  st_coordinates() \n\n# check the dimensions\ntarr2%>%dim\ncoords%>%dim\ncovid_data%>%dim\n\nfull <- cbind(tarr2,coords)\n\ndf <- covid_data%>%\n  left_join(full,by=c(\"county\"=\"county\")) %>%\n  distinct()%>%\n  mutate(county=as.factor(county))\n\ndf2 <- covid_data%>%\n  left_join(tarr2,by=c(\"county\"=\"county\")) %>%\n  distinct()\n\n\ndf3 <- df2%>%\n  st_as_sf()\n\n\ndf%>%DataExplorer::profile_missing()\n# A tibble: 12 × 3\n# feature              num_missing pct_missing\n# <fct>                      <int>       <dbl>\n#   1 county                         0  0         \n# 2 county_fips                    0  0         \n# 3 state                          0  0         \n# 4 county_population              1  0.00000180\n# 5 covid_cases_per_100k           0  0         \n# 6 GEOID                       4911  0.00884   \n# 7 NAME                        4911  0.00884   \n# 8 name                        4911  0.00884   \n# 9 variable                    4911  0.00884   \n# 10 estimate                    4987  0.00898   \n# 11 moe                         4987  0.00898   \n# 12 geometry                       0  0   \n\n\n\n  ggplot()+\n# geom_point(data= df, aes(X,Y),inherit.aes = F)+\n  stat_summary_hex(data= df, aes(x=X,y=Y,z=covid_cases_per_100k),\n           linewidth=0.01,\n           inherit.aes = F)+\n    geom_sf(data=tarr2,aes(geometry=geometry),\n            fill=NA,\n            linewidth=0.05)+\n   coord_sf(xlim = c(-125,-68),ylim = c(20,50))+\n    scale_fill_viridis_c(option = \"H\")+\n    labs(title=\"United States of America\",\n         subtitle = \"Covid Cases per 100k\",\n         fill=\"Value\",\n         caption=\"#30DayMapChallenge 2022 Day 14: Hexagons\\nDataSource: CDC Covid data & Census data from {tidycensus}\\nMap: Federica Gazzelloni (@fgazzelloni)\")+\n    ggthemes::theme_map()+\n    theme(plot.caption = element_text(lineheight = 1.5,size=5),\n          plot.title = element_text(size=14),\n          legend.background = element_blank())\n\n  \n  ggsave(\"day14_hexagons.png\",\n         bg=\"grey90\",\n         width=6.78,\n         height = 5.78,\n         dpi=200)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day29_out_comfort_zone/day29_out_comfort_zone.html",
    "href": "mapchallenges/cases2022/posts2022/day29_out_comfort_zone/day29_out_comfort_zone.html",
    "title": "Out of comfort zone",
    "section": "",
    "text": "link: https://studio.foursquare.com/public/1525b083-1b3d-46ec-a661-0833ca5e87cb\n\n\nlibrary(tidyverse)\nlibrary(cowplot)\nggdraw()+\n  draw_image(\"basemap.png\")+\n  draw_image(\"legend1.png\",\n             scale=0.5,\n             x=-0.43,y=0)+\n  draw_label(\"United States of America precipitations\",\n             x=0.5,y=0.93,\n             size=18,\n             color=\"black\") +\n  draw_label(\"Permanent amount of precipitations on Global Railways\\n#30DayMapchallenge 2022 Day 29: Out of my comfort zone | Tool: studio.foursquare.com | Map: @fgazzelloni\",\n             x=0.5,y=0.05,\n             size=9,\n             color=\"black\") \nggsave(\"test.png\",\n       bg=\"white\",\n       width=8.92,\n       height=5.9)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day17_a_map_without_computer/day17_a_map_without_computer.html",
    "href": "mapchallenges/cases2022/posts2022/day17_a_map_without_computer/day17_a_map_without_computer.html",
    "title": "A Map Without Computer",
    "section": "",
    "text": "Overview\nThis is a self standing Ocean World Globe."
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day5_ukraine/day5_ukraine.html",
    "href": "mapchallenges/cases2022/posts2022/day5_ukraine/day5_ukraine.html",
    "title": "Ukraine",
    "section": "",
    "text": "ukraine war data\n\nhttps://data.humdata.org/\n\n\nunzip(\"data/ukr-border-crossings-090622-2.zip\",exdir = \"data/conflict\")\n\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(rgdal)\nlibrary(raster)\nlibrary(ggspatial)\n\n# geodata\nykr <- raster::getData('GADM', country = \"UKR\", level = 1)\n\nload(\"gadm36_UKR_1_sp.rds\")\ndf <-gadm36_UKR_1_sp %>%st_as_sf()\n\nrosm::osm.types()\n\nquartz()\nggplot() +\n   annotation_map_tile(type = \"osm\") +\n   layer_spatial(df)\n ggsave(\"base_map.png\")\n\n\n\n\n#### extras #######\nsf_data <- ykr %>% # class sp\n   sf::st_as_sf() %>%\n   st_transform(crs=4326)\nukr <- readOGR(\"data/conflict\")\nquartz()\nukr %>%\n  as.data.frame() %>%\n  janitor::clean_names() %>%\n  ggplot(aes(long,lat,group=country))+\n  annotation_map_tile(type = \"osm\") +\n  geom_sf(data=sf_data,inherit.aes = F,fill=NA) +\n  geom_text(aes(label=name_eng),check_overlap = T)+\n  geom_point(aes(color=country),shape=21)+\n  coord_sf(crs=4326)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day21_kontur_pop_dataset/day21_kontour_pop_dataset.html",
    "href": "mapchallenges/cases2022/posts2022/day21_kontur_pop_dataset/day21_kontour_pop_dataset.html",
    "title": "Data: Kontur Population Dataset",
    "section": "",
    "text": "library(tidyverse)\nlibrary(sf)\n\n\n\n# Load libraries\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Noto Serif\",\n                family=\"Noto Serif\")\n\n# KONTOUR DATASETS\n# https://data.humdata.org/dataset/kontur-population-dataset\n\nurl <- \"https://geodata-eu-central-1-kontur-public.s3.amazonaws.com/kontur_datasets/kontur_population_CR_20220630.gpkg.gz\"\ndownloader::download(url, dest=\"data/kontour_pop_cr.zip\", mode=\"wb\") \n\nkontur <- sf::st_read(\"data/kontour_pop_cr\")\n\n\nna <- rnaturalearth::ne_countries(continent = \"North America\",\n                                  country = c(\"Costa Rica\",\"Nicaragua\",\"Panama\"))\n\nna_sf <- na %>% st_as_sf()\n\n# map\nggplot() +\n  geom_sf(data = na_sf,\n          mapping=aes(geometry=geometry),\n          fill=\"#6b493e\",color=\"#6b493e\",\n          alpha=0.3,\n          linewidth=0.02)+\n  geom_sf(data = kontur,\n          fill=\"#6b493e\",color=\"#6b493e\",\n          linewidth=0.01) +\n  geom_sf(data = kontur, \n          aes(fill = population,\n              colour = population),\n          linewidth=0.02,\n          show.legend = F) +\n  scale_fill_gradient(low=\"white\",high = \"red\")+\n  scale_color_gradient(low=\"#006241\",high = \"white\")+\n  coord_sf(xlim = c(-87,-82), ylim = c(8,12), expand = 0) +\n  theme_void() +\n  theme(legend.position = \"none\",\n        plot.margin = margin(10, 10, 10, 10),\n        plot.background = element_rect(fill = \"#6a7a74\", \n                                       colour = \"#6a7a74\"),\n        panel.background = element_rect(fill = \"#6a7a74\", \n                                        colour = \"#6a7a74\")) \n\n\n\nggsave(\"sj_cr_base_map.png\",\n       width=6.17,\n       height=4.86,\n       dpi=320)\n\n\n# draw the map\n\nlibrary(cowplot)\nggdraw()+\n  draw_image(\"sj_cr_base_map.png\")+\n  draw_label(\"Costa Rica:\\nPopulation Density\",\n             x=0.03,y=0.3,\n             size=24,\n             hjust=0,\n             fontfamily = \"Noto Serif\")+\n  draw_label(\"#30DayMapchallenge 2022 Day 21: Kontour Population dataset\\nDataSource: @KonturInc | Map: Federica Gazzelloni (@fgazzelloni)\",\n             x=0.03,y=0.06,\n             size=9,\n             hjust=0, \n             fontfamily = \"Noto Serif\")\n\n\n# save final output\nggsave(\"day21_kontour_pop_dataset.png\",\n       width=6.17,\n       height=4.86,\n       dpi=320)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day27_music/day27_music.html",
    "href": "mapchallenges/cases2022/posts2022/day27_music/day27_music.html",
    "title": "Music",
    "section": "",
    "text": "library(tidyverse)\nlibrary(sf)\n\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Syne Mono\",\n                family=\"Syne Mono\")\n\n\n\n\nartists <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-27/artists.csv')\n\nstates <- map_data(\"state\")\n\nstates <- rnaturalearth::ne_states(country =\"united states of america\",\n                                   returnclass = \"sf\") %>%\n  filter(!name==\"Alaska\")\n\n\nstates%>%\n  ggplot()+\n  geom_sf()\n\n\nmy_states <- artists%>%\n  count(state)%>%\n  pull(state)\n\nartists1 <- artists%>%\n  rename(name=state)%>%\n  group_by(race) %>%\n  mutate(artists_avg=log10(mean(artists_n,na.rm = TRUE)))%>%\n  ungroup()\n\nartists1%>%DataExplorer::profile_missing()\n\nfull <- states %>%\n  filter(name%in%my_states) %>%\n  merge(artists1,by=\"name\")\n  \nfull %>%\n  ggplot()+\n  geom_sf(aes(fill=artists_avg))+\n  scico::scale_fill_scico(\"N.Artists\")+\n  coord_sf(xlim = c(-130,-60))+\n  labs(title=\"US Artists\",\n       subtitle=\"states distribution by avg numbers (log tranf)\",\n       caption = \"#30DayMapChallenge 2022 Day 27: Music\\nDataSource: #TidyTuesday 2022 week 39 US Artists | Map: Federica Gazzelloni (@fgazzelloni)\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family=\"Syne Mono\"),\n        legend.background = element_blank(),\n        plot.background = element_rect(color=\"#6b493e\",linewidth=1.5))\n\n\nggsave(\"day27_music.png\",\n       dpi=280, \n       width = 8.47,\n       height =5.07)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day23_movement/day23_movement.html",
    "href": "mapchallenges/cases2022/posts2022/day23_movement/day23_movement.html",
    "title": "Movement",
    "section": "",
    "text": "Source\n\nhttps://data.world/iom/b8e28bd0-8bcb-47a5-bc90-775562d944a4/workspace/file?filename=2017-flows-to-europe-overview-dataset-3.xlsx\n\n\nlibrary(tidyverse)\nlibrary(sf)\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Averia Libre\",\n                family=\"Averia Libre\")\n\nlibrary(readxl)\nX2017 <- read_excel(\"R_general_resources/30DayMapChallenge/2022/day23_movement/data/2017-flows-to-europe-overview-dataset-3.xlsx\", \n                    sheet = \"Origin Nationalites ITA-GRC-ESP\")                 \n                    \nworld <- rnaturalearthdata::countries110                    \nitaly <- world_geo_data%>%\n  filter(sovereignt==\"Italy\")\n\ndata <- X2017%>%\n  janitor::clean_names() %>%\n  left_join(world_geo_data,by=c(\"iso3_of_origin\"=\"sov_a3\"))\n\n\narrivals <- data%>%\n  group_by(iso3_of_origin) %>%\n  summarize(arrivals=sum(cumulative_arrivals))\n\ndata1 <- merge(arrivals,data) %>%\n  st_as_sf()\n\n\ndata_centroids <- data%>%\n  st_as_sf()%>%\n  st_centroid()\n\nitaly_centroid <- world_geo_data%>%\n  filter(sovereignt==\"Italy\")%>%\n  st_centroid()\n\n\n# ggplot(world_geo_data)+\n#   geom_sf()+\n#   geom_sf(data=data,aes(geometry=geometry,color=iso3_of_origin),\n#           show.legend = F) +\n#   geom_sf(data= data1_centroids)\n\n\nstart_coords <- data_centroids%>%\n  st_coordinates()%>%\n  as.data.frame()%>%\n  filter(!X==\"NaN\")\n\nend_coords <- italy_centroid%>%\n  st_coordinates()%>%\n  as.data.frame()\n\n\ndf <- cbind(start_coords,end_coords)\n\nnames(df)<- c(\"lon_st\",\"lat_st\",\"lon_en\",\"lat_en\")\ndf%>%head  \n\n\nen <- df %>%\n  st_as_sf(coords=c(\"lon_en\",\"lat_en\"),crs=4326)%>%\n  st_geometry()\n\nst <- df %>%\n  st_as_sf(coords=c(\"lon_st\",\"lat_st\"),crs=4326)%>%\n  st_geometry()\n\n\n# st_connect(st,en)%>%\n#   ggplot()+\n#   geom_sf()\n\nlines <- st_connect(st,en)\nst_bbox(world_geo_data)\n\nlibrary(scico)\nggplot(world_geo_data)+\n  geom_sf(fill=\"grey90\",alpha=0.2)+\n  geom_sf(data=italy,fill=\"#c15a4f\")+\n  geom_sf(data=data1,aes(geometry=geometry,\n                         fill=arrivals,\n                         color=iso3_of_origin),\n          linewidth=0.1,\n          show.legend = T) +\n  guides(color=\"none\",alpha=\"none\") +\n  geom_sf(data= data1_centroids,\n          aes(color=iso3_of_origin),\n          size=0.05,\n          show.legend = FALSE)+\n  geom_sf(data=lines,\n          linewidth=0.01,\n          color=\"white\")+\n  coord_sf(xlim = c(-170,170),ylim = c(-80,80)) +\n  #scale_alpha_binned()+\n  scico::scale_color_scico_d(begin=0,end = 1)+\n  scico::scale_fill_scico(begin=0,end = 1,\n                          #alpha=0.5,\n                          palette = \"lisbon\",\n                          direction = 1)+\n  labs(title=\"Movements to Europe through the Mediterranean and Western Balkans migration routes\",\n       subtitle=\"2017 flows: Italy overview\",\n       fill=\"Arrivals\",\n       caption=\"#30DayMapChallenge 2022 Day 23: Movement\\nDataSource: @humdata | Map: Federica Gazzelloni (@fgazzelloni)\")+\n  ggthemes::theme_map() +\n  theme(text=element_text(family=\"Averia Libre\"),\n        plot.title = element_text(vjust = 2),\n        plot.caption = element_text(lineheight = 1.1,vjust = 2),\n        legend.background = element_blank(),\n        legend.position = c(0.05,0.1))\n\n\nggsave(\"day23_movement.png\",\n       bg=\"#89a5b9\",\n       width = 8.22,\n       height = 5.26,\n       dpi=280)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day30_remix/day30_remix.html",
    "href": "mapchallenges/cases2022/posts2022/day30_remix/day30_remix.html",
    "title": "Remix",
    "section": "",
    "text": "# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Poor Story\",family=\"Poor Story\")\n\nlibrary(leaflet)\n# library(leaflet.extras)\n# library(leaflet.providers)\n\n# fileid<- \"d069b4c5-ec5b-c750-45aa-0a13f57dc35a\"\n#Geographic Bounding Box\n# bbox<- c(174.064747966174,.345239694,-35.2867580621,-35.1399271488)\n\n\nlibrary(tidyverse)\nlibrary(rgdal)\nlibrary(sf)\n# Department of Conservation (DOC) - Campsites. Dataset shows all campsites.\n# https://catalogue.data.govt.nz/dataset/doc-campsites3\nshp <- readOGR(\"data/DOC_Campsites\")\n\nplot(shp)\nshp%>%View\nshp@proj4string\nshp@data%>%\n  ggplot()+\n  geom_point(aes(x,y))\n  \ndf <- shp@data %>%\n  st_as_sf(coords=c(\"x\",\"y\"),\n           crs=\"+proj=tmerc +lat_0=0 +lon_0=173 +k=0.9996 +x_0=1600000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs\") %>%\n  sf::st_transform(crs = \"+proj=longlat +datum=WGS84\")  %>%\n  tibble() \n\n\ndf1 <- shp@data %>%\n  st_as_sf(coords=c(\"x\",\"y\"),\n           crs=\"+proj=tmerc +lat_0=0 +lon_0=173 +k=0.9996 +x_0=1600000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs\") %>%\n  sf::st_transform(crs = \"+proj=longlat +datum=WGS84\")  %>%\n  st_coordinates() %>%\n  bind_cols(df) \n\n\ndf2<- df1%>%\n  mutate(dogs=ifelse(dogsAllowe==\"No dogs\",\"no\",\"yes\"),\n         .after=Y)\n\ndf1%>%View\ntable(df2$dogs)\ntable(df2$campsiteCa)\n\ngetColor <- function(df2) {\n  sapply(df2$dogs, function(dogs) {\n    ifelse(dogs == \"yes\",\"green\",\"red\")})\n    }\n\nicons <- awesomeIcons(\n  icon = 'ios-close',\n  iconColor = 'black',\n  library = 'ion',\n  markerColor = getColor(df2)\n)\n\n\n\n\ntile <- \"http://tiles-{s}.data-cdn.linz.govt.nz/services;key=0661036048984cf88489c5930d0c2e98/tiles/v4/layer=NZ512501/EPSG:3857/{z}/{x}/{y}.png\"\n\nislands_mixup <- leaflet(options = leafletOptions(zoomControl = FALSE)) %>% \n  # -35.20870804, 174.22736660.\n  setView(174.22736660,-35.20870804,zoom=14) %>%\n  addTiles() %>%\n  # addProviderTiles(providers$Esri.NatGeoWorldMap,\n  #                  options = providerTileOptions(opacity = 0.35))%>%\n  addWMSTiles(\n    \"https://tiles-cdn.koordinates.com/services;key=0661036048984cf88489c5930d0c2e98/tiles/v4/layer=51306/EPSG:3857/{z}/{x}/{y}.png\",\n    layers = \"51306\",\n    options = WMSTileOptions(format = \"image/png\", \n                             transparent = FALSE),\n    attribution = \"New Zealand Hydrographic Authority\") %>%\n  addAwesomeMarkers(lng = df2$X,\n                    lat = df2$Y, \n                    icon=icons) %>%\n  addMeasure()%>%\n  addMiniMap()\n\nislands_mixup  \n\n\n## load packages\nlibrary(htmlwidgets)\nlibrary(webshot)\n\n\n## save html to png\nsaveWidget(islands_mixup, \"temp.html\", selfcontained = FALSE)\nwebshot(\"temp.html\", file = \"data/islands_mixup.png\",\n        cliprect = \"viewport\")\n\n\n\nlibrary(cowplot)\nggdraw()+\n  draw_image(\"data/islands_mixup.png\")+\n  draw_line(x=c(0,0.99),y=c(0.89),\n            alpha=0.4,\n            color=\"grey95\",size=20)+\n  draw_label(\"Campsites in Urupukapuka Island no dogs allowed\",\n             x=0.5,y=0.95,\n             fontface = \"bold\",\n             fontfamily = \"Poor Story\") +\n  draw_label(\"#30DayMapChallenge 2022 Day 30: Mixup\\nDataSource: New Zealand Hydrographic Authority & data.govt.nz | Graphics: @fgazzelloni\",\n             x=0.5,y=0.90,\n             lineheight = 1.2,\n             fontfamily = \"Poor Story\",\n             size=5) \n\nggsave(\"day30_remix.png\",\n       dpi=200,\n       width = 6.83,\n       height =5.26 )"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day13_5_minute_map/day13_5_minute_map.html",
    "href": "mapchallenges/cases2022/posts2022/day13_5_minute_map/day13_5_minute_map.html",
    "title": "5 Minute Map",
    "section": "",
    "text": "# Load libraries\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Exo 2\",\n                family=\"Exo 2\")\n\nlibrary(tidyverse)\n\nworld <- map_data(\"world\")\n  filter(!region==\"Antarctica\")\nworld%>%names\nggplot(world)+\n  geom_polygon(aes(long,lat,\n                   group=group,\n                   fill=region,\n                   color=region),\n               alpha=0.7,\n               linewidth=0.2,\n               show.legend = F)+\n  scale_fill_viridis_d(option = \"C\")+\n  scale_color_viridis_d(option = \"A\")+\n  coord_quickmap()+\n  labs(title=\"World Map\",\n       caption=\"#30DatMapChallenge 2022 Day 13: 5 minute map\\nDataSource: Map data from {ggplot2} | Map: Federica Gazzelloni (@fgazzelloni)\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(family=\"Exo 2\"),\n        plot.title = element_text(hjust=0.5,size=24),\n        plot.caption = element_text(hjust=0.5,size=5,lineheight = 1.1))\n\nggsave(\"day13_5_minute_map.png\",\n       dpi=280,\n       width = 6.6,\n       height = 4,\n       bg=\"#98d8de\") # 6.64 x 5.81"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day10_a_bad_map/day10_a_bad_map.html",
    "href": "mapchallenges/cases2022/posts2022/day10_a_bad_map/day10_a_bad_map.html",
    "title": "A Bad Map",
    "section": "",
    "text": "This map is a drawback of a .tif image of North America and Alaska from the OSM."
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day6_network/day6_network.html",
    "href": "mapchallenges/cases2022/posts2022/day6_network/day6_network.html",
    "title": "Network",
    "section": "",
    "text": "Load libraries\n\n\nset the fonts\n\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Noto Serif\",\n                family=\"Noto Serif\")\n\n\n# Subways in NY: load packages and data\n# https://cran.r-project.org/web/packages/tidytransit/vignettes/frequency.html\n# install.packages('tidytransit')\nlibrary(tidytransit)\nlibrary(tidyverse)\nlibrary(sf)\n\n# other resources: \n# https://stackoverflow.com/questions/34316083/need-to-display-u-s-metro-areas-on-a-map\n\nlocal_gtfs_path <- system.file(\"extdata\", \"google_transit_nyc_subway.zip\", package = \"tidytransit\")\n\n########  ######## ########  ######## ########  ######## ########  ######## \n# The following piece of code is from {tidytransit} vignette ########\n# Import Transit Data (GTFS)\n# read it/set the service/make it as sf\n# this must be done in three steps\ngtfs <- read_gtfs(local_gtfs_path)\ngtfs <- set_servicepattern(gtfs)\ngtfs <- gtfs_as_sf(gtfs)\n\n# build a vector with spatial lengths\ngtfs$shapes$length <- st_length(gtfs$shapes)\n\nshape_lengths <- gtfs$shapes %>% \n  as.data.frame() %>% \n  select(shape_id, length, -geometry)\n\n\n\nservice_pattern_summary <- gtfs$trips %>%\n  left_join(gtfs$.$servicepatterns, by=\"service_id\") %>% \n  left_join(shape_lengths, by=\"shape_id\") %>%\n  left_join(gtfs$stop_times, by=\"trip_id\") %>% \n  group_by(servicepattern_id) %>% \n  summarise(trips = n(), \n            routes = n_distinct(route_id),\n            total_distance_per_day_km = sum(as.numeric(length), \n                                            na.rm=TRUE)/1e3,\n            route_avg_distance_km = (sum(as.numeric(length), \n                                         na.rm=TRUE)/1e3)/(trips*routes),\n            stops=(n_distinct(stop_id)/2))\n\n\nservice_pattern_summary <- gtfs$.$dates_servicepatterns %>% \n  group_by(servicepattern_id) %>% \n  summarise(days_in_service = n()) %>% \n  left_join(service_pattern_summary, by=\"servicepattern_id\")\n\n\nservice_ids <- gtfs$.$servicepattern %>% \n  filter(servicepattern_id == 's_e25d6ca') %>% \n  pull(service_id)\n\nam_stop_freq <- get_stop_frequency(gtfs, \n                                   start_time = 6*3600, \n                                   end_time = 10*3600, \n                                   service_ids = service_ids, \n                                   by_route = TRUE)\n\none_line_stops <- am_stop_freq %>% \n  filter(route_id == 1 & direction_id == 0) %>%\n  left_join(gtfs$stops, by =\"stop_id\") %>% \n  mutate(mean_headway_minutes = mean_headway/60)\n\n\none_line_stops_sf <- gtfs$stops %>%\n  right_join(one_line_stops, by=\"stop_id\") \n\n\nroutes_sf <- get_route_geometry(gtfs, service_ids = service_ids)\n\nam_route_freq <- get_route_frequency(gtfs, \n                                     service_ids = service_ids, \n                                     start_time = 6*3600, \n                                     end_time = 10*3600)\nroutes_sf <- routes_sf %>% \n  inner_join(am_route_freq, by = 'route_id')\n\n########  ######## ########  ######## ########  ######## ########  ######## \n# convert to an appropriate coordinate reference system\nroutes_sf_crs <- sf::st_transform(routes_sf, 4326) \n\n\n# first output\nroutes_sf_crs %>% \n  filter(median_headways < 10*60) %>%\n  ggplot() + \n  geom_sf(aes(color=as.factor(median_headways)),\n          size=2) + \n  labs(color = \"Headways\") +\n  geom_sf_text(aes(label=route_id)) +\n  theme_bw()\n\n\n##### Add the NYC polygons ##### ##### ##### ##### ##### \n# https://data.beta.nyc/dataset/nyc-zip-code-tabulation-areas/resource/894e9162-871c-4552-a09c-c6915d8783fb?view_id=2c40fce3-0bb2-46d3-bb67-04a935151a96\n# https://edaoud.com/blog/2022/03/18/draw-maps-with-R-and-ggplot/\n\nlibrary(geojsonio)\nlibrary(broom)\n\n# NYC Geometry\nspdf_file <- geojson_read(  # Read the geojson file\n  \"data/zip_code_040114.geojson\",\n  what = \"sp\"\n  )\n\nstats_df <- as.data.frame(spdf_file)  # Export the census statistics in another data frame variable\nspdf_file <- broom::tidy(  # Convert it to a spatial data frame, with zip code as index\n  spdf_file,\n  region=\"ZIPCODE\"  # Use ZIPCODE variable as index, the index will be named \"id\"\n)\n\n# second output\nggplot() +\n  geom_polygon(data=spdf_file %>%\n                 inner_join(stats_df, c(\"id\"=\"ZIPCODE\")),\n               aes(x=long, y=lat, group=group,\n                   fill=POPULATION),\n               color=\"white\",\n               linewidth=.2) +\n  coord_map() +\n  scale_fill_distiller(palette = \"YlGnBu\", \n                       direction = 1) +\n  labs(title=\"Population in New York City\",\n       subtitle=\"Neighborhoods are filled by population\",\n       fill=\"Population\")\n\n######\n\n# see unique routes id available in the dataset\nroutes_sf_crs %>% \n  filter(median_headways < 10*60) %>% \n  as.data.frame()%>%\n  count(route_id,median_headways)%>%\n  pull(route_id)\n  \n########  ######## ########  ######## ########  ######## ########  ######## \n# Final map combination of the two outputs ##### ##### ##### ##### \nroutes_sf_crs %>% \n  filter(median_headways < 10*60) %>% \n  ggplot() + \n  geom_polygon(data=spdf_file %>%\n                 inner_join(stats_df, c(\"id\"=\"ZIPCODE\")),\n               aes(x=long,\n                   y=lat,\n                   group=group,\n                   fill=POPULATION),\n               color=\"grey60\",\n               alpha=0.5,\n               linewidth=.2) +\n  scale_fill_gradient(low=\"white\",high=\"grey40\")+\n  geom_sf(aes(color=as.factor(median_headways)),\n          linewidth=1,\n          show.legend = F,\n          alpha=0.8) + \n  labs(title=\"New York City subways\",\n       subtitle=\"Map headways by route & Population density\",\n       caption=\"Subway routes id are from 1 to 7 with extension coded X,A,D,E,F,G,J,L,M,N,Q and R\\nNYC Subways info:https://en.wikipedia.org/wiki/List_of_New_York_City_Subway_stations\\nDataSource: NY Subways from {tidytransit} & NYC Geometry from data.BetaNYC\\nMap: Federica Gazzelloni (@fgazzelloni)\",\n       color = \"Headways\",\n       x=\"Longitude\",y=\"Latitude\") +\n  geom_sf_label(aes(label=route_id),\n               fontface=\"bold\",\n               label.padding = unit(0.05, \"lines\"),\n               size=1.5,color=\"grey30\") +\n  coord_sf() +\n  theme_bw()+\n  theme(text=element_text(family=\"Noto Serif\",size=9),\n        legend.position = c(1.1,0.7),\n        #legend.background = element_blank(),\n        legend.key.size = unit(10,units = \"pt\"),\n        legend.text = element_text(size=5),\n        legend.title = element_text(size=5.5),\n        axis.title = element_text(size=8),\n        axis.text = element_text(size=6),\n        plot.title = element_text(size=18),\n        plot.caption = element_text(size=6,hjust=0.5,lineheight = 1.2),\n        panel.background = element_rect(fill=\"grey90\"))\n\n\n# Save it ##### ##### ##### ##### ##### \n# ggsave(\"day6_network.png\", # 7.19 x 5.15\n#        dpi=280,\n#        width = 7.19,\n#        height = 5.15)\n########  ######## ########  ######## ########  ######## ########"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day2_lines/day2_lines.html",
    "href": "mapchallenges/cases2022/posts2022/day2_lines/day2_lines.html",
    "title": "Lines",
    "section": "",
    "text": "library(tidyverse)\nlibrary(sf)\nlibrary(cowplot)\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add(family =\"Roboto Condensed\",regular=\"RobotoCondensed-Regular.ttf\")\n\n# read in the rivers data\n# https://www.hydrosheds.org/products/hydrorivers\n# my_rivers <- st_read(dsn = 'HydroRIVERS_v10_eu_shp/HydroRIVERS_v10_eu.shp') \n# save(my_rivers,file=\"data/my_rivers.RData\")\n\nload(\"data/my_rivers.RData\")\n\n\n# select rivers with length in km greater than 1.780\nmy_rivers_1 <- my_rivers %>% \n  filter(LENGTH_KM> 1.780)\n\n\n\nmap <- my_rivers_1 %>% \n  ggplot()+\n  geom_sf(aes(color=ORD_FLOW),\n          size=0.1,\n          show.legend = TRUE) +\n  coord_sf(xlim = c(0.439,24.961),ylim = c(34.355,46.870))\n\nmap +\n  labs(title=\"Long-term rivers average discharge\",\n       subtitle=\"Italy and surrounding areas\",\n       caption=\"Values m3/s. Rivers with length in km greater than 1.780.\\nLength of discharge indicator: high (1) to low (10)\\n#30DayMapChallenge 2022 Day 2: Lines\\nDataSource: hydrosheds.org | Map: Federica Gazzelloni (@fgazzelloni)\",\n       color=\"Indicator\")+\n  theme(legend.position = c(0.2,-0.105),\n        legend.background = element_blank(),\n        legend.direction = \"horizontal\",\n        text = element_text(family=\"Roboto Condensed\"),\n        panel.grid = element_line(color=\"grey92\",size=0.3),\n        plot.background = element_rect(color=\"grey95\",fill=\"grey95\"),\n        panel.background = element_rect(color=\"grey95\",fill=\"grey95\"))\n\n\n\nggsave(\"day2_lines.png\",dpi=300)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day22_null/day22_null.html",
    "href": "mapchallenges/cases2022/posts2022/day22_null/day22_null.html",
    "title": "Null",
    "section": "",
    "text": "library(tmap)\ndata(World)\n\ntmap_style(\"cobalt\")\n\n  tm <- tm_shape(World) +\n    tm_polygons(\"HPI\",\n                alpha = 0.9,border.alpha = 0.5) +\n    tm_layout(legend.position = c(0.1,0.2), \n              title= \"Happy Planet Index NULL\", \n              title.position = c(0.4,0.2))+\n    tm_credits(\"#30DayMapChallenge 2022 Day 22: NULL\\nDataSource: {tmap} | Map: Federica Gazzelloni (@fgazzelloni)\",\n               align = \"center\") \n  \n\ntmap_save(tm, filename = \"day22_null.png\")"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day18_color_friday_blue/day18_color_friday_blue.html",
    "href": "mapchallenges/cases2022/posts2022/day18_color_friday_blue/day18_color_friday_blue.html",
    "title": "Color friday blue",
    "section": "",
    "text": "# Set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Gideon Roman\",\n                family=\"Gideon Roman\")\n\n\n# load libraries for data manipulation\nlibrary(tidyverse)\n# search for data\nlibrary(osmdata)\n# Some important functions are: \n#   \n# - getbb()             Get bounding box\n# - opq()               Build an Overpass query\n# - add_osm_feature()   Add a feature\n# - osmdata_sf()        Return an object in sf format\n\nlocation <- \"Milan\"\ngetbb(location)\n# min      max\n# x  9.040887  9.27811\n# y 45.386738 45.53585\n\navailable_features()\nfeature <- \"religion\"\navailable_tags(feature)\n\n# military points\nms <- opq(c(9.040887,45.386738,9.27811,45.53585)) %>% \n  add_osm_feature (key = feature) %>%\n  osmdata_sf (quiet = FALSE)\n\n# save(ms,file=\"data/ms.RData\")\nload(\"ms.RData\")\nms\n\n# tutorial\n# https://ggplot2tutor.com/tutorials/streetmaps\n# https://joshuamccrain.com/tutorials/maps/streets_tutorial.html\n# https://taraskaduk.com/posts/2021-01-18-print-street-maps/\nstreets <- opq(c(9.040887,45.386738,9.27811,45.53585)) %>% \n  add_osm_feature(key = \"highway\", \n                  value = c(\"motorway\", \"primary\", \n                            \"secondary\", \"tertiary\")) %>%\n  osmdata_sf()\n# save(streets,file=\"data/streets.RData\")\nload(\"data/streets.RData\")\nstreets\n\nsmall_streets <-  opq(c(9.040887,45.386738,9.27811,45.53585)) %>% \n  add_osm_feature(key = \"highway\", \n                  value = c(\"residential\", \"living_street\",\n                            \"unclassified\",\n                            \"service\", \"footway\")) %>%\n  osmdata_sf()\n# save(small_streets,file=\"data/small_streets.RData\")\nload(\"small_streets.RData\")\nsmall_streets\n\nriver <- opq(c(9.040887,45.386738,9.27811,45.53585)) %>% \n  add_osm_feature(key = \"waterway\", value = \"river\") %>%\n  osmdata_sf()\n\n# save(river,file=\"data/river.RData\")\nload(\"river.RData\")\nriver\n\n\n# make the map\n# The latitude of Rome, Italy is 41.902782, and the longitude is 12.496366\nggplot() +\n  geom_sf(data = streets$osm_lines,\n          inherit.aes = FALSE,\n          color = \"#7b9aca\",\n          linewidth = .04,\n          alpha = .8) +\ngeom_sf(data = small_streets$osm_lines,\n          inherit.aes = FALSE,\n          color = \"navy\",\n          linewidth = .03,\n          alpha = .8) +\n  geom_sf(data = river$osm_lines,\n          inherit.aes = FALSE,\n          color = \"#bfd0dd\",# \"#33dbe7\",\n          linewidth = 1.5,\n          alpha = .8) +\n  geom_sf(data = ms$osm_points,\n          inherit.aes = FALSE,\n          color = \"grey40\",\n          shape=21,\n          stroke=0.1,\n          size = 1,\n          alpha = .8) +\n  geom_sf(data = ms$osm_points,\n          inherit.aes = FALSE,\n          color = \"#043c6e\",\n          size = 0.05,\n          alpha = .8) +\n    # (9.040887,45.386738,9.27811,45.53585)\n  coord_sf(xlim=c(9.040887,9.27811),\n           ylim=c(45.386738,45.53585),\n           expand = FALSE) +\n  theme_void()+\n  theme(text=element_text(family=\"Gideon Roman\"),\n        plot.background = element_rect(fill=\"white\",color=\"#043c6e\",linewidth=0.5),\n        panel.background = element_rect(fill=\"white\",color=\"#043c6e\",linewidth=1),\n        plot.margin = margin(10,10,40,10,unit = \"pt\"))#dbd3c5\n\n# save the base map\nggsave(\"base_map.png\", width = 6, height = 6)\n\n\n# draw the map-viz\nlibrary(cowplot)\n\nggdraw()+\n  draw_image(\"base_map.png\")+\n  draw_line(x=c(0.03,0.97),y=c(0.169,0.169),\n            size=20,color=\"#bfd0dd\",alpha=0.5)+\n  draw_line(x=c(0.3,0.7),y=c(0.22,0.22),\n            size=1,color=\"#043c6e\")+\n  draw_label(\"Milan\",\n             x=0.5,y=0.19,\n             size=14.5,\n             color=\"#043c6e\",\n             fontface = \"bold\",\n             fontfamily = \"Gideon Roman\")+\n  draw_label(\"45°27'52.7904''N / 9°11'18.7440''E\",\n             x=0.5,y=0.149,\n             color=\"#043c6e\",\n             size=5,\n             fontfamily = \"Gideon Roman\") +\n  draw_label(\"OSM key: Religion\",\n             x=0.5,y=0.125,\n             color=\"#043c6e\",\n             size=4,\n             fontfamily = \"Gideon Roman\") +\n  draw_label(\"#30DayMapChallenge 2022 Day 18: Color Friday Blue\\nDataSource: {osmdata}: Milan, Italy | Map: Federica Gazzelloni (@fgazzelloni)\",\n             x=0.5,y=0.07,\n             size=4,\n             color=\"#043c6e\",\n             lineheight = 1.8,\n             fontfamily = \"Gideon Roman\")\n\n# save final version\nggsave(\"day8_openstreetmap.png\", \n       dpi=180,\n       width = 5.6, \n       height = 5.6,\n       bg=\"white\")"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day11_color_friday_red/day11_color_friday_red.html",
    "href": "mapchallenges/cases2022/posts2022/day11_color_friday_red/day11_color_friday_red.html",
    "title": "Color friday red",
    "section": "",
    "text": "library(tidyverse)\nraw_contour <- read_delim(\n  \"data/FM_service_contour_current.txt\",\n  delim = \"|\"\n)\n\nconv_contour <- raw_contour |>\n  select(-last_col()) |>\n  set_names(nm = c(\n    \"application_id\", \"service\", \"lms_application_id\", \"dts_site_number\", \"transmitter_site\",\n    glue::glue(\"deg_{0:360}\")\n  ))\n\nlng_lat <- conv_contour |>\n  separate(\n    transmitter_site, \n    into = c(\"site_lat\", \"site_long\"), \n    sep = \" ,\")\n# save(lng_lat,file= \"data/lng_lat.RData\")\n# load(\"rdata/lng_lat.RData\")\n\ndf_coords <- lng_lat%>%\n  select(-dts_site_number) %>%\n  distinct() %>%\n  drop_na() %>%\n  mutate_all(trimws)%>%\n  mutate(application_id=as.numeric(application_id),\n         site_lat=as.numeric(site_lat),\n         site_long=as.numeric(site_long))\n\ndf_coords %>%\n  as.data.frame() %>%\n  arrange(service) %>%  \n  count(service)\n\ndf_coords1_FM <- df_coords %>%\n  as.data.frame() %>%\n  arrange(service) %>%  #count(service)\n  filter(service==\"Full Service (FM)\") \n\n\ndf_coords1_FB <- df_coords %>%\n  as.data.frame() %>%\n  arrange(service) %>%  #count(service)\n  filter(service==\"FM Boosters (FB)\") \n# save(df_coords1,file=\"rdata/df_coords1_FB.RData\")\n# load(\"rdata/df_coords1_FB.RData\")\n\ndf_coords2 <- df_coords1_FB %>%\n  pivot_longer(cols = deg_0:deg_360,\n               names_to = \"angle\",\n               values_to = \"values\") \n\ndf_coords3 <- df_coords2 %>%\n  mutate(angle = str_remove(angle, \"deg_\"),\n         angle = as.integer(angle))\n\n\ndf_coords4 <- df_coords3 %>%\n  separate(values,\n           into = c(\"deg_lat\", \"deg_lng\"),\n           sep = \" ,\")\n\n\ndf_coords5_FB <- df_coords4 %>%\n  mutate(deg_lat= ifelse(is.na(deg_lng),site_lat,deg_lat),\n         deg_lng= ifelse(is.na(deg_lng),site_long,deg_lng))\n\n# save(df_coords5,file=\"rdata/df_coords5_FB.RData\")\n# load(\"rdata/df_coords5_FB.RData\")\n\nlibrary(sf) # spatiotemporal\nworld <- sf::st_as_sf(maps::map(\"world\", plot = FALSE, fill = TRUE))\nstates <- sf::st_as_sf(maps::map(\"state\", plot = FALSE, fill = TRUE))\n\n\ndf_coords5_FB_sf <- df_coords5_FB %>%\n   st_as_sf(coords=c(8,7),crs=4326) \n\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Xanh Mono\",family=\"Xanh Mono\")\n\n\n\nlibrary(ggnewscale)\n\nggplot() +\n  geom_sf(data= world, aes(fill=ID),\n          color=\"#590303\",\n          show.legend = F) +\n  scale_fill_viridis_d(alpha = 0.3,\n                       begin = 0.55,\n                       end = 0.35,\n                       option = \"F\") +\n  # geoms below will use another color scale\n  new_scale_color() +\n  geom_sf(data=states,aes(fill=ID),\n          color=\"#8a1313\",\n          linewidth =0.05,\n          show.legend = F) +\n  scale_fill_viridis_d(alpha = 0.3,\n                       begin = 0.55,\n                       end = 0.35,\n                       option = \"F\") +\n  geom_point(data = df_coords1_FM,\n             mapping = aes(site_long,site_lat),\n             shape=\".\",color=\"#e37f78\",\n             inherit.aes = F) +\n  geom_sf(data = df_coords5_FB_sf,\n          shape=21,stroke=0.009,\n          alpha=0.2,\n          fill= NA, #\"#eba7a7\",\n          color=\"#ab251b\",\n          inherit.aes = F) +\n  coord_sf(xlim = c(-171.73031,-55),ylim = c(20,71.29194))+\n  labs(title=\"FM Boosters - FB Radio Stations\",\n       caption=\"FM Boosters contours on central point FM Radio Stations. DataSource: FM Service Contour Data Points (fcc.gov)\\nData provides FM additional services: FM Auxiliary (FS), FM Boosters (FB), Full Service (FM), Low Power FM (FL), Translators (FX).\n       #30DayMapChallenge 2022 Day 11: Color Friday Red & #TidyTuesday 2022 Week 45 Radio Stations | Map: Federica Gazzelloni (@fgazzelloni)\")+\n  theme_classic() +\n  theme(text=element_text(face=\"bold\",color=\"#ab251b\",family=\"Xanh Mono\"),\n        axis.line = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        plot.title = element_text(),\n        #plot.margin = margin(5,0,5,0,unit = \"pt\"),\n        plot.caption = element_text(size=5,lineheight = 1.1,hjust=0.5),\n        plot.background = element_rect(fill=\"#e3b7b3\",color=\"#590303\"),# a8a2a2\n        panel.background = element_rect(fill=\"#e3b7b3\",color=\"#590303\"))\n\nggsave(\"day11_color_friday_map.png\",\n       dpi=280,\n       bg=\"white\",\n       width = 6.1,\n       height = 4.3)"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day19_globe/day19_globe.html",
    "href": "mapchallenges/cases2022/posts2022/day19_globe/day19_globe.html",
    "title": "Globe",
    "section": "",
    "text": "library(tidyverse)\nlibrary(rnaturalearth)\n\n# world data full \nworld_full <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n# world lat&long\nworld<-map_data(map = \"world\") \n\nmy_world_data<- world %>%\n  full_join(world_full, by = c(\"region\"=\"name\")) %>%\n  select(long,lat,group,order,region,region_wb)\n\n# grob for globe water\ng <- grid::circleGrob(gp = grid::gpar(fill = \"#9ad6f0\",color=\"gray30\"))\n\nworld<-ggplot() +\n  geom_polygon(data=my_world_data,\n               aes(x=long,y=lat,group=group),\n               fill=\"gray30\",color=\"black\",size=0.09) +\n  coord_map(\"ortho\", orientation = c(65.85, -130.21,0)) + \n  theme_void() \n\nworld\n\nlibrary(cowplot)\nglobe <- ggdraw() +\n  draw_grob(g, scale = 1,x = 0,y = 0) +\n  draw_plot(world) +\n  draw_label(\"Globe\",x=0.1,y=0.93,\n             size=22,\n             color=\"#9ad6f0\")+\n  draw_label(\"#30DayMapChallenge 2022 Day 19: Globe\\nDataSource: {rnaturalearth} | Map: Federica Gazzelloni (@fgazzelloni)\",\n             x=0.99,y=0.02,size=6,\n             hjust=1,\n             color=\"#9ad6f0\")\n\nglobe\n\nggsave(\"day19_globe.png\",\n       width=7.5,\n       height= 7.5,\n       dpi=320,\n       bg=\"grey10\")"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day8_openstreetmap/day8_openstreetmap.html",
    "href": "mapchallenges/cases2022/posts2022/day8_openstreetmap/day8_openstreetmap.html",
    "title": "Openstreetmap",
    "section": "",
    "text": "Set the fonts\n\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Gideon Roman\",\n                family=\"Gideon Roman\")\n\n\n# load libraries for data manipulation\nlibrary(tidyverse)\n# search for data\nlibrary(osmdata)\n# Some important functions are: \n#   \n# - getbb()             Get bounding box\n# - opq()               Build an Overpass query\n# - add_osm_feature()   Add a feature\n# - osmdata_sf()        Return an object in sf format\n\nlocation <- \"Rome\"\ngetbb(location)\n\n# available_features()\nfeature <- \"military\"\navailable_tags(feature)\n\n# military points\nms <- opq(c(12.23447,41.65564,12.85576,42.14103)) %>% \n  add_osm_feature (key = \"military\") %>%\n  osmdata_sf (quiet = FALSE)\n\n# save(ms,file=\"ms.RData\")\nload(\"ms.RData\")\nms\n\n# tutorial\n# https://ggplot2tutor.com/tutorials/streetmaps\n# https://joshuamccrain.com/tutorials/maps/streets_tutorial.html\n# https://taraskaduk.com/posts/2021-01-18-print-street-maps/\nstreets <- opq(c(12.23447,41.65564,12.85576,42.14103)) %>% \n  add_osm_feature(key = \"highway\", \n                  value = c(\"motorway\", \"primary\", \n                            \"secondary\", \"tertiary\")) %>%\n  osmdata_sf()\n# save(streets,file=\"streets.RData\")\nload(\"streets.RData\")\nstreets\n\nsmall_streets <- opq(c(12.23447,41.65564,12.85576,42.14103)) %>% \n  add_osm_feature(key = \"highway\", \n                  value = c(\"residential\", \"living_street\",\n                            \"unclassified\",\n                            \"service\", \"footway\")) %>%\n  osmdata_sf()\n# save(small_streets,file=\"small_streets.RData\")\nload(\"small_streets.RData\")\nsmall_streets\n\nriver <- opq(c(12.23447,41.65564,12.85576,42.14103)) %>%\n  add_osm_feature(key = \"waterway\", value = \"river\") %>%\n  osmdata_sf()\n# save(river,file=\"river.RData\")\nload(\"river.RData\")\nriver\n\n\n# make the map\n# The latitude of Rome, Italy is 41.902782, and the longitude is 12.496366\nggplot() +\n  geom_sf(data = streets$osm_lines,\n          inherit.aes = FALSE,\n          color = \"black\",\n          linewidth = .1,\n          alpha = .8) +\n  geom_sf(data = small_streets$osm_lines,\n          inherit.aes = FALSE,\n          color = \"navy\",\n          linewidth = .1,\n          alpha = .8) +\n  geom_sf(data = river$osm_lines,\n          inherit.aes = FALSE,\n          color = \"#98c7d0\",# \"#33dbe7\",\n          linewidth = 1,\n          alpha = .8) +\n  geom_sf(data = ms$osm_points,\n          inherit.aes = FALSE,\n          color = \"grey40\",\n          shape=21,\n          stroke=0.1,\n          size = 1,\n          alpha = .8) +\n  geom_sf(data = ms$osm_points,\n          inherit.aes = FALSE,\n          color = \"red\",\n          size = 0.05,\n          alpha = .8) +\n  coord_sf(xlim=c(12.35,12.65),\n           ylim=c(41.78,42),\n           expand = FALSE) +\n  theme_void()+\n  theme(text=element_text(family=\"Gideon Roman\"),\n        plot.background = element_rect(fill=\"white\",linewidth=0.5),\n        panel.background = element_rect(fill=\"#dbd3c5\",linewidth=1),\n        plot.margin = margin(10,10,40,10,unit = \"pt\"))\n\n# save the base map\nggsave(\"base_map.png\", width = 6, height = 6)\n\n\n# draw the map-viz\nlibrary(cowplot)\n\nggdraw()+\n  draw_image(\"data/base_map.png\")+\n  draw_line(x=c(0.055,0.945),y=c(0.169,0.169),\n            size=25,color=\"#dedede\",alpha=0.7)+\n  draw_line(x=c(0.3,0.7),y=c(0.22,0.22),\n            size=1)+\n  draw_label(\"Rome\",\n             x=0.5,y=0.19,\n             size=14.5,\n             fontface = \"bold\",\n             fontfamily = \"Gideon Roman\")+\n  draw_label(\"41.9027°N/12.4964°E\",\n             x=0.5,y=0.149,\n             size=5,\n             fontfamily = \"Gideon Roman\") +\n  draw_label(\"OSM key: Military\",\n             x=0.5,y=0.125,\n             size=4,\n             fontfamily = \"Gideon Roman\") +\n  draw_label(\"#30DayMapChallenge 2022 Day 8: osmdata\\nDataSource: {osmdata}: Rome, Italy | Map: Federica Gazzelloni (@fgazzelloni)\",\n             x=0.5,y=0.07,\n             size=4,\n             lineheight = 1.8,\n             fontfamily = \"Gideon Roman\")\n\n# save final version\nggsave(\"day8_openstreetmap.png\", \n       dpi=150,\n       width = 5.8, \n       height = 6,\n       bg=\"white\")"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day26_islands/day26_islands.html",
    "href": "mapchallenges/cases2022/posts2022/day26_islands/day26_islands.html",
    "title": "Islands",
    "section": "",
    "text": "library(leaflet)\n# library(leaflet.extras)\n# library(leaflet.providers)\n\nfileid<- \"d069b4c5-ec5b-c750-45aa-0a13f57dc35a\"\n  #Geographic Bounding Box\nbbox<- c(174.064747966174,.345239694,-35.2867580621,-35.1399271488)\ntile <- \"http://tiles-{s}.data-cdn.linz.govt.nz/services;key=0661036048984cf88489c5930d0c2e98/tiles/v4/layer=NZ512501/EPSG:3857/{z}/{x}/{y}.png\"\n\nislands <- leaflet(options = leafletOptions(zoomControl = FALSE)) %>% \n  setView(174.1642,-35.22549,zoom=12) %>%\n  addTiles() %>%\n  # addProviderTiles(providers$Esri.NatGeoWorldMap,\n  #                  options = providerTileOptions(opacity = 0.35))%>%\n  addWMSTiles(\n    \"https://tiles-cdn.koordinates.com/services;key=0661036048984cf88489c5930d0c2e98/tiles/v4/layer=51306/EPSG:3857/{z}/{x}/{y}.png\",\n    layers = \"51306\",\n    options = WMSTileOptions(format = \"image/png\", \n                             transparent = FALSE),\n    attribution = \"New Zealand Hydrographic Authority\") %>%\n #addMarkers(\n #  label = \"Default Label\",\n #  labelOptions = labelOptions(noHide = T)) %>%\n  addMeasure()%>%\n  addMiniMap()\n  \nislands  \n\n\n## load packages\nlibrary(htmlwidgets)\nlibrary(webshot)\n\n\n## save html to png\nsaveWidget(islands, \"temp.html\", selfcontained = FALSE)\nwebshot(\"temp.html\", file = \"day26_islands.png\",\n        cliprect = \"viewport\")\n\n\n\nlibrary(cowplot)\nggdraw()+\n  draw_image(\"day26_islands.png\")+\n  draw_label(\"Bay of Islands (NZ)\",\n             x=0.6,y=0.95) +\n  draw_label(\"#30DayMapChallenge 2022 Day 26: Isalnds\\nDataSource: New Zealand Hydrographic Authority | Graphics: @fgazzelloni\",\n             x=0.6,y=0.89,\n             size=6) \n\nggsave(\"day26_islands2.png\")"
  },
  {
    "objectID": "mapchallenges/cases2022/posts2022/day25_color_friday_2_colors/day25_color_friday_2_colors.html",
    "href": "mapchallenges/cases2022/posts2022/day25_color_friday_2_colors/day25_color_friday_2_colors.html",
    "title": "Colour Friday: 2 Colors",
    "section": "",
    "text": "Overview\nThis map of Alaska housing is made with FourSquare Studio."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Unlocking the power of data visualization with R",
    "section": "",
    "text": "MIT License\nCopyright (c) 2023 Federica Gazzelloni\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contacts",
    "section": "",
    "text": "GitHub: @fgazzelloni\nBlog: Federica Gazzelloni’s Blog"
  },
  {
    "objectID": "contact.html#social-networks",
    "href": "contact.html#social-networks",
    "title": "Contacts",
    "section": "Social Networks",
    "text": "Social Networks\n Email: fede.gazzelloni@gmail.com\nTwitter: @fgazzelloni\nLinkedIn: Federica Gazzelloni\nMastodon: @fgazzelloni"
  },
  {
    "objectID": "sponsors.html",
    "href": "sponsors.html",
    "title": "Sponsors",
    "section": "",
    "text": "Every aspect of this effort is powered by self-sponsored learning, resulting in the creation of amazing data visualizations. From start to finish, this journey is a testament to dedication, passion, and inspiration, all within the incredible world of data visualization."
  },
  {
    "objectID": "sponsors.html#nominations-and-awards",
    "href": "sponsors.html#nominations-and-awards",
    "title": "Sponsors",
    "section": "Nominations and Awards",
    "text": "Nominations and Awards\n\nJune, 2022 Short Listed to 9th edition of Datastories Exposition\nDecember, 2022 awarded $500 by Foursquare Map Month Competition Winner"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day20_upwards/day20_upwards.html",
    "href": "chartchallenges/cases2021/posts2021/day20_upwards/day20_upwards.html",
    "title": "Upwards",
    "section": "",
    "text": "TidyTuesday week17 NETFLIX & Upwards day20\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(extrafont)\nlibrary(showtext)\n\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = TRUE)\nmy_family = \"Roboto Condensed\"\n\n#tuesdata <- tidytuesdayR::tt_load(2021, week = 17)\n\nnetflix <- tuesdata$netflix\n\nhead(netflix)\ndim(netflix)\n\nset.seed(73)\nNETFLIX_plot <- ggplot(data=netflix, aes(x=release_year, y=sample(7787),fill=release_year)) +\n  geom_col() +\n  scale_fill_gradient(low = \"#333333\",high = \"red\") + \n  labs(title=\"NETFLIX\",\n       subtitle=\"Show released years from 1925 to 20121\",\n       caption=\"Viz Federica Gazzelloni | DataSource: Kaggle - 'NETFIX titles'| Tidytuesday week 17 & Upwards Day 20\",\n       x=\"Time(Year)\",\n       y=\"\",\n       fill=\"Release Year\")+\n  theme_void() +\n  theme(plot.title=element_text(family=my_family,size=50,face=\"bold\",color=\"red\"),\n        plot.subtitle = element_text(family=my_family,size=15,face=\"bold\"),\n        plot.caption = element_text(family=my_family,size=10,face=\"bold\"),\n        \n        panel.background = element_rect(fill = \"#333333\") ,\n        plot.margin = margin(10,10,10,10),\n        panel.grid = element_line(color = \"white\",size=2),\n        panel.grid.major = element_line(color = \"white\",size=1.5),\n        panel.grid.minor =element_line(color = \"white\",size=2), \n        axis.line = element_line(colour = \"white\"),\n        axis.line.x = element_line(color=\"white\"),\n        axis.line.y = element_blank(),\n        axis.text.x = element_text(family=my_family,size=10,face=\"bold\"),\n        legend.text = element_text(family=my_family,size=10,face=\"bold\"),\n        legend.title = element_text(family=my_family,size=10,face=\"bold\"),\n        legend.position = \"bottom\")\n\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w17\", \"tidytuesday_NETFLIX.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nNETFLIX_plot\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################ \nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\ntidy_NETFLIX_plot <- image_read(\"W17/tidytuesday_NETFLIX.png\")\n\nattached_logo <- image_composite(tidy_NETFLIX_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_NETFLIX.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day29_deviations/day29_deviations.html",
    "href": "chartchallenges/cases2021/posts2021/day29_deviations/day29_deviations.html",
    "title": "Deviations",
    "section": "",
    "text": "Deviations day29\nLoad libraries\n\nlibrary(tidyverse)\nlibrary(DataExplorer)\nlibrary(ggthemes)\n\n\n\n# load data ################################\ndata_all_countries<-read.csv(\"data_all_countries.csv\")\n\n# check and wrangling #######################\nhead(data_all_countries)\nprofile_missing(data_all_countries)\nplyr::count(data_all_countries$location_name)\n\n# select countries of interest \nmy_countries<-c(\"Madagascar\",\"Bahamas\",\"San Marino\")\n\n# and plotting #####################################\n\ndeviations_plot <- data_all_countries %>%\n  filter(location_name %in% my_countries) %>%\n  arrange(location_name) %>%\n  group_by(measure_name,location_name) %>%\n  summarize(avg_measure=median(val)) %>%\n  ungroup() %>%\n  mutate(se = sd(avg_measure) / sqrt(length(avg_measure))) %>%\n\n  ggplot(aes(x=measure_name,y=avg_measure,color=location_name)) +\n  geom_bar(stat=\"identity\", aes(fill=measure_name), alpha=0.8) +\n  geom_errorbar(aes(x=measure_name, ymin=avg_measure-se, \n                     ymax=avg_measure+se),\n                 stat = \"identity\",\n                 position = \"identity\",\n                 na.rm = FALSE,\n                 orientation = NA,\n                 show.legend = NA,\n                 inherit.aes = TRUE,\n                 width=0.4, \n                 colour=\"red\", \n                 alpha=0.8, size=0.8) +\n  labs(title=\"Global Metrics deviation for 3 selected Countries:\\n\",\n       caption=\"Viz. @fgazzelloni | Datasource: IHME - healthdata.org | Deviations Day29\",\n       x=\"Global Metrics\",\n       y=\"Median value per metric\",\n       color=\"Country\",\n       fill=\"Metric\") + \n  scale_x_discrete(labels=c(\"DALYs (Disability-Adjusted Life Years)\" = \"DALYs\",\n                            \"Deaths\" = \"Deaths\",\n                            \"YLDs (Years Lived with Disability)\" = \"YLDs\",\n                            \"YLLs (Years of Life Lost)\" = \"YLLs\")) +\n  facet_wrap(~location_name) +\n  annotate(\"text\",x=1,y=0.3, label=\"deviations\",color=\"red\",size=3) +\n  annotate(\"curve\", x = 1, xend = 1.2, y = 0.25, yend = 0.35,\n           colour = \"lightblue\") +\n  annotate(\"pointrange\", x = 1, y = 0.2, ymin =0.25, ymax = 0.35,\n           colour = \"red\", size = 0.3) +\n  theme_economist() +\n  theme(axis.text.x = element_text(angle=0),\n        axis.title.x = element_text(hjust=0.5,vjust=-1),\n        axis.title.y = element_text(hjust=0.5,vjust=1.2),\n        plot.title = element_text(size=35),\n        plot.margin = margin(7,7,7,7),\n        panel.background = element_rect(size=2),\n        legend.position = \"top\",\n        legend.title = element_text(face=\"bold\"),\n        #legend.key = element_text(),\n        legend.box = \"vertical\" )\n\n######### saving ###############################\n\nragg::agg_png(here::here(\"day29_deviations\", \"deviations_day29.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\ndeviations_plot\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day23_tiles/day23_tiles.html",
    "href": "chartchallenges/cases2021/posts2021/day23_tiles/day23_tiles.html",
    "title": "Tiles",
    "section": "",
    "text": "library(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(extrafont)\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 17)\nnetflix <- tuesdata$netflix\n\n\np<-ggplot(netflix, aes(x=type, y=release_year)) +\n  geom_tile(aes(fill = duration)) +\n  labs(title = \"NETFLIX\",\n       subtitle=\"shows by type and duration\",\n       caption=\"Viz Federica Gazzelloni | DataSource: Kaggle - NETFLIX | Tiles Day 23 & II TidyTuesday W17\",\n       y = \"\",\n       x=\"\") +\n  theme_linedraw()+\n  theme(legend.position = \"none\",\n        plot.title = element_text(color=\"white\",face=\"bold\",size=30,family=\"Trebuchet MS\"),\n        plot.subtitle = element_text(color=\"white\",face=\"bold\",size=18,family=\"Trebuchet MS\"),\n        plot.caption = element_text(color=\"white\",face=\"bold\",size=8,family=\"Trebuchet MS\"),\n        \n        plot.background=element_rect(fill=\"navy\"),\n        axis.text = element_text(color=\"white\",face=\"bold\",size=12,family=\"Trebuchet MS\"))\n\n\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"day23_tiles\", \"tiles_day23.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\np\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################ \nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\ntiles_day23 <- image_read(\"day23_tiles/tiles_day23.png\")\n\nattached_logo <- image_composite(tiles_day23, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"day23_tiles/tiles_day23.png\", format = \"png\") # save final plot\n\n\n############################################"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day5_slope/day5_slope.html",
    "href": "chartchallenges/cases2021/posts2021/day5_slope/day5_slope.html",
    "title": "Slope",
    "section": "",
    "text": "Week 15 FIRE\n\n# libraries, fonts and colours --------------------\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(extrafont)\nfonts()\n\nmy_col <- \"#720000\"\nmy_col2 <- \"#9900bfbf\"\n\n# load data and wrangling ----------------------------\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 15)\n\nforest <- tuesdata$forest\nforest_area <- tuesdata$forest_area\nbrazil_loss <- tuesdata$brazil_loss\nsoybean_use <- tuesdata$soybean_use\nvegetable_oil <- tuesdata$vegetable_oil\n\n\nbrazil_loss <- tuesdata$brazil_loss\n\nslopes <- brazil_loss%>%\n  pivot_longer(cols=c(5,6,11,12,13),names_to=\"Predictors\",values_to=\"values\")\n\nslopes <- slopes %>% select(year,fire,Predictors,values)\n\n# slope plot --------------------------------------------------\n\nslope_plot <- ggplot(slopes, aes(x = fire, y = values, color = Predictors) ) +\n  geom_point() +\n  geom_smooth(method = \"lm\", alpha = .15, aes(fill = Predictors)) +\n  theme_minimal() +\n  \n  scale_y_continuous(name=\"Predictors\", labels = scales::label_number_si(), limits=c(0,92000)) +\n  scale_x_continuous(name=\"Fire (hectares)\", labels = scales::label_number_si(), limits=c(26000,537000)) +\n  \n  \n  annotate(\"curve\", x = 400000, xend = 450000, y = 50000, yend = 75000, \n           color = \"red\", curvature = -0.5) +\n  annotate(\"text\", x=500000, y= 75000, label=\"driving down: tree plantations \\ndriving up: natural disturbances\", colour=my_col) +\n  \n  labs(x=\"Fire\",\n       y=\"Predictors\",\n       title = \"Brazil Fire due to predictors\",\n       subtitle = \"flooding, mining, disturbances, plantations, infrastructures...\",\n       caption = \"Viz @fgazzelloni | DataSource: @ourworldindata | Brazil Fire predictors\") +\n  \n  theme(legend.position = \"bottom\",\n        legend.text = element_text(family=\"Trebuchet MS\"),\n        legend.background = element_blank(),\n        legend.title = element_text(family=\"Trebuchet MS\"),\n        legend.key = element_rect(fill = \"white\", colour = NA),\n        \n        plot.title = element_text(family=\"Trebuchet MS\", size =32,face=\"bold\", hjust=0 ),\n        plot.subtitle = element_text(family=\"Trebuchet MS\", size =20),\n        \n        axis.title = element_text(family=\"Trebuchet MS\", size =12),\n        \n        strip.background = element_rect(colour = \"black\", fill = \"white\"),\n        strip.text.x = element_text(colour = \"white\", face = \"bold\"),\n        panel.spacing = unit(5, \"lines\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"azure\", color = NA),\n        panel.background = element_rect(fill = \"azure\")\n       ) +\n  annotate(\"text\", x = 280000, y = 80000, \n           family=\"Trebuchet MS\",\n           label = \"researchers at *Global Forest Watch* estimate that global deforestation \\nin 2019 was around 5.4 million hectares. \\n95% of this was in the tropics 33.12% in Brazil\")\n        \n\n# save final plot ---------------------------------------------------------\n\n\nragg::agg_png(here::here(\"w15\", \"tidytuesday_slope.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nslope_plot\n\ndev.off()\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\ntidy_slope <- image_read(\"tidytuesday_slope.png\")\n\nattached_logo <- image_composite(tidy_slope, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_slope.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day22_animation/day22_animation.html",
    "href": "chartchallenges/cases2021/posts2021/day22_animation/day22_animation.html",
    "title": "Animation",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggpol)\nlibrary(gganimate)\nlibrary(gifski)\nlibrary(extrafont)\n\noptions(scipen = 999)\n\n#Data input and transformation\ndf_backup <- read.delim(\"https://www.prdh.umontreal.ca/BDLC/data/bco/E0per.txt\",sep=\"\",skip=1)\n\n\ndf <- df_backup%>%\n  pivot_longer(cols=c(\"Female\",\"Male\"),names_to=\"Gender\",values_to=\"life_expectancy\")\n\n\n\nle_plot <- df%>%\n  ggplot(aes(x=Year,y=life_expectancy,group=Gender,color=factor(Gender))) + \n  geom_point(show.legend = FALSE, alpha = 0.7) +\n  geom_line() +\n  labs(title = \"British Columbia Life Expectancy at birth\",\n       subtitle = \"from 1921 to 2016 | Animation Day22\",\n       caption = \"Viz Federica Gazzelloni | Data Source: Canadian Human Mortality Database\",\n       y = \"Life Expectancy\", x=\"Time(Year)\",\n       color=\"Gender\") +\n  \n  scale_fill_manual(values = c('#ff7129', '#d3b4d0')) +\n  #scale_y_continuous(breaks = c(-3000000, -6000000, -9000000, 0, 3000000, 6000000, 9000000),label = c(\"3M\", \"6M\", \"9M\", \"0\", \"3M\", \"6M\", \"9M\")) +\n  theme_light() +\n    theme(plot.background = element_rect(fill = \"#edf7fa\") ,\n          panel.background = element_rect(fill = \"#edf7fa\"),\n          panel.border = element_blank(),\n          strip.background = element_blank(),\n          strip.text.x = element_blank(),\n          \n          panel.grid.minor = element_blank(),\n          panel.grid.major = element_blank(),\n          \n          legend.position = \"top\",\n          legend.title = element_text(family=\"Georgia\",size = 15,face = 'bold',color = '#035770'),\n          legend.key.size = unit(0.75, 'cm'),\n          legend.key = element_blank(),\n          legend.background = element_blank(),\n          legend.text = element_text(family=\"Georgia\",size = 15,face = 'bold',color = '#035770'),\n          \n          plot.title = element_text(family=\"Georgia\",size = 20,hjust = 0.5,face = 'bold',color = \"#035770\"),\n          plot.subtitle = element_text(family=\"Georgia\",size = 12,hjust = 0,face = 'bold',color = \"#035770\"),\n          plot.caption = element_text(family=\"Georgia\",size = 10,hjust = 1,face = 'bold',color = \"#035770\"),\n          \n          axis.line.x = element_line(size=2,color=\"#035770\"),\n          axis.title.x = element_text(family=\"Georgia\",size = 16,face = 'bold',color = \"#035770\"),\n          axis.text.x = element_text(family=\"Georgia\",size = 10,face = 'bold', color =  \"#035770\"),\n          axis.text.y = element_text(family=\"Georgia\",size = 10,face = 'bold',color =  \"#035770\"),\n          axis.ticks = element_blank(),\n          axis.title.y = element_text(family=\"Georgia\",size = 16,face = 'bold',color =  \"#035770\"),\n          plot.margin = margin(10,10,10,10)\n    )\n  \n  \n\nfinal <-le_plot + \n  transition_reveal(life_expectancy) +\n  shadow_wake(wake_length = 0.1, alpha = FALSE)\n\n\n\nanimate(final,gifski_renderer(\"day22_animation/animation_day22.gif\"))\n\n\n\n\nanim_save(animate(final, nframes = 151, width = 9, height = 6.5, units = \"in\", res = 300), \n          filename = \"day22_animation/animation_day22.gif\",\n          end_pause = 10, rewind = F, fps = 15)"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day21_downwards/day21_downwards.html",
    "href": "chartchallenges/cases2021/posts2021/day21_downwards/day21_downwards.html",
    "title": "Downwards",
    "section": "",
    "text": "http://www.bdlc.umontreal.ca/CHMD/prov/que/que.htm https://github.com/ZainulArifin1/WeeklyPlot/tree/main/Week%202%2030%20DAY%20CHART\n\nlibrary(tidyverse)\nlibrary(extrafont)\n\noptions(scipen = 999)\n\ndf <- read.delim(\"https://www.prdh.umontreal.ca/BDLC/data/que/Exposures_5x1.txt\",sep=\"\",skip=1)\n\n#df%>%ggplot(aes(x=Year,y=Total,group=Age,color=factor(Age)))+geom_line()\n\ndf$Age<-sub(\"1-4\",\"01-04\",df$Age)\ndf$Age<-sub(\"5-9\",\"05-09\",df$Age)\ndf$Age<-sub(\"905-099\",\"95+\",df$Age)\n\nmy_df <- df%>%\n  arrange(Year,desc(Age))%>%\n  filter(!Age==\"110+\" & !Age==\"100-104\" & !Age==\"105-109\" & !Age==\"0\")%>%\n  pivot_longer(cols=c(\"Female\",\"Male\"),names_to=\"Gender\",values_to=\"Exposure\")%>%\n  select(-Total)\n\nmy_df_plot <- my_df %>%\n  ggplot(aes(x = Age, y = Exposure, fill = Gender)) +\n  geom_bar(stat = 'identity') +\n  scale_fill_manual(values = c(\"#d07be0\",\"#29ffc6\")) +\n  scale_y_continuous(\n    breaks = c(0, 10000000, 20000000, 30000000, 40000000),\n    label = c(\"0M\", \"10M\", \"20M\",\"30M\", \"40M\")) +\n    coord_flip(clip = \"on\") +\n    theme(plot.background = element_rect(fill = \"#5e5556\") ,\n          panel.background = element_rect(fill = \"#5e5556\"),\n          panel.border = element_blank(),\n          strip.background = element_blank(),\n          strip.text.x = element_blank(),\n   \n          panel.grid.minor = element_blank(),\n          panel.grid.major = element_blank(),\n    \n    legend.position = \"top\",\n    legend.title = element_text(family=\"Luminari\",size = 15,face = 'bold',color = 'white'),\n    legend.key.size = unit(0.75, 'cm'),\n    legend.background = element_blank(),\n    legend.text = element_text(family=\"Luminari\",size = 15,face = 'bold',color = 'white'),\n    \n    plot.title = element_text(family=\"Luminari\",size = 22,hjust = 0.5,face = 'bold',color = 'white'),\n    plot.subtitle = element_text(family=\"Luminari\",size = 12,hjust = 0,face = 'bold',color = 'white'),\n    plot.caption = element_text(family=\"Luminari\",size = 10,hjust = 1,face = 'bold',color = \"white\"),\n    \n    axis.line.x = element_line(size=2,color=\"white\"),\n    axis.title.x = element_text(family=\"Luminari\",size = 16,face = 'bold',color = '#242422'),\n    axis.text.x = element_text(family=\"Luminari\",size = 12,face = 'bold', color = 'white'),\n    axis.text.y = element_text(family=\"Luminari\",size = 10,face = 'bold',color = 'white'),\n    axis.ticks = element_blank(),\n    axis.title.y = element_text(family=\"Luminari\",size = 16,face = 'bold',color = '#242422'),\n    plot.margin = margin(10,10,10,10)\n  )\n\n\nexposure_plot <- my_df_plot +\n  labs(title = \"Quebec Exposure-to-risk Change\\n\\n{1921-2016}\",\n       subtitle = \"Exposure is pivoted downwards by age increasing\",\n       y = \"Exposure-to-risk (Population in millions)\", x=\"Age\",\n       caption = \"Viz @fgazzelloni | Data Source: Canadian Human Mortality Database | Downwards Day21\") \n\n\n# saving ######################################\n\n\nragg::agg_png(here::here(\"day21_downwards\", \"downwards_day21.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nexposure_plot\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day19_global_change/day19_global_change.html",
    "href": "chartchallenges/cases2021/posts2021/day19_global_change/day19_global_change.html",
    "title": "Change",
    "section": "",
    "text": "library(tidyverse)\nlibrary(streamgraph)\nlibrary(lubridate)\n\n\n# load data and manipulation ------------------------------------\nexcess_of_mortality<-read.csv(\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/excess_mortality/excess_mortality.csv\")\nhead(excess_of_mortality)\nnames(head(excess_of_mortality))\n\nexcess_of_mortality[is.na(excess_of_mortality)] <- 0\n\navg_std_excess <- excess_of_mortality%>%group_by(location)%>%summarize(avg = mean(average_deaths_2015_2019_all_ages))\n\nmean(avg_std_excess$avg) # 8247.341\n\nplyr::count(excess_of_mortality$location)\n\n\ndf_plot <-excess_of_mortality%>%\n  group_by(date, location) %>%\n  tally(wt=p_scores_all_ages) \n\n\n# function \"sg_add_marker()\" found here: https://github.com/hrbrmstr/streamgraph/blob/master/R/marker.r\nsg_add_marker <- function(sg, x, label=\"\", stroke_width=0.5, stroke=\"#7f7f7f\", space=5,\n                          y=0, color=\"#7f7f7f\", size=12, anchor=\"start\") {\n  \n  if (inherits(x, \"Date\")) { x <- format(x, \"%Y-%m-%d\") }\n  \n  mark <- data.frame(x=x, y=y, label=label, color=color, stroke_width=stroke_width, stroke=stroke,\n                     space=space, size=size, anchor=anchor, stringsAsFactors=FALSE)\n  \n  if (is.null(sg$x$markers)) {\n    sg$x$markers <- mark\n  } else {\n    sg$x$markers <- bind_rows(mark, sg$x$markers)\n  }\n  \n  sg\n  \n}\n\n\ntop_10<-df_plot%>%arrange(-n)%>%group_by(location)%>%summarize(sum=sum(n))%>%ungroup()%>%arrange(-sum)\nplyr::count(df_plot$location)\n  \n\n# plotting -----------------------------------------------\nstreamgraph(data= df_plot, \"location\", \"n\", \"date\", offset=\"zero\", \n                    interpolate=\"cardinal\",interactive=FALSE) %>%\n  sg_axis_y(10) %>%\n  # vertical line and label\n  sg_add_marker(x=as.Date(\"2020-01-05\"),  y = 408, label= \"\",\n                stroke_width = 0.8,\n                stroke = \"#7f7f7f\", space = 5, color = \"#7f7f7f\",\n                size = 12, anchor = \"start\") %>% \n  sg_add_marker(x=as.Date(\"2020-04-08\"), label= \"\",\n                stroke_width = 0.8,\n                stroke = \"#7f7f7f\", space = 5, y = 0, color = \"#7f7f7f\",\n                size = 12, anchor = \"end\") %>% \n  sg_add_marker(x=as.Date(\"2020-11-01\"), label= \"\",\n                stroke_width = 0.8,\n                stroke = \"#7f7f7f\", space = 5, y = 0, color = \"#7f7f7f\",\n                size = 12, anchor = \"start\") %>% \n  sg_add_marker(x=as.Date(\"2021-01-01\"), label= \"\",\n                stroke_width = 0.8,\n                stroke = \"#7f7f7f\", space = 5, y = 0, color = \"#7f7f7f\",\n                size = 12, anchor = \"start\") %>% \n  sg_add_marker(x=as.Date(\"2021-03-01\"), label= \"\",\n                stroke_width = 0.8,\n                stroke = \"#7f7f7f\", space = 5, y = 0, color = \"#7f7f7f\",\n                size = 12, anchor = \"start\") %>% \n  # annotate the top ten countries\n  sg_annotate(label=\"Top Ten countries with the highest P-score\",size=10,x=as.Date(\"2020-01-7\"), y=1.30*10^3, color=\"black\") %>%\n  sg_annotate(label=\"1 - Equador\",size=10,x=as.Date(\"2020-01-7\"), y=1.25*10^3, color=\"black\") %>%\n  sg_annotate(label=\"2 - Mexico\",size=10,x=as.Date(\"2020-01-7\"), y=1.20*10^3, color=\"black\") %>%\n  sg_annotate(label=\"3 - Colombia\",size=10,x=as.Date(\"2020-01-7\"), y=1.15*10^3, color=\"black\") %>%\n  sg_annotate(label=\"4 - Poland\",size=10,x=as.Date(\"2020-01-7\"), y=1.10*10^3, color=\"black\") %>%\n  sg_annotate(label=\"5 - Chile\",size=10,x=as.Date(\"2020-01-7\"), y=1.05*10^3, color=\"black\") %>%\n  sg_annotate(label=\"6 - Czechia\",size=10,x=as.Date(\"2020-01-7\"), y=1.0*10^3, color=\"black\") %>%\n  sg_annotate(label=\"7 - United States\",size=10,x=as.Date(\"2020-01-7\"), y=0.95*10^3, color=\"black\") %>%\n  sg_annotate(label=\"8 - Slovakia\",size=10,x=as.Date(\"2020-01-7\"), y=0.90*10^3, color=\"black\") %>%\n  sg_annotate(label=\"9 - Slovenia\",size=10,x=as.Date(\"2020-01-7\"), y=0.85*10^3, color=\"black\") %>%\n  sg_annotate(label=\"10 - Spain\",size=10,x=as.Date(\"2020-01-7\"), y=0.80*10^3, color=\"black\") %>%\n  # set a title and a subtile\n  sg_annotate(label=\"How have excess mortality changed Globally due to Covid19?\", \n              size=30,x=as.Date(\"2020-01-23\"), y=1.57*10^3, color=\"blue\") %>%\n  sg_annotate(label =\"The P-score is the percentage of number of deaths in a given period obtained as proportion of the deaths difference with a reference period\",\n              size=10, x=as.Date(\"2020-01-07\"), y=1.45*10^3, color=\"black\") %>%\n  # annotate formulation for calculating the P-score\n  sg_annotate(label = \"Excess of Deaths_w2020 = Deaths_w2020 - Avg_Deaths_w2015-2019\",\n              size=10, x=as.Date(\"2020-05-13\"), y=1.10*10^3, color=\"black\") %>%\n  sg_annotate(label = \"P-score = (Deaths_2020-2021 - Avg_Deaths_2015-2019)/ Avg_Deaths_2015-2019\",\n              size=10, x=as.Date(\"2020-05-13\"), y=1.05*10^3, color=\"black\") %>%\n  # set a caption\n  sg_annotate(label = \"Viz Federica Gazzelloni | Data: OurWorldinData | Global Change Day19\",\n              size=10, x=as.Date(\"2020-06-23\"), y=-0.1*10^3, color=\"blue\") %>%\n  # full color\n  sg_fill_tableau() \n  \n\n\n\n# saving ######################################\nlibrary(webshot)\n\n# Make a webshot in png : Low quality - but you can choose shape\nwebshot(here::here(\"day19_global_change\", \"global_change_day19.png\"), \n        delay = 0.2 , cliprect = c(440, 0, 1000, 10))"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day12_strips/day12_strips.html",
    "href": "chartchallenges/cases2021/posts2021/day12_strips/day12_strips.html",
    "title": "Strips",
    "section": "",
    "text": "Some inspiration by:\nhttps://stackoverflow.com/questions/50305206/how-to-normalize-array-between-1-and-10 https://github.com/danielpballer/Tidy_Tuesday/blob/master/Scripts_for_final_plots/2021_Week_10_Super_Bowl_Ads_Final_Plot.Rmd\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(zoo)\nlibrary(ggalluvial)\nlibrary(igraph)\nlibrary(colormap)\nlibrary(ggraph)\nlibrary(ggtext)\nlibrary(extrafont)\nlibrary(RColorBrewer)\n\nCovid19_it_reg<- read.csv(\"https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv\")\nnames(Covid19_it_reg)\n\nstart = 1\nend = 10\nwidth = end - start\n\ndf<-Covid19_it_reg %>%\n  rename(regions=\"denominazione_regione\",ICU=\"terapia_intensiva\",positives=\"totale_positivi\",hospidalized=\"ricoverati_con_sintomi\",\n         deaths=\"deceduti\", recovered=\"dimessi_guariti\" ) %>%\n  mutate(date=format(as.Date(data),\"%Y-%m-%d\"),\n         month.year=as.yearmon(date))\n\ndf_top_ten<-df%>%arrange(desc(deaths))%>%group_by(regions)%>%summarize(deaths.sum=sum(deaths))\n\ntop_ten<-df$regions[1:10]\nunlist(top_ten)\n\n\nmy_df<-df%>%select(date,regions,positives,deaths,hospidalized,ICU,recovered)%>%\n  group_by(regions)%>%\n  summarize(positives=round((positives - min(positives))/(max(positives) - min(positives))*width + start),\n            deaths=round((deaths - min(deaths))/(max(deaths) - min(deaths))*width + start),\n            hospidalized=round((hospidalized - min(hospidalized))/(max(hospidalized) - min(hospidalized))*width + start),\n            ICU=round((ICU - min(ICU))/(max(ICU) - min(ICU))*width + start),\n            recovered=round((recovered - min(recovered))/(max(recovered) - min(recovered))*width + start))%>%\n  pivot_longer(cols=c(\"positives\",\"deaths\",\"hospidalized\",\"ICU\",\"recovered\"),names_to=\"category\",values_to = \"values\")%>%\n  mutate(values=round(values))%>%filter(regions==c(\"Abruzzo\",\"Basilicata\",\n                                                   \"Calabria\",\"Campania\",\n                                                   \"Emilia-Romagna\",\"Friuli Venezia Giulia\",\n                                                   \"Lazio\",\"Liguria\",\n                                                   \"Lombardia\",\"Marche\"))\n\n\n\nfinal_plot = my_df%>%\n  ggplot(aes(axis1 = regions, axis2 = category, y = values)) +\n  scale_x_discrete(limits = c(\"regions\", \"category\"), expand = c(.2, .05)) +\n  geom_alluvium(aes(fill = regions)) +\n  scale_fill_brewer(palette=\"Paired\")+\n  geom_stratum() +\n  geom_text(stat = \"stratum\", aes(label = after_stat(stratum)), family = \"Freebooter\", size = 4) +\n  theme_minimal() +\n  ggtitle(\"Italian Regions by Covid19 outcomes chategory\",\n          \"How do they change in time?\") +\n  labs(caption = \"Viz @fgazzelloni | Datasource:Civil Protection  | Stripes - Day 12\") +\n  theme_void()+\n  theme(plot.title = element_text(hjust = .5, size = 24, family = \"Freebooter\"),\n        plot.subtitle = element_text(hjust = .5,size = 16, family = \"Freebooter\"),\n        plot.caption = element_text(size = 10),\n        legend.position = \"None\")\n\n\nfinal_plot\n\n\n##########################\n\n\nragg::agg_png(here::here(\"day12\", \"Circular_day12.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day9_statistics/day9_statistics.html",
    "href": "chartchallenges/cases2021/posts2021/day9_statistics/day9_statistics.html",
    "title": "Statistics",
    "section": "",
    "text": "library(tidyverse)\n#library(ggthemes)\n#library(ggrepel)\n#library(stringr)\n\n\n# load data --------------------\n\n# url = \"https://opendata.ecdc.europa.eu/covid19/nationalcasedeath/csv\"\n\ndf_backup <- readxl::read_excel(\"download.xlsx\")\n\n############################################################\n\ndf <- read.csv(\"selected_countries.csv\")\n\n\npng(\"stats.png\", width = 770, height = 580, unit = \"px\")\n\npar(oma=c(3,3,3,3))\npar(mfrow=c(1,1),mar=c(5,5,2,1)+0.1,bg=\"white\")\nmy_bar <- barplot(height=df$weekly_count,\n          names=df$country,\n          density=c(5,10,20,30,7),\n          angle=c(0,45,90,11,36) ,\n          font.axis=1,#border=\"verde\",\n          col=\"brown\",\n          las=2 ,\n          ylim=c(0,5500),\n          names.arg=c(\"US\",\"India\",\"Italy\",\"Poland\",\"Mexico\",\"Ukraine\",\"Russia\",\"France\",\"Hungary\",\"Peru\"),\n          main = \"2021 - week 13\")\n\ntext(my_bar,df$weekly_count+118,labels=df$weekly_count,cex=0.9)\nmtext(\"Selected countries by higher Covid19 Deaths\", side=3, line=2, cex=2, col=\"forestgreen\")  \nmtext(\"Viz Federica Gazzelloni | Datasource: ECDC | Statistics - Day9\", side=1, line=5, adj=1.0, cex=1, col=\"forestgreen\")\n\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day13_correlation/day13_correlation.html",
    "href": "chartchallenges/cases2021/posts2021/day13_correlation/day13_correlation.html",
    "title": "Correlation",
    "section": "",
    "text": "correlation day 13\n\n\nInspired by: TidyTuesday 2019/35 - Simpsons Guest Stars by Wikipedia - author: “Cedric Scherer”\n\n\ndata for Stats for pub health program created by imperial college\nLoad libraries\n\nlibrary(tidyverse)\nlibrary(ggtext)\nlibrary(patchwork)\nlibrary(ggcorrplot)\nlibrary(extrafont)\n\n\ntheme_update(rect = element_rect(color = NA,\n                                 fill = \"#a9f51d\"),\n             line = element_blank(),\n             text = element_text(color = \"black\"))\n\n################# MANIPULATION ############################\n\ndata<- read.csv(file=\"cancer data for MOOC 1.csv\", header = TRUE, sep = ',')\nsum(is.na(data))\ndata[is.na(data)]<-0\n\ndata$fruitveg<- data$fruit + data$veg\nnames(data)<-c(\"patient_id\",\"Age\",\"Gender\",\"BMI\",\"Smoking\",\"Exercise\",\n               \"Fruit\",\"Veg\",\"Cancer\",\"Fruit & Veg\")\n\ncorr_df<-data%>%select(-1)\n\ncorr<-cor(corr_df)\ncorr2<-cor(corr_df[c(-6,-7)])\n\n####################### PLOTTING ######################\ncorrelation <- ggcorrplot(corr,method=\"circle\")+\n  ggtitle(label=\"Cancer and contributing factors\",\n  subtitle=\"Causation is multifactorial, and provide examples of modification of the risk factors through prevention, \\nunderstanding of population cancer aetiology interaction effects between risk factors and joint factors.\\n'Evaluating intrinsic and non-intrinsic cancer risk factors' 2018\\n(Wu, S., Zhu, W., Thompson, P. et al.)\")+\n\n  theme(plot.title = element_text(family=\"Courier New\",size=14,face=\"bold\",color=\"#460046\"),\n        plot.subtitle = element_text(family=\"Courier New\",size=11),\n        axis.text = element_text(size=11,family=\"Courier New\",face=\"bold\"),\n    legend.title = element_text(size=8,family=\"Courier New\"),\n    legend.text = element_text(size=8,family=\"Courier New\"))\n    #plot.margin = margin(5,5,5,5))\n\n\ncorrelation2<-ggcorrplot(corr2,hc.order = TRUE, type = \"lower\",\n                         outline.col = \"white\",lab = TRUE)+\n  theme(legend.position = \"none\",\n        axis.text = element_text(size=11,family=\"Courier New\",face=\"bold\"))\n\nmain_plot <-correlation + correlation2\n\n################### WIGGETTING ############################\nlabels <-\n  tibble(\n    labels = c(\n      \"<img src='exercise-png-Transparent-Images.png'\n    +     width='100' /><br><b style='color:#00947E'>Exercise</b><br><i style='color:#00947E'>13%</i></b>\",\n      \"<img src='fruitveg.png'\n    +     width='90' /><br><b style='color:#FF5180'>Fruit & Veg</b><br><i style='color:#FF5180'>-25%</i></b>\",\n      \"<img src='obesity.png'\n    +     width='90' /><br><b style='color:#FF5180'>BMI</b><br><i style='color:#FF5180'>-12%</i></b>\",\n      \"<img src='gender.png'\n    +     width='90' /><br><b style='color:#FF5180'>Gender</b><br><i style='color:#FF5180'>20%</i></b>\",\n      \"<img src='smoking.png'\n    +     width='90' /><br><b style='color:#FF5180'>Smoking</b><br><i style='color:#FF5180'>30%</i></b>\"\n    ),\n    x = 1:5,\n    y = rep(1, 5)\n  )\n\nlegend <-\n  ggplot(labels, aes(x, y)) +\n  geom_richtext(aes(label = labels),\n                fill = NA,\n                color = NA,\n                vjust = 0) +\n  annotate(\"text\", x = 3.5, y = 1.018,\n           label = \"Correlated Risk factors\",\n           size = 15,\n           fontface = \"bold\",\n           family = \"Courier New\") +\n\n  scale_x_continuous(limits = c(0.6, 6.1)) +\n  scale_y_continuous(limits =  c(1, 1.02)) +\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#87cf80\"))\n\n########################### CAPTIONING #####################################\n\ncaption <-\n  ggplot(data.frame(x = 1:2, y = 1:10)) +\n  labs(x = NULL, y = NULL,\n       caption = \"Viz @fgazzelloni| Source: Imperial College data Mooc | Correlation Day 13\")+\n  theme(line = element_blank(),\n        plot.caption = element_text(size=8, family=\"Courier New\",color=\"#460046\",face=\"bold\"),\n        panel.background = element_rect(fill = \"transparent\"),\n        plot.background = element_rect(fill = \"transparent\",color = \"transparent\"),\n        panel.border = element_rect(color = \"transparent\"),\n        axis.text = element_blank())\n\n\n###################### SAVING ############################\n\nfinal <- legend + main_plot + caption + plot_layout(ncol = 1,heights = c(0.6, 1, 0))\n\nragg::agg_png(here::here(\"day13_correlation\", \"Correlation_day13.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day18_connections/day18_connections.html",
    "href": "chartchallenges/cases2021/posts2021/day18_connections/day18_connections.html",
    "title": "Connections",
    "section": "",
    "text": "Connections Day 18\nhttps://web.stanford.edu/class/bios221/book/Chap-Graphs.html https://github.com/jtichon/ModernStatsModernBioJGT/tree/master/data https://simplemaps.com/data/world-cities\n\nlibrary(ggplot2)\nlibrary(\"rworldmap\")\nlibrary(igraph)\nlibrary(ape)\nlibrary(ggnetwork)\nlibrary(extrafont)\nlibrary(cowplot)\n\n\n# load data -------------------------------------------\ncountries <- as.data.frame(data.table::fread(\"https://raw.githubusercontent.com/eparker12/nCoV_tracker/master/input_data/countries_codes_and_coordinates.csv\"))\ncountries%>%filter(country==\"United States\")\nworld<-read.csv(\"day18_connections/worldcities.csv\")\nload(\"day18_connections/dist2009c.RData\")\n\n# manipulations -------------------------------------------\ncountry09 = attr(dist2009c, \"Label\")\nmstree2009 = ape::mst(dist2009c)\ngr09 = graph.adjacency(mstree2009, mode = \"undirected\")\n\n\nmat = match(country09, countries$country,world$country)\n\ncoords2009 = data.frame(\n  lat = countries$latitude[mat],\n  lon = countries$longitude[mat],\n  country = country09)\n\n\nlayoutCoordinates = cbind(\n  x = jitter(coords2009$lon, amount = 15),\n  y = jitter(coords2009$lat, amount = 8))\n\n\nlabc = names(table(country09)[which(table(country09) > 1)])\nmatc = match(labc, countries$country,world$country)\n\ndfc = data.frame(\n  latc = countries$latitude[matc],\n  lonc = countries$longitude[matc],\n  labc)\n\ndfctrans = dfc\ndfctrans[, 1] = (dfc[,1] + 31) / 93\ndfctrans[, 2] = (dfc[,2] + 105) / 238\n\nggeo09 = ggnetwork(gr09, arrow.gap = 0, layout = layoutCoordinates)\n\n# plotting -----------------------------------------------\ng <- ggplot(ggeo09, aes(x = x, y = y, xend = xend, yend = yend)) +\n  geom_edges(color = \"black\", alpha = 0.5, curvature = 0.1) +\n  geom_nodes(aes(color = name), size = 2) +\n  theme_void() +\n  geom_label(data = dfctrans, aes(x = lonc, xend = lonc, y = latc, yend = latc,\n                                  label = labc, fill = labc), \n             colour = \"white\", alpha = 0.5, size = 3) +\n  labs(\n       caption= \"Viz Federica Gazzelloni - DataSource:stanford.edu - Connections Day18\") +\n  theme(legend.position = \"none\")\n        \n\nplot <- ggdraw(g) +  draw_label(\n  \"Connections Day18 - Distances in World Countries\",\n  fontface = 'bold',\n  x = 0.1,y=0.99,\n  hjust = 0\n) +\n  theme_cowplot(font_size = 14)\n              \n# saving ######################################\n\n\nragg::agg_png(here::here(\"day18_connections\", \"connections_day18.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nplot\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day6_experimental/day6_experimental.html",
    "href": "chartchallenges/cases2021/posts2021/day6_experimental/day6_experimental.html",
    "title": "Experimental",
    "section": "",
    "text": "# libraries --------------------\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\n\n\n# load data and wrangling ----------------------------\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 15)\n\nforest <- tuesdata$forest\nforest_area <- tuesdata$forest_area\nbrazil_loss <- tuesdata$brazil_loss\nsoybean_use <- tuesdata$soybean_use\nvegetable_oil <- tuesdata$vegetable_oil\n\n\nsvdf <- merge(soybean_use,vegetable_oil,na.rm=T)\nmean(is.na(svdf))\nsvdf[is.na(svdf)]=0\n\n\nSoybean <- svdf %>% filter(crop_oil==\"Soybean\")%>%\n  group_by(year) %>% \n  summarize(avg_prod=mean(production))\n\npivot <- svdf %>%\n  pivot_longer(cols=c(4,5),names_to=\"name\",values_to=\"value\")%>%\n  filter(crop_oil==\"Soybean\")\n\ntapply(svdf$production,svdf$crop_oil,summary)\n\n# plotting --------------------------------------------\n\nlibrary(ggExtra)\nlibrary(xkcd)\nlibrary(ggstatsplot)\nlibrary(extrafont)\n\nxrange <- range(pivot$production)\nyrange <- range(pivot$value)\n\nexperiment_plot <- ggplot() +\n  geom_point(data=pivot, aes(x = production, y = value,fill=name),\n             size = 2, shape = 21, colour = \"black\" ) +\n  xkcdaxis(xrange,yrange) + \n  scale_x_continuous(labels = scales::label_number_si()) + \n  scale_y_continuous(labels = scales::label_number_si()) + \n  annotate(\"text\", x=19000000, y = 17478000,label = \"Animal feed\", family=\"xkcd\" )+\n  annotate(\"text\", x=24000000, y = 17478000,label = \"Human food\", family=\"xkcd\" )+\n  labs(title=\"Experimenting production of Soybean\",\n       subtitle = \"for Human food and Animal feed\",\n       caption = \"Viz federica gazzelloni - Datasource: Our World in data - Day6\") +\n  geom_hline(yintercept = 6000000, colour = \"black\", linetype = \"dashed\", size = 0.2) + \n  geom_vline(xintercept = 32000000, colour = \"black\", linetype = \"dashed\", size = 0.2) + \n  annotate(\"rect\", xmin = 32000000, xmax = 42845399, ymin = 6000000, ymax = 17478000, \n           alpha = .3) +\n  annotate(\"text\", x=35000000, y = 4000000,\n           label = \"A level of production of Soybean over 35M shows \\na change in trend directions to a higher level \\nof animal feed when compared with human food consumption.\",\n           family=\"xkcd\" ) +\n  theme_xkcd() + \n  theme(legend.position=\"top\",\n        legend.text = element_blank(),\n        legend.key = element_blank(),\n        legend.title = element_blank(),\n        plot.subtitle = element_text(size=10),\n        axis.text = element_text(family=\"Comic Sans MS\"),\n        axis.text.x = element_text(size=8,vjust = 0.2),\n        axis.text.y = element_text(size=8,hjust = 0.8),\n        axis.ticks = element_line())\n\n# save the plot ----------------------------\n\nragg::agg_png(here::here(\"day6\", \"Experiment_day6.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nexperiment_plot\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day10_abstract/day10_abstract.html",
    "href": "chartchallenges/cases2021/posts2021/day10_abstract/day10_abstract.html",
    "title": "Abstract",
    "section": "",
    "text": "Inspired by Hierarchical edge bundling and wanting to know more about\n\n\nvisualizing clustering\n\n\nsource: https://www.r-graph-gallery.com/hierarchical-edge-bundling.html\n\n\nGeneral-purpose data wrangling\n\nlibrary(tidyverse)  \n# Parsing of HTML/XML files  \nlibrary(rvest)    \n# String manipulation\nlibrary(stringr)   \n# Verbose regular expressions\nlibrary(rebus)     \n# Eases DateTime manipulation\nlibrary(lubridate)\n\nrequire(stats); require(graphics)\n\n\n# Table extracted from: https://www.worldometers.info/geography/alphabetical-list-of-countries/\n\nurl <- \"https://www.worldometers.info/geography/alphabetical-list-of-countries/\"\n\ntable_world_countries <-xml2::read_html(url)\n\nwcl<-table_world_countries%>%\n  rvest::html_node(\"table\") %>% \n  rvest::html_table(header = TRUE)%>%\n  select(2:5)\n\nwcl <- as.tibble(wcl)\n\n# sum(is.na(wcl))\n\nwcl$`Population(2020)`<-gsub(\",\",\"\",wcl$`Population(2020)`)\nwcl$`Population(2020)`<-as.numeric(as.character(wcl$`Population(2020)`))\nwcl$`Land Area (Km²)`<-gsub(\",\",\"\",wcl$`Land Area (Km²)`)\nwcl$`Land Area (Km²)`<-as.numeric(as.character(wcl$`Land Area (Km²)`))\nwcl$`Density(P/Km²)`<-gsub(\",\",\"\",wcl$`Density(P/Km²)`)\nwcl$`Density(P/Km²)`<-as.numeric(as.character(wcl$`Density(P/Km²)`))\n\n\nnames(wcl)[3] <- gsub(\" \",\"\",names(wcl)[3])\n\nnames(wcl)<-c(\"country\",\"population\",\"area\",\"density\")\nglimpse(wcl)\n\nwcl <- transform(wcl, country = factor(country))\n\nclean_wcl <- wcl%>%arrange(population)%>%\n  mutate(area=round(area,2),area_made=round(population/density,2))%>%\n  select(1,2,5,4)\n\nhead(clean_wcl)\n\nsummary(clean_wcl$population)\n\ntable(percent_rank(clean_wcl$country),clean_wcl$country)\n\nkclust <- kmeans(clean_wcl[,2:3],centers=5)  \ntable(kclust$cluster,clean_wcl$country)\n############################################ PCA #############################\n\nrid<-seq(1,length(clean_wcl$country),1)\nclass(rid)\n\ndf_wcl<- cbind(rid,clean_wcl)\n\ndf <-df_wcl%>%mutate(dens_log=log10(density))%>%\n  select(country,rid,dens_log)%>%\n  mutate(rid = paste0(\"rid_\", rid))%>%\n  pivot_wider(names_from = \"rid\", values_from = \"dens_log\", values_fill = 0)\n\n\nlibrary(recipes)\n\npca_rec <- recipe(~., data = df) %>%\n  update_role(country, new_role = \"id\") %>%\n  step_normalize(all_predictors()) %>%\n  step_pca(all_predictors(), num_comp = 5)\n\npca_prep <- prep(pca_rec)\n\npca_prep\n\nlibrary(extrafont)\nlibrary(ggrepel)\nbake(pca_prep, new_data = NULL) %>%\n  ggplot(aes(PC1, PC2, label = country)) +\n  geom_point(color = \"midnightblue\", alpha = 0.4, size = 2) +\n  geom_text(check_overlap = TRUE, hjust = \"inward\", family = \"Comic Sans MS\") +\n  labs(color = NULL)\n\n#------------\n\npca_comps <- tidy(pca_prep, 2) %>%\n  filter(component %in% paste0(\"PC\", 1:4)) %>%\n  left_join(df_wcl %>% mutate(terms = paste0(\"rid_\", rid))) %>%\n  group_by(component) %>%\n  top_n(8, abs(value)) %>%\n  ungroup()\n\n\npca_comps %>%\n  mutate(value = abs(value)) %>%\n  ggplot(aes(value, fct_reorder(terms, value), fill = country)) +\n  geom_col(position = \"dodge\") +\n  geom_text(check_overlap = TRUE, hjust = \"inward\", aes(value, fct_reorder(terms, value),label= country),family = \"Comic Sans MS\")+\n  facet_wrap(~component, scales = \"free_y\") +\n  labs(\n    x = \"Absolute population density\",\n    y = NULL, fill = NULL,\n    title = \"What World Countries are the most diverse in density?\",\n    subtitle = \"Seychelles, Antigua and Barbuda and San Marino are different\"\n  ) +\n  theme_void()+\n  theme(legend.position = \"none\",\n        axis.text = element_blank(),\n        axis.ticks = element_blank()\n        \n        )\n\nlibrary(embed)\n\numap_rec <- recipe(~., data = df) %>%\n  update_role(country, new_role = \"id\") %>%\n  step_normalize(all_predictors()) %>%\n  step_umap(all_predictors())\n\numap_prep <- prep(umap_rec)\n\numap_prep\n\nimage <- readJPEG(\"background-world-map-1.jpg\")\nlibrary(ggpubr)\nlibrary(jpeg)\nlibrary(ggimage)\nlibrary(magick)\n\nmain_plot<-bake(umap_prep, new_data = NULL) %>%\n  ggplot(aes(umap_1, umap_2, label = country)) +\n  background_image(image) + \n  geom_point(color = \"midnightblue\", alpha = 0.7, size = 2) +\n  geom_text(check_overlap = TRUE, hjust = \"inward\", family = \"Comic Sans MS\",size=5) +\n  labs(color = NULL)+\n  theme_void()+\n  theme(plot.background = element_blank(),\n        plot.margin = margin(5,5,5,5))\n\n\n\n\n#-----------------------\n\n\nlibrary(patchwork)\n\nfinal <- main_plot + plot_annotation(\n  title = \"World Countries driven by population density\",\n    subtitle = \"What else they have in common?\",\n  caption = \"Visualization: Federica Gazzelloni | Abstract Day10 | Data:Worldometers\",\n  theme = theme(plot.title = element_text(size=24,family=\"Comic Sans MS\",face = \"bold\"),\n                plot.subtitle = element_text(size=14,family=\"Comic Sans MS\"),\n                plot.margin = margin(10,10,10,10),\n                plot.background = element_rect(fill = \"#663fd9e2\" , color = NA),\n                plot.caption = element_text(family = \"Comic Sans MS\", size = 9, \n                                color =  \"midnightblue\", margin = margin(15,0,0,0), hjust = 0.95)\n  )\n)\n\nragg::agg_png(here::here(\"day10\", \"Abstract_day10.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day26_trends/day26_trends.html",
    "href": "chartchallenges/cases2021/posts2021/day26_trends/day26_trends.html",
    "title": "Trends",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggforce)\nlibrary(extrafont)\n\n\n\noptions(scipen = 999)\n\n# drug use-------------\n\ndruguse <- read.csv(\"multiplier_survey_data.csv\")\nhead(druguse)\n\nplyr::count(druguse$year_start)\n\nlibrary(lubridate)\n\n\n\ndf<-druguse%>%\n  arrange(year_start)%>%\n  mutate(sprop=sample_size/sum(druguse$sample_size),\n         new_val=val*sprop)%>%\n  \n  group_by(year_start)%>%\n  summarize(avg_val=median(new_val))%>%\n  ungroup()\n\nhead(df)\n\ndim(df)\n\nlibrary(zoo)\n\np <- ggplot(data = subset(df,year_start>=\"1992\"),aes(x=year_start,y=avg_val*10^6)) +\n  geom_point(aes(size=avg_val,color=\"red\"),alpha=0.5)+\n  geom_line(aes(y = rollmean(avg_val*10^6, 3, align = \"right\", fill = NA)),\n            color=\"red\")+\n  geom_jitter(alpha=0.3,aes(size=avg_val,fill=year_start))+\n  geom_smooth(method=\"loess\",size=0.8,color=\"grey4\")+\n  scale_x_continuous(breaks =c(1992,1994,1998,2000,2004,2006,2008,2010,2016)) +\n  facet_zoom(x = year_start >= \"2004\" & year_start <= \"2008\") + \n  labs(title=\"Drug use trend in 97 countries between 1992-2017\",\n       subtitle = \"proportion of surveys by year\",\n       caption=\"Viz. Federica Gazzelloni | DataSource: IHME | Trend Day26\",\n       x=\"Time(Year)\",\n       y=\"Precent\")+\n  theme_minimal()+\n  theme(legend.position = \"none\",\n        plot.margin = margin(5,5,5,5),\n        plot.background = element_rect(size=25,color=\"black\",fill=\"black\"),\n        panel.background = element_rect(size=3,color=\"white\",fill=\"white\"),\n        panel.grid.major = element_line(size=0.1,color=\"grey3\"),\n        panel.grid.minor = element_line(size=0.1,color=\"grey3\"),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank(),\n        axis.text = element_text(vjust=1,family=\"Courier New\",size=10,face=\"bold\",color=\"white\"),\n        axis.ticks = element_line(color=\"red\",size=2),\n        axis.title = element_text(face=\"bold\",size=12,family=\"Courier New\",\n                                  hjust=0.5,vjust=0.2,color=\"white\"),\n        plot.title = element_text(family=\"Courier New\",size=25,color=\"white\"),\n        plot.subtitle = element_text(family=\"Courier New\",size=14,color=\"white\"),\n        plot.caption = element_text(face=\"bold\",family=\"Courier New\",size=8,color=\"white\")\n        ) \n         \n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"day26_trends\", \"trends_day26.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\np\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day16_tree/day16_tree.html",
    "href": "chartchallenges/cases2021/posts2021/day16_tree/day16_tree.html",
    "title": "Tree",
    "section": "",
    "text": "Load libraries\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(medflex)\nlibrary(extrafont)\n\nlibrary(treeio)\nlibrary(ggtree)\n\n\n\n# data ##################################\n\n# Data source: UPBdata\n# individuals who divorced between March 2008 and March 2009 \n# in four major courts in Flanders \n\n# 385 individuals related to romantic relationship and breakup characteristics\n\n# initiator: of the divorce\n# att: anxious attachment level\n# negaff: experienced negative affectivity\n\n# attbin: anxious attachment level: \n         # 1 = higher than sample mean, 0 = lower than sample mean\n\n# attcat: multicategorical anxious attachment level: \n         # L = low, M = intermediate, H = high\n\n# UPB: displayed unwanted pursuit behavior(s) towards the ex-partner\n\n\n# load data & selection ---------------------\ndata(UPBdata, package = \"medflex\")\nhead(UPBdata)\nstr(UPBdata)\n\n\nUPBdata$UPB = as.factor(ifelse(UPBdata$UPB <= 0.4, \"Low\", \"High\"))\n\nmy_UPB<-UPBdata%>%dplyr::select(-2,-3)\n\n\n\n# transform data set into hclust ############################\nhc <- hclust(dist(my_UPB), method = \"average\")\n\n# transform hclust into Phylo ############################\nmy_hc<-as.phylo(hc)\n\n# manipluation ##################################\ngroupInfo <- split(my_hc$tip.label, \n                   gsub(\"_\\\\w+\", \"\", my_hc$tip.label))\n\nmy_hc2 <- groupOTU(my_hc, groupInfo)\n\n# checking for edges ###################################\nedge=data.frame(my_hc2$edge, edge_num=1:nrow(my_hc2$edge))\ncolnames(edge)=c(\"parent\", \"node\", \"edge_num\")\n\n# plotting #######################################\nmain_plot<-ggtree(my_hc2, aes(color=group), layout='circular',ladderize=F) + \n  geom_tiplab(size=1, aes(angle=angle)) +\n  geom_point2(aes(subset=(node==1)), shape=21, size=5, fill='green')+\n  ggtitle(\"Unwanted pursuit behavior: \\nTree related to romantic relationship and breakup characteristics \\non 385 individuals who divorced between March 2008 and March 2009\")+\n  #geom_text(label=\"\")+\n  #geom_text(data = labels, aes(x, y, label = edu), size = 5)+\n  labs(subtitle=\"Strategies for the Estimation of Natural Direct and Indirect Effects of bad relationships\",\n       caption=\"Multivariate Behavioral Research, Viz Federica Gazzelloni Datasource: R Package medflex Tree Day 16\")+\n  theme_void() + \n  annotate(\"text\", x = 0, y = 1.018,\n           label = \"Correlated Risk factors\",\n           size = 8,\n           fontface = \"bold\",\n           family = \"Courier New\")+\n  theme(legend.position = \"none\",\n        plot.title = element_text(family=\"Andale Mono\",color=\"darkred\",size=12),\n        plot.subtitle = element_text(family=\"Andale Mono\",size=9,color=\"darkolivegreen\"),\n        plot.caption = element_text(family=\"Andale Mono\",size=8,face=\"bold\"),\n        axis.text.x = element_text(family=\"Andale Mono\",size=8),\n        plot.background = element_rect(color = \"lightgoldenrod\",size=44))\n\n# saving ######################################\n\n\nragg::agg_png(here::here(\"day16_tree\", \"Tree_day16.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nmain_plot\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day3_historical/day3_historical.html",
    "href": "chartchallenges/cases2021/posts2021/day3_historical/day3_historical.html",
    "title": "Historical",
    "section": "",
    "text": "library(tidyverse)\n\ndf <- read.csv(\"mean_values.csv\")\nregions <- read.csv(\"Map_covid19_first_10_days_it.csv\")\n\n####################################################\n\n(g <- ggplot(df, aes(x = new_deaths, y = new_deaths+rnorm(nrow(df), sd = 20))))\n\ndeaths <- g + \n  geom_point(color = \"firebrick\") + \n  geom_rug() + \n  labs(x = \"Deaths\", y = \"noise\",\n       subtitle = \"Historical pattern of daily deaths from Feb 2020 to present\",\n       caption = \"Data:Civil Protection, Viz@fgazzelloni\"\n       ) +\n  ggtitle(\"AVG Regions'Deaths due to Covid19 in Italy\") +\n  expand_limits(x = 0, y = 0) +\n  coord_fixed(ratio = 1/4)+\n  theme_void()+\n  theme(\n        plot.title = element_text(face = \"bold\",margin = margin(10, 0, 10, 0),size = 30,\n                                  colour=\"dodgerblue\"),\n        plot.subtitle = element_text(face = \"bold\",size = 12,\n                                     colour=\"dodgerblue\"),\n        plot.caption = element_text(face = \"bold\",hjust =0.5,vjust = 0),\n        axis.title.x = element_text(vjust = 0, size = 15),\n        axis.title.y = element_text(vjust = 1, size = 15),\n       \n        axis.title = element_text(size = 15, color = \"firebrick\",\n                          face = \"bold\"),\n        \n        axis.text = element_text(color = \"dodgerblue\", size = 12,vjust = 2),\n        axis.text.x = element_text(face = \"bold\",angle = 0, vjust = 0, hjust = 2, size = 12),\n        axis.text.y = element_text(face = \"bold\"),\n        \n        axis.line = element_line(colour=\"dodgerblue\"),\n        plot.margin = margin(t = 10, r = 0, b = 10, l = 0, unit = \"pt\")\n  )\n        \n\n###################################################################\nlibrary(leaflet)\n\nimg <- \"https://www.r-project.org/logo/Rlogo.svg\"\n\nmap <- leaflet(regions) %>% \n  addTiles() %>% \n  leafem::addLogo(img, url = \"https://www.r-project.org/logo/\")%>%\n  addCircles(lng = ~lon, lat = ~lat, weight = 1,\n             radius = ~sqrt(cases) * 30, popup = ~region ) %>%\n  \n  addCircleMarkers(~lon, ~lat, radius = 25, fillOpacity = .05, color = 'purple') %>%\n  addMarkers(clusterOptions = markerClusterOptions()) %>%\n  addProviderTiles(providers$Stamen.TonerBackground) \n  \n   \n##############################################################\n\nlibrary(ggimage)\n\nmap_img=\"map.png\"\nfinal <- ggbackground(deaths, map_img, alpha=.3)\n\n\nggsave(here::here(\"day3\",\"Covid19_deaths.png\"), final, device = \"png\", width = 29.65, height = 21, \n       units = \"cm\")\n\nfinal\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day25_demographic/day25_demographic.html",
    "href": "chartchallenges/cases2021/posts2021/day25_demographic/day25_demographic.html",
    "title": "Demographic",
    "section": "",
    "text": "inspired by: https://github.com/ZainulArifin1/WeeklyPlot/tree/main/Week%202%2030%20DAY%20CHART\n\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(extrafont)\nlibrary(RColorBrewer)\nlibrary(ggpol)\nlibrary(gganimate)\nlibrary(gifski)\n\noptions(scipen = 999)\n\n\n# Data are from IHME healthdata.org for European Union countries, 5-year cat \n# Population change 2010-2019\n# link to population data: http://ghdx.healthdata.org/record/ihme-data/gbd-2019-population-estimates-1950-2019\n#################### population ##################\n# data wrangling\npopulation2010 <- read.csv(\"IHME_GBD_2019_POP_2010_Y2020M10D15.csv\")%>%\n  filter(age_group_id %in% 5:21)%>%\n  filter(location_name == \"European Union\")%>%\n  filter(!sex_name==\"both\")%>%\n  mutate(population2010=val)%>%\n  select(age_group_name,sex_name,population2010)\npopulation2011 <- read.csv(\"IHME_GBD_2019_POP_2011_Y2020M10D15.csv\")%>%\n  filter(age_group_id %in% 5:21)%>%\n  filter(location_name == \"European Union\")%>%\n  filter(!sex_name==\"both\")%>%\n  mutate(population2011=val)%>%\n  select(age_group_name,sex_name,population2011)\npopulation2012 <- read.csv(\"IHME_GBD_2019_POP_2012_Y2020M10D15.csv\")%>%\n  filter(age_group_id %in% 5:21)%>%\n  filter(location_name == \"European Union\")%>%\n  filter(!sex_name==\"both\")%>%\n  mutate(population2012=val)%>%\n  select(age_group_name,sex_name,population2012)\npopulation2013 <- read.csv(\"IHME_GBD_2019_POP_2013_Y2020M10D15.csv\")%>%\n  filter(age_group_id %in% 5:21)%>%\n  filter(location_name == \"European Union\")%>%\n  filter(!sex_name==\"both\")%>%\n  mutate(population2013=val)%>%\n  select(age_group_name,sex_name,population2013)\npopulation2014 <- read.csv(\"IHME_GBD_2019_POP_2014_Y2020M10D15.csv\")%>%\n  filter(age_group_id %in% 5:21)%>%\n  filter(location_name == \"European Union\")%>%\n  filter(!sex_name==\"both\")%>%\n  mutate(population2014=val)%>%\n  select(age_group_name,sex_name,population2014)\npopulation2015 <- read.csv(\"IHME_GBD_2019_POP_2015_Y2020M10D15.csv\")%>%\n  filter(age_group_id %in% 5:21)%>%\n  filter(location_name == \"European Union\")%>%\n  filter(!sex_name==\"both\")%>%\n  mutate(population2015=val)%>%\n  select(age_group_name,sex_name,population2015)\npopulation2016 <- read.csv(\"IHME_GBD_2019_POP_2016_Y2020M10D15.csv\")%>%\n  filter(age_group_id %in% 5:21)%>%\n  filter(location_name == \"European Union\")%>%\n  filter(!sex_name==\"both\")%>%\n  mutate(population2016=val)%>%\n  select(age_group_name,sex_name,population2016)\npopulation2017 <- read.csv(\"IHME_GBD_2019_POP_2017_Y2020M10D15.csv\")%>%\n  filter(age_group_id %in% 5:21)%>%\n  filter(location_name == \"European Union\")%>%\n  filter(!sex_name==\"both\")%>%\n  mutate(population2017=val)%>%\n  select(age_group_name,sex_name,population2017)\npopulation2018 <- read.csv(\"IHME_GBD_2019_POP_2018_Y2020M10D15.csv\")%>%\n  filter(age_group_id %in% 5:21)%>%\n  filter(location_name == \"European Union\")%>%\n  filter(!sex_name==\"both\")%>%\n  mutate(population2018=val)%>%\n  select(age_group_name,sex_name,population2018)\npopulation2019 <- read.csv(\"IHME_GBD_2019_POP_2019_Y2020M10D15.csv\")%>%\n  filter(age_group_id %in% 5:21)%>%\n  filter(location_name == \"European Union\")%>%\n  filter(!sex_name==\"both\")%>%\n  mutate(population2019=val)%>%\n  select(age_group_name,sex_name,population2019)\n\n\nEU_pop <- population2010%>%\n  inner_join(population2011,by=c(\"age_group_name\",\"sex_name\"))\nEU_pop <- EU_pop%>%\ninner_join(population2012,by=c(\"age_group_name\",\"sex_name\"))\nEU_pop <- EU_pop%>%\n  inner_join(population2013,by=c(\"age_group_name\",\"sex_name\"))\nEU_pop <- EU_pop%>%\n  inner_join(population2014,by=c(\"age_group_name\",\"sex_name\"))\nEU_pop <- EU_pop%>%\n  inner_join(population2015,by=c(\"age_group_name\",\"sex_name\"))\nEU_pop <- EU_pop%>%\n  inner_join(population2016,by=c(\"age_group_name\",\"sex_name\"))\nEU_pop <- EU_pop%>%\n  inner_join(population2017,by=c(\"age_group_name\",\"sex_name\"))\nEU_pop <- EU_pop%>%\n  inner_join(population2018,by=c(\"age_group_name\",\"sex_name\"))\nEU_pop <- EU_pop%>%\n  inner_join(population2019,by=c(\"age_group_name\",\"sex_name\"))\n\n\nEU_pop$age_group_name<-sub(\"to\",\"-\",EU_pop$age_group_name)\nEU_pop$age_group_name<-sub(\"80 plus\",\"80+\",EU_pop$age_group_name)\nEU_pop$age_group_name<-sub(\"1 - 4\",\"01 - 04\",EU_pop$age_group_name)\nEU_pop$age_group_name<-sub(\"5 - 9\",\"05 - 09\",EU_pop$age_group_name)\nnames(EU_pop)\n\nEU_pop <- EU_pop %>%\n  gather(year, pop, 3:12) \n\n\nEU_pop$year<-sub(\"population\",\"\",EU_pop$year)\nEU_pop<-EU_pop%>%rename(sex=sex_name)\nEU_pop<-EU_pop%>%rename(age=age_group_name)\nnames(EU_pop)\n\nEU_pop <- EU_pop%>%\n  mutate(pop = ifelse(sex == 'female', as.integer(pop * -1), as.integer(pop)))\n\ns<-EU_pop%>%filter(age==\"80+\")\n\n\nrange(EU_pop$pop)\n\n# plotting #####################################################\nEU_10_19_Pyramid <- EU_pop %>%\n  ggplot(aes(x = age, y = pop, fill = sex)) +\n  geom_bar(stat = 'identity') +\n  scale_fill_manual(values=c(\"#CC6666\", \"#9999CC\", \"#66CC99\")) +\n  scale_y_continuous(breaks = c(-20000000, -10000000, -5000000, 0, 5000000, 10000000, 20000000),\n                     label = c(\"20M\", \"10M\", \"5M\", \"0\", \"5M\", \"15M\", \"20M\")) +\n  coord_flip() + \n  labs(title = \"European Union Population \\nchange 2010-2019\\n\\n{closest_state}\",\n       subtitle =\"\",\n       y = \"Population\",\n       caption = \"@fgazzelloni | Data Source: IHME | Demographic Day25\") +\n  theme_ipsum() +\n  theme(legend.position = \"bottom\",\n        plot.background = element_rect(fill = \"palegreen\") ,\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank(),\n        axis.text = element_text(size = 12),\n        legend.title = element_blank(),\n        legend.key.size = unit(0.75, 'cm'),\n        legend.background = element_blank(),\n        legend.text = element_text(size = 15,face = 'bold'),\n        plot.title = element_text(size = 22,hjust = 0.0,face = 'bold'),\n        axis.title.x = element_text(size = 16,face = 'bold'),\n        axis.title.y = element_text(size = 16,face = 'bold'),\n        axis.text.x = element_text(size = 10,face = 'bold'),\n        axis.text.y = element_text(size = 10,face = 'bold'),\n        plot.caption = element_text(size = 8,hjust = 1,face = 'bold',color = \"#CC6666\"),\n        plot.margin = margin(10,10,10,10))\n\n\nEU_10_19_Pyramid <- EU_10_19_Pyramid + \n  transition_states(year,transition_length = 1,state_length = 2) + \n  enter_fade() +\n  exit_fade() + \n  ease_aes('cubic-in-out')\n\nanimate(EU_10_19_Pyramid,\n        fps = 40,duration = 5,width = 1200,height = 1400,res = 120,\n        renderer = gifski_renderer('demographic_day25.gif'))"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day17_pop_culture/day17_pop_culture.html",
    "href": "chartchallenges/cases2021/posts2021/day17_pop_culture/day17_pop_culture.html",
    "title": "Culture",
    "section": "",
    "text": "library(viridis)\nlibrary(hexbin)\nlibrary(tidyverse)\n\n# load data <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- \n\n# latest IHME covid19 projections -------------------------------\nlibrary(downloader)\nurl=\"https://ihmecovid19storage.blob.core.windows.net/latest/ihme-covid19.zip\"\ndownload(url, dest=\"ihme-covid19_latest.zip\", mode=\"wb\") \nunzip(\"ihme-covid19_latest.zip\")\n\n# select data sets of interest ------------------------------\ndf <- read.csv(\"2021-04-16/best_masks_hospitalization_all_locs.csv\")\ndf3 <- read.csv(\"2021-04-16/worse_hospitalization_all_locs.csv\")\n\n\n# manipulations -----------------------------------------\n\nmy_df_mask <- df%>% select(date,location_name,\n                           confirmed_infections,\n                           #mobility_composite,\n                           total_pop)\n\nmy_df_mandate_easing <- df3%>% select(date,location_name,\n                                      confirmed_infections)\n\nmy_df <- my_df_mask%>% left_join(my_df_mandate_easing,by=c(\"date\",\"location_name\"))\n\nnames(my_df)<-c(\"date\",\"location\",\"infections_UM\",\"population\",\"infections_ME\")\n\nmy_df_global <-my_df %>% filter(location ==\"Global\")\n\nUM_norm<-rnorm(my_df_global$infections_UM)\nME_norm<-rnorm(my_df_global$infections_ME)\n\n\n# plotting ----------------------------------------------------\n\n# inspired by:\n# http://sape.inf.usi.ch/quick-reference/ggplot2/coord\n\n\nlibrary(extrafont)\nbase_family=\"Arial Rounded MT Bold\"\nbase_size=12\nhalf_line <- base_size/2\n\n\n\nmain_plot <- ggplot(data.frame(x = UM_norm, y = ME_norm), \n                    aes(x = x, y = y)) +\n  geom_hex() + \n  coord_fixed() + \n  scale_fill_identity() + \n  labs(title = \"Global Covid19 Infections \\nUniversal Mask vs Mandate Easing\",\n       caption = \"Viz Federica Gazzelloni - DataSource: IHME Covid19 latest projections - Pop Culture day 17\",\n       x = \"Universal Mask - Infections projection\",\n       y = \"Mandate Easing - Infections projection\") +\n  theme_void() + \n  theme(line = element_line(colour = \"grey85\", size = 0.4, linetype = 1, lineend = \"round\"), \n        rect = element_rect(fill = \"gray88\", colour = \"grey85\", size = 2, linetype = 1), \n        text = element_text(family = base_family, face = \"plain\", colour = \"white\", size = base_size, \n                            lineheight = 0.9, hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(),  \n                            debug = FALSE), \n        \n        axis.line = element_line(colour = \"black\", size = 0.4, linetype = 1, lineend = \"butt\"), \n        axis.text = element_text(size = base_size * 1.1, colour = \"black\"), \n        axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2), vjust = 1), \n        axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2), hjust = 1),\n        axis.ticks = element_line(colour = \"gray94\", size = 1.3), \n        axis.ticks.length = unit(half_line, \"pt\"),\n        axis.title = element_text(colour = \"red\"),\n        axis.title.x = element_text(margin = unit(c(3.5, 0, 0, 0), \"mm\"), \n                                    vjust = 1, size = base_size * 1.3, face = \"bold\"), \n        axis.title.y = element_text(angle = 90, margin = unit(c(0, 3.5, 0, 0), \"mm\"), \n                                    vjust = 1, size = base_size * 1.3, face = \"bold\"), \n        \n        panel.background = element_rect(fill = \"red\", colour = NA), \n        panel.border = element_rect(colour = \"grey71\", fill = NA, size =4),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(colour = \"gray70\"), \n        plot.title = element_text(color=\"black\",size = base_size * 1.5, hjust = 0, vjust = 0, \n                                  face = \"bold\", \n                                  margin = margin(b = half_line * 1),family=base_family), \n        plot.subtitle = element_text(color=\"black\",size = 8, hjust = 0, vjust = 0, \n                                     margin = margin(b = half_line * 0.9)), \n        plot.caption = element_text(size = 8, hjust = 1, vjust = 1, \n                                    margin = margin(t = half_line * 0.9), color = \"purple\"), \n        plot.margin = margin(15,15,15,15))\n\n# saving ######################################\n\n\nragg::agg_png(here::here(\"day17_pop_culture\", \"Pop_culture_day17.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nmain_plot\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day14_space/day14_space.html",
    "href": "chartchallenges/cases2021/posts2021/day14_space/day14_space.html",
    "title": "Space",
    "section": "",
    "text": "library(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(maptools)\nlibrary(data.table)\n\n## loading data #####################################\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 16)\npost_offices <- tuesdata$post_offices\n\n##### wrangling ##################################\n\nhead(post_offices)\nsummary(my_df)\nglimpse(my_df)\n\nplyr::count(df$stamp_index)\n\nmy_df<-post_offices%>%filter(established>=1639,established<=2000,\n                          discontinued>=1775 ,discontinued<=2002,\n                          !is.na(stamp_index),\n                          !duration<0,\n                          !is.na(gnis_dist),\n                          !stamp_index==55,\n                          !is.na(county1))%>%\n  select(\"duration\",\"gnis_dist\",\"stamp_index\")%>%\n  group_by(stamp_index)%>%\n  summarize(avg_duration=mean(duration),avg_dist=mean(gnis_dist))\n\n\n############# setting data ready for plotting ######################\n\nlibrary(igraph)\nmat <- cor(t(my_df))\nmat[mat<0.995] <- 0\n# Make an Igraph object from this matrix:\nnetwork <- graph_from_adjacency_matrix( mat, weighted=T, mode=\"undirected\", diag=F)\n\n# Basic chart\nplot(network)\n\n# color palette\nlibrary(RColorBrewer)\ncoul <- brewer.pal(nlevels(as.factor(my_df$stamp_index)), \"Set3\")\n\n# Map the color to cylinders\nmy_color <- coul[as.numeric(as.factor(my_df$stamp_index))]\n\n#### setting for saving plot ##################################\n\nragg::agg_png(here::here(\"US_Post_office_space.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\n\n# plotting ############################################\n\npar(bg=\"mediumblue\", mar=c(1,1,1,1))\nset.seed(4)\nplot(network, \n     vertex.label.family=\"Georgia\", \n     edge.curved=0.08,\n     edge.width=2,                                 \n     edge.arrow.size=1,                       \n     edge.arrow.width=1,                          \n     edge.lty=\"solid\",\n     vertex.size=12,\n     vertex.shape=c(\"raster\",\"sphere\"), \n     vertex.color=my_color, \n     vertex.label.cex=0.7,\n     vertex.label.color=\"blue\",\n     vertex.frame.color=\"transparent\"\n)\n\nop <- par(family = \"Luminari\")\n\n#### legend and titles ########################\n\nlegend(x=1.3, y=0.7, \n       legend=paste( levels(as.factor(my_df$stamp_index)), \"stamp*\", sep=\"*\"), \n       col = coul , \n       bty = \"n\", pch=20 , pt.cex = 2, cex = 1,\n       text.col=\"white\" , horiz = F)\ntext(-1.4,1.1,\"US Post Offices\",col=\"white\", cex=1.5)\ntext(-1.3,1,\"Stamps index by distance\",col=\"white\", cex=1.2)\ntext(-1.1,0.9,\"visualization of the distance between offices by different stamps index\",col=\"white\", cex=0.8)\n\ntext(-1,-1.1,\"Viz @fgazzelloni | #TidyTueasday Week 16 | Space Day 14 | DataSource: Harvard Dataverse\",col=\"white\", cex=0.8)\npar(op)\n\n\n## imaging ######################################\n\nlibrary(png)\nlibrary(grid)\nlibrary(magick)\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"400x400\")\n\nmypng2<-readPNG(\"satellite2.png\")\nmypng3<-readPNG(\"satellite3.png\")\n\n\ngrid.raster(tidy_logo, x=0.9, y=0.2, width=.08)\ngrid.raster(mypng2, x=.09, y=.7, width=.25)\ngrid.raster(mypng3, x=.9, y=.9, width=.25)\n\n####### final ###################\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day24_monochrome/day24_monochrome.html",
    "href": "chartchallenges/cases2021/posts2021/day24_monochrome/day24_monochrome.html",
    "title": "Monochrome",
    "section": "",
    "text": "Monochrome Day24\n\nlibrary(tidyverse)\n\n# datasource is: IHME https://healthdata.org/\n\npopulation_2010_2019_long <- population_2010_2019%>%\n  pivot_longer(cols=3:12,names_to=\"population_10_19\",values_to=\"pop_value\")%>%\n  rename(location=location_name)\n\n\ndf_cause_and_pop <- bubble_df%>%\n  inner_join(population_2010_2019_long,by=\"location\")%>%\n  select(1,3:7,10)\n\n# load more libraries-----------------\n\nlibrary(ggfx)\nlibrary(gridExtra)\nlibrary(ggrepel)\nlibrary(extrafont)\noptions(scipen = 999)\n\n# plotting -------------------------------\n\np<-ggplot(data=df_cause_and_pop,aes(x=log10((YLL+YLD)/DALY),y=log10(DALY),size=pop_value)) +\n  geom_jitter(aes(size=pop_value,alpha=0.5),width = 0.15,height = 1) +\n  geom_text(aes(label=cause),check_overlap = TRUE)+\n  coord_polar() +\n  scale_color_identity() +\n  labs(title=\"European Countries\",\n       subtitle=\"DALYs by Cause years 2010-2019\",\n       caption=\"Viz Federica Gazzelloni ! DataSource: IHME | Monochromo Day 24\",\n       x=\"proportion of DALY components\",\n       y=\"DALYs\",\n       size=\"Population\",\n       alpha=\"Transparency\")+\n  theme_grey() + \n  theme(plot.background = element_rect(fill = \"black\"),\n        plot.title=element_text(face=\"bold\",size= 25,family=\"Impact\",color=\"white\"),\n        plot.subtitle=element_text(face=\"bold\",size= 15,color=\"white\",family=\"Impact\"),\n        plot.caption=element_text(face=\"bold\",size= 8,color=\"white\",family=\"Impact\"),\n        panel.grid.major = element_line(color=\"grey\"),\n        axis.text.y = element_text(size= 8,color=\"white\",family=\"Impact\"),\n        axis.text.x = element_blank(),\n        legend.background = element_blank(),\n        legend.text = element_text(size= 8,color=\"white\",family=\"Impact\"),\n        legend.title = element_text(size= 8,color=\"white\",family=\"Impact\"))\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"day24_monochromo\", \"monochrome_day24.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\np\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day4_magical/day4_magical.html",
    "href": "chartchallenges/cases2021/posts2021/day4_magical/day4_magical.html",
    "title": "Magical",
    "section": "",
    "text": "INSPIRED BY:\n\nhttps://github.com/avrodrigues/Tidy_tuesday/blob/main/2021/week14/makeup_shades.R\n\n\nhttps://github.com/AndyABaker/TidyTuesday/blob/main/2021_week14_makeupshades.R\n\n# libraries --------------------------------------\nlibrary(tidyverse)\nlibrary(ggforce)\nlibrary(extrafont)\n\n\n\n# load and wrangling ---------------------------------------------------\n\n# read the data from OurWorldData\now_df<- read.csv(\"owid-covid-data.csv\") \n\now_df[is.na(ow_df)]=0 # transform na into 0 values\n\n# location sliced by total_deaths: A<=10; 10<B>=138; 138<C>=1819; D>1819\nA <- ow_df %>% group_by(location) %>% filter(total_deaths <= 10) %>% mutate(gr=\"A\")\nB <- ow_df %>% group_by(location) %>% filter(total_deaths > 10 & total_deaths <= 138) %>% mutate(gr=\"B\")\nC <- ow_df %>% group_by(location) %>% filter(total_deaths > 138 & total_deaths <= 1819) %>% mutate(gr=\"C\")\nD <- ow_df %>% group_by(location) %>% filter(total_deaths > 1819) %>% mutate(gr=\"D\")\n\n# build a new data set \ndf<-rbind(A,B,C,D)\n\n# manipulate and select daily cases and deaths by group\ndf <- df %>%\n  mutate(date=as.Date(date)) %>%\n  arrange(- new_deaths_per_million) %>%\n  distinct(date,\n           location,\n           reproduction_rate,\n           new_cases_per_million,\n           new_deaths_per_million,\n           gr) \n\n\nman_cols <- df$location\nnames(man_cols) <- man_cols\n\n# Grouping -------------------------------------------------------------\n# selection of the first TEN countries per group with the latest number of tot deaths\na<-df%>%\n  filter(gr==\"A\")%>%\n  arrange(-new_deaths_per_million)%>%\n  group_by(location)%>%\n  summarize(av_new_deaths_per_million=mean(new_deaths_per_million))%>%\n  ungroup()%>%\n  arrange(-av_new_deaths_per_million)\n\nA_countries<-a[1:10,]$location # first 10 in group A\n\nb<-df%>%\n  filter(gr==\"B\")%>%\n  arrange(-new_deaths_per_million)%>%\n  group_by(location)%>%\n  summarize(av_new_deaths_per_million=mean(new_deaths_per_million))%>%ungroup()%>%arrange(-av_new_deaths_per_million)\n\nB_countries<-b[1:10,]$location  # first 10 in group B\n\nc<-df%>%\n  filter(gr==\"C\")%>%\n  arrange(-new_deaths_per_million)%>%\n  group_by(location)%>%\n  summarize(av_new_deaths_per_million=mean(new_deaths_per_million))%>%ungroup()%>%arrange(-av_new_deaths_per_million)\n\nC_countries<-c[1:10,]$location  # first 10 in group C\n\nd<-df%>%\n  filter(gr==\"D\")%>%\n  arrange(-new_deaths_per_million)%>%\n  group_by(location)%>%\n  summarize(av_new_deaths_per_million=mean(new_deaths_per_million))%>%ungroup()%>%arrange(-av_new_deaths_per_million)\n\nD_countries<-d[1:10,]$location  # first 10 in group D\n\n# extrapolation of the first 10 countries with the latest number of total deaths by group\nA_df<-df%>%filter(location==A_countries,gr==\"A\")\nB_df<-df%>%filter(location==B_countries,gr==\"B\")\nC_df<-df%>%filter(location==C_countries,gr==\"C\")\nD_df<-df%>%filter(location==D_countries,gr==\"D\")\n\n# build selection df for plotting\nselection<- rbind(A_df,B_df,C_df,D_df)\n\n# set a max limit for daily cases per million to use a colour warning in the plot\ncols<-selection$new_cases_per_million < 1000\n\n# count the unique countries used in the viz\nselected_countries<-plyr::count(selection$location) #31\n\n# adding two column for adj of daily cases\nselection$log_new_cases_per_million<-log(selection$new_cases_per_million)\nselection$log10_new_cases_per_million<-log10(selection$new_cases_per_million)\n\n# confirming 0 values \nselection$log_new_cases_per_million[is.infinite(selection$log_new_cases_per_million)]=0\nselection$log10_new_cases_per_million[is.infinite(selection$log10_new_cases_per_million)]=0\n\n\n# plot --------------------------------------------\n\n#axis.font <- \"Source Sans Pro\" \n#################################################################\nmy.col <- \"#4c4551\"\nfonts()\n\nlibrary(ggforce)\ncases_plot<-\n  ggplot(data=selection) +    # set the data to be used in the plot\n  geom_sina(                  # Sina plot for adj1 daily cases representation (log)\n    aes(x=gr, y=log_new_cases_per_million, color=cols), \n                   alpha=0.4, scale=F, show.legend = F,\n                   method=\"density\", \n                   maxwidth = .2,\n    position=position_jitter(0)) + \n\n  geom_hline(aes(yintercept = 6.9, colour = cols),show.legend = F) + \n  annotate(\"text\", x = 0.82, y = 7.1, label = \"<1000 daily cases per million\", family=\"Comic Sans MS\",size = 4) + \n  \n  geom_violin(                # Violin plot for adj2 daily cases representation (log10)\n    aes(x=gr, y=log10_new_cases_per_million,fill=\"#4c4551\",col=\"red\"), # higher prob is at median value\n              alpha=0.4, show.legend = F,trim=FALSE) +\n  \n  geom_crossbar(              # bar crossing on the mean values\n    aes(x=gr, y=log10_new_cases_per_million),\n    stat=\"summary\", fun=mean, fatten=0.8, width=.3) +\n  \n  stat_summary(               # star shape on the median values\n    aes(x=gr, y=log10_new_cases_per_million),\n                   fun=median, geom=\"point\", shape=8, size=2, color=\"#4c4551\") +\n  \n  annotate(\"text\", x = 0.7, y = 0.9, label = \"- AVG values\", family=\"Comic Sans MS\",size = 4) + \n  annotate(\"text\", x = 2.4, y = 2.17, label = \"* Median values\", family=\"Comic Sans MS\",size = 4) + \n      \n  # setting the elements of the plot \n  \n  theme_transparent() +\n  xlab(\"Group Countries\") + ylab(\"ADJ Daily Cases per million\") +\n  \n  # personalizing the theme\n  theme(\n    axis.title.y = element_text(family=\"Comic Sans MS\", size = 14,\n                                 color = \"grey95\"),  \n    axis.title.x = element_text(family=\"Comic Sans MS\", size = 14,\n                                color = \"grey95\"),   \n    \n    axis.text.y = element_text(size = 14,\n                                color = \"grey95\"), \n    axis.text.x = element_text(size = 14,\n                               color = \"grey95\"),\n    \n    panel.grid.major.y = element_line(linetype = 2,color=\"#665c6d\"),\n    \n    panel.grid = element_blank(),\n   \n    axis.line.x = element_line(color = \"grey95\"),\n   \n    axis.ticks.x = element_line(color= \"grey95\"),\n    axis.ticks.y = element_line(color= \"grey95\")) \n\n  \n# add a magick raster------------------------\n\nlibrary(magick)\n\nfrink <- image_read(\"https://jeroen.github.io/images/frink.png\")\nraster<-as.raster(frink)\n\nfinal <- cases_plot + annotation_raster(raster,5, 4, -3, 2)\n\n\n# final plot --------------------------------------------------------------\n# adding title, annotations and caption\n\nlibrary(cowplot)\n\nfinal.plot <- ggdraw() +\n  \n  draw_plot(\n    final,\n    x = 0.5,\n    y = 0.1,\n    width = 0.8,\n    height = 0.7,\n    hjust = 0.5,\n    vjust = 0) +\n  \n  draw_label(\n    \"COVID-19 and the Turn to Magical Thinking _Sapiens.org\",\n    x = 0.06,\n    y = 0.9,\n    fontfamily = \"Comic Sans MS\", \n    fontface = \"bold\",\n    size = 22,\n    color = \"grey95\",\n    hjust = 0) +\n  \n  draw_label(\n    \"The rebels were partly incited by a spirit medium who claimed to be possessed by a snake spirit and to have a “war medicine”\",\n    x = 0.065,\n    y = 0.85,\n    fontfamily = \"Comic Sans MS\", \n    fontface = \"plain\",\n    size = 12,\n    color = \"grey95\",\n    hjust = 0,\n    vjust = 1) +\n  \n  draw_label(\"*Rumors have spread in Sri Lanka that \\nwhite (and only white) handkerchiefs \\nprotect people from COVID-19\n    \\n*In the Philippines, volcanic ash is \\nsaid to kill the virus\n    \\n*In parts of China, it is saltwater \\n*India, it is cow dung and urine...\",\n    x = 0.8,\n    y = 0.95,\n    fontfamily = \"Comic Sans MS\", \n    fontface = \"plain\",\n    size = 10,\n    color = \"grey95\",\n    hjust = 0,\n    vjust = 1) +\n  \n  # adding explanation 1\n  annotate(\"curve\", x = 0.05, xend = 0.1, y = 0.15, yend = 0.25, \n           color = \"grey85\", curvature = -0.5) +\n  draw_label(\n    \"31 Selected countries with the \\nlowest numbers of cases and deaths \\nreported\",\n    x = 0.10,\n    y = 0.1,\n    fontfamily = \"Comic Sans MS\", \n    size = 7,\n    color = \"grey95\",\n    hjust = 0.5,\n    vjust = 0.5) +\n  \n  # adding explanation 2\n  annotate(\"curve\", x = 0.3, xend = 0.38, y = 0.1, yend = 0.23, \n           color = \"grey85\", curvature = -0.5) +\n  \n  draw_label(\n    \"Violin representing Groups' variability \\nin daily cases\",\n    x = 0.3,\n    y = 0.05,\n    fontfamily = \"Comic Sans MS\", \n    size = 7,\n    color = \"grey95\",\n    hjust = 0.5,\n    vjust = 0.5) +\n  \n  # adding explanation 3\n  annotate(\"curve\", x = 0.8, xend = 0.75, y = 0.75, yend = 0.68, \n           color = \"grey85\", curvature = 0.3) +\n  draw_label(\n    \"Light red highest numbers, Sina representation \\nof a different adj of daily cases \",\n    x = 0.88,\n    y = 0.732,\n    fontfamily = \"Comic Sans MS\", \n    size = 7,\n    color = \"grey95\",\n    hjust = 0.5,\n    vjust = 0.5) +\n  \n  ###########\n  \n\n  draw_label(\n    \"Viz @fgazzelloni | DataSource: Ourworldindata.org/coronavirus | Hint: sapiens.org (covid-19-magic)\",\n    x = 0.62,\n    y = 0.08,\n    fontfamily = \"Comic Sans MS\", \n    size = 8,\n    color = \"grey95\",\n    hjust = 0.5,\n    vjust = 0.5\n  ) +\n    \n  theme(\n    plot.background = element_rect(fill = my.col)) \n\n\n\n# save final plot ---------------------------------------------------------\n\n\nragg::agg_png(here::here(\"day4\", \"magick.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal.plot\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day11_circular/day11_circular.html",
    "href": "chartchallenges/cases2021/posts2021/day11_circular/day11_circular.html",
    "title": "Circular",
    "section": "",
    "text": "# Libraries\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(extrafont)\n\n  \n############################### REGIONS #####################  \n\nCovid19_it_reg<- read.csv(\"https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv\")\nnames(Covid19_it_reg)\n\ndf_reg <- Covid19_it_reg %>%\n  rename(regions=\"denominazione_regione\",\n         deaths=\"deceduti\") %>%\n  mutate(date=format(as.Date(data),\"%Y-%m-%d\")) %>%\n  select(date,regions,deaths)%>%\n group_by(date) %>%\n  summarize(deaths.sum=sum(deaths)) %>% ungroup() %>%\n  mutate(deaths.new=c(0,diff(deaths.sum)),\n         month=month(date),\n         year=year(date),\n         month.year=paste(month,year,sep=\"_\"))\n\n########################################################\n\n# Make the plot\nfinal <- ggplot(df_reg, aes(x=as.factor(month.year), y=log(deaths.new),\n                   fill=month.year,labels=deaths.sum))+ \n  geom_bar(stat=\"identity\") +\n  labs(title=\"Covid19 - Italy \\nNew deaths per month\",\n       subtitle=\"Normalized with log(deaths)\",\n       caption=\"Viz @fgazzelloni | Datasource: Civil Protection | Circular Day 11\",\n       x=\"Time (month.year)\",y=\"Normalized deaths\")+\n  ylim(-10,10) +\n  theme_minimal() +\n  theme(plot.title = element_text(size=28,family=\"Arial Black\"),\n        plot.subtitle = element_text(size=12,family=\"Arial Black\"),\n    legend.position = \"none\",\n        axis.text.x.top = element_text(size=3),\n    axis.text = element_blank(),\n    axis.text.x = element_text(size=8,family=\"Arial Black\",angle=0,\n                               vjust = -2,hjust=-5),\n    #axis.text.y = element_text(vjust = 2,hjust=5),\n    axis.title = element_text(size=8,family=\"Arial Black\"),\n    panel.grid = element_blank(),\n    plot.background = element_rect(fill = \"#663fd9e2\" , color = NA),\n    plot.margin = unit(rep(1,4), \"cm\") \n  ) +\n  coord_polar(start=0) \n  \n\n##########################\n\n\nragg::agg_png(here::here(\"day11\", \"Circular_day11.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day1_part-to-whole/day1_part-to-whole.html",
    "href": "chartchallenges/cases2021/posts2021/day1_part-to-whole/day1_part-to-whole.html",
    "title": "Part-To-Whole",
    "section": "",
    "text": "Load libraries\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(extrafont)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ragg)\nlibrary(rmarkdown)\nlibrary(hrbrthemes)\nlibrary(wesanderson)\n\nLoad Datasets\n\nsephora <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/sephora.csv')\nulta <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/ulta.csv')\n\nallCategories <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/allCategories.csv')\nallShades <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/allShades.csv')\nallNumbers <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/allNumbers.csv')\n\nLoad fonts\n\nloadfonts()\nfont_add_google(name = \"Amatic SC\", family = \"amatic-sc\")\nfont_add_google(\"Cedarville Cursive\", \"cedarville\")\n\nshowtext_auto(enable = TRUE)\n\npalette <- c(\"#FF0000\",\"#FF7070\",\"#F09200\",\"#FFBF1F\",\"#00A08A\",\"#2989A3\",\"#5BBCD6\",\"#A475D9\")\n\nManipulation of data\n\nsephora_sub<-sephora%>%\n  mutate(shop=rep(\"sephora\",length(brand)),\n         brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name)\n\nulta_sub<-ulta%>%\n  mutate(shop=rep(\"ulta\",length(brand)),\n         brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name)\n\n\nshops<-rbind(sephora_sub,ulta_sub)\n\nManipulation of data\n\nallCategories_sub<-allCategories%>%\n  mutate(brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  separate_rows(categories, convert = TRUE) %>%\n  mutate(categories = fct_reorder(categories, lightness))  %>%\n  select(brand,product,name,hex,lightness,categories)\n\nallShades_sub<-allShades%>%\n  mutate(brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name,hex,hue,sat,lightness)\n\nallNumbers_sub<-allNumbers%>%\n  mutate(brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name,hex,lightness,lightToDark)\n\n################### Full Join of the datasets ##############\n\nmake_up<-full_join(allCategories_sub,allShades_sub,by.x=hex,by.y=lightness)\nmake_up<-full_join(make_up,allNumbers_sub,by.x=hex,by.y=lightness)\n\nmake_up_sub<-make_up%>%\n  select(brand,name,hex,hue,sat,lightness)%>%\n  filter(!is.na(hue))%>%\n  arrange(hex)\n\nCounting uniqueness\n\nplyr::count(make_up$brand); #107\nplyr::count(make_up$product);#328\nplyr::count(make_up$name);#1,317\nplyr::count(allCategories_sub$categories)#17\n\nSelection of data for making plots\n\nmy_companies <- sort(c(\"shiseido\",\"maybelline\",\"mac\",\"lancôme\",\"l'oréal\",\"guerlain\",\"estée lauder\",\"clinique\",\"benefit cosmetics\"), decreasing = TRUE)\n\nmake_up_for_plot <- make_up_sub %>%\n  filter(brand %in% my_companies) %>%\n  select(brand, name,hex, hue,sat,lightness) %>%\n  mutate(brand=as.factor(brand)) %>%\n  group_by(brand) %>%\n  mutate(mean_lightness = mean(lightness)) %>%\n  ungroup() %>%\n  mutate(brand = fct_reorder(brand, mean_lightness))\n\n\nlibrary(ggfx)\nlibrary(gridExtra)\n\n\nplot1<-make_up_for_plot%>%\n  ggplot(aes(brand,lightness,col=hex)) + \n  with_blur(\n    geom_boxplot(size=5,show.legend = FALSE)) + \n  geom_jitter(width = 0.15,height = 0.0,size = 1) + \n  scale_colour_identity() + \n  coord_polar() + \n  labs(title = \"Shades of makeup from The Pudding\",\n       subtitle = \"All collected from the US versions of Sephora and Ulta’s websites\",\n       caption = \"107 brands, 328 products, 317 names and 17 categories\",\n       tag = \"The Pudding\",\n       x = \"Lightness\",\n       y = \"Brands)\",\n       colour = \"white\")+\n  theme_void(base_family = \"cedarville\") + \n  theme(plot.background = element_rect(fill = \"black\",color=\"black\"),\n        axis.text.x = element_text(size = 30, vjust = 2,color=\"white\"),\n        plot.title = element_text(size = 56,hjust = 0.5,color=\"white\"),\n        plot.subtitle = element_text(size = 46,hjust = 0.5,color=\"white\"),\n        plot.caption = element_text(size = 36,hjust = 0.5, \n                                    margin = margin(t = 5, b = 10),color=\"white\"),\n        plot.tag = element_text()\n        )\n          \n\nplot2<-make_up_for_plot%>%\n  ggplot(aes(brand,lightness,col=hex)) + \n  with_blur(\n    geom_point(show.legend = FALSE)) + \n  geom_jitter(width = 0.15,height = 0.0,size = 2) + \n  scale_colour_identity() +\n  coord_polar(direction=1) +\n  theme_void() + \n  theme(plot.background = element_rect(fill = \"black\")) + \n  facet_wrap(vars(brand))\n\nFinal plot\n\nlibrary(ggimage)\nrequire(magick)\n\n\nmain_plot <- plot1 + plot2\n\nfinal <- main_plot + \n  labs(title = \"Makeup - The naked truth\",\n       subtitle = \"combination for naming their shades\",\n       caption = \"TidyTuesday W14 - The Pudding - Viz - @fgazzelloni\") + \n  scale_fill_manual(values = palette,\n                    guide = guide_legend(title = NULL)) + \n  theme_void(base_family = \"cedarville\") + \n  theme(plot.background = element_rect(fill = \"#FCEBDA\",color = NA),\n        strip.text.x = element_text(color = NA),\n        axis.text.x = element_text(size = 20, vjust = 2),\n        panel.grid.major = element_line(size = 0.03, linetype = 'solid',colour = \"black\"),\n        plot.margin = margin(10, 10, 5, 10),\n        plot.title = element_text(size = 56,hjust = 0.5, margin = margin(t = 5, b = 10)),\n        plot.subtitle = element_text(size = 40,hjust = 0.5),\n        plot.caption = element_text(hjust = 0.5, size = 26))\n\nSave the plot in a .png file\n\nragg::agg_png(here::here(\"w14_the_pudding\", \"w14_the_pudding.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\nRead the image, attach the Tidytuesday logo and save it\n\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nThe_Pudding_plot <- image_read(here::here(\"w14_the_pudding/w14_the_pudding.png\"))\n\nattached_logo <- image_composite(The_Pudding_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"southeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, \n            path = \"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w14_the_pudding/w14_the_pudding.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day8_animals/day8_animals.html",
    "href": "chartchallenges/cases2021/posts2021/day8_animals/day8_animals.html",
    "title": "Animals",
    "section": "",
    "text": "library(devtools)\nlibrary(tidyverse)\nlibrary(forecast)\nlibrary(ggridges)\n\n##################################\n\n# remotes::install_github(\"BiologicalRecordsCentre/BRCindicators\")\n# vignette('BRCindicators')\nlibrary(BRCindicators)\n\ndata(bats)\n\nglimpse(bats)\n\nplyr::count(bats$species)\n\ndf <- bats%>%filter(species==\"lshorse\")\ndf\n\nbats$year<-as.factor(bats$year)\nbats$index[is.na(bats$index)]=0\nbats$collated_index[is.na(bats$collated_index)]=0\nsummary(bats$index)\n\n\n\nlibrary(paletteer)\nlibrary(pals)\n\nanimals_plot <- ggplot(data = bats, aes(x=collated_index,y=species,fill = species))+\n  geom_density_ridges_gradient(jittered_points = TRUE, scale = 2,\n                               point_size = 0.8, size = 0.5,col=\"#99D8C9\"\n                               )+\n  labs(x=\"Index\", y=\"Bats species\",\n       title=\"How different Bats' species evolve in density?\",\n       subtitle=\"Bats are one of the most likely species of whild animals involved with Covid19 Outbreak\",\n       caption=\"Viz Federica Gazzelloni - DataSource:BRCindicators - Day8\\n \")+\n  theme_minimal()+\n  theme(text=element_text(family=\"Arial\"),\n        plot.title = element_text(size=34),\n        plot.subtitle = element_text(size=20),\n        plot.caption = element_text(size=8,face=\"bold\"),\n        legend.position = \"none\")\n\n\n\n\n##########################################\nragg::agg_png(here::here(\"day8\", \"Animals_day8.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nanimals_plot\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day30_3D/day30_3D.html",
    "href": "chartchallenges/cases2021/posts2021/day30_3D/day30_3D.html",
    "title": "3d",
    "section": "",
    "text": "3-D\n\n\nsource: Tidytuesday week 9\n\n\nEmployment and Earnings | BLS | BLS Article\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(rayshader)\nlibrary(rayrender)\nlibrary(sp)\nlibrary(scales)\nlibrary(raster)\nlibrary(DataExplorer)\nlibrary(viridis)\nlibrary(ggthemes)\nlibrary(hrbrthemes)\nlibrary(extrafont)\nfonts()\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 9)\n\nemployed <- tuesdata$employed\nearn <- tuesdata$earn\n\nhead(employed)\nhead(earn)\n\nplyr::count(employed$race_gender)\nplyr::count(earn$race)\n\n\ndf <- employed %>%\n  filter(race_gender==c(\"Asian\",\"gray31 or African American\",\"White\")) %>%\n  rename(race=race_gender) %>%\n  inner_join(earn,by=c(\"race\",\"year\")) %>%\n  select(-employ_n,-ethnic_origin) \n\nplyr::count(df$industry)\nprofile_missing(df)\n\n\nmissing_industries <- df %>%\n  filter(is.na(industry)) %>%\n  select(-industry,-industry_total)\n\n\nprofile_missing(df)\nplyr::count(df$ethnic_origin)\nplyr::count(missing_industries$minor_occupation)\nplyr::count(df$minor_occupation)\nplyr::count(df$year)\nplyr::count(df$age)\n\n\nmy_df<-df%>%filter(age==c(\"16 to 24 years\",\"25 to 54 years\"))%>%\n  rename(earning=median_weekly_earn)%>%\n  mutate(earning_prop=earning/n_persons*10000)\n\nrange(my_df$earning_prop)\nlog2(0.1437547)\n\n\nemployment_3D<-ggplot(my_df,aes(x=earning,y=log2(earning_prop)))+\n  stat_density_2d(aes(fill=..density..), geom = \"raster\", contour = FALSE) +\n  scale_fill_viridis_c(option = \"A\") +\n  facet_wrap(~race)+\n  labs(title=\"Earning level by race\",\n       subtitle=\"Employed persons by industry, sex, race, and occupation\\nWeekly earnings data from the Current Population Survey\",\n       caption=\"Viz @fgazzelloni | 3D Day30 | Datasource: TidyTuesday w9 \\nEmployment and Earnings | BLS | BLS Article \",\n       fill=\"Density\",\n       x=\"Earnings(weekly)\",\n       y=\"Proportion of normalized Earnings (log2)\")+\n  theme_base()+\n  theme(strip.text = element_text(size=5,face=\"bold\",color=\"white\",family=\"Comic Sans MS\"),\n        strip.background = element_rect(color=\"gray31\",fill=\"darkseagreen4\"),\n        plot.background = element_rect(color=\"gray31\",fill=\"darkslateblue\"),\n        panel.background = element_rect(color=\"gray31\",fill=\"darkslateblue\"),\n        legend.background = element_rect(color=\"gray31\",fill=\"darkseagreen4\"),\n        legend.title = element_text(color=\"white\",face=\"bold\",family=\"Comic Sans MS\"),\n        legend.text = element_text(color=\"white\",family=\"Comic Sans MS\"),\n        plot.title = element_text(size=20,color=\"white\",family=\"Comic Sans MS\"),\n        plot.subtitle = element_text(size=10,color=\"orange\",family=\"Comic Sans MS\"),\n        plot.caption = element_text(size=8,color=\"white\",family=\"Comic Sans MS\"),\n        axis.title = element_text(color=\"white\",family=\"Comic Sans MS\"),\n        axis.text = element_text(color=\"white\",family=\"Comic Sans MS\"),\n        axis.text.x = element_text(size=8,family=\"Comic Sans MS\"),\n        axis.text.y = element_text(size=8,family=\"Comic Sans MS\"))\n\n# render plot as a 3D #######################\n\nplot_gg(employment_3D,multicore=TRUE,width=5,height=5,scale=250,windowsize=c(1400,866),\n        zoom = 0.55, phi = 30)\nrender_snapshot(\"3D_day30\")"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day2_pictogram/day2_pictogram.html",
    "href": "chartchallenges/cases2021/posts2021/day2_pictogram/day2_pictogram.html",
    "title": "Pictogram",
    "section": "",
    "text": "inspired by: https://github.com/ChrisWoodsSays/TidyTuesday/tree/master/2021/2021-03-23\n\n\nLoad packages\n\n#install.packages(\"pacman\")\npacman::p_load(ihme.covid,\n               tidyverse, lubridate, stringi, \n               unvotes, wesanderson)\n\n\n\nlibrary(glue)\nlibrary(patchwork)\nlibrary(ggtext)\n#library(showtext)\nlibrary(extrafont)\nlibrary(hrbrthemes)\n\n\n\n\nsetwd(here::here(\"GBD/IHME/IHME_forked/Covid19\"))\n\nihme_covid<- read.csv(\"2021-01-15/reference_hospitalization_all_locs.csv\",header=TRUE)\n\n\nit_regions<-c(\"Abruzzo\",\n              \"Valle d'Aosta\",\n              \"Puglia\",\n              \"Basilicata\",\n              \"Calabria\",\n              \"Campania\",\n              \"Emilia-Romagna\",\n              \"Friuli-Venezia Giulia\",\n              \"Lazio\",\n              \"Liguria\",\n              \"Lombardia\",\n              \"Molise\",\n              \"Piemonte\",\n              \"Sardegna\",\n              \"Sicilia\",\n              \"Marche\",\n              \"Toscana\",\n              \"Umbria\",\n              \"Veneto\",\n              \"Provincia autonoma di Bolzano\",\n              \"Provincia autonoma di Trento\")\n\n\n\nihme_covid_back_up<-ihme_covid\n\nihme_covid_ICU<-ihme_covid_back_up%>%\n  filter(location_name==it_regions)%>%\n  select(-V1,-location_id)\n\n\nihme_covid_ICU<-data.frame(ihme_covid_ICU)\n\nicu_bed_var<-ihme_covid_ICU %>%\n  select(location_name,date,ICUbed_mean:ICUbed_upper) %>%\n  pivot_longer(ICUbed_mean:ICUbed_upper, \n               names_to = \"comparison\",\n               values_to = \"count\") %>%\n  mutate(date=as.Date(date,\"%Y-%m-%d\"),\n         time=seq(1,length(date),1),\n                year = lubridate::year(date),\n                month = lubridate::month(date),\n         week=week(date),\n         proportion = 100 * count/sum(count))\n\n\n\n\n##################################################################\n\nstartDate <- min(icu_bed_var$week)\nendDate <- max(icu_bed_var$week)\n\n\nscaleFactor = 3\n\ninnerLine <- 20 * scaleFactor\n\nmiddleLine <- 30 * scaleFactor\n\nouterLine <- 40 * scaleFactor\n\nalpha = 1\n\n# Get palette\nRoyal1 <- wesanderson::wes_palettes$Royal1\n\n\ng <- ggplot() +\n  \n  geom_ribbon(data = icu_bed_var %>% filter(comparison == \"ICUbed_mean\"), \n              aes(x = week, ymin = middleLine - count, ymax = middleLine + count, \n                  fill = comparison), \n              alpha = alpha/1, stat=\"identity\", colour = NA) +\n  \n  geom_ribbon(data = icu_bed_var %>% filter(comparison == \"ICUbed_upper\"), \n              aes(x = week, ymin = outerLine , ymax = outerLine + count, fill = comparison), \n              alpha = alpha, stat=\"identity\", colour = NA) +\n   \n  geom_ribbon(data = icu_bed_var %>% filter(comparison == \"ICUbed_lower\"), \n              aes(x = week, ymin = innerLine, ymax = innerLine - count, fill = comparison), \n              alpha = alpha, stat=\"identity\", colour = NA) +\n  \n  labs(title = \"Covid19 Italy regions - ICU beds capacity\",\n       subtitle = \"situation from Feb 2020 to March 2021 by week\",\n       caption = \"27.3.2021  |  Visualisation by @fgazzelloni  |  Data:IHME\") +\n\n  theme_ft_rc() +\n  coord_polar(direction=1) +\n  \n  scale_x_continuous(breaks=seq(startDate, endDate, by=round((endDate - startDate)/2)), \n                     expand=c(0,0), lim=c(startDate, endDate)) +\n  \n  scale_fill_manual(values = Darjeeling1) +\n  \n  theme(legend.position = \"none\",\n        axis.text.x = element_blank(), axis.title.x = element_blank(),\n        axis.text.y = element_blank(), axis.title.y = element_blank(),\n        strip.text.x = element_text(hjust = 0.5,size=8),\n        strip.text.y = element_text(hjust = 0.5, size = 5),\n        panel.grid.minor.x = element_blank(),\n        panel.spacing.x = unit(0, \"lines\"), # Remove horizontal spacing between facets\n        panel.spacing.y = unit(0, \"lines\"), # Remove vertical pacing between facets\n        plot.title.position = \"plot\",\n        \n        plot.background = element_rect(fill = \"black\", color = NA),\n        panel.background = element_rect(fill = \"black\", color = NA),\n        plot.margin = margin(5,5,5,5)\n  ) +\n  \n  facet_wrap(~location_name,\n             labeller = label_wrap_gen()) \n  \n\n\n\n#######################################################################################\n\n\n# Create non radial legend with a sample of data\ndataLegend <- icu_bed_var  %>% filter(location_name == \"Lazio\" & year == \"2020\") \n\ndataLegend$comparison = factor(dataLegend$comparison, levels=c('ICUbed_upper','ICUbed_mean','ICUbed_lower'))\n\nlegend <- ggplot() +\n  \n  geom_ribbon(data = dataLegend %>% filter(comparison == \"ICUbed_mean\"), \n              aes(x = week, \n                  ymin = middleLine - count/2, ymax = middleLine + count/2, \n                  fill = comparison), alpha = alpha/1, stat=\"identity\", colour = NA) +\n  geom_ribbon(data = dataLegend %>% filter(comparison == \"ICUbed_upper\"),\n              aes(x = week, \n                  ymin = 20, ymax = 20 + count, \n                  fill = comparison), alpha = alpha, stat=\"identity\", colour = NA) +\n  geom_ribbon(data = dataLegend %>% filter(comparison == \"ICUbed_lower\"),\n              aes(x = week, \n                  ymin = 23 - count/3, ymax = 23, \n                  fill = comparison), alpha = alpha, stat=\"identity\", colour = NA) +\n  \n  theme_void() +\n  coord_polar(direction=1) +\n  scale_fill_manual(values = Darjeeling1) +\n  theme(legend.position = \"none\",\n        axis.text.x = element_blank(), axis.title.x = element_blank(),\n        axis.text.y = element_blank(), axis.title.y = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank(),\n        \n        panel.spacing.x = unit(1, \"lines\"), # Increase horizontal spacing between facets\n        plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = \"pt\"),\n        strip.text.x = element_blank(),\n        \n        plot.background = element_rect(fill = \"black\", color = \"black\"),\n        panel.background = element_rect(fill = \"black\", color = \"black\"),\n        ) +\n  facet_wrap(vars(comparison))\n\n\n\n\n# Add facets, text and legend together and plot\n\n\nplot <- cowplot::ggdraw(g) +\n  \n  cowplot::draw_plot(legend, 0.4,0, 0.25, .2, scale=1.1) +\n  \n  cowplot::draw_label(\"ICUbed_upper\", x = 0.42, y = 0.15, colour = \"#929299\", size = 8, hjust = 0.5) +\n  cowplot::draw_label(\"ICUbed_mean\", x = 0.52, y = 0.15, colour = \"#929299\", size = 8, hjust = 0.5) +\n  cowplot::draw_label(\"ICUbed_lower\", x = 0.62, y = 0.15, colour = \"#929299\", size = 8, hjust = 0.5)\n\n\nggsave(here::here(\"GBD/IHME/IHME_forked\", \"covid19_icu.png\"), \n       plot, device = \"png\", width = 29.65, height = 21, \n       units = \"cm\")"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day15_multivariate/day15_multivariate.html",
    "href": "chartchallenges/cases2021/posts2021/day15_multivariate/day15_multivariate.html",
    "title": "Multivariate",
    "section": "",
    "text": "library(GGally)\nlibrary(medflex)\nlibrary(patchwork)\nlibrary(extrafont)\nlibrary(xkcd)\n\n\n# load data & plotting #####################################\n\ndata(UPBdata, package = \"medflex\")\n\nmain_plot <- ggpairs(\n  UPBdata[, c(\"age\", \"initiator\", \"gender\", \"negaff\")],\n  aes(colour=gender,alpha=0.7),\n  upper = list(continuous = \"density\", combo = \"box_no_facet\"),\n  lower = list(continuous = \"points\", combo = \"dot_no_facet\")\n) + \n  ggtitle(\"Relationships\") + \n  labs(subtitle=\"Strategies for the Estimation of Natural Direct and Indirect Effects of bad relationships\\n\",\n       caption=\"Multivariate Behavioral Research, Viz Federica Gazzelloni Datasource: R Package medflex Multivariate Day 15\")+\n  theme_void() + \n  theme(plot.title = element_text(family=\"xkcd\",size=24),\n        plot.subtitle = element_text(family=\"xkcd\",size=14,color=\"darkred\"),\n        plot.caption = element_text(family=\"xkcd\"),\n        strip.text.y =  element_text(family=\"xkcd\",size=9),\n        strip.text.x = element_text(family=\"xkcd\",size=9),\n        strip.background = element_blank(),\n        axis.text.x = element_text(family=\"xkcd\",size=8),\n        plot.margin = margin(5,8,5,8),\n        plot.background = element_rect(color = \"darkred\",size=4))\n\n\n# saving ######################################\n\n\nragg::agg_png(here::here(\"day15_multivariate\", \"Multivariate_day15.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nmain_plot\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day7_physical/day7_physical.html",
    "href": "chartchallenges/cases2021/posts2021/day7_physical/day7_physical.html",
    "title": "Physical",
    "section": "",
    "text": "Physics day6\n\n\ntitle: How soil structure and soil hydraulic behavior change through time?\n\n\nternary diagram for soil type classification - open project\n\n\nsources:\nhttps://essd.copernicus.org/articles/12/3189/2020/ https://yutannihilation.github.io/allYourFigureAreBelongToUs/3/ https://cran.r-project.org/web/packages/soilphysics/soilphysics.pdf\n\n\ndata:\nhttps://dataservices.gfz-potsdam.de/panmetaworks/showshort.php?id=escidoc:5146891\n\nlibrary(tidyverse)\nlibrary(ggtern)\nlibrary(ggthemes)\nlibrary(gridExtra)\nlibrary(extrafont)\n\n# install.packages(\"soilphysics\")\nlibrary(soilphysics)\n\nls(\"package:soilphysics\")\n\ndata(\"SoilAggregate\")\ndata(\"bulkDensity\") # observations of soil bulk density and soil moisture\ndata(\"compaction\") # physical soil variables related to soil compaction.\ndata(\"skp1994\")\n\n# h = matrix\n# w = volumetric water content\n# pr = penetration resistance\n# bd = bulk density \n\n\ndata(skp1994)\n\n\n\nternchart <- ggtern(data=skp1994,aes(W,BD,PR)) + \n  geom_point(alpha=0.4,size=2,color=\"turquoise\") + \n  labs(x=\"volumetric water content (m3/m3)\",\n       y=\"soil bulk density (Mg/m3)\",\n       z=\"penetration resistance (MPa)\", #soil penetration resistance values (MPa).\n       title=\"How water content and penetration resistance behave\",\n       subtitle = \"Least Limiting Water Range ternchart data 1994 - Viz Federica Gazzelloni - Datasource: Soilphysics\\nto determine the soil critical moisture and the maximum bulk density\"\n       \n       ) + \n  theme_rgbw() +\n  theme_hidetitles() +\n  theme(plot.title = element_text(family=\"Comic Sans MS\",size=24),\n        plot.subtitle = element_text(family=\"Comic Sans MS\",size=10),\n        plot.margin = margin(10,0,0,0)\n        )\n\n\n#----- save the plot ----------------------------------\n##########################################\nragg::agg_png(here::here(\"day7\", \"Physics_day7.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nternchart\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day27_educational/day27_educational.html",
    "href": "chartchallenges/cases2021/posts2021/day27_educational/day27_educational.html",
    "title": "Educational",
    "section": "",
    "text": "Educational day27\ndata : Our World in Data https://ourworldindata.org/educational-mobility-inequality\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(extrafont)\nlibrary(ggtext)\nlibrary(ggrepel)\nlibrary(ggExtra)\n\nlibrary(DataExplorer)\n#profile_missing(edu)\n\nedu_unlist<- unlist(read.csv(\"share-of-women-15-years-and-older-with-no-education.csv\"))\nedu<- read.csv(\"share-of-women-15-years-and-older-with-no-education.csv\")\nhead(edu)\nnames(edu)<-c(\"country\",\"code\",\"year\",\"percentage\")\nplyr::count(edu$country)\n\n\ndf <- edu%>%\n  group_by(country)%>%\n  mutate(abs_change=abs(c(0,diff(percentage))),\n         rel_change=ifelse(percentage==0,0,abs_change/percentage*100))%>%\n  ungroup()\n  \nabs_ch_70 <- edu%>%\n  group_by(country)%>%\n  filter(year==\"1970\")\n\nabs_ch_10 <- edu%>%\n  group_by(country)%>%\n  filter(year==\"2010\")\n\nabs_ch_70_10<- abs_ch_70%>%\n  inner_join(abs_ch_10,by=c(\"country\",\"code\"))%>%\n  mutate(abs_ch_70_10=percentage.y-percentage.x,\n         rel_ch_70_10=abs_ch_70_10/percentage.x*100)\n  \n\n##### plotting #################\n#font_info_google()\n#font_families()\nfont_add_google(\"Oxygen Mono\",family=\"Oxygen Mono\")\nshowtext_opts(dpi = 250)\nshowtext_auto(enable = TRUE)\n\nsquaredplot <-  ggplot(data=df,\n         mapping=aes(x=year,y=rel_change,group=country,color=country,fill=country)) + \n  geom_bin2d()+\n  geom_text_repel(aes(label=country),max.overlaps = 2,vjust=-1,size=6,\n                  nudge_x = 0.5,segment.colour = NA) +\n  labs(title=\"Girls Education\",\n       subtitle = \"relative change by country (1970 - 2010)\\n\",\n       caption=\"Viz. Federica Gazzelloni | Data: OurWorldinData | Educational Day27\",\n       tag=\"\\nWorld countries with the highest change\\n\")+\n  theme_void()+\n  ylim(c(0,1000))+\n  theme(legend.position = \"none\",\n        plot.tag = element_text(color=\"white\",size=18,family=\"Oxygen Mono\"),\n        plot.tag.position = c(0.2, 0.80),\n        plot.title = element_text(color=\"white\",size=40,family=\"Oxygen Mono\",face=\"bold\"),\n        plot.subtitle = element_text(color=\"white\",size=25,family=\"Oxygen Mono\"),\n        plot.caption = element_text(color=\"white\",family=\"Oxygen Mono\",size=10),\n        plot.background = element_rect(color=\"black\",fill=\"black\"),\n        panel.background = element_rect(color=\"black\",fill=\"black\"),\n        axis.text = element_text(color=\"white\",family=\"Oxygen Mono\"),\n        axis.text.x = element_text(color=\"white\",family=\"Oxygen Mono\",size=8),\n        axis.text.y = element_text(color=\"white\",family=\"Oxygen Mono\",size=8),\n        panel.grid = element_blank(),\n        plot.margin = margin(10,10,10,10))\n\n\nsquaredplot\n\n\n# saving ######################################\n\n\nragg::agg_png(here::here(\"day27_educational\", \"educational_day27.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nsquaredplot\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2021/posts2021/day28_future/day28_future.html",
    "href": "chartchallenges/cases2021/posts2021/day28_future/day28_future.html",
    "title": "Future",
    "section": "",
    "text": "Tidytuesday week 28 & future day28\ninspired by http://applied-r.com/plotting-forecast-data-objects-ggplot/\n\nlibrary(tidyverse)\nlibrary(tidytuesdayR)\nlibrary(DataExplorer)\nlibrary(lubridate)\nlibrary(tsibble)\nlibrary(ggrepel)\nlibrary(corrplot)\nlibrary(forecast)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ragg)\nlibrary(RColorBrewer)\n\n\n# load data ###############################\ndepartures <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-27/departures.csv')\n\n# check and wrangling #####################\nhead(departures)\nglimpse(departures)\nprofile_missing(departures)\n\n\ndf <- departures%>%\n  select(2,4,6,7,8,11,12,13)%>%\n  arrange(leftofc)%>%\n  mutate(diff=fyear_gone-fyear)%>%\n  drop_na()%>%\n  select(coname,exec_fullname,fyear,fyear_gone,diff,leftofc,departure_code,ceo_dismissal,max_tenure_ceodb)%>%\n  filter(abs(diff)<6)%>%filter(!diff<0)\n\nrange(df$fyear_gone)\n\n# first plot to see the pattern ###############\n# excluded raws with more than 6 years difference between fyear and fyear_gone\nggplot(df) + \n  geom_point(aes(x=factor(fyear),y=factor(fyear_gone),color=ifelse(abs(diff)<6 ,\"in bound\",\"out of bound\")) )+\n  labs(color=\"\")+\n  theme(axis.text.x = element_text(angle=90))\n  \n# selecting data for main plot ############################\ntot_dismissal <- df %>%\n  mutate(y_month=yearmonth(leftofc),month=month(leftofc))%>%\n  group_by(y_month,month)%>%\n  summarize(tot_dism=sum(ceo_dismissal),tot_posit=sum(max_tenure_ceodb))%>%\n  ungroup()\n\n\n# set the theme and modifications as it is needed --------------------\nlibrary(ggthemes)\n\n# theme for forecast data objects\ntheme.fxdat <- theme_gdocs() +\n  theme(plot.title = element_text(size = 25,color=\"grey45\"),\n        plot.subtitle = element_text(size = 11),\n        plot.caption = element_text(size = 9, hjust = 0, vjust = 0, colour = \"grey50\"),\n        axis.title.y = element_text(face = \"bold\", color = \"gray30\"),\n        axis.title.x = element_text(face = \"bold\", color = \"gray30\", vjust = -1),\n        axis.text.x = element_text(angle=90),\n        panel.background = element_rect(fill = \"grey95\", colour = \"grey75\"),\n        panel.border = element_rect(colour = \"grey75\"),\n        panel.grid.major.y = element_line(colour = \"white\"),\n        panel.grid.minor.y = element_line(colour = \"white\", linetype = \"dotted\"),\n        panel.grid.major.x = element_line(colour = \"white\"),\n        panel.grid.minor.x = element_line(colour = \"white\", linetype = \"dotted\"),\n        strip.background = element_rect(size = 1, fill = \"white\", colour = \"grey75\"),\n        strip.text.y = element_text(face = \"bold\"),\n        axis.line = element_line(colour = \"grey75\"),\n        legend.position = \"top\",\n        legend.box = \"horizontal\",\n        legend.box.just = \"bottom\")\n\ntot_dismissal$y_month[80]\ntot_dismissal$tot_dism+rnorm(tot_dismissal$tot_dism)[1]\n\n# plotting ########################################\nlibrary(zoo)\nset.seed(345)\nplot1 <- ggplot(tot_dismissal,aes(x=y_month,y=tot_dism+rnorm(tot_dism))) + \n  geom_point(aes(color=\"Number of dismissal\"),fill=\"black\")+\n  geom_line(aes(color=\"Dismissal Trend\"),size=0.2) +\n  geom_smooth(aes(color=\"Smoothed conditional means\"))+\n  geom_line(aes(y_month,rollmedian(tot_dism, k = 15, fill = NA, align = \"center\"),color=\"Rolling median\"),size=0.8)+\n  labs(x=\"Time(Year-Month)\",\n       y=\"Normalized total n. of dismissal\",\n       title=\"33 Years trend CEO Departures\",\n       subtitle=\"1988 - 2021\\n Rolling median, smooth variation line and trend\",\n       caption=\"\",\n       color=\"\"\n       )+\n  scale_color_brewer(palette = \"Dark2\")+\n  theme.fxdat \n\n\n\n# future ----------------------------\nx<-tot_dismissal$tot_dism\n\n# create time series data object (ts) using tot_dism\nres.gen <- ts(x, frequency = 12, start = c(1992, 6))\n\nxx<-tot_dismissal%>%\n  pivot_wider(names_from=\"month\",values_from=\"tot_dism\",values_fill=0)%>%select(-tot_posit,-y_month)\n\n########################\nfit.y <- tslm(res.gen ~ trend + season)\nfx.y <- forecast(fit.y, h = 17, level = c(80, 95, 99))\n\n\nsource(\"plot_fx.R\")\n\nplot2 <- plot_fx(fx.y,\n        PI = TRUE,\n        line.cols = NA,\n        shade.cols = NA,\n        show.gap = TRUE,\n        date.breaks = \"15 months\",\n        date.format = \"%b-%y\",\n        main.title = \"CEO Departures forecast\",\n        sub.title = \"Transformed 33 years trend in Linear trend with seasonal dummy variables\",\n        caption = \"Viz. @fgazzelloni | DataSource: Gentry et al. & investors.com | TidyTuesday week18\",\n        x.title = \"CEO Departures by Year and Month\",\n        y.title = \"Total numbers of CEO Departures\")\n\n\nfinal<-plot1+plot2\n\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w18\", \"tidytuesday_Departures.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################ \nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"W18/tidytuesday_Departures.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_Departures.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "chartchallenges/cases2021/index.html",
    "href": "chartchallenges/cases2021/index.html",
    "title": "30DayChartChallenge 2021",
    "section": "",
    "text": "3d\n\n\nNetworks\n\n\n\n\n\n\nApr 30, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeviations\n\n\nNetworks\n\n\n\n\n\n\nApr 29, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFuture\n\n\nNetworks\n\n\n\n\n\n\nApr 28, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEducational\n\n\nNetworks\n\n\n\n\n\n\nApr 27, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrends\n\n\nNetworks\n\n\n\n\n\n\nApr 26, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemographic\n\n\nNetworks\n\n\n\n\n\n\nApr 25, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonochrome\n\n\nNetworks\n\n\n\n\n\n\nApr 24, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTiles\n\n\nNetworks\n\n\n\n\n\n\nApr 23, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnimation\n\n\nNetworks\n\n\n\n\n\n\nApr 22, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDownwards\n\n\nNetworks\n\n\n\n\n\n\nApr 21, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpwards\n\n\nNetworks\n\n\n\n\n\n\nApr 20, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange\n\n\nNetworks\n\n\n\n\n\n\nApr 19, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnections\n\n\nNetworks\n\n\n\n\n\n\nApr 18, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCulture\n\n\nNetworks\n\n\n\n\n\n\nApr 17, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTree\n\n\nNetworks\n\n\n\n\n\n\nApr 16, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultivariate\n\n\nNetworks\n\n\n\n\n\n\nApr 15, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpace\n\n\nNetworks\n\n\n\n\n\n\nApr 14, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCorrelation\n\n\nNetworks\n\n\n\n\n\n\nApr 13, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStrips\n\n\nNetworks\n\n\n\n\n\n\nApr 12, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCircular\n\n\nNetworks\n\n\n\n\n\n\nApr 11, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbstract\n\n\nNetworks\n\n\n\n\n\n\nApr 10, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistics\n\n\nNetworks\n\n\n\n\n\n\nApr 9, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnimals\n\n\nNetworks\n\n\n\n\n\n\nApr 8, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPhysical\n\n\nNetworks\n\n\n\n\n\n\nApr 7, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExperimental\n\n\nNetworks\n\n\n\n\n\n\nApr 6, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlope\n\n\nNetworks\n\n\n\n\n\n\nApr 5, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMagical\n\n\nNetworks\n\n\n\n\n\n\nApr 4, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHistorical\n\n\nNetworks\n\n\n\n\n\n\nApr 3, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPictogram\n\n\nNetworks\n\n\n\n\n\n\nApr 2, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPart-To-Whole\n\n\nNetworks\n\n\n\n\n\n\nApr 1, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chartchallenges/cases2023/index.html",
    "href": "chartchallenges/cases2023/index.html",
    "title": "30DayChartChallenge 2023",
    "section": "",
    "text": "Data day\n\n\nNetworks\n\n\n\n\n\n\nApr 30, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonochrome\n\n\nNetworks\n\n\n\n\n\n\nApr 29, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrend\n\n\nNetworks\n\n\n\n\n\n\nApr 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGood bad\n\n\nNetworks\n\n\n\n\n\n\nApr 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLocal change\n\n\nNetworks\n\n\n\n\n\n\nApr 26, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGobal change\n\n\nNetworks\n\n\n\n\n\n\nApr 25, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTheme day\n\n\nNetworks\n\n\n\n\n\n\nApr 24, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTiles\n\n\nNetworks\n\n\n\n\n\n\nApr 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreenenergy\n\n\nNetworks\n\n\n\n\n\n\nApr 22, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDown upwards\n\n\nNetworks\n\n\n\n\n\n\nApr 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCorrelation\n\n\nNetworks\n\n\n\n\n\n\nApr 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnthropocene\n\n\nNetworks\n\n\n\n\n\n\nApr 19, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData day\n\n\nNetworks\n\n\n\n\n\n\nApr 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNetworks\n\n\nNetworks\n\n\n\n\n\n\nApr 17, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFamily\n\n\nNetworks\n\n\n\n\n\n\nApr 16, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPositive negative\n\n\nNetworks\n\n\n\n\n\n\nApr 15, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew tool\n\n\nNetworks\n\n\n\n\n\n\nApr 14, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPopculture\n\n\nNetworks\n\n\n\n\n\n\nApr 13, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTheme day\n\n\nNetworks\n\n\n\n\n\n\nApr 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCircular\n\n\nNetworks\n\n\n\n\n\n\nApr 11, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHybrid\n\n\nNetworks\n\n\n\n\n\n\nApr 10, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHigh low\n\n\nNetworks\n\n\n\n\n\n\nApr 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHumans\n\n\nNetworks\n\n\n\n\n\n\nApr 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHazard\n\n\nNetworks\n\n\n\n\n\n\nApr 7, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData day\n\n\nNetworks\n\n\n\n\n\n\nApr 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlope\n\n\nNetworks\n\n\n\n\n\n\nApr 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHistorical\n\n\nNetworks\n\n\n\n\n\n\nApr 4, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFauna flora\n\n\nNetworks\n\n\n\n\n\n\nApr 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWaffle\n\n\nNetworks\n\n\n\n\n\n\nApr 2, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPart-To-Whole\n\n\nNetworks\n\n\n\n\n\n\nApr 1, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day8_humans/day8_humans.html",
    "href": "chartchallenges/cases2023/posts2023/day8_humans/day8_humans.html",
    "title": "Humans",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 06)\n\n\nbig_tech_stock_prices <- tuesdata$big_tech_stock_prices\nbig_tech_companies <- tuesdata$big_tech_companies\n\n\ndf <- big_tech_stock_prices%>%\n  inner_join(big_tech_companies,by=\"stock_symbol\")\n\n\ndf%>%head\n\nHUMAN THEME\n\nlibrary(ggplot2)\n\n# Create example data\nbig_tech_stock_prices <- data.frame(\n  date = seq(as.Date(\"2021-01-01\"), as.Date(\"2021-12-31\"), by = \"day\"),\n  apple = rnorm(365, mean = 140, sd = 10),\n  amazon = rnorm(365, mean = 3200, sd = 100),\n  facebook = rnorm(365, mean = 350, sd = 20),\n  google = rnorm(365, mean = 2500, sd = 50)\n)\n\n# Create ggplot with human theme\nggplot(big_tech_stock_prices, aes(x = date)) +\n  geom_line(aes(y = apple, color = \"Apple\")) +\n  geom_line(aes(y = amazon, color = \"Amazon\")) +\n  geom_line(aes(y = facebook, color = \"Facebook\")) +\n  geom_line(aes(y = google, color = \"Google\")) +\n  scale_color_manual(values = c(\"Apple\" = \"#A9A9A9\", \"Amazon\" = \"#FFA500\", \"Facebook\" = \"#4169E1\", \"Google\" = \"#008000\")) +\n  labs(title = \"Big Tech Stock Prices\", x = \"Date\", y = \"Stock Price\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\", margin = margin(b = 20)),\n    axis.title = element_text(size = 16, face = \"bold\"),\n    axis.text = element_text(size = 14),\n    legend.title = element_blank(),\n    legend.text = element_text(size = 14),\n    legend.position = \"bottom\"\n  )\n\n\nmy_companies<- c(\"Apple Inc.\",\"Microsoft Corporation\",\"Netflix, Inc.\", \"Tesla, Inc.\")\n\nlibrary(scales)\ndf %>% \n  filter(company%in%my_companies)%>%\n  select(date,volume,company)%>%\n  group_by(company)%>%\n  mutate(mean=mean(volume,na.rm = TRUE),\n         sd=sd(volume,na.rm = TRUE))%>%\n  ggplot(aes(x = date)) +\n  geom_hline(aes(yintercept=mean,color=company),linewidth=0.3)+\n  geom_line(aes(y = volume, group=company, color=company),\n            linewidth=0.1,key_glyph=\"timeseries\") +\n  scale_y_log10(expand=c(0,0),\n                labels = label_number(scale_cut = cut_short_scale()))+\n  scale_x_date(expand = c(0,0))+\n  scale_color_manual(values = c(\"Apple Inc.\" = \"#0071bc\",\n                                \"Microsoft Corporation\" = \"#FFA500\", \n                                \"Netflix, Inc.\" = \"#fff1e0\", \n                                \"Tesla, Inc.\" = \"#c15a4f\")) +\n  guides(color=guide_legend(nrow = 2))+\n  labs(title = \"Big Tech Stock Prices\", y = \"Stock Price Volume\",\n       subtitle=\"Humans activity - Best Companies Mean Trend\",\n       caption=\"\\nDataSource: #TidyTuesday 2023 week6 Big Tech Stock Prices\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day8 - humans\\n\") +\n  ggthemes::theme_economist()+\n  theme(text = element_text(family=\"Roboto Condensed\",color=\"#250c5f\"),\n    plot.title = element_text(size = 25, face = \"bold\", margin = margin(b = 20)),\n    plot.background = element_rect(color=\"#89a5b9\",fill=\"#89a5b9\"),\n    panel.background = element_rect(color=\"#89a5b9\",fill=\"#89a5b9\"),\n    axis.title = element_text(size = 16, face = \"bold\"),\n    axis.text = element_text(size = 12),\n    axis.title.x = element_blank(),\n    legend.key.size = unit(15,units = \"pt\"),\n    #legend.key.width = unit(15,units = \"pt\"),\n    legend.title = element_blank(),\n    legend.box.background = element_rect(color=\"#250c5f\",fill=\"#250c5f\"),\n    legend.text = element_text(size = 11,color=\"white\"),\n    legend.position = \"bottom\",\n    panel.grid = element_line(linewidth=0.0),\n    axis.line.y = element_line(),\n    axis.text.y = element_text(hjust=1)\n  )\n\n\nggsave(\"w6_BTSP.png\",\n       width = 7,height = 5)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day7_hazard/day7_hazard.html",
    "href": "chartchallenges/cases2023/posts2023/day7_hazard/day7_hazard.html",
    "title": "Hazard",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 05)\n\n\ncats_uk <- tuesdata$cats_uk\ncats_uk_reference <- tuesdata$cats_uk_reference\n\n\ndf <- cats_uk%>%\n  inner_join(cats_uk_reference,by=\"tag_id\")\n\n\ndf%>%\n  slice()%>%\n  glimpse()\n\n\nlibrary(survival)\nlibrary(\"survminer\")\n\nsurv_df <- df%>%\n  select(timestamp,hunt,animal_sex)%>%#DataExplorer::profile_missing()\n  filter(!is.na(hunt))%>%#count(hunt)\n  mutate(animal_sex=ifelse(animal_sex==\"m\",1,2),\n         hunt=ifelse(hunt==\"FALSE\",0,1),\n         timestamp=as.POSIXct(timestamp, format = \"%Y-%m-%d %H:%M:%S\"),\n         day=as.Date(timestamp,\"%Y-%m-%d %H:%M:%S\",tz=\"GMT\"))\n\nrange(surv_df$day)\nstart_date <- as.Date(\"2017-06-03\")\nend_date <- as.Date(\"2017-11-30\")\ndate_seq <- seq(start_date, end_date, by = \"day\")\n\ncat_hz <- surv_df %>%\n  group_by(day)%>%\n  mutate(time=as.numeric(day - start_date) + 1)%>%\n  arrange(time)\n\n\nfit <- survfit(Surv(time, hunt) ~ animal_sex, data = cat_hz)\n\n\nggsurv <- ggsurvplot(fit,\n                data = cat_hz,\n                censor.shape = \"|\",\n                censor.size = 4,\n                risk.table = TRUE,\n                submain = \"Hazards Distribution and Sex Differences in Hunting Risk\",\n                caption = \"Based on Kaplan-Meier estimates\\nDataSource: #TidyTuesday 2023 Week5 Pet Cats UK\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day7 - hazards\\n\") \n\nggsurv$plot %+%\n  ggthemes::scale_colour_fivethirtyeight(labels=c(\"Male\",\"Female\")) %+%\n  labs(title=\"Survival of UK Cats\") %+%\n  theme_survminer(base_family = \"Roboto Condensed\",\n                  font.main = c(18, \"bold\"),\n                  font.submain = c(14, \"bold.italic\"),\n                  font.caption = c(11, \"plain\"),\n                  font.x = c(12, \"bold.italic\"),\n                  font.y = c(12, \"bold.italic\"),\n                  font.tickslab = c(12, \"plain\")) %+%\n  theme(plot.background = element_rect(fill=\"grey90\",color=\"grey90\"),\n        panel.background = element_rect(fill=\"grey90\",color=\"grey90\"),\n        legend.background = element_blank())\n\n\nshowtext.auto(enable = FALSE)\nggsave(\"w5_PCUK.png\",\n       width = 7,height = 5)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day24_theme_day/day24_theme_day.html",
    "href": "chartchallenges/cases2023/posts2023/day24_theme_day/day24_theme_day.html",
    "title": "Theme day",
    "section": "",
    "text": "Gazzelloni F. (2023), Data Visualization: UN Woman\n\nData for this visualization is from the un.org, to download the data: https://population.un.org/wpp/Download/Standard/Fertility/.\nThe theme for the challenge is Theme Day: UN Woman and I chosen a package made by Cédric Vidonne, which provides a ggplot2 theme and a set of colour palettes for making charts and graphics based on UNHCR Data Visualization Guidelines.\nTo install the package:\n\ninstall.packages(\"remotes\")\nremotes::install_github(\"vidonne/unhcrthemes\")\n\nLoad necessary packages:\n\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(unhcrthemes)\n\nDownload and load the data:\n\nlibrary(readxl)\ndf <- read_excel(\"data/WPP2022_FERT_F04_BIRTHS_BY_5-YEAR_AGE_GROUPS_OF_MOTHER.xlsx\", \n    sheet = \"Estimates\", \n    skip = 16)\ndf%>%names\n\n\ndf1 <- df%>%\n  janitor::clean_names()%>%\n  pivot_longer(cols = 13:20)%>%\n  select(region=region_subregion_country_or_area,\n         year,name,value)%>%\n  mutate(value2=as.numeric(value),\n         value2=round(value2),\n         name=gsub(\"x\",\"\",name),\n         name=gsub(\"_\",\"-\",name))%>%\n  rename(age=name) %>%\n  filter(!is.na(year))\n\ndf1%>%head;\ndf1%>%dim\n\n164160 4\n\ndf1%>%summary()\n\n\noptions(scipen=999)\ndf1%>%\n  filter(region==\"WORLD\",\n         year==2021) %>%\n  ggplot(aes(x = age, y = value2)) +\n  geom_bar(stat = \"identity\", fill = \"#0072C6\") +\n  labs(\n    title = \"World: Number of births classified by five-year age groups of mother\",\n    subtitle=\"Data are presented in thousands (K)\",\n    x = \"Age category\",\n    y = \"Value\",\n    caption=\"DataSource:Fertility standard projections (population.un.org)\\n#30DayChartChallenge day24: Theme Day: UN Woman | DataViz: Federica Gazzelloni\"\n  ) +\n  scale_y_continuous(labels = label_number(suffix = \"K\", scale = 1e-3))+\n  unhcrthemes::theme_unhcr()\n\n\nlibrary(showtext)\nshowtext.auto(enable = FALSE)\nggsave(\"day_14_UNWoman.png\",\n       bg=\"white\",\n       width = 7,height = 5)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day30_data_day/day30_data_day.html",
    "href": "chartchallenges/cases2023/posts2023/day30_data_day/day30_data_day.html",
    "title": "Data day",
    "section": "",
    "text": "Gazzelloni F. (2023), Data Visualization: World Bank\n\nSource: World Bank\nWorld Bank: https://datacatalog.worldbank.org/\nTo download the data from the World Bank we need {wbstats} package https://gshs-ornl.github.io/wbstats/.\n\nlibrary(tidyverse)\nlibrary(rnaturalearth)\nlibrary(leaflet)\nlibrary(DT)\n\n# remotes::install_github(\"nset-ornl/wbstats\")\nlibrary(wbstats)\n\nThis function helps locating the data from the database, we need to specify the language of the data.\n\nlist <- wb_cache(\"en\")\n\n\nwb_search(pattern = \"poverty\")%>%\n  filter(str_detect(indicator,\"poverty\"))\n\nMultidimensional poverty index (scale 0-1) Updated data 2023-03-30\n\ndata <- wb_data(indicator=\"SI.POV.MDIM.XQ\")\ndata %>%pull(date)%>%range()\n\nCheck missing values:\n\ndata %>% DataExplorer::profile_missing()\n\n\ndf <- data %>%\n  group_by(iso2c,iso3c,country)%>%\n  reframe(index=round(mean(as.numeric(SI.POV.MDIM.XQ),na.rm = TRUE),2))%>%\n  mutate(index=ifelse(is.nan(index),NA,index),\n         index_cat=cut_interval(index,5))\n\ndf <- df%>%as.data.frame()\n\n\nmap <- ne_countries()\nmap$index <- df[match(map$iso_a3, df$iso3c), \"index\"] \nmap$index_cat <- df[match(map$iso_a3, df$iso3c), \"index_cat\"]\n\n\nMap\n\npal <- colorFactor(\n  palette = c(\"#dfd1bf\",\"#e1a95f\",\"orange\",\"#FF7F7F\",\"dark red\"), \n  domain = map$index_cat,\n  na.color = NA,\n  reverse = FALSE\n)\n\n\nm <- leaflet(map,\n        options = leafletOptions(zoomControl = FALSE,\n                                 minZoom = 2, maxZoom = 2,\n                                 dragging = FALSE)) %>%\n  addTiles() %>%\n  setView(lng = 0, lat = 0, zoom = 2) %>%\n  addPolygons(stroke = TRUE,\n              weight = 0.2,\n              smoothFactor = 0.1, \n              fillOpacity = 0.8,\n              fillColor = ~ pal(index_cat),\n              label = labels,\n              color = ~ pal(index_cat))%>%\n  leaflet::addLegend(\"bottomright\",\n                     pal = pal, \n                     values = ~index_cat,\n                     na.label = \"missing\",\n                     opacity = 0.9, \n                     title = \"Index\"\n  )%>%\n  addControl(\"Multidimensional poverty index (scale 0-1)<br>Updated data 2023-03-30\", \n             position = \"topleft\")%>%\n  addControl(\"Source: WorldBank {wbstats}: SI.POV.MDIM.XQ<br>#30DayChartChallenge Day 30: WorldBank | Map: Federica Gazzelloni\", \n             position = \"bottomleft\")\n  \nm\n\n\nlibrary(htmlwidgets)\nlibrary(webshot)\n\n\n\n## save html to png\nsaveWidget(m, \"temp.html\", selfcontained = FALSE,\n           title = \"#30DayChartChallenge World Bank\")\nwebshot(\"temp.html\", \n        vheight = 500,\n        vwidth = 800,\n        zoom = 3,\n        expand = c(10, 50, 0, 50),\n        file = \"day30_worldbank.png\",\n        cliprect = \"viewport\")"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day27_good_bad/day27_good_bad.html",
    "href": "chartchallenges/cases2023/posts2023/day27_good_bad/day27_good_bad.html",
    "title": "Good bad",
    "section": "",
    "text": "Gazzelloni F. (2023), Data Visualization: Wordcloud Good/Bad\n\n\n# Load the required packages\nlibrary(wordcloud)\nlibrary(tm)\nlibrary(tidyverse)\nlibrary(tidytext)\n\n# sample text dataset\nload(\"text.RData\")\n\n# Create a corpus from the text dataset\ncorpus <- Corpus(VectorSource(text))\n\n# Clean the corpus by removing stopwords and punctuation\ncorpus <- tm_map(corpus, removePunctuation)\ncorpus <- tm_map(corpus, removeWords, stopwords(\"english\"))\n\n\n\n# Create a term-document matrix from the corpus\ntdm <- TermDocumentMatrix(corpus)\n\n# Convert the term-document matrix to a matrix\nm <- as.matrix(tdm)\n\n# Get the frequency of each term in the matrix\nv <- sort(rowSums(m), decreasing = TRUE)\n\n# Create a data frame with the terms and their frequency\nset.seed(1111)\ndf <- data.frame(word = names(v), freq = v) %>%\n  inner_join(get_sentiments(\"bing\"), by = \"word\") %>% #count(sentiment)\n  filter(sentiment %in% c(\"positive\",\n                          \"negative\")) %>%\n  mutate(\n    color = ifelse(sentiment == \"positive\",\n                   \"#250c5f\", \"#cf5f26\")) %>%\n  sample_n(300)\n  \n                 \n#summary(colors$freq)\npng(\"wordcloud.png\", res = 180)\nwordcloud(df$word, \n          freq = df$freq, \n          ordered.colors = TRUE,\n          random.color = FALSE,\n          min.freq = 1,\n          scale = c(5, 0.5), \n          colors = df$color)\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day23_tiles/day23_tiles.html",
    "href": "chartchallenges/cases2023/posts2023/day23_tiles/day23_tiles.html",
    "title": "Tiles",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization Neolithic Founder Crops\n\nThe term “Neolithic Founder Crops” refers to the crops that were first domesticated during the Neolithic period, which began around 10,000 BCE. These crops include wheat, barley, peas, lentils, and chickpeas, among others.\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 16)\nfounder_crops <- tuesdata$founder_crops\nfounder_crops %>%head\n\n\nfounder_crops%>%names\n\nEight founder crops — emmer wheat, einkorn wheat, barley, lentil, pea, chickpea, bitter vetch, and flax.\n\nfounder_crops%>%count(longitude,latitude,category,founder_crop)\n\n\nworld <- map_data(\"world\")\nlong_range <- range(founder_crops$longitude)\nlat_range <- range(founder_crops$latitude)\nlong_range;lat_range\n\n\nfounder_crops%>%\n  ggplot(aes(x=longitude,y=latitude))+\n  geom_polygon(data=world,\n               mapping=aes(long,lat,group=group),\n               inherit.aes = FALSE,\n               fill=NA,color=\"grey70\")+\n  stat_bin2d(aes(fill = after_stat(density)),\n             binwidth = c(1,1))+\n  coord_quickmap(xlim = c(30,50),ylim = c(30,40))\n\n\nfounder_crops %>%\n  filter(!is.na(category)) %>%\n  ggplot(aes(longitude, latitude, color = category)) +\n  geom_polygon(\n    data = world,\n    aes(long, lat, group = group),\n    fill = NA,\n    color = \"grey70\"\n  ) +\n  stat_bin2d(aes(fill = after_stat(density)),\n             alpha = 0.3,\n            # color=\"navy\",\n             binwidth = c(1, 1)) +\n  geom_point(aes(size = n)) +\n  guides(alpha = \"none\", fill = \"none\", size = \"none\") +\n  coord_quickmap(xlim = c(30, 50), ylim = c(30, 40))+\n    tvthemes::scale_fill_avatar(type = \"continuous\")+\n   tvthemes::scale_color_avatar(reverse = TRUE)+\n  tvthemes::theme_avatar()+\n  theme(axis.title = element_text(size=6),\n        axis.title.y = element_text(size=6,hjust = 1))\n\n\ntail_df <- founder_crops%>%\n  count(taxon_source,genus,family,category,founder_crop,age_start,age_end,n,prop)\n\n\nfounder_crops%>%\n  count(founder_crop,age_start,age_end,n,prop)%>%\n  filter(!is.na(founder_crop)) %>%\n  arrange(age_start)%>%\n  group_by(founder_crop,age_start,age_end)%>%\n  reframe(tot=sum(n)) %>%\n  ggplot(mapping=aes(x=age_start, y=age_end)) +\n  stat_bin2d(aes(fill = after_stat(density)),\n             color=\"white\",size=1,\n             binwidth = c(500,1500))+\n  scale_x_reverse()+\n  scale_y_reverse()+\n  coord_cartesian(clip = \"off\")+\n  labs(title=\"\",\n       subtitle=\"\",\n       caption=\"DataSource: #TidyTuesday Week 16 Neolithic Founder Crops\\n#30DayChartChallenge Day23 Tiles | DataViz: Federica Gazzelloni\",\n       x=\"Age Start: oldest date for the record, in years before 1950 CE (years BP)\",\n       y=\"Age End: most recent date, in years before 1950 CE (years BP)\")+\n    annotate(geom = \"text\",\n           family=\"Roboto Condensed\",\n           fontface=\"bold\",\n           label=\"Neolithic\\nFounder Crops\",\n           size=12,\n           color=\"#cf5f26\",\n           hjust=0,\n           x = 15000 ,y =0 )+\n   tvthemes::scale_fill_avatar(type = \"continuous\")+\n  #scale_fill_continuous(labels=scales::percent)\n  tvthemes::theme_avatar()+\n  theme(axis.title = element_text(size=6),\n        axis.title.y = element_text(size=6,hjust = 1),\n        legend.text = element_text(size=4),\n        plot.caption = element_text(hjust=0.5))\n\n\nggsave(\"w16_NFC.png\",\n       width = 7,height = 4)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day18_data_day/day18_data_day.html",
    "href": "chartchallenges/cases2023/posts2023/day18_data_day/day18_data_day.html",
    "title": "Data day",
    "section": "",
    "text": "To cite Federica’s work please use:\n\nGazzelloni F. (2023), Data Visualization: Eurosat hlth_hlye data\n\n\nlibrary(tidyverse)\n# install.packages(\"eurostat\")\nlibrary(eurostat)\nlibrary(sf)\nlibrary(countrycode)\n\n\nid <- search_eurostat(\"Healthy life years by sex\")\nid <- id[1,]\nid\n# save(id,file=\"id.RData\")\n\n\ndata <- get_eurostat(\"hlth_hlye\",unit=\"PC\")\n# save(data,file=\"data.RData\")\n\n\ndf <- data%>%\n  filter(indic_he==\"HLY_PC_0\")%>%\n  mutate(year=year(time))%>%\n  select(geo, year,sex,values)%>%\n  mutate(sex=case_when(sex==\"F\"~\"Female\",\n                       sex==\"M\"~\"Male\",\n                       TRUE~\"Both\"))\ndf%>%head\n\n\nmy_countries_abbr <- unique(df$geo)\n\n\n# countrycode::codelist%>%names\n\nmy_countries <- countrycode::codelist %>%\n  count(country.name.en, iso2c) %>%\n  filter(iso2c %in% my_countries_abbr)%>%\n  rename(region=country.name.en)\n\nmy_countries_names <- unique(my_countries$region)\n\n\ndf_countries <- df%>%\n  inner_join(my_countries,by=c(\"geo\"=\"iso2c\"))\n\ndf_countries%>%head\n\n\ndf_geometry <- map_data(\"world\") %>%\n  filter(region %in% my_countries_names) %>%\n  group_by(group) %>%\n  sf::st_as_sf(coords = c(1, 2), crs = 4326) %>%\n  summarise(geometry = st_combine(geometry)) %>%\n  st_cast(\"POLYGON\") \n\ndf_geometry %>% head\n\n\npolygons <- rnaturalearth::ne_countries(returnclass = \"sf\")\n\nggplot()+\n  geom_sf(data=polygons)+\n  geom_sf(data=df_geometry,aes(geometry=geometry),color=\"red\")\n\n\ndf_coords <- map_data(\"world\") %>%\n  filter(region %in% my_countries_names)%>%\n  select(region,group)\n\ndf_full <- df_geometry%>%\n  inner_join(df_coords,by=\"group\") %>% \n  merge(df_countries,by=\"region\")\n\n\naustria <- df_full%>%\n  filter(region==\"Austria\",year==2020)\n\n\npolygons <- rnaturalearth::ne_countries(scale = 110, \n                                        type = 'map_units',\n                                        returnclass = 'sf')\n\nggplot()+\n  geom_sf(data=polygons)+\n  geom_sf(data=df_geometry,aes(geometry=geometry),fill=\"beige\")+\n  geom_sf(data=austria,aes(geometry=geometry,fill=values))+\n  coord_sf()\n\nZooming in\nsource: https://www.r-bloggers.com/2019/04/zooming-in-on-maps-with-sf-and-ggplot2/\n\n# polygons%>%View\n\nmy_countries_names[30]<- \"England\"\nmy_countries_names[31]<- \"N. Ireland\"\nmy_countries_names[32]<- \"Scotland\"\nmy_countries_names[33]<- \"Wales\"\neu <- polygons[polygons$name %in% my_countries_names,]\nggplot() + geom_sf(data = eu) + theme_bw()\n\n\neu_qualy <- df_full%>%\n  filter(year==2020)\n\n\nmap <- ggplot()+\n  geom_sf(data=eu)+\n  geom_sf(data=df_geometry,aes(geometry=geometry),fill=\"beige\")+\n  geom_sf(data=eu_qualy,aes(geometry=geometry,fill=values))+\n  coord_sf()+\n  facet_wrap(~sex)\n\nmap\n\n\nmap +\n  scale_fill_gradient(low = \"white\",high = \"#a60845\") +\n  labs(title=\"Healthy life years by sex (2020) %\",\n       caption=\"DataSource: Eurosat - Healthy life years by sex\\n#30DayChartChallenge day18 Eurosat | DataViz: Federica Gazzelloni\") +\n  ggthemes::theme_map(base_size = 12, base_family = \"Roboto Condensed\")+\n  theme(strip.background = element_rect(color = \"#a60845\",fill=\"#a60845\"),\n        strip.text = element_text(color=\"white\"),\n        legend.position = \"bottom\",\n        plot.title = element_text(color=\"#a60845\",size=20),\n        plot.caption = element_text(color=\"#a60845\",size=12))\n\n\nggsave(\"map.png\",width = 7,height = 5)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day26_local_change/day26_local_change.html",
    "href": "chartchallenges/cases2023/posts2023/day26_local_change/day26_local_change.html",
    "title": "Local change",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization London Marathon\n\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 17)\nwinners <- tuesdata$winners\nlondon_marathon <- tuesdata$london_marathon\n\n\nwinners%>%count(Nationality)\n\n\nlondon_marathon%>%head\n\n\nlondon_marathon%>%\n  mutate(ymon=zoo::as.yearmon(Date),.after=Date)%>%\n  arrange(ymon)%>%\n  pivot_longer(cols=c(Starters,Finishers))%>%\n  select(ymon,name,value)%>%\n  ggplot(aes(x=ymon,y=value,group=name,color=name))+\n  geom_point()+\n  geom_smooth(method=\"lm\",\n              linewidth=0.5,\n              se=F)\n\n\ntime <- winners%>%\n  count(Time)%>%\n  mutate(time=hms(Time))\n  \n\nlibrary(hms)\n\ndf <- winners%>%\n  select(Year,Nationality,Time)%>%\n  mutate(time=lubridate::hms(Time)) %>%\n  group_by(Nationality)%>%\n  mutate(mean=mean(Time),\n          sd=sd(Time),\n          max=max(Time),\n          min=min(Time))%>%\n  filter(!is.na(sd))\ndf\n\n\n# Create multiple plots using facet_wrap()\nggplot(df, aes(x = Year, y = time)) +\n  geom_point() +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), color = \"grey80\") +\n  scale_color_gradient(low = \"blue\", high = \"red\") +\n  geom_smooth(method = \"lm\") +\n  #scale_y_time()+\n  facet_wrap(~Nationality,scales = \"free_y\")+\n  theme(axis.text.y = element_blank())\n\n\nlondon_marathon%>%\n  pivot_longer(cols=c(Applicants,Accepted))%>%\n  select(Year,name,value) %>%\n   ggplot(aes(x=Year,y=value,group=name,color=name))+\n  geom_point()+\n  geom_smooth(method=\"lm\",\n              linewidth=0.5,\n              se=F)\n\n\nlondon_marathon%>%\n  filter(!Year==2020)%>%\n  select(Year,Applicants,Accepted)%>%\n   ggplot(aes(x=Year))+\n   geom_point(aes(y=Applicants))+\n   geom_point(aes(y=Accepted))+\n   geom_segment(aes(xend=Year,y=Accepted,yend=Applicants))\n\n\nwinners%>%\n  group_by(Nationality)%>%\n  mutate(n=n())%>%\n  arrange(-n)%>%\n  filter(Nationality%in%c(\"United Kingdom\",\"Ireland\",\"Kenya\"))%>%\n  ggplot(aes(x=Nationality,y=n))+\n  geom_point()\n\n\nlondon_marathon%>%\n  filter(!is.na(Raised))%>%\n  select(Year,Accepted,Raised)%>%\n  inner_join(winners%>%count(Year,Nationality),by=\"Year\")%>%\n  arrange(Year)%>%\n  mutate(Nationality=as.factor(Nationality))%>%\n  filter(Nationality%in%c(\"Kenya\",\"United Kingdom\",\"United States\"))\n  ggplot(aes(Accepted,Raised,group=Nationality,color=Nationality))+\n  geom_point()+\n  geom_line()\n  facet_wrap(~Nationality)\n\n\nlibrary(sysfonts)\nsysfonts::font_add_google(\"Chelsea Market\",\"Chelsea Market\")\nlibrary(showtext)\nshowtext::showtext_auto()\n\n\nlondon_marathon%>%\n  filter(!is.na(Raised))%>%\n  select(Year,Accepted,Raised)%>%\n  inner_join(winners%>%count(Year,Nationality),by=\"Year\")%>%\n  arrange(Year)%>%\n  mutate(Nationality=as.factor(Nationality))%>%\n  filter(Nationality%in%c(\"Kenya\",\"United Kingdom\",\"United States\"))%>%\n  mutate(Accepted=scale(Accepted,\n                        center = F, scale = TRUE),\n         Raised=scale(Raised,\n                      center = F, scale = TRUE)\n         ) %>%\n  # pivot_longer(cols = c(\"Accepted\",\"Raised\"))%>% #count(Year)\n  ggplot(aes(x=Year)\n             #group=name,\n             #color=name,fill=name)\n         )+\n  geom_point(aes(y=Accepted),\n             shape=21,stroke=0.5,\n             size=2,\n             color=\"white\",\n             fill=\"#910C00\",\n             key_glyph = draw_key_rect)+\n    geom_point(aes(y=Raised),\n             shape=21,stroke=0.5,\n             size=2,\n             fill=\"#00668F\",\n             color=\"white\",\n             key_glyph = draw_key_rect)+\n  geom_line(aes(y=Accepted,color=\"Accepted\"),\n            linewidth=1,\n            key_glyph = draw_key_rect)+\n    geom_line(aes(y=Raised,color=\"Raised\"),\n              linewidth=1,\n            key_glyph = draw_key_rect)+\n  geom_segment(aes(xend=Year,y=Accepted,yend=Raised),\n               color=\"grey80\")+\n  facet_wrap(~Nationality) +\n  labs(title=\"Amount raised for charity based on acceptance\",\n       subtitle=\"scaled by the standard deviations without centering\",\n       caption=\"DataSource: #TidyTuesday Week 17 London Marathon\\n#30DayChartChallenge Day 26 uncertanties: local change | DataViz: Federica Gazzelloni\",\n       color=\"\")+\n  scale_x_continuous(breaks = c(2007,2010,2014,2017))+\n  scale_colour_manual(\"\", \n                      breaks = c(\"Accepted\", \"Raised\"),\n                      values = c(\"#910C00\", \"#00668F\")) +\n  guides(fill=\"none\")+\n  ggthemes::theme_stata(base_family = \"Chelsea Market\",\n                        scheme=\"s1rcolor\")+\n  theme(text=element_text(size=30),\n        strip.background = element_rect(color=\"#910C00\",fill=\"#910C00\"),\n        plot.caption = element_text(hjust = 0.5, size=30, lineheight = 0.5),\n        plot.title = element_text(size=60),\n        plot.subtitle = element_text(size=40),\n        axis.title.y = element_blank())\n\n\nshowtext::showtext_auto(enable = T)\nggsave(\"w17_LM.png\",\n       dpi=320,\n       width = 7,height = 5,\n       bg=\"black\")"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day16_family/day16_family.html",
    "href": "chartchallenges/cases2023/posts2023/day16_family/day16_family.html",
    "title": "Family",
    "section": "",
    "text": "To cite Federica’s work please use:\n\nGazzelloni F. (2023), Data Visualization: Family Wordcloud\n\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(sysfonts) # this is included in showtext\nlibrary(extrafont)\nloadfonts()  \nfonts()\nsysfonts::font_families()\n  \nlibrary(wordcloud2)\n  \n  # Define the font families to use\n  font_families <- c(\"Arial\", \n                     \"Times New Roman\", \n                     \"Courier New\", \n                     \"Verdana\", \n                     \"Georgia\", \n                     \"Helvetica\", \n                     \"Comic Sans MS\", \n                     \"Impact\", \n                     \"Tahoma\", \n                     \"Trebuchet MS\", \n                     \"Lucida Console\", \n                     \"Palatino Linotype\", \n                     \"Book Antiqua\", \n                     \"Calibri\", \n                     \"Cambria\",\n                     \"sans\",\n                     \"serif\",\n                     \"mono\",\n                     \"wqy-microhei\",\n                     \"Pacifico\",\n                     \"Schoolbell\",\n                     \"Dongle\",\n                     \"MedievalSharp\")\n  \n  # Create a data frame with the font family names\n  df <- data.frame(word = font_families, \n                   freq = rnorm(23))\n  \n  # Create the wordcloud with the font families as labels\n  set.seed(1234)\n  wordcloud2(df, \n             fontFamily = font_families, \n             size = 1.5, \n             rotateRatio = 0.05, \n             shape = \"circle\",\n             color = \"random-light\", backgroundColor = \"grey\")"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day25_gobal_change/day25_gobal_change.html",
    "href": "chartchallenges/cases2023/posts2023/day25_gobal_change/day25_gobal_change.html",
    "title": "Gobal change",
    "section": "",
    "text": "Gazzelloni F. (2023), Data Visualization: Global Change\n\n\nlibrary(tidyverse)\n# Install and load the covid19 package\n# install.packages(\"COVID19\")\nlibrary(COVID19)\n\n\n# Get global COVID-19 data\ncovid_data <- covid19(data_source = \"jhu\", level = 1)\n\n# View the first few rows of the data\nhead(covid_data)\n\n\ncovid_data%>%DataExplorer::profile_missing()\n\n\ncovid_data%>%\n  slice()%>%\n  glimpse()\n\n\ndf <- covid_data%>%\n  filter(!is.na(longitude))%>%\n  select(date,longitude,latitude,population,confirmed,deaths,recovered,facial_coverings)\n\ndf %>% head\n\n\nworld <- map_data(\"world\")%>%\n  filter(!region==\"Antarctica\")\n\np <- df%>%#count(facial_coverings)\n  ggplot(aes(longitude,latitude))+\n  geom_polygon(data=world,mapping=aes(x=long,y=lat,group=group),\n               fill=NA,color=\"grey\")+\n  geom_point(aes(color=facial_coverings))+\n  scale_color_viridis_c()+\n  labs(color=\"Facial Covering\",\n       title=\"Covid-19 Global Change in Population's Usage of Facial Coverings\",\n       caption=\"Covid-19 Global Change in Population's Usage of Facial Coverings\\nDataSource: COVID19 package (https://covid19datahub.io ) Guidotti and Ardia (2020)\\n#30DayChartChallenge Day25 Global Change | Animation: Federica Gazzelloni\") +\n  coord_quickmap()+\n  ggthemes::theme_map()+\n  theme(plot.caption = element_text(hjust = 0.5))\n\n\nlibrary(gganimate)\np_animated <- p +\n  transition_time(date) +\n  ease_aes('linear') +\n  labs(title = 'Date: {frame_time}')\n\n# Render the animation\n# animate(p_animated, fps = 10, duration = 30)\n\n\n# Save the animation as a GIF\nanim_save(\"day25_GlobalChange.gif\", \n          animate(p_animated, fps = 10, duration = 30))"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day9_high_low/day9_high_low.html",
    "href": "chartchallenges/cases2023/posts2023/day9_high_low/day9_high_low.html",
    "title": "High low",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 07)\n\n\nage_gaps <- tuesdata$age_gaps\nage_gaps%>%head\n\n\nage_gaps%>%names\n\n\nage_gaps%>%dim\n\n\nlibrary(geomtextpath)\n\nage_gaps%>%\n  group_by(movie_name)%>%\n  mutate(avg=mean(age_difference))%>%\n  pivot_longer(cols = c(\"character_1_gender\",\"character_2_gender\"),names_to = \"type\",values_to = \"gender\") %>%\n  mutate(type=ifelse(type==\"character_1_gender\",\"First Character Gender\",\"Second Character Gender\")) %>%\n  ggplot(aes(avg,fill=gender))+\n  geom_histogram()+\n  facet_wrap(~type)+\n  tvthemes::scale_fill_brooklyn99(reverse=FALSE)+\n  labs(title=\"Hollywood Age Gaps\",\n       subtitle=\"Age difference - Avg values\",\n       caption=\"\\nDataSource: #TidyTuesday 2023 Week7 Hollywood Age Gaps\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day9 - high/low\\n\",x=\"\",y=\"Count\")+\n  tvthemes::theme_brooklyn99(text.font=\"Roboto Condensed\")+\n  theme(panel.grid = element_line(linetype=\"dashed\",linewidth = 0.2),\n        strip.text = element_text(face=\"bold\"))+\n    annotate(\n    \"textsegment\",\n    x=60,xend=20,y=150,yend=70, \n    label = \"high/low\", arrow = arrow(length = unit(5,units = \"pt\"))\n  )\n\n\nggsave(\"w7_HIAG.png\",\n       width = 7,height = 5)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day5_slope/day5_slope.html",
    "href": "chartchallenges/cases2023/posts2023/day5_slope/day5_slope.html",
    "title": "Slope",
    "section": "",
    "text": "Looking at making slopes for the #30DayCahrtChallenge 2023 - day 5\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 03)\n\n\nartists <- tuesdata$artists\nartists%>%head\n\n\nartists%>%DataExplorer::profile_missing()%>%arrange(-pct_missing)\n\n413 Artistis,\n\nggplot(artists)+\n  geom_point(aes(x = artist_unique_id,y=artist_nationality))+\n  facet_wrap(~artist_race)\n\n\nggplot(artists,aes(x = year, y = space_ratio_per_page_total, group = artist_unique_id)) +\n  geom_line()+\n  facet_wrap(~artist_gender)\n\n\nartists %>%\n  filter(artist_gender==\"Female\") %>%\nggplot(aes(x = year, y = space_ratio_per_page_total, group = artist_unique_id)) +\n  geom_line()+\n  facet_wrap(~artist_nationality)\n\n\nartists %>%\n  filter(artist_gender==\"Female\",\n         artist_nationality==\"French\",\n         artist_race==\"White\") %>%\nggplot(aes(x = year, y = space_ratio_per_page_total, group = artist_unique_id)) +\n  geom_line()+\n  facet_wrap(~book)\n\nGiorgio de Chirico space_ratio_per_page_total along the time.\n\nartists%>%\n  filter(artist_name==\"Giorgio de Chirico\") %>%\n  ggplot(\n       aes(x = year, y = space_ratio_per_page_total, group = artist_unique_id)) +\n  geom_point()+\n  geom_smooth(method = \"lm\")\n  geom_abline(slope=-0.000050,intercept = mean(artists$space_ratio_per_page_total))\n\n\nggplot(artists,\n       aes(x = year, y = space_ratio_per_page_total, group = artist_unique_id)) +\n  geom_line()+\n  facet_wrap(vars(artist_nationality))\n\n\nartists%>%\n  filter(artist_nationality==\"Italian\")%>%#count(year)\n  mutate(year=as.integer(year)) %>%\nggplot(\n       aes(x = year, y = space_ratio_per_page_total, \n           group = artist_name,\n           fill=artist_name,\n           color=artist_name,\n           label=artist_name)) +\n  geom_point(shape=21,\n             stroke=0.5,\n             alpha=0.5,\n             show.legend = FALSE)+\n  geomtextpath::geom_textsmooth(method = \"lm\",\n                                se=FALSE,\n                                family=\"Roboto Condensed\",\n                                show.legend = FALSE)+\n  scale_color_viridis_d()+\n  scale_x_continuous(limits = c(1945,2035),n.breaks = 5,expand = c(0,0))+\n  facet_wrap(~book,scales = \"free\") +\n  labs(y=\"Space Ratio per Page Total\",\n       x=\"Year\",\n       title=\"Male Italian Artists\",\n       subtitle=\"how much space their work took up in each textbook\",\n       caption = \"DataSource: #TidyTuesday 2023 week3 Art history\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day5 - slope\\n\")+\n  hrbrthemes::theme_ipsum_rc(plot_title_size = 28,\n                             caption_face = \"bold\",\n                             caption_family = \"Roboto Condensed\",\n                             base_family = \"Roboto Condensed\"\n                              )+\n    theme(strip.background = element_blank(),\n          strip.placement = \"outside\",\n          strip.clip = \"off\",\n          strip.text = element_text(hjust=0.5,size=20),\n          plot.margin = unit(c(5,10,5,5),units = \"pt\"))\n\n\nggsave(\"w3_Arhd.png\",\n       bg=\"white\",\n       width = 9,height = 5)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day2_waffle/day2_waffle.html",
    "href": "chartchallenges/cases2023/posts2023/day2_waffle/day2_waffle.html",
    "title": "Waffle",
    "section": "",
    "text": "Load the libraries\nJoin the two sets by footnote\nThe new dataset combines, year, title, … with the footnote of the Star Trek Timelines. The data comes from the {rtrek} package by Georgios Karamanis."
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day2_waffle/day2_waffle.html#how-to-make-a-waffle",
    "href": "chartchallenges/cases2023/posts2023/day2_waffle/day2_waffle.html#how-to-make-a-waffle",
    "title": "Waffle",
    "section": "How to make a Waffle",
    "text": "How to make a Waffle\nThis is a little example from: https://r-charts.com/part-whole/waffle-chart-ggplot2/\n\n# install.packages(\"waffle\", repos = \"https://cinc.rud.is\")\nlibrary(waffle)\n\n# Vector\nx <- c(30, 25, 20, 5)\n\n# Waffle chart\nwaffle(x, rows = 8)\n\n\n\n\nIn this dataset there are three formats: book, episode and story\n\ndf%>%\n  count(format)%>%\n  waffle(rows=20)\n\n\nUsing ggplot2\nThis Waffle is made of 12 different colors for identifying the SSeries. Here are used many colors from the trekcolors package for coloring the series of different colors.\n\n# install.packages(\"trekcolors\")\nlibrary(trekcolors)\n# trekcolors::lcars_colors()\n\nThe fonts are from the trekfont package.\n\n# install.packages(\"trekfont\")\nlibrary(trekfont)\n# trekfont::show_trekfonts()\nlibrary(showtext)\n\nLoading required package: sysfonts\n\n\nLoading required package: showtextdb\n\nfont <- c(\"Khan\", \"StarNext\", \"FederationDS9Title\", \"Federation\", \"Klingon\", \"ModernVulcan\", \"TNGcast\", \"FederationStarfleet\")\npath <- system.file(paste0(\"fonts/\", font, \".ttf\"), package = \"trekfont\")\nfor(i in seq_along(font)) font_add(font[i], path[i])\nfont_families()\n\n [1] \"sans\"                \"serif\"               \"mono\"               \n [4] \"wqy-microhei\"        \"Khan\"                \"StarNext\"           \n [7] \"FederationDS9Title\"  \"Federation\"          \"Klingon\"            \n[10] \"ModernVulcan\"        \"TNGcast\"             \"FederationStarfleet\"\n\nshowtext_auto(enable = TRUE)\n\n\nlibrary(waffle)\ndf%>%\n  count(series)%>%\n  drop_na()%>%\n  waffle(rows = 20, size = 0.5)+\n  scale_fill_manual(values =as.character(lcars_colors())) +\n  # Waffle plot\n  #ggplot(aes(fill = series, values = n)) +\n  #geom_waffle(n_rows = 20, size = 0.5, colour = \"white\") +\n  #scale_fill_manual(values =as.character(lcars_colors())) +\n  coord_equal() +\n  scale_x_continuous(expand = c(0, 0))+\n  labs(title=\"Star Trek Timelines Series\",\n       subtitle = \"\",\n       caption=\"DataSource: #TidyTuesday 2022 week52 - Star Trek Timelines\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day2 - Waffle\\n\")+\n  theme_void()+\n  theme(text = element_text(family= \"StarNext\",size=14),\n        #legend.position = \"bottom\",\n        plot.title = element_text(size=50,hjust = 0.3,vjust = 0),\n        plot.caption = element_text(size=20,hjust = 0.4,family=\"FederationDS9Title\"),\n        panel.background = element_rect(fill=\"#9977AA\",color=\"#9977AA\"),\n        plot.background = element_rect(fill=\"#9977AA\",color=\"#9977AA\"))\n\nScale for fill is already present.\nAdding another scale for fill, which will replace the existing scale.\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nScale for x is already present.\nAdding another scale for x, which will replace the existing scale.\n\n\n\n\n\n\nggsave(\"ss.png\",\n       width = 6,height = 5.5,\n       bg=\"#9977AA\",\n       dpi=200)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day6_data_day/day6_data_day.html",
    "href": "chartchallenges/cases2023/posts2023/day6_data_day/day6_data_day.html",
    "title": "Data day",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 04)\n\n\nsurvivalists <- tuesdata$survivalists\nloadouts <- tuesdata$loadouts\nepisodes <- tuesdata$episodes\nseasons <- tuesdata$seasons\n\n\nsurvivalists%>%head\n\n\nepisodes <- episodes%>%\n  select(season,air_date,viewers)\n\n\nviewers <- seasons%>%\n  select(lon,lat,location,country,n_survivors,season)%>%\n  inner_join(survivalists,by=c(\"season\",\"country\"))%>%\n  inner_join(episodes,by=c(\"season\"))%>%\n  select(age,n_survivors,viewers,air_date,location,country,city,state)%>%\n  # select(lon,lat,location,country,city,state,\n  #        name,age,gender,profession,n_survivors,season,\n  #        air_date,viewers)%>%\n  distinct()%>%#DataExplorer::profile_missing()\n  drop_na()\nviewers\n\n\nlibrary(owidR)\n# df <- owidR::owid_covid()\n# save(df,file=\"df.RData\")\nload(\"df.RData\")\ndf_short <- df%>%\n  select(continent,country=location,\n         date,total_cases,median_age,life_expectancy)%>%\n  filter(country==\"Canada\")\n\n\ndf_short%>%count(country)\nviewers%>%count(country)\n\n\nviewers%>%\n  inner_join(df_short%>%filter(country==\"Canada\"),\n             by=c(\"air_date\"=\"date\",\"country\"))%>%\n  select(air_date,n_survivors,viewers,total_cases,median_age,age)%>%\n  #filter(!is.na(total_cases))%>%\n  distinct()%>%\n  count(air_date)\n\n\nmy_df <- viewers%>%\n  inner_join(df_short%>%filter(country==\"Canada\"),\n             by=c(\"air_date\"=\"date\",\"country\"))%>%\n  select(n_survivors,viewers,total_cases,median_age,age)%>%\n  distinct() %>%\n  scale()%>%\n  as.data.frame()%>%\n  select(viewers,total_cases)\nmy_df\n\n\nv <- my_df$viewers\nc <- my_df$total_cases\ncor(v,c)\n\n\nmy_df%>%\n  ggplot()+\n  geom_density(aes(viewers))+\n  geom_density(aes(total_cases),color=\"red\")\n\n\nlibrary(tidyverse)\nlibrary(ggdist)\nlibrary(distributional)\nlibrary(extrafont)\nlibrary(showtext)\nshowtext_auto()\nsysfonts::font_add_google(name=\"Chelsea Market\",\n                          family=\"Chelsea Market\")\n\n\nmy_df%>%\n  pivot_longer(cols = everything(), \n               names_to = \"type\" ,values_to = \"values\")%>%\n  mutate(type=ifelse(type==\"viewers\",\n                     \"TV series Alone - Viewers\",\n                     \"OWId Covid19 Total Cases in Canada\"))%>%\n  ggplot(aes(y=type,x=values,\n             #xdist=dist_normal(values, sd(values)),\n         #xdist = dist_normal(0, 1),\n         layout = \"weave\",\n         fill = stat(x > 0)))+\n  stat_dots(aes(xdist = dist_normal(0, 1)))+\n  ggnewscale::new_scale_fill()+\n  stat_dist_slabinterval(aes(x=values),alpha=0.8)+\n  geom_vline(xintercept = 0, alpha = 0.25) +\n   tvthemes::scale_fill_hilda()+\n  labs(title=\"Canada: TV Series ALONE Viewers and OWId Covid19 Total Cases\",\n       subtitle=\"Distributions of standardized values\",\n       caption = \"Correlation doesn't imply causation! These are 11 weeks of Covid-19 (2020-06-11 - 2020-08-20) and ALONE Viewers\\nDataSource: #TidyTuesday 2023 week4 Alone data\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day6 - OWId\\n\")+\n  tvthemes::theme_avatar(text.font = \"Chelsea Market\")+\n  theme(text=element_text(),\n        plot.title = element_text(hjust = 1),\n        plot.caption = element_text(hjust = 1),\n        legend.position = \"none\",\n        axis.title = element_blank())\n\n\nmy_df%>%\n  mutate(day=seq_along(1:11))%>%\n  pivot_longer(cols = c(\"viewers\",\"total_cases\"), \n               names_to = \"type\" ,values_to = \"values\")%>%\n  mutate(type=ifelse(type==\"viewers\",\n                     \"TV series Alone - Viewers\",\n                     \"OWId Covid19 Total Cases in Canada\"))%>%\n  ggplot(aes(x=day,y=values,group=type,color=type))+\n    geom_line()+\n  geom_smooth(method = \"lm\",se=F)+\n  tvthemes::scale_color_hilda()+\n  theme_bw()+\n  theme(legend.position = \"top\")"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day28_trend/day28_trend.html",
    "href": "chartchallenges/cases2023/posts2023/day28_trend/day28_trend.html",
    "title": "Trend",
    "section": "",
    "text": "Gazzelloni F. (2023), Data Visualization: Australia GDP per capita Trend\n\n\nlibrary(fpp3)\nlibrary(tidyverse)\naus_economy <- global_economy |>\n  filter(Code == \"AUS\") |>\n  mutate(Pop = Population / 1e6,\n         GDP=GDP/Population)\n\n\naus_economy |>\nautoplot(GDP) +\n  labs(y = \"Millions\", title = \"Australian population\")\n\n\nfit <- aus_economy |>\n  model(\n    AAN = ETS(Pop ~ error(\"A\") + trend(\"A\") + season(\"N\"))\n  )\n\n\nfc <- fit |> forecast(h = 10)\n\n\nlibrary(fable)\nlibrary(tsibbledata)\n\nalpha_range <- seq(0.1, 0.9, by = 0.1)\n\nfits <- list() # create an empty list to store the model fits\nfor (alpha in alpha_range) {\n  fit <- aus_economy %>%\n    model(ETS(GDP ~ error(\"A\") +\n                trend(\"A\", alpha = alpha) +\n                season(\"N\")))\n  fits[[as.character(alpha)]] <- fit\n  # store the fit in the list using alpha as the key\n}\n\n\nlibrary(purrr)\npred <-\n  map2_dfr(fits, \n           alpha_range, \n           ~ as_tibble(.x %>% augment() %>% mutate(alpha = .y))) %>%\n  select(Year,GDP,.fitted,alpha)\n\npred%>%head\n\nAnimate\n\ncolors=scales::hue_pal(l = 90)(9)\nmy_colors <- c(\"#4E79A7\", \"#F28E2B\", \"#E15759\", \"#76B7B2\", \"#59A14F\", \"#EDC948\", \"#B07AA1\", \"#FF9DA7\", \"#9C755F\")\n\n\noptions(scipen = 999)\nlibrary(gganimate)\np <- aus_economy |>\n  autoplot(GDP,linewidth=1) +\n  geom_line(aes(\n    y = .fitted,\n    group = alpha,\n    col = factor(alpha)\n  ),\n  linewidth=1,\n  data = pred) +  \n  geomtextpath::geom_texthline(yintercept = mean(aus_economy$GDP),\n                               hjust=0.3,\n                               label=\"Avg value\")+\n transition_states(alpha,\n                   transition_length = 2,\n                   state_length = 1) +\n ease_aes('linear') +\n  scale_y_continuous(expand = c(0,0),\n                     labels = scales::label_number(suffix = \"K\", scale = 1e-3))+\n  scale_x_continuous(n.breaks = 6)+\n  scale_color_manual(values=my_colors)+\n  labs(y = \"GDP per capita\",\n       x=\"Year\",\n       color=\"Alpha\",\n       title=\"Australia's GDP Exponential Smoothing model\\nAlpha {closest_state}\",\n       caption=\"#30DayChartChallenge Day 28 Trend | DataSource: {fpp3} global_economy\\nDataViz: Federica Gazzelloni\")+\n  ggthemes::theme_economist_white()+\n  theme(text=element_text(family=\"Roboto Condensed\"),\n        plot.background = element_rect(color=\"gold\",fill=\"gold\"),\n        panel.background = element_rect(color=\"#efdaa0\",fill=\"#efdaa0\"))+\n    guides(color=\"none\")\n\n\np\n\n\nanim_save(\"day28_trend.gif\", \n          animate(p, fps = 10, duration = 10))"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day13_popculture/day13_popculture.html",
    "href": "chartchallenges/cases2023/posts2023/day13_popculture/day13_popculture.html",
    "title": "Popculture",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 11)\n\n\ndrugs <- tuesdata$drugs\ndrugs%>%names\n\n\ndrugs%>%head\n\n\ndrugs%>%\n  filter(category==\"veterinary\")%>%\n  count(species,pharmacotherapeutic_group,condition_indication,authorisation_status)%>%\n  count(authorisation_status)\n\n\ndrugs%>%count(therapeutic_area)%>%\n  filter(str_detect(therapeutic_area,regex('Abstinence', ignore_case=TRUE)))\n\n\nMental health: Mental health has become an increasingly prevalent topic in pop culture in recent years. For example, in 2017, the popular Netflix series “13 Reasons Why” depicted the experiences of a high school student struggling with mental health issues, sparking a national conversation about the portrayal of mental health in popular media. Additionally, in 2019, singer-songwriter Billie Eilish released a song titled “Everything I Wanted,” which addressed her own struggles with mental health and suicide ideation. The song went on to become a hit and was widely praised for its honest portrayal of mental health issues.\nCancer: Cancer has been a prevalent health condition in pop culture for many years. For example, the 1979 film “The China Syndrome” depicted the experiences of a television reporter investigating a nuclear power plant, which ultimately leads to a near-meltdown and radiation exposure. The film was released just weeks before the Three Mile Island nuclear accident in Pennsylvania, which brought the issue of nuclear safety to the forefront of public consciousness. Additionally, in 2012, the popular book and film “The Fault in Our Stars” depicted the experiences of two teenagers with cancer who fall in love. The book and film were widely praised for their honest portrayal of the emotional and physical toll of cancer.\nAddiction: Addiction, particularly to opioids and other drugs, has become a major health crisis in many parts of the world. Pop culture has played a role in raising awareness of the issue. For example, in 2018, the film “Beautiful Boy” depicted the experiences of a father and son dealing with the son’s addiction to drugs. The film was based on a memoir by journalist David Sheff and his son Nic, and was widely praised for its honest portrayal of addiction and its impact on families. Additionally, in 2019, rapper Lil Nas X released a song titled “Old Town Road,” which addressed his own struggles with addiction and the impact it had on his life. The song went on to become a massive hit and was widely praised for its honest portrayal of addiction.\n\n\nlibrary(ggtext)\n\n\ncolors <- c(\"#a668f1\",\"#35d2da\",\"#fdd433\",\"#f15e9c\",\"#9189c1\")\n\n\ndf <- drugs %>%\n  filter(category == \"human\", authorisation_status == \"authorised\") %>%\n  count(\n    therapeutic_area,\n    condition_indication,\n    pharmacotherapeutic_group,\n    marketing_authorisation_date\n  ) %>%\n  mutate(year = year(marketing_authorisation_date),\n         year = as.integer(year)) %>%\n  count(year) %>%\n  filter(!is.na(year), !year == \"2023\")\n\n\np <- df %>%\n  ggplot(aes(year,n))+\n  geom_col(fill=\"black\",color=\"black\",linewidth=0.3)+\n  geom_smooth(se=FALSE,linewidth=0.5,color=\"#d4a09f\") +\n    geomtextpath::geom_textvline(xintercept = c(1997), \n                 label = \"Mental Health| Good Will Hunting\", \n                 hjust = 0.8,\n                 size=5,\n                 family=\"Roboto Condensed\",\n                 fontface=\"bold\",\n                 linetype = 2, \n                 vjust = 1.3, \n                 color = \"#35d2da\") +\n  geomtextpath::geom_textvline(xintercept = c(2017), \n                 label = \"Mental Health| Netflix series 13 Reasons Why\", \n                 hjust = 0.8,\n                 size=5,\n                 family=\"Roboto Condensed\",\n                 fontface=\"bold\",\n                 linetype = 2, \n                 vjust = 1.1, \n                 color = \"#35d2da\") +\n    geomtextpath::geom_textvline(xintercept = c(2010), \n                 label = \"Mental Health| TV show Glee\", \n                 hjust = 0.8,\n                 size=5,\n                 family=\"Roboto Condensed\",\n                 fontface=\"bold\",\n                 linetype = 2, \n                 vjust = 1.3, \n                 color = \"#35d2da\") +\n    geomtextpath::geom_textvline(xintercept = c(1995), \n                 label = \"Cancer| The American President\", \n                 hjust = 0.8,\n                 size=5,\n                 family=\"Roboto Condensed\",\n                 fontface=\"bold\",\n                 linetype = 2, \n                 vjust = 1.3, \n                 color = \"#fdd433\") +\n    geomtextpath::geom_textvline(xintercept = c(2012), \n               label = \"Cancer| The Fault in Our Stars\", \n               hjust = 0.8,\n               size=5,\n               family=\"Roboto Condensed\",\n               fontface=\"bold\",\n               linetype = 2, \n               vjust = 1.3, \n               color = \"#fdd433\") +\n    geomtextpath::geom_textvline(xintercept = c(2018), \n             label = \"Opioids| Beautiful Boy\", \n             hjust = 0.8,\n             size=5,\n             family=\"Roboto Condensed\",\n             fontface=\"bold\",\n             linetype = 2, \n             vjust = 1.3, \n             color = \"#f15e9c\") +\n    geomtextpath::geom_textvline(xintercept = c(1996), \n             label = \"Opioids| Trainspotting\", \n             hjust = 0.8,\n             size=5,\n             family=\"Roboto Condensed\",\n             fontface=\"bold\",\n             linetype = 2, \n             vjust = 1.3, \n             color = \"#f15e9c\") +\n  scale_y_continuous(expand = c(0,0))+\n  scale_x_continuous(n.breaks = 6) + # #1380A1, #990000, #FAAB18\n  labs(title=\"**European Drug Development marketing authorisation year trend**\",\n       subtitle=\"Mid-Century onwards Pop culture movies depitching <span style='color:#35d2da;'>Mental health</span>,<span style='color:#fdd433;'>Cancer</span>, and <span style='color:#f15e9c;'>Opioids addiction</span>\",\n       caption=\"Films, shows, and books raise awareness of mental health, cancer, and addiction issues in pop culture.\\nDataSource: #TidyTuesday 2023 week11 European Drug Development\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day13 - Pop Culture\",\n       x=\"Time (Year)\", y=\"Count\")+\n  theme(text = element_text(family=\"Roboto Condensed\",color=\"black\",face=\"bold\"),\n        axis.text = element_text(family=\"Roboto Condensed\",color=\"white\"),\n        panel.grid = element_line(linewidth=0.1,color=\"grey90\"),\n        plot.title = element_markdown(family=\"Roboto Condensed\",size=18),\n        plot.subtitle = element_markdown(family=\"Roboto Condensed\"),\n        plot.caption = element_text(hjust = 1),\n        plot.background = element_rect(color=\"#d4a09f\",fill=\"#a668f1\"),\n        panel.background = element_rect(color=\"#a668f1\",fill=\"#a668f1\",linewidth=0.5))\n  \np\n\n\nbbplot::finalise_plot(plot_name = p,\n                      logo_image_path = \"images/pop-logo.png\",\n                      source_name = \"European Drug Development and Pop Culture\",\n                      save_filepath = \"w11_ErDD.png\")\n\npop culture is an important aspect of modern society, serving as a means to both entertain and inform individuals about the wider world around them.\nPop culture refers to the popular elements of cultural expression that are widely disseminated through mass media and enjoyed by large segments of the population.\nIt includes things like music, film, television, fashion, social media, and other forms of mass communication."
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day3_fauna_flora/day3_fauna_flora.html",
    "href": "chartchallenges/cases2023/posts2023/day3_fauna_flora/day3_fauna_flora.html",
    "title": "Fauna flora",
    "section": "",
    "text": "#TidyTuesday - Edition 2023\nThis time I’ll use the {oregonfrogs} package.\nRana Pretiosa, a rare species of frog, is found on various locations around Crane Prairie Reservoir lake in Oregon. Such as: pond, river, North, North East, South East, and West part of the Reservoir.\n\nlibrary(tidyverse)\nlibrary(oregonfrogs)\ndata(\"oregonfrogs\")\noregonfrogs::oregonfrogs %>% count(subsite)\n\nScientists monitoring the frogs have found interesting patterns in the density distribution between male and female frogs. Through the use of radio frequencies, they are able to track the movements of the frogs and study their behaviors. However, as their habitat is threatened, the scientists must race against time to protect the unique Rana Pretiosa population.\n\noregonfrogs::oregonfrogs %>% head\n\n\noregonfrogs %>%\n  mutate(sex = as.factor(sex)) %>%\n  ggplot(aes(doy, detection, group = sex, color = sex)) +\n  geom_point() +\n  facet_wrap( ~ subsite)+\n  hrbrthemes::scale_color_ipsum()+\n  hrbrthemes::theme_tinyhand()\n\n\noregonfrogs%>%\n  mutate(sex=as.factor(sex),\n         subsite=case_when(subsite==\"Cow Camp Pond\"~\"Pond\",\n                           subsite==\"Cow Camp Pond\"~\"Pond\",\n                           TRUE~subsite))%>%\n  ggplot(aes(frequency,group=sex,color=sex))+\n  geom_density()+\n  facet_wrap(~subsite)\n\nLet’s have a look at the ggplot2 extensions: https://exts.ggplot2.tidyverse.org/\n\nlibrary(hrbrthemes)\nhrbrthemes.loadfonts=TRUE\nhrbrthemes::import_tinyhand()\nhrbrthemes::import_roboto_condensed()\nextrafont::loadfonts()\n\n\noregonfrogs %>%\n  mutate(sex = as.factor(sex),\n         sex=ifelse(sex==0,\"Female\",\"Male\"),\n         frequency=round(frequency,2)) %>%\n  ggplot(aes(frequency, group = sex, color = sex)) +\n  geom_density(linewidth=1,key_glyph = \"point\") +\n  facet_wrap( ~ subsite) +\n  coord_cartesian(clip = 'off')+\n  labs(title = \"Oregonfrogs: Rana Pretiosa\",\n       subtitle = \"Located frogs by sex density distributions\",\n       caption = \"DataSource: #TidyTuesday 2023 week1 - BYO data: Oregonfrogs\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day3 - fauna/flora\\n\") +\n  hrbrthemes::scale_color_ipsum() +\n  hrbrthemes::theme_tinyhand(strip_text_size = 9,\n                             plot_title_size = 13,\n                             subtitle_size = 7,\n                             subtitle_margin = 5,\n                             caption_margin = 7,\n                             caption_family = \"Roboto Condensed\",\n                             axis_title_size = 9,\n                             axis_text_size = 7,\n                             plot_margin = margin(10, 10, 10, 10))\n\n\nggsave(\"w1_byo.png\")"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day22_greenenergy/day22_greenenergy.html",
    "href": "chartchallenges/cases2023/posts2023/day22_greenenergy/day22_greenenergy.html",
    "title": "Greenenergy",
    "section": "",
    "text": "Gazzelloni F. (2023), Data Visualization: Green energy\n\nAs for the term “Green Energy”, it typically refers to energy that is produced from renewable sources, such as wind, solar, hydro, and geothermal power.\n\n# source: https://github.com/bydata/30DayChartChallenge/blob/main/2023/22/22-green-energy.R\n\nlibrary(tidyverse)\nlibrary(ggtext)\nlibrary(showtext)\nshowtext_auto()\n# Set fonts\nfont_add_google(\"Fira Sans\",\"fira\")\n\n\nlibrary(eurostat)\n\n#base_path <- here(\"2023\", \"22\")\n\n#' Source: Eurostat\ndf <- get_eurostat(\"nrg_ind_ren\", \n                   time_format = \"num\", \n                   type = \"code\"  # get variable codes and labels\n)\n\ndf <- label_eurostat(df, code = \"geo\", fix_duplicated = TRUE)\n\n# which countries?\nunique(df$geo)\nunique(df$geo_code)\n\neu_geo_codes <- c(\"AT\", \"BE\", \"BG\", \"CY\", \"CZ\", \"DE\", \"DK\", \"EE\", \"EL\",\n                  \"ES\", \"EU27_2020\", \"FI\", \"FR\", \"HR\", \"HU\", \"IE\", \"IT\", \"LT\",\n                  \"LU\", \"LV\", \"MT\", \"NL\", \"PL\", \"PT\", \"RO\", \"SE\", \"SI\", \"SK\" )\n\n\n\ndf%>%dim\n\ndf1 <- df %>% \n  filter(geo_code %in% eu_geo_codes) %>% \n  mutate(geo = case_match(\n    geo,\n    \"Germany (until 1990 former territory of the FRG)\" ~ \"Germany\",\n    \"European Union - 27 countries (from 2020)\" ~ \"EU 27\",\n    .default = geo\n  )) \n\n\ndf1%>%count(nrg_bal)\n\ndf1%>%\n  filter(nrg_bal==\"Renewable energy sources in transport\")\n\n\ndf1 %>%#count(geo)%>%View\n  ggplot(aes(time,values,group=geo,color=geo))+\n  geom_line(color=\"grey80\")+\n  geom_line(data=df1%>%\n              filter(geo%in%c(\"Italy\",\"EU 27\",\"Spain\",\"Germany\",\"France\")),\n            inherit.aes = TRUE)+\n  facet_wrap(~nrg_bal,scales = \"free_y\")+\n  ggthemes::scale_color_calc()+\n  labs(title=\"Renewable energy sources\",\n       color=\"\",\n       caption=\"DataSource: {eurostat} | #30DayChartChallenge day22: Green Energy\\nDataViz: Federica Gazzelloni\")+\n  ggthemes::theme_calc()+\n  theme(text = element_text(family=\"fira\"),\n        plot.title = element_text(size=24),\n        axis.title.x = element_blank(),\n        strip.background = element_rect(color=\"#be2d42\",fill=\"#be2d42\"),\n        strip.text = element_text(color=\"white\"))"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day17_networks/day17_networks.html",
    "href": "chartchallenges/cases2023/posts2023/day17_networks/day17_networks.html",
    "title": "Networks",
    "section": "",
    "text": "To cite Federica’s work please use:\n\nGazzelloni F. (2023), Data Visualization: Network Monks data\n\n\nlibrary(tidyverse)\nlibrary(rethinking)\ndata(\"Monks\")\nd<- Monks\n\n\n\"amount of reciprocity in - like - nominations within dyads\"\n\" Nominations by 18 monks living in the same monastery over three time periods.\"\n\"#30DayChartChallenge day17: Network | DataViz: Federica Gazzelloni\"\n\n\nd1 <- d%>%\n  select(!contains(\"dis\"),-A,-B) %>%\n  mutate(name=paste0(A_name,\"-\",B_name))%>%\n  select(-A_name,-B_name)%>%\n  distinct()%>%\n  filter(like_AB>0,like_BA>0)\n  \nd1 %>% head() \n\n\nlibrary(igraph)\ng <- graph_from_data_frame(d1)\ny <- as_adjacency_matrix(g)\nsng <- graph_from_adjacency_matrix(y)\nlx <- layout_nicely(sng)\nvcol <- \"#dfd1bf\"\n  \nset.seed(1973)\nplot(sng , \n     layout=lx , \n     vertex.size=12 , \n     edge.arrow.size=0.5 , \n     edge.width=2 ,\n     edge.curved=0.35 , \n     vertex.color=vcol , \n     edge.color=\"#6b493e\" , \n     \n     asp=0.9,\n     margin = -0.05 , \n     vertex.label=d1$name,\n     vertex.label.cex = 0.7)\n\n\nlibrary(showtext)\nlibrary(sysfonts) # this is included in showtext\n\nfont_add_google(\"Pacifico\", \"Pacifico\")\nshowtext.auto()\n\n\nlibrary(cowplot)\nggdraw()+\n  draw_image(\"network.png\",scale = 0.9,y=-0.05)+\n  draw_label(\"Amount of reciprocity in - like - nominations within 18 monks\",\n             x=0.5,y=0.95,fontfamily=\"Pacifico\",size=44)+\n    draw_label(\"living in the same monastery over three time periods.\",\n             x=0.5,y=0.90,fontfamily=\"Pacifico\",size=44)+\n  draw_label(\"#30DayChartChallenge day17: Networks | DataViz: Federica Gazzelloni\",\n             x=0.5,y=0.05,size=20,fontfamily=\"Pacifico\")\n\n\nggsave(\"d17_networks.png\",width = 7,height = 5,bg=\"white\",dpi=320)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day14_new_tool/day14_new_tool.html",
    "href": "chartchallenges/cases2023/posts2023/day14_new_tool/day14_new_tool.html",
    "title": "New tool",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 12)\n\n\nlanguages <- tuesdata$languages\n\n\nwrite_csv(languages,\"languages.csv\")\n\n\nlanguages%>%head\n\n\nlanguages%>%names\n\n\ndf <- languages%>%\n  arrange(appeared)%>%\n  select(pldb_id,appeared,type,language_rank,number_of_users)\ndf\n\n\nggplot(df,aes(appeared,language_rank))+\n  geom_point()\n\n\ndf %>%\n  filter(appeared>1900)%>%\nggplot(aes(appeared,language_rank))+\n  geom_point()+\n  scale_y_reverse()\n\n\ndf %>%\n  count(type,sort = TRUE)%>%\n  mutate(pct=round(n/sum(n)*100,2))\n\n\ndf %>%\n  arrange(-appeared)%>%\n  filter(between(appeared,2021,2023))%>%#count(type)\n  mutate(appeared=as.factor(appeared))\n\n\ndf %>%\n  arrange(-appeared)%>%\n  filter(between(appeared,2021,2023))%>%#count(type)\n  mutate(appeared=as.factor(appeared))%>%\n  ggplot(aes(appeared,number_of_users,fill=type))+\n  geom_col()+\n  labs(title=\"New Language tools\")\n\n\ndf%>%\n  group_by(appeared)%>%\n  reframe(n_languages=n(),pldb_id,type,avg=mean(number_of_users))%>%\n  filter(between(appeared,2000,2023)) %>%\n  ggplot(aes(appeared,n_languages))+\n  geom_point()+\n  geom_line()+\n  geom_segment(aes(x=appeared,xend=appeared,y=0,yend=n_languages,\n                   color=n_languages),\n               size=6)+\n  geom_text(aes(label=type),check_overlap = TRUE,vjust=-0.5)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day11_circular/day11_circular.html",
    "href": "chartchallenges/cases2023/posts2023/day11_circular/day11_circular.html",
    "title": "Circular",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 09)\n\n\nafrisenti <- tuesdata$afrisenti\nlanguages <- tuesdata$languages\n\n\n\nlanguage_scripts <- tuesdata$language_scripts\nlanguage_countries <- tuesdata$language_countries\ncountry_regions <- tuesdata$country_regions\n\n\nafrisenti%>%count(label)\n\n\nlibrary(showtext)\n#sysfonts::font_families_google()\nsysfonts::font_add_google(\"Explora\",\"Explora\")\nshowtext_auto()\n\n\ndf_plot <- afrisenti%>%\n  inner_join(languages,by=\"language_iso_code\")%>%\n  count(label,intended_use,language) \n\n\n  ggplot(data = df_plot, mapping = aes(label,n,fill=intended_use))+\n  geom_col(width = 0.5) \n    coord_polar(theta = \"y\",\n              start = 0,\n              direction = 1, \n              clip = \"off\") +\n  #scale_x_(clip=\"off\")+\n   #scale_x_reverse(expand=expansion(add=c(10,20))) +\n   scale_y_continuous(expand=expansion(mult=c(0,0),add=c(0,1))) +\n  \n  labs(title=\"African Language Sentiment\",\n       caption=\"DataSource: #TidyTuesday 2023 week9 African Language Sentiment\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day11 - Circular\",\n       fill=\"Inteded use\")+\nscale_fill_manual(values = c(\"#CF3721\", \"#31A9B8\", \"#258039\")) +\n  theme_minimal()+\n  theme(text=element_text(family=\"Explora\",size=90,face=\"bold\"),\n        panel.grid = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title = element_blank()) +\n  facet_wrap(vars(language))\n\n\nggsave(\"p4.png\",width = 9,height = 10,\n       device = \"png\",dpi=300,bg=\"white\")"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day1_part-to-whole/day1_part-to-whole.html",
    "href": "chartchallenges/cases2023/posts2023/day1_part-to-whole/day1_part-to-whole.html",
    "title": "Part-To-Whole",
    "section": "",
    "text": "The amount of annual precipitation is closely related to the monthly temperature patterns throughout the year. This is because temperature can significantly affect precipitation, which in turn can impact the environment and the ecosystem.\nThroughout the year, different regions experience different temperature changes during each month. Generally, in areas with a cold winter season, monthly temperatures tend to be lower, while areas with a warm tropical climate can have higher temperatures year-round. As temperatures increase, the evaporation rate also increases, leading to more moisture in the atmosphere. This increased moisture can result in higher precipitation levels.\nIn summary, the relationship between annual precipitation and monthly temperatures is a part-to-whole connection because it involves the overall amount of precipitation throughout the year being impacted by the individual temperature conditions of each month. Monthly temperature patterns are a crucial component in understanding and predicting the amount of precipitation and the ecological systems that depend on it.\n\ntuesdata <- tidytuesdayR::tt_load(2022, week = 51)\n\n\nlibrary(tidyverse)\nlibrary(maps)\nlibrary(mapdata)\n\n\nweather_forecasts <- tuesdata$weather_forecasts\ncities <- tuesdata$cities\noutlook_meanings<- tuesdata$outlook_meanings\n\n\nweather_forecasts%>%names\n\n\nweather_forecasts%>%head\n\n\ndf <- weather_forecasts%>%\n  inner_join(cities,by=c(\"city\",\"state\"))\n\n\n# save(df,file=\"df.RData\")\nload(\"data/df.RData\")\n\ndf%>%names\n\n\ndf_mean <- df%>%\n  mutate(ymon=zoo::as.yearmon(date),.after=date)%>% # DataExplorer::profile_missing()\n  group_by(ymon,state)%>%\n  summarize(observed_temp=ifelse(is.na(observed_temp),mean(observed_temp,na.rm = TRUE),observed_temp),\n          forecast_temp=ifelse(is.na(forecast_temp),mean(forecast_temp,na.rm = TRUE),forecast_temp),\n          observed_precip=ifelse(is.na(observed_precip),mean(observed_precip,na.rm = TRUE),observed_precip),\n          avg_annual_precip=ifelse(is.na(avg_annual_precip),mean(avg_annual_precip,na.rm = TRUE),avg_annual_precip),\n          lon,lat,state)%>%\n  distinct() %>%\n  mutate(observed_temp=mean(observed_temp),\n         forecast_temp=mean(forecast_temp),\n         observed_precip=mean(observed_precip),\n         avg_annual_precip=mean(avg_annual_precip))%>%\n  distinct() \n\ndf_mean <- df_mean%>%\n  mutate(year=year(ymon),.after = ymon)\n\n\nstate<- map_data(\"state\")\n\nst <- state%>%\n  mutate(state_name=str_to_title(region))\nstate_name <- unique(st$state_name)\nabbr <- state.abb[match(state_name,state.name)]\n\nst_name_abb <- cbind(state_name,abbr)%>%\n  as.data.frame()%>%\n  mutate(abbr=ifelse(state_name==\"District Of Columbia\",\"DC\",abbr))\n\n\nstates_full <- st%>%\n  inner_join(st_name_abb,by=c(\"state_name\"))\n\n\ndf_mean_full <- states_full%>%\n  inner_join(df_mean,by=c(\"abbr\"=\"state\"))%>%\n  distinct()\n\n\nmap <- df_mean_full%>%\n  filter(year==2021)%>%\n  ggplot(aes(x=long,y=lat.x,group=group))+\n  geom_polygon(aes(fill=avg_annual_precip))+\n    geom_point(\n    data = df %>% count(city, lon, lat),\n    mapping = aes(lon, lat, group = city),\n    color = \"red\",\n    shape = 21,\n    stroke = 0.2,\n    inherit.aes = FALSE\n  ) +\n  geom_text(\n    data = df %>% count(city, lon, lat),\n    mapping = aes(lon, lat, label = city),\n    show.legend = FALSE,\n    color = \"black\",\n    size = 1.5,\n    check_overlap = TRUE,\n    family=\"Roboto Condensed\",\n    inherit.aes = FALSE\n  ) +\n  coord_quickmap()+\n   labs(title = \"#30DayChartChallenge 2023 Day1 - Part to whole\",\n       subtitle = \"Comparing Weather Forecasting Accuracy in the United States\",\n       caption=\"DataSource: #TidyTuesday 2022 week51|Weather Forecast Accuracy\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day1\",\n       fill=\"AVG Annual Precip\") +\n  theme(panel.background = element_rect(color = \"black\", fill = \"#dedede\"),\n        axis.title = element_blank(),\n        text = element_text(color=\"navy\",family=\"Roboto Condensed\"),\n        panel.grid = element_line(linewidth=0.02,color=\"grey40\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank())\n\nmap\n\n\nshowtext.auto(enable = FALSE)\nggsave(\"map.png\",\n       width = 7,height = 5)\n\n\ndf_mean%>%\n  filter(year==2021)%>%\n  mutate(month=month(ymon,label = TRUE ),.after = year)%>%\n  mutate(max_mean_temp=mean(observed_temp))%>%\n  arrange(-max_mean_temp)\n\n\ndf_mean%>%\n  filter(state%in%c(\"VI\",\"PR\",\"HI\",\"FL\",\"LA\"),\n         ymon==\"Jan 2021\")%>%\n  arrange(-observed_temp)\n\n\np <- df_mean%>%\n  filter(year==2021)%>%\n  mutate(month=month(ymon,label = TRUE ),.after = year)%>%\n  mutate(max_temp=max(observed_temp))%>%\n  ggplot(aes(factor(month),observed_temp,group=state))+\n  geom_line(aes(color=observed_temp))+\n  geom_text(data=data.frame(month=rep(\"Jan\",5),\n                            observed_temp=c(80,77.6,75.4,66.7,60.8),\n                           label=c(\"VI\",\"PR\",\"HI\",\"FL\",\"LA\")),\n            aes(factor(month),observed_temp,label=label),\n            inherit.aes = FALSE)+\n  labs(color=\"2021 Monthly Observed Temperature by States\")+\n  ggthemes::theme_economist_white()+\n  theme(axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_text(size=9),\n        plot.background = element_blank())\n\np\n\n\nggsave(\"p.png\",\n       width = 7,height = 5)\n\n\nlibrary(cowplot)\n\nggdraw()+\n  draw_image(\"map.png\")+\n  draw_image(\"images/p.png\",\n             scale=0.35,\n            x=0.3,y=0.3)+\n  draw_label(label=\"Annual precipitation and monthly \\ntemperature are parts of the climate system. Higher annual \\nprecipitation tends to result in lower monthly temperatures \\nas more water in the air can lead to increased cloud cover \\nand less sunlight reaching the ground. Conversely, lower \\nannual precipitation usually means higher monthly \\ntemperatures as there is less water in the air to absorb and \\nreflect sunlight.\",x=0.15,y=.55,size=5,fontfamily = \"Roboto Condensed\")\n\n\nggsave(\"full.png\",width = 7,height = 5)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day29_monochrome/day29_monochrome.html",
    "href": "chartchallenges/cases2023/posts2023/day29_monochrome/day29_monochrome.html",
    "title": "Monochrome",
    "section": "",
    "text": "Gazzelloni F. (2023), Data Visualization: Lyme Disease Map\n\nLoad libraries\n\nlibrary(tidyverse)\n\nData for this visualization is from CDC: https://www.cdc.gov/lyme/stats/survfaq.html\nThis is old dataset, it is updated at 2011. I had a look at it, then used the most updated one.\n\nlibrary(jsonlite)\n\nurl <- \"https://data.cdc.gov/api/views/smai-7mz9/rows.json?accessType=DOWNLOAD\"\ndata <- fromJSON(url)\nkeys <- data$meta$view$columns\n\ndf <- as.data.frame(data$data)\nnames(df) <- keys$name%>%t()\ndf%>%head\n\nmy_df <- df %>%\n  select(StateCode,CountyCode,StateName,CountyName,\n         ConfirmedCount_1992_1996,\n         ConfirmedCount_1997_2001,\n         ConfirmedCount_2002_2006,\n         ConfirmedCount_2007_2011)%>%\n  pivot_longer(5:8)%>%\n  mutate(name=gsub(\"ConfirmedCount_\",\"\",name),\n         name=gsub(\"_\",\"-\",name),\n         value=as.numeric(value),\n         value=ifelse(is.na(value),0,value),\n         CountyName=tolower(CountyName),\n         CountyName=gsub(\" county\",\"\",CountyName),\n         CountyName=trimws(CountyName))%>%\n  rename(Years=name,subregion=CountyName)\n\n\nmy_df%>%head\n\nThis data contains County-level Lyme disease data from 2001-2020\n\nurl2 <- \"https://www.cdc.gov/lyme/resources/datasurveillance/LD-Case-Counts-by-County-01-20.csv\"\n\ndf2 <- read.csv(url2)\n\nTidy data, the Ctyname vector is the one I want to use for looking at the cases by cities. I had to leave some information behind.\n\nmy_df2 <- df2 %>%\n  select(1:2,6:25)%>%\n  pivot_longer(3:22)%>% \n  mutate(name=gsub(\"Cases\",\"\",name),\n         Stname=tolower(Stname),\n         Ctyname= str_to_lower(Ctyname),\n         Ctyname=gsub(\" county\",\"\",Ctyname),\n         Ctyname=gsub(\" parish\",\"\",Ctyname),\n         Ctyname=gsub(\" city\",\"\",Ctyname),\n         Ctyname=gsub(\"st.\",\"st\",Ctyname),\n         Ctyname=gsub(\" bay borough\",\"\",Ctyname),\n         Ctyname=case_when(Ctyname==\"armstong\"~\"armstrong\",\n                           TRUE~Ctyname),\n         name=as.numeric(name),\n         name=cut_interval(name,4))%>%\n  rename(Years=name,subregion2=Ctyname,region=Stname)%>%\n  distinct()\n\nHere is a double check of the City names differences in map_data(\"county\") and the Lyme disease dataset (my_df2). I am going to leave some city names behind.\n\nus_county_map <- map_data(\"county\")\nsubregion <- us_county_map%>%count(subregion)%>%select(-n)%>%unlist()\nsubregion2 <- my_df2%>%count(subregion2)%>%select(-n)%>%unlist()\nintersect(subregion, subregion2)%>%length()\nsetdiff(subregion2, subregion)%>%length()\nsetdiff(subregion, subregion2)%>%length()\n\nmy_df2%>%\n  filter(str_detect(subregion2,\"yellowstone\"))\n\nThese are the sets that will be used in the Map.\n\nBase map layers\n\n\nus_state_map <- map_data(\"state\")\nus_county_map <- map_data(\"county\")\n\n\nCases layer\n\n\nmy_us_county_map <- map_data(\"county\")%>%\n  filter(subregion%in%subregion2)\n\nmy_df_coords <- my_df2%>%\n  rename(subregion=subregion2)%>%\n  inner_join(my_us_county_map,by=c(\"region\",\"subregion\"))%>%\n  distinct()\n\ndf_jitter <- my_df_coords%>%\n  filter(value>0)%>%\n  group_by(subregion,region,Years)%>%\n  mutate(long=mean(range(long)),lat=mean(range(lat)))%>%\n         #value=sum(value))%>%\n  ungroup()%>%\n  distinct()\n\nChange the facet lables:\n\nlbl <- my_df2 %>% \n  group_by(Years)%>%\n  reframe(value=sum(value))%>%\n  mutate(pct=lag(value),\n         pct=round((value-pct)/pct*100,2),\n         pct=ifelse(is.na(pct),\"-\",pct),\n         Year=gsub(\"\\\\[|\\\\]\", \"\", Years),\n         Year=gsub(\"\\\\(|\\\\]\", \"\", Year),\n         Year=gsub(\",\", \"-\", Year),\n         lbl=paste(Year,\"pct change\",pct,\"%\"))%>%\n  select(lbl)%>%\n  unlist()\n\nSet the fonts:\n\nlibrary(showtext)\nlibrary(sysfonts)\nsysfonts::font_add_google(\"David Libre\",\"David Libre\")\nsysfonts::font_add_google(\"Syne Mono\",\"Syne Mono\")\n\nMake the Map:\n\nshowtext_auto()\np <-ggplot()+\n  geom_polygon(data=us_county_map,\n             aes(x=long,y=lat,group = group),\n             fill=\"white\",color = \"#192d40\",linewidth=0.02) +\n  geom_polygon(data=us_state_map,aes(x=long,y=lat,group = group),\n             fill=NA,color = \"grey50\",linewidth=0.2)+\n  geom_jitter(data=df_jitter,\n               aes(x=long,y=lat,size=value),\n              color = \"#192d40\")+\n  coord_quickmap()+\n  facet_wrap(~Years,scales = \"free\",\n             labeller = as_labeller(setNames(lbl, sort(unique(df_jitter$Years))))) +\n  guides(size=\"none\")+\n  scale_size(range=c(0.1,1))+  \n  labs(caption=\"#30DayChartChallenge Day 29 Monochrome\\nDataSource: CDC Lyme Disease | Map: Federica Gazzelloni\") +\n  ggthemes::theme_map()+\n  theme(text=element_text(color=\"white\",size=40),\n        legend.background = element_blank(),\n        legend.position = \"right\",\n        strip.background = element_rect(color=NA,fill=NA),\n        strip.text = element_text(family=\"David Libre\",color=\"white\"),\n        plot.background = element_rect(color=\"#192d40\",fill=\"#192d40\"),\n        plot.caption = element_text(family=\"Syne Mono\",lineheight = 0.5,hjust=0.3),\n        panel.background = element_rect(color=\"#192d40\",fill=\"#192d40\"),\n        plot.margin = margin(0,0,0,0,unit = \"pt\"))\n\nHave a look at the Map:\n\np\n\nSet some information about the Lyme disease, and use ggtitle() for making a title plot to use in the main plot layout.\n\nlibrary(ggtext)\ntext <- \"Lyme disease is caused by bacteria called Borrelia burgdorferi, which is spread to people through the bite of several types of blacklegged ticks. In the United States, most infections occur in Eastern states, Northern midwestern states, and West Coast. Recent estimates using other methods suggest that approximately 476,000 people may get Lyme disease each year in the United States.\"\n\ntext=tibble(text)\n\ntitle <- ggplot() + \nggtitle(label =text) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_textbox_simple(\n      size = 50,lineheight = 0.3,\n      color=\"white\",\n      family=\"Syne Mono\",\n      padding = margin(5.5, 5.5, 5.5, 5.5),\n      margin = margin(0, 0, 5.5, 0),\n      fill = \"#192d40\"),\n    plot.background = element_rect(color=\"#192d40\",fill=\"#192d40\"),\n        panel.background = element_rect(color=\"#192d40\",fill=\"#192d40\"),\n    plot.margin = margin(0,0,0,0,unit = \"pt\")\n    )\n\nHere is the part where the layout design is done. Use {patchwork} for setting the area to combine the title with the map with the area() function. Then check the result with the plot() function, as shown below:\n\nlibrary(patchwork)\n# area(t, l, b = t, r = l)\ndesign <- c(\n   area(1, 1,20,100),\n   area(5, 1, 100,100)\n)\n\nplot(design)\n\nFinally, combine all together in one plot:\n\ntitle + p + plot_layout(design = design) &\n  theme(plot.background = element_rect(fill=\"#192d40\",color=\"#192d40\"))\n\nAnd save it!\n\nggsave(\"p.png\",width = 9,height = 7,dpi=320,bg=\"#192d40\")"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day12_theme_day/day12_theme_day.html",
    "href": "chartchallenges/cases2023/posts2023/day12_theme_day/day12_theme_day.html",
    "title": "Theme day",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 10)\n\n\nnumbats <- tuesdata$numbats\n\n\nnumbats%>%count(scientificName)\n\n\n# devtools::install_github('bbc/bbplot')\nlibrary(bbplot)\n# bbplot::bbc_style()\n\n\nlibrary(ozmaps)\nlibrary(sf)\noz_states <- ozmaps::ozmap_states\ncentroids <- oz_states%>%\n  sf::st_centroid()%>%\n  as_tibble()%>%\n  filter(!NAME==\"Other Territories\")\n\n\nmapdata <- oz_states%>%as_tibble()\n# mapdata%>%count(NAME)\n\n# nine colors\ncolors <- c(\"#1380A1\",\"#cbcbcb\",\n            \"#FAAB18\",\"#990000\", \n            \"#588300\",\"#d4a09f\",\n            \"#d999fc\",\"#83b3d2\",\"#cc161d\")\n\np <- ggplot() + \n  geom_sf_text(data = centroids,\n          mapping = aes(geometry=geometry,\n                        label=NAME),size=3) + \n  geom_sf(data = mapdata,\n          mapping = aes(geometry=geometry,\n                        fill=NAME),\n          alpha=0.4,color=\"black\",linewidth=0.1) + \n  scale_fill_manual(values = colors)+\n  guides(fill=\"none\")+\n  ggnewscale::new_scale_fill()+\n  geom_point(data= numbats,\n             mapping=aes(x=decimalLongitude,y=decimalLatitude,\n                         fill=scientificName),\n             shape=21,stroke=0.3,size=3,\n             color=\"grey\",alpha=0.7) +\n  ggthemes::scale_fill_fivethirtyeight()+\n  coord_sf(clip = \"off\")+\n   labs(title=\"Mapping the Habitat of the Endangered Numbat\",\n        subtitle=\"A Geographic Analysis of the Species' Distribution in Australia\",\n        caption = \"DataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day12 - Theme Day: BBC News\")+\n  bbplot::bbc_style()+\n  ggthemes::scale_color_fivethirtyeight()+\n  theme(text=element_text(size=12),\n        plot.title = element_text(size=22),\n        plot.subtitle = element_text(size=14),\n        plot.caption = element_text(size=12),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank())\n\nbbplot::finalise_plot(plot_name = p,\n                      source_name = \"Source: #TidyTuesday 2023 week10 Numbats in Australia\",\n                      save_filepath = \"images/basemap.png\")\n\n\nlibrary(cowplot)\n\n\nggdraw()+\n  draw_image(\"images/basemap.png\")+\n  draw_image(\"images/numbat.png\",\n             scale=0.25,\n             x=0.35)\n\n\nggsave(\"w10_NmiA.png\")"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day20_correlation/day20_correlation.html",
    "href": "chartchallenges/cases2023/posts2023/day20_correlation/day20_correlation.html",
    "title": "Correlation",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization Premier League Match Data Correlation\n\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 14)\n\n\ndf <- tuesdata$`soccer21-22`\ndf%>%head\n\n\ndf%>%\n  mutate(Date=as.Date(Date,\"%d/%m/%Y\"),\n         year=zoo::as.yearmon(Date),.after=Date)%>%\n  count(year)\n\n\ndf_corr <- df[,11:22]\ndf_corr%>%head()\n\n\ndf_named <- df[,11:22] %>%\n  rename(\"HomeShots\"=HS,\n         \"AwayShots\"=AS,\n         \"HomeShots-on-Target\"=HST,\n         \"AwayShots-on-Target\"=AST,\n         \"HomeFouls\"=HF,\n         \"AwayFouls\"=AF,\n         \"HomeCorners\"=HC,\n         \"AwayCorners\"=AC,\n         \"HomeYellowCards\"=HY,\n         \"AwayYellowCards\"=AY,\n         \"HomeRedCards\"=HR,\n         \"AwayRedCards\"=AR)\n\ndf_named%>%head\n\n\n# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables \nlibrary(GGally)\n\n \n# Nice visualization of correlations\nggcorr(df_named, #df[,11:22], \n       method = c(\"pairwise\"),\n       geom=\"circle\",\n       max_size = 15,\n       min_size = 5,\n       family=\"Roboto Condensed\",\n       nbreaks = 6,\n       angle = 0,\n       palette = \"Paired\",\n       hjust = 1, \n       size = 4, \n       color = \"grey50\",\n       #low = \"green\",\n       #mid = \"#EEEEEE\",\n       #high = \"#F21A00\",\n       layout.exp = 1,\n       name = expression(rho))+\n  geom_point(size = 10, aes(color = coefficient > 0, \n                            alpha = abs(coefficient) > 0.5)) +\n  scale_alpha_manual(values = c(\"TRUE\" = 0.25, \"FALSE\" = 0)) +\n  guides(alpha = FALSE)+\n  labs(caption=\"Correlation for home and away side such as fouls, shots, cards\\nDataSource: #TidyTuesday 2023 w14 Premier League Match Data\\n#30daychartchallenge day20 Correlation | DataViz: Federica Gazzelloni\") +\n  annotate(geom = \"text\",\n           family=\"Roboto Condensed\",\n           fontface=\"bold\",\n           label=\"Premier League\\nMatch\\n2021-2022\",\n           size=14,\n           color=\"#a8bd3a\",\n           hjust=0,\n           x = 0 ,y =c(10) )+\n  theme(text=element_text(family=\"Roboto Condensed\"),\n        plot.caption = element_text(size=12,vjust = 1),\n        plot.margin = margin(0,0,0,0, \"pt\"))\n\n\nggsave(\"corr.png\",width = 9,height = 6)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day10_hybrid/day10_hybrid.html",
    "href": "chartchallenges/cases2023/posts2023/day10_hybrid/day10_hybrid.html",
    "title": "Hybrid",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 08)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day10_hybrid/day10_hybrid.html#bob-ross-paintings-hibrid---day-10",
    "href": "chartchallenges/cases2023/posts2023/day10_hybrid/day10_hybrid.html#bob-ross-paintings-hibrid---day-10",
    "title": "Hybrid",
    "section": "Bob Ross Paintings —> HIBRID - DAY 10",
    "text": "Bob Ross Paintings —> HIBRID - DAY 10\n\nbob_ross <- tuesdata$bob_ross\nbob_ross%>% names\n\n\ndf <- bob_ross%>%\n  pivot_longer(cols=10:27,names_to = \"color\",values_to = \"values\")%>%\n  select(color_hex,painting_index,painting_title,num_colors,color,season,episode)%>%\n  distinct()\n\n\nA hybrid boxplot\n\nlibrary(showtext)\n# sysfonts::font_families_google()\nsysfonts::font_add_google(\"Aclonica\",\"Aclonica\")\nsysfonts::font_add_google(\"Alegreya Sans\", \"aleg\")\n\n\n# ?ggpol::geom_boxjitter()\nlibrary(ggpol)\nset.seed(221)\nshowtext_auto()\ndf%>%\n  filter(color%in%c(\"Black_Gesso\",\"Burnt_Umber\",\"Dark_Sienna\"))%>%\n  group_by(color)%>%\n  ggplot(aes(x=painting_index,y=num_colors,group=color))+\n  geom_boxjitter(aes(fill = color),\n                 jitter.shape = 21, jitter.color = NA,\n                 outlier.color = NA, errorbar.draw = TRUE) +\n  scale_fill_manual(values = c(\"#000000\", \"#8A3324\", \"#5F2E1F\")) +\n  labs(title=\"Bob Ross Hybrid Color Paintings Variation\",\n       subtitle=\"\",\n       caption=\"DataSource: #TidyTuesday 2023 Week8 Bob Ross Paintings\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day10 - hybrid\",\n       x=\"Painting index\",y=\"Variety of colors in the Painting\",\n       fill=\"Color\")+\n  theme_minimal()+\n  theme(text = element_text(family = \"aleg\"))"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day21_down_upwards/day21_down_upwards.html",
    "href": "chartchallenges/cases2023/posts2023/day21_down_upwards/day21_down_upwards.html",
    "title": "Down upwards",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization US Egg Production down/upwards\n\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 15)\n\n\neggs <- tuesdata$`egg-production`\ncages <- tuesdata$`cage-free-percentages`\n\n\neggs%>%\n  inner_join(cages,by=\"observed_month\")%>%\n  distinct() %>%\n  mutate(ymon=zoo::as.yearmon(observed_month),\n         .after=observed_month)\n\n\ndf <- eggs %>%\n  inner_join(cages, by = \"observed_month\") %>%\n  mutate(ymon = zoo::as.yearmon(observed_month),\n         .after = observed_month) %>%\n  select(-source.x, -source.y, -observed_month) %>%\n  group_by(ymon, prod_process) %>%\n  mutate(pct_hens = round(n_hens / sum(n_hens) * 100, 2),\n         pct_eggs = round(n_eggs / sum(n_eggs) * 100, 2)) %>%\n  ungroup() %>%\n  arrange(ymon)\n\ndf%>%head\n\n\ndf %>%\n  ggplot(aes(ymon,n_hens))+\n  geom_line(aes(group=prod_type))+\n  facet_wrap(~prod_process,scales = \"free\")\n\n\ndf %>%\n  filter(!prod_process==\"all\")%>%\n  ggplot()+\n  geom_line(aes(ymon,n_hens,group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+  \n  facet_wrap(~prod_process,scales = \"free_y\")+\n  scale_y_log10()\n\n\ndf %>%\n  filter(!prod_process==\"all\")%>%\n  ggplot(aes(x=ymon))+\n  geom_line(aes(y=n_hens/sum(n_hens)*100,\n                group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+\n  geom_line(aes(y=n_eggs/sum(n_eggs)*100,\n                group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+\n  facet_wrap(~prod_process,scales = \"free_y\")+\n  scale_y_continuous(labels = scales::label_percent(decimal.mark = \",\",suffix = \" %\"))\n\n\ndf %>%\n  filter(!prod_process==\"all\")%>%\n  ggplot()+\n  geom_line(aes(ymon,percent_eggs,group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+  \n  geom_line(aes(ymon,percent_hens,group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))\n\n\nFill missing values\nyou can fill in the data with two approaches:\n\nUp - While filling the missing values, you have to specify the direction of filling of values. If you choose Up, then the filling process will be bottom-up.\nDown - In this method, you have to set the direction of filling to down.\n\nsource: https://www.digitalocean.com/community/tutorials/fill-missing-values-in-tidyr-r\nUse .direction = \"downup\" to fill missing values in both directions\n\ndf %>%\n  filter(!prod_process==\"all\")%>%\n  tidyr::fill(percent_eggs, .direction = 'downup') %>% # View()\n  mutate(percent_eggs=ifelse(is.na(percent_eggs),25,percent_eggs))%>% #View\n  ggplot()+\n  geom_line(aes(ymon,percent_eggs,group=prod_type),\n            color=\"red\",\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+  \n  geom_line(aes(ymon,percent_hens,group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+\n  ggthemes::theme_fivethirtyeight()\n\nAug 2016 - Feb 2021\n\ndf %>%\n  filter(!prod_process==\"all\")%>% # count(ymon)\n  tidyr::fill(percent_eggs, .direction = 'downup') %>% # View()\n  mutate(percent_eggs=ifelse(is.na(percent_eggs),25,percent_eggs))%>% #View\n  pivot_longer(cols = c(\"percent_eggs\",\"percent_hens\"))%>%\n  mutate(name=ifelse(name==\"percent_eggs\",\"eggs (%)\",\"hens (%)\")) %>%\n  ggplot()+\n  geom_line(aes(ymon,value,group=name,color=name),\n            linewidth= 1,\n            arrow = arrow(length = unit(0.1,\"inches\"),\n                          angle = 30,\n                          type=\"closed\"))+ \n  labs(title=\"US Egg Production Aug 2016 - Feb 2021\",\n       subtitle=\"Hens & Eggs down/upwards\",\n       color=\"\",\n       caption=\"DataSource: #TidyTuesday Week 15 US Egg Production\\n #30DayChartChallenge Day 21 down/upwards | DataViz: Federica Gazzelloni\")+\n  ggthemes::scale_color_fivethirtyeight()+\n  ggthemes::theme_fivethirtyeight()\n\n\nggsave(\"w15_UEPD.png\",width = 7,height = 5,bg=\"white\")"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day19_anthropocene/day19_anthropocene.html",
    "href": "chartchallenges/cases2023/posts2023/day19_anthropocene/day19_anthropocene.html",
    "title": "Anthropocene",
    "section": "",
    "text": "Gazzelloni F. (2023), Data Visualization: Yellow-Legged Frog Anthropocene\n\n\nlibrary(tidyverse)\n\nlibrary(spocc)\nrana_sierrae <- occ(query = \"Rana sierrae\",\n              from = \"gbif\",\n               limit = 1000,\n               date = c('1900-01-01','2020-01-01'),\n               has_coords = TRUE\n              )\nrana_muscosa <- occ(query = \"Rana muscosa\",\n               from = \"gbif\",\n               limit = 1000,\n               date = c('1900-01-01','2020-01-01'),\n               has_coords = TRUE\n               )\n\n\nrana_sierrae <- data.frame(rana_sierrae$gbif$data)\nrana_muscosa <- data.frame(rana_muscosa$gbif$data)\n\n\nrana_sierrae <- rana_sierrae %>%\n  select(\nyear=\"Rana_sierrae.year\",                            \nmonth=\"Rana_sierrae.month\",                           \nday=\"Rana_sierrae.day\",                             \ndate=\"Rana_sierrae.eventDate\",\nlong=\"Rana_sierrae.longitude\",                      \nlat=\"Rana_sierrae.latitude\"\n)\n\nrana_muscosa <- rana_muscosa %>%\n  select(\nyear=\"Rana_muscosa.year\",                            \nmonth=\"Rana_muscosa.month\",                           \nday=\"Rana_muscosa.day\",                             \ndate=\"Rana_muscosa.eventDate\",\nlong=\"Rana_muscosa.longitude\",                      \nlat=\"Rana_muscosa.latitude\"\n)\n\nfrog_data <- rbind(rana_sierrae%>%\n  mutate(type=rep(\"rana_sierrae\",736)),\nrana_muscosa%>%\n  mutate(type=rep(\"rana_muscosa\",1000))\n)\n\n\nfrog_data_yr <- rana_muscosa %>%\n  group_by(year) %>%\n  reframe(population = n())\n\n\n# Plot population over time\nggplot(frog_data_yr, aes(x = year, y = population,color=population))+\n                         #group=factor(type),\n                         #color=type)) +\n  geom_line(linewidth=1) +\n  labs(title = \"Decline in Sierra Nevada Yellow-Legged Frog Population\",\n       x = \"Year\",\n       y = \"Population\",\n       caption = \"DataSource: GBIF | #30DayChartChallenge Day19: Anthropocene\\nDataViz: Federica Gazzelloni\") +\n  geom_vline(xintercept = 2000,linetype=\"dashed\",linewidth=0.5)+\n  geom_vline(xintercept = 2014,linetype=\"dashed\",linewidth=0.3,color=\"#a60845\")+\n  #scale_color_viridis_d()+\n  scale_color_gradient(low = \"#a8bd3a\",high = \"#275477\")+\n  scale_x_continuous(n.breaks = 10)+\n  theme_minimal()+\n  theme(plot.title = element_text(size=16))\n\n\nggsave(\"timeline.png\",width = 9,height = 5,bg=\"white\")\n\n\nstates <- map_data(\"state\")\n\nstate_names <- states%>%\n  filter(long > -125 & long < -110 ,lat > 30 & lat < 50) %>%\n  group_by(region)%>%\n  reframe(long=mean(range(long)),lat=mean(range(lat)))%>%\n  mutate(region=str_to_title(region))\n\nfrog_data%>%\n  filter(year > 2000) %>%\n  mutate(year=as.factor(year))%>%\n  ggplot()+\n  geom_polygon(data=states,aes(long,lat,group=group),\n               fill=\"#bfd0dd\",color=\"grey20\")+\n  geom_text(data=state_names, mapping=aes(long,lat,label=region))+\n  geom_point(aes(long,lat,fill=year),shape=21,stroke=0.5)+\n  coord_quickmap(xlim=c(-125,-110),ylim=c(30,50))+\n  labs(fill=\"Year\")+\n  theme_minimal()+\n  theme(axis.text = element_blank(),\n        axis.title = element_blank())\n\n\nggsave(\"map.png\")\n\n\nlibrary(cowplot)\n\nggdraw()+\n  draw_image(\"timeline.png\")+\n  draw_image(\"map.png\",scale=0.6,x=0.11,y=0.05)+\n  draw_label(\"April 29, 2014:\\nU.S. Fish and Wildlife Service declares\\nSierra Nevada Yellow-Legged Frog\\nspecies in danger of extinction\",hjust = 0,\n             x=0.7,y=0.8,size=6)+\n  draw_label(\"Sierra Nevada Yellow-Legged Frog\\nRana Muscosa once the most abundant frog in the Sierra Nevada\\nis now critically endangered, yellow-legged frogs\\nhave declined dramatically and they are now found\\nin fewer than 7 percent of their historic localities. \",\n             hjust = 0,\n             x=0.02,y=0.08,size=6)\n\n\nggsave(\"final.png\")"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day15_positive_negative/day15_positive_negative.html",
    "href": "chartchallenges/cases2023/posts2023/day15_positive_negative/day15_positive_negative.html",
    "title": "Positive negative",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 13)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day15_positive_negative/day15_positive_negative.html#bonne-projection",
    "href": "chartchallenges/cases2023/posts2023/day15_positive_negative/day15_positive_negative.html#bonne-projection",
    "title": "Positive negative",
    "section": "Bonne Projection",
    "text": "Bonne Projection\n\nlibrary(sf)\nprojection_bonne <- c(\"+proj=bonne +lat_1=10\")\n\nworld_graticule <- sf::st_graticule(lon= seq(-180,180, 15),\n                                    lat = seq(-90,90, 7.5),\n                                    ndiscr = 5000,\n                                    margin = 0.00000000001) %>%\n  sf::st_transform(projection_bonne)\n\n\nworld_pol <- rnaturalearth::ne_countries(returnclass = \"sf\")\n\nDT_sf = st_as_sf(timezones, coords = c(\"longitude\", \"latitude\"), \n                 crs = 4326, agr = \"constant\")\n\nggplot()+\n  geom_sf(data = world_graticule)+\n  geom_sf(data = world_pol)+\n  geom_sf(data=DT_sf)+\n  coord_sf()\n\n\n# input_coord <- st_point(c(<longitude>, <latitude>))\nproj_mollweide <- \"+proj=moll\"\noutput_coord <- st_transform(DT_sf, crs = proj_mollweide)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day15_positive_negative/day15_positive_negative.html#mollweide-projection",
    "href": "chartchallenges/cases2023/posts2023/day15_positive_negative/day15_positive_negative.html#mollweide-projection",
    "title": "Positive negative",
    "section": "Mollweide Projection",
    "text": "Mollweide Projection\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Patrick Hand\",\n                family=\"Patrick Hand\")\n\n\nggplot(output_coord)+\n  geom_rect(xmin=0,xmax=Inf,ymin=-Inf,ymax=Inf,fill=\"#fff1e0\")+\n  geom_rect(xmin=-Inf,xmax=0,ymin=-Inf,ymax=Inf,fill=\"#bfd0dd\")+\n  geom_rect(xmin=0,xmax=Inf,ymin=-Inf,ymax=0,fill=\"#bfd0dd\")+\n  geom_rect(xmin=-Inf,xmax=0,ymin=-Inf,ymax=0,fill=\"#fff1e0\")+\n  geom_sf(data = world_pol,fill=NA,color=\"grey40\")+\n  geom_sf(shape=21,stroke=0.3,fill=\"#7b9aca\")+\n  geom_vline(xintercept = 0)+\n  geom_hline(yintercept = 0)+\n  #coord_map(projection = \"mollweide\")+\n  labs(title=\"Positive & Negative Coordinates\",\n       subtitle = \"Time zone locations\",\n       caption=\"DataSource: #TidyTuesday Week13: Time Zones - #30DayChartChallenge Day15: positive/negative\\nDataViz: Federica Gazzelloni\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(family=\"Patrick Hand\"),\n        plot.title = element_text(size=30),\n        plot.caption = element_text(size=10),\n        plot.background = element_rect(color=\"#7b9aca\",fill=\"#7b9aca\"))\n\n\nggsave(\"p.png\",\n       width = 7,height = 5)"
  },
  {
    "objectID": "chartchallenges/cases2023/posts2023/day4_historical/day4_historical.html",
    "href": "chartchallenges/cases2023/posts2023/day4_historical/day4_historical.html",
    "title": "Historical",
    "section": "",
    "text": "Resources:\n\nhttps://github.com/rfordatascience/tidytuesday/tree/master/data/2023/2023-01-10\nhttps://feederwatch.org/explore/raw-dataset-requests/\n\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 02)\n\n\ntuesdata$PFW_2021_public%>%head\n\n\ntuesdata$PFW_count_site_data_public_2021%>%head\n\n\nd <- tuesdata$PFW_2021_public %>% janitor::clean_names()\n\n\nd%>% \n  count(year)\n\n\nworld <- map_data(\"world\")\nstates <- map_data(\"state\")\n\nprop_df <- d %>%\n  filter(longitude < -50) %>%\n  group_by(longitude, latitude, year) %>%\n  reframe(prop_many = how_many / sum(how_many) * 100)\n\n\nggplot(data = world, mapping = aes(long, lat, group = group)) +\n  geom_polygon(color = \"grey\", fill = NA) +\n  geom_polygon(data = states,\n               linewidth=0.1,\n               color = \"grey\",\n               fill = NA) +\n  geom_point(\n    data = prop_df,\n    mapping = aes(x = longitude, y = latitude, fill = factor(year)),\n    inherit.aes = FALSE,\n    key_glyph = \"rect\",\n    size=0.5,\n    shape = 21,\n    stroke = 0.3,\n    color = \"black\"\n  ) +\n  scale_fill_manual(values=c(\"#fc1c3c\",\"#9189c1\"))+\n  coord_sf(xlim = c(-157.94932, -50),\n           ylim = c(20 , 65.51989)) +\n  #facet_wrap(vars(year),nrow = 2) +\n  labs(title = \"Maximum number of individuals seen at one time during observation period\",\n       subtitle=\"total proportion (%)\",\n       caption=\"DataSource: #TidyTuesday 2023 week2 - BFW data\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day4 - historical\\n\",\n       fill = \"Year\") +\n  ggthemes::theme_map(base_size = 10, base_family = \"Roboto Condensed\") +\n  theme(plot.background = element_rect(color=\"black\",fill=\"black\"),\n        panel.background = element_rect(color=\"black\",fill=\"black\"),\n        plot.title = element_text(color=\"#9189c1\",size=14),\n        plot.subtitle = element_text(color=\"#9189c1\",size=12),\n        plot.caption = element_text(color=\"#fc1c3c\"),\n        legend.position = c(0.85,0.1))\n\n\nggsave(\"images/map.png\",\n       width = 7,height = 4)\n\n\nd%>%count(species_code,sort=TRUE)\n\n\nlibrary(fpp3)\ndata <- d %>%\n  mutate(date=paste0(month,\"-\",day,\"-\",year),.after =obs_id )%>%\n  mutate(date=as.Date(date,\"%m-%d-%Y\"))%>%\n  select(year,month,day,date,how_many)%>%\n  distinct()%>%\n  group_by(date)%>%\n  reframe(how_many=sum(how_many))\n\nts <- data%>%\n  as_tsibble()\n\nts %>%\n  #autoplot()\n  gg_season(y = how_many,period = \"week\")+\n  scale_colour_steps2() +\n  labs(title=\"Feeder Birds seasonality\",\n       subtitle=\"Exploring Daily Seasonal Patterns of Feeder Bird Sightings\",\n       y=\"number of individuals seen\",x=\"Day of the week (2020-2021)\" )+\n  theme_linedraw(base_size = 12,\n                 base_family = \"Roboto Condensed\")+\n  theme(plot.title = element_text(size=18),\n        plot.subtitle = element_text(size=14))\n\n\nggsave(\"images/daily.png\",width = 7,height = 4)\n\n\nts %>%\n  autoplot()+\n  scale_colour_steps2() +\n  labs(title=\"Feeder Birds seasonality\",\n       subtitle=\"Exploring Monthly Seasonal Patterns of Feeder Bird Sightings\",\n       y=\"number of individuals seen\",x=\"Months (2020-2021)\" )+\n  theme_linedraw(base_size = 12,\n                 base_family = \"Roboto Condensed\")+\n  theme(plot.title = element_text(size=18),\n        plot.subtitle = element_text(size=14))\n\n\nggsave(\"images/monthly.png\",width = 7,height = 4)\n\n\nlibrary(cowplot)\n\nggdraw()+\n  draw_image(\"images/map.png\")+\n  draw_image(\"images/daily.png\",scale = 0.25,x=-0.36,y=-0)+\n  draw_image(\"images/monthly.png\",scale = 0.25,x=-0.36,y=-0.27)+\n  draw_label(\"Map of locations from which Project FeederWatch participants have submitted data\\nbetween 2020 and 2021. The inset plots provides detail of an example of seasonality.\",x=0.02,y=0.07,size=6,color=\"grey\",fontfamily = \"Roboto Condensed\",hjust = 0)\n\n\nggsave(\"w2_BFWd.png\",width = 7,height = 4,dpi=320)"
  },
  {
    "objectID": "chartchallenges/cases2022/index.html",
    "href": "chartchallenges/cases2022/index.html",
    "title": "30DayChartChallenge 2022",
    "section": "",
    "text": "UN POP\n\n\nNetworks\n\n\n\n\n\n\nApr 30, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStorytelling\n\n\nNetworks\n\n\n\n\n\n\nApr 29, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeviations\n\n\nNetworks\n\n\n\n\n\n\nApr 28, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFuture\n\n\nNetworks\n\n\n\n\n\n\nApr 27, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\nNetworks\n\n\n\n\n\n\nApr 26, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrend\n\n\nNetworks\n\n\n\n\n\n\nApr 25, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTheme day\n\n\nNetworks\n\n\n\n\n\n\nApr 24, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTiles\n\n\nNetworks\n\n\n\n\n\n\nApr 23, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnimation\n\n\nNetworks\n\n\n\n\n\n\nApr 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDown upwards\n\n\nNetworks\n\n\n\n\n\n\nApr 21, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew Tool\n\n\nNetworks\n\n\n\n\n\n\nApr 20, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal Change\n\n\nNetworks\n\n\n\n\n\n\nApr 19, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOECD\n\n\nNetworks\n\n\n\n\n\n\nApr 18, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnections\n\n\nNetworks\n\n\n\n\n\n\nApr 17, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnvironment\n\n\nNetworks\n\n\n\n\n\n\nApr 16, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultivariate\n\n\nNetworks\n\n\n\n\n\n\nApr 15, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3-dimensional\n\n\nNetworks\n\n\n\n\n\n\nApr 14, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCorrelation\n\n\nNetworks\n\n\n\n\n\n\nApr 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTheme day\n\n\nNetworks\n\n\n\n\n\n\nApr 12, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nday11_circular\n\n\nNetworks\n\n\n\n\n\n\nApr 11, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExperimental\n\n\nNetworks\n\n\n\n\n\n\nApr 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistics\n\n\nNetworks\n\n\n\n\n\n\nApr 9, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMountains\n\n\nNetworks\n\n\n\n\n\n\nApr 8, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPhysical\n\n\nNetworks\n\n\n\n\n\n\nApr 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData day\n\n\nNetworks\n\n\n\n\n\n\nApr 6, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlope\n\n\nNetworks\n\n\n\n\n\n\nApr 5, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlora\n\n\nNetworks\n\n\n\n\n\n\nApr 4, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHistorical\n\n\nNetworks\n\n\n\n\n\n\nApr 3, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPictogram\n\n\nNetworks\n\n\n\n\n\n\nApr 2, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPart to whole\n\n\nNetworks\n\n\n\n\n\n\nApr 1, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day24_theme_day/day24_theme_day.html",
    "href": "chartchallenges/cases2022/posts2022/day24_theme_day/day24_theme_day.html",
    "title": "Theme day",
    "section": "",
    "text": "sources: https://raw.githubusercontent.com/johnburnmurdoch/johnburnmurdoch.github.io/master/slides/r-ggplot/r-scripts.R?\n\nlibrary(tidyverse)\nedu_exp <- read_csv(\"total-government-expenditure-on-education-gdp.csv\")\n\nedu_exp1 <- edu_exp%>%\n  janitor::clean_names()%>%\n  rename(value=government_expenditure_on_education_total_percent_of_gdp)\n\nedu_exp2 <- complete(edu_exp1, entity,year,fill=list(value=0))\n\noptions(scipen = 999)\n\n\n# edu_exp2_ft <- edu_exp2%>%\n#   mutate(year2=cut(year,4))%>%\n#   group_by(entity,year2)%>%\n#   summarize(tot=sum(value))%>%\n#   ungroup()%>%\n#   arrange(year2)\n\n# remotes::install_github(\"Financial-Times/ftplottools\")\n# library(ftplottools)\n\n# source('~/Documents/R/R_general_resources/EDA/ft_theme/ft_colors.R')\n# source('~/Documents/R/R_general_resources/EDA/ft_theme/ft_theme.R')\n\nedu_exp2_ft<- edu_exp2%>%\n  filter(value>0)\n\nclass<- rev(c(\"World\",\"High income\",\n          \"Middle income\",\n          \"Upper middle income\",\n          \"Low & middle income\",\n          \"Lower middle income\",\n          \"Low income\"))\n\nlevels(class)<-class\n\n# colors<-ft_o_colors[7:13]\n#names(colors)<- class\n\n\n\nedu_exp2_ft2 <- edu_exp2_ft%>%\n  filter(entity%in%class)%>%\n  filter(year>1998 & year<=2017)\n\nwld_y<- edu_exp2_ft2%>%filter(entity==\"High income\")%>%select(value)%>%unlist()\nwld_x<-edu_exp2_ft2%>%filter(entity==\"High income\")%>%select(year)%>%unlist()  \n\n\nlibrary(extrafont)\nlibrary(showtext)\nsysfonts::font_add_google(\"Zen Antique Soft\",\"zas\")\n\nshowtext.auto(enable = T)\nshowtext_opts(dpi = 320)\n\nlibrary(geomtextpath)\n\nedu_exp2_ft2%>%summary\n\np <-ggplot(data= edu_exp2_ft2%>%filter(entity==\"World\"),\n       aes(x=factor(year),y=(value),color=entity,\n             group=factor(entity),label=entity))+\n  #geom_line(size=1,key_glyph = \"timeseries\")+\n  geom_textline(size=6,key_glyph = \"timeseries\",\n                fontface=\"bold\",#hjust=0,\n                linewidth = 2,\n                show.legend = F)+\n  geom_line(data= edu_exp2_ft2%>%filter(!entity==\"World\"),\n                size=0.5,key_glyph = \"timeseries\",show.legend = T) +\n  geom_line(data= edu_exp2_ft2%>%filter(entity==\"High income\"),\n            size=1,key_glyph = \"timeseries\",show.legend = T) +\n  #geom_point(size=2,show.legend = F)+\n  geom_segment(aes(yend=0,xend=factor(year)),\n               size=4,alpha=0.1,\n               inherit.aes = T,show.legend = F) +\n  geom_segment(aes(yend=wld_y,xend=factor(wld_x)),\n               size=4,alpha=0.4,\n               inherit.aes = T,show.legend = F)+\n  geom_segment(aes(y= 7, yend=8,\n                   x=19, xend=19),\n               size=10,alpha=0.4,\n               inherit.aes = T,show.legend = F)+\n  geom_segment(aes(y= 5.8, yend=6.3,\n                   x=16.8, xend=16.8),\n               size=40,\n               inherit.aes = T,show.legend = F)+\n  scale_y_log10()+\n  scale_x_discrete(expand = c(0,0.5),breaks=seq(1999,2017,3)) +\n  scale_color_manual(breaks=class,\n                     values=scales::brewer_pal('qual',2)(7))+\n  guides(colour = guide_legend(nrow = 2))+\n  coord_cartesian(clip = \"off\",ylim = c(2.646,5.370))+\n  labs(title=\"The Gap between High-income countries and the World AVG\",\n       subtitle=\"on Government expenditure on education total(% GDP)\",\n       color=\"\",\n       x=\"Time (Year)\",y=\"Total (% of GDP)\",\n       caption=\"\\n#30DayChartChallenge 2022 #Day24 - theme day: Fiancial Times\\nDataSource: UNESCO Institute for Statistics via OurWorldInData\\n \n       DataViz: Federica Gazzelloni |Twitter: @fgazzelloni\")+\n  ftplottools::ft_theme(base_size=16,\n                        legend_right=F)+\n  theme(text = element_text(family=\"zas\"),\n        axis.text.x = element_text(size=12),\n        plot.title = element_text(size=18),\n        plot.subtitle = element_text(size=12),\n        plot.caption = element_text(vjust=0.5,hjust=1,size=11),\n        plot.background = element_rect(fill=\"#fff1e0\",color=\"#fff1e0\"),\n        panel.background = element_rect(fill=\"#fff1e0\",color=\"#fff1e0\"),\n        legend.box.background = element_blank(),\n        legend.text = element_text(size=12,hjust=-0.02))\n\nlibrary(cowplot)\n\nggdraw(p)+\n  draw_label(\"Financial Times\", fontfamily = \"zas\",\n             x=0.15,y=0.08)\n\nggsave(\"test_ft5.png\",\n       dpi=320,\n      height = 6.22 , \n      width =  8.51)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day14_3-dimensional/day14_3-dimensional.html",
    "href": "chartchallenges/cases2022/posts2022/day14_3-dimensional/day14_3-dimensional.html",
    "title": "3-dimensional",
    "section": "",
    "text": "library(tidyverse)\n\nEmployed scientists and engineers, by sex and occupation: 2019\n\nscientists <- readxl::read_excel(\"~/Documents/R/WomenInSTEM/nsb20212-tabslbr-024_scientists.xlsx\",\n                                 na = \"0\", skip = 3)\n# View(scientists)\n\n\nscientists1 <- scientists[-1,]%>%\n  janitor::clean_names() %>%#names\n  rename(female_perc=x4,male_perc=x6) %>%\n  mutate(female=ifelse(female==\"s\",0,female),\n         female_perc=ifelse(female_perc==\"s\",0,female_perc),\n         male=ifelse(male==\"s\",0,male),\n         male_perc=ifelse(male_perc==\"s\",0,male_perc),\n         total=ifelse(total==\"s\",0,total)) %>%\n  mutate(across(-occupation,as.numeric)) %>% \n  filter(!occupation%in%c(\"All occupations\")) \n\n\ndf<- scientists1%>%\n  select(female,male,total) %>%\n  filter(female>0,male>0,total>0)%>%\n  log10()\n\n\ncol_df <-scientists1 %>%\n  pivot_longer(cols = c(total,female,male),names_to=\"names\",values_to=\"values\")%>%\n  distinct()\n# Add a new column with color\nmycolors <- c('royalblue1', 'darkcyan', 'oldlace')\n#scientists1$color <- mycolors\n\nlibrary(rgl)\nplot3d( \n  x=df$female, \n  y=df$male, \n  z=df$total, \n  col = mycolors,\n  aspect=0.5,\n  lwd=2,\n  type = 'h', \n  radius = .1,\n  xlab=\"Female\", ylab=\"Male\", zlab=\"Total\")\n\n\nlibrary(rayshader)\n\nplot<-scientists1%>%\n   filter(female>0,female_perc>0.00001,total>0) %>%\n  ggplot() + \n  geom_jitter(aes(x=total, y=female, color=log10(total))) + \n  scale_x_log10()+\n  scale_y_log10()+\n  scale_color_continuous(limits = c(0, 8))\n\n \n\nplot_gg(plot, \n        #width = 3.5, \n        multicore = TRUE,\n        windowsize = c(800, 800))\n        \n# zoom = (0.85, phi = 35, \n#         theta = 30, sunangle = 225, \n#         soliddepth = -100)\n\n\ngg = scientists1%>%\n   filter(female>0,male>0.00001,total>0) %>%\n  pivot_longer(cols = c(female,male),names_to=\"gender\",values_to=\"values\") %>%\n  ggplot(aes(x=total, y=values)) +\n  stat_density_2d(aes(fill = stat(nlevel)), \n                  geom = \"polygon\",\n                  n = 100,bins = 10,contour = TRUE) +\n  facet_wrap(gender~.) +\n  scale_fill_viridis_c(option = \"A\")\nplot_gg(gg,multicore=TRUE,width=5,height=5,scale=250)\n\n\nemployed <- readxl::read_excel(here::here(\"WomenInStem/nsb20212-tabslbr-025_employed.xlsx\"), \n                               na = \"0\", \n                               skip = 3)\n# View(employed)\n\n\nemployed1 <- employed[-1,] %>%\n  janitor::clean_names()%>%#names\n  rename(female_perc=x4,male_perc=x6,education=field_of_s_e_highest_degree) %>%\n  mutate(female=ifelse(female==\"s\",0,female),\n         female_perc=ifelse(female_perc==\"s\",0,female_perc),\n         male=ifelse(male==\"s\",0,male),\n         male_perc=ifelse(male_perc==\"s\",0,male_perc),\n         total=ifelse(total==\"s\",0,total)) %>%\n  mutate(across(-education,as.numeric)) %>%\n  arrange(education) \n\n\ngg1 <-employed1 %>%\n  pivot_longer(cols = c(female,male),names_to=\"gender\",values_to=\"values\") %>%\n  ggplot(aes(x=total, y=values)) +\n  stat_density_2d(aes(fill = stat(nlevel)), \n                  geom = \"polygon\",\n                  n = 100,bins = 10,contour = TRUE) +\n  facet_wrap(gender~.) +\n  scale_fill_viridis_c(option = \"B\") +\n  labs(title=\"STEM education by gender\",\n       caption=\"Dataviz: Federica Gazzelloni\")+\n  ggthemes::theme_economist_white()+\n  theme(legend.position =c(0.2,-0.05),\n        legend.direction = \"horizontal\")\nlibrary(rayshader)\nplot_gg(gg1,\n        multicore=TRUE,\n        #invert=TRUE,\n        width=5,height=5,\n        scale=250)\nSys.sleep(0.2)\n\nrender_snapshot(clear = TRUE)\n\n\ntempfilehdr = tempfile(fileext = \".hdr\")\ndownload.file(\"https://www.tylermw.com/data/venice_sunset_2k.hdr\",tempfilehdr)\nplot_gg(gg1, \n        width = 5, height = 5, \n        scale = 250, \n        multicore = TRUE, \n        windowsize = c(1200, 960))\n        \n\n\n\nSys.sleep(0.2)\n# render_depth(focallength = 100,clear=TRUE)\n\nrender_highquality(samples = 256, \n                   aperture=30, \n                   light = FALSE, \n                   focal_distance = 1700,\n                   obj_material = rayrender::dielectric(attenuation = c(1,1,0.3)/200), \n                   ground_material = rayrender::diffuse(checkercolor = \"grey80\",\n                                                        sigma=90,\n                                                        checkerperiod = 100),\n                   environment_light = tempfilehdr, \n                   camera_lookat = c(0,-150,0))"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day4_flora/day4_flora.html",
    "href": "chartchallenges/cases2022/posts2022/day4_flora/day4_flora.html",
    "title": "Flora",
    "section": "",
    "text": "source: https://blog.k2h.se/post/polar-rose-garden/\n\nlibrary(tidyverse)\ntheme_set(theme_void())\n\nrose2 <- function(k, size = 1, shift = 0, rotation = 0) {\n  tibble(theta = seq(0, 24 * pi, length.out = 1000)) %>%\n    mutate(r = size * cos(k * theta + rotation) + shift) %>%\n    mutate(x = r * cos(theta),\n           y = r * sin(theta))\n}\n\ncolors <- RColorBrewer::brewer.pal(12,\"Paired\")\n\nexpand_grid(row = 1:5,\n            column = 1:10) %>%\n  mutate(id = column * max(row) + row) %>%\n  \n  # Randomize order of flowers, so they alter which ones are op top\n  arrange(runif(nrow(.))) %>%\n  \n \n  # Randomize the parameters for the flowers\n  mutate(k = sample(c(2, 3, 4, 5, 7, 3/2, 5/2, 7/2, 4/3, 5/3, 7/3, 7/4, 7/5), \n                    nrow(.), replace = TRUE),\n         \n         size = rnorm(nrow(.), mean(iris$Petal.Width), sd(iris$Petal.Width)) + 1,\n         rotation = runif(nrow(.), min(iris$Petal.Length), max(iris$Petal.Length) * pi),\n         shift = runif(nrow(.), 0, mean(iris$Petal.Width)),\n         color = sample(colors, nrow(.), replace = TRUE)) %>%\n  \n  # Place them evently on a grid, but jitter them a bit to liven it all up\n  mutate(center_x = column * 5 + rnorm(nrow(.), 0, 1),\n         center_y = row * 5 + rnorm(nrow(.), 0, 1),\n         stem_x = column * 5 + runif(nrow(.), -5, 5),\n         stem_y = -2 + rnorm(nrow(.), 0, 0.5)) %>%\n  \n  # Generate the flowers\n  mutate(flower = pmap(list(k = k, size = size, \n                            shift = shift, \n                            rotation = rotation), rose2)) %>%\n  unnest(flower) %>%\n  \n  # Now that we have unnest()'ed all points, we have way too many stems. Let's keep only one per flower\n  group_by(id) %>%\n  mutate(stem_x = ifelse(row_number() == 1, stem_x, NA),\n         stem_y = ifelse(row_number() == 1, stem_y, NA)) %>%\n  ungroup() %>%\n  \n  ggplot(aes(x + center_x, y + center_y, group = id)) +\n  geom_curve(aes(x = center_x, y = center_y, xend = stem_x, yend = stem_y), curvature = 0.1, size = 0.2) +\n  geom_polygon(aes(fill = color), color = 'black', size = 0.2) +\n  coord_equal() +\n  scale_fill_identity() +\n  labs(title=\"#30DayChartChallenge 2022 - Day4 - Flora\",\n       subtitle=\"IRIS dataset petal length and width\",\n       caption=\"Source: Polar rose garden by @hnrklndbrg | DataViz: Federica Gazzelloni\")+\n  theme(plot.title = element_text(hjust=0.5),\n        plot.subtitle = element_text(hjust=0.5),\n        plot.caption = element_text(hjust=0.5))\n\nggsave(\"day4_flora.png\")"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day23_tiles/day23_tiles.html",
    "href": "chartchallenges/cases2022/posts2022/day23_tiles/day23_tiles.html",
    "title": "Tiles",
    "section": "",
    "text": "Source:\n\nhttps://ourworldindata.org/financing-education\n\n\nlibrary(tidyverse)\nedu_exp <- read_csv(\"total-government-expenditure-on-education-gdp.csv\")\n\n\n  edu_exp1 <- edu_exp%>%\n  janitor::clean_names()%>%\n  rename(value=government_expenditure_on_education_total_percent_of_gdp)\n\nedu_exp2 <- complete(edu_exp1, entity,year,fill=list(value=0))\n\n\nworld<- map_data(\"world\")\nregions<- plyr::count(world$region)%>%select(-freq)%>%unlist()\n\nedu_exp3 <- edu_exp2%>%\n  filter(entity%in%regions)\n\n\nmy_countries <- edu_exp3%>%\n  filter(!entity==\"Zimbabwe\")%>%\n  mutate(year2=cut(year,4))%>%\n  group_by(entity)%>%\n  summarize(tot=sum(value))%>%\n  ungroup()%>%\n  arrange(-tot)%>%\n  slice(1:50)%>%\n  unlist()\n\n\nedu_exp4 <- edu_exp3%>%\n  filter(entity%in%my_countries)%>%\n  mutate(entity=as.factor(entity),\n         year2=cut(year,4))%>%\n  group_by(entity,year2)%>%  #2500\n  mutate(value2=(value-mean(value))/(sd(value)/sqrt(2500)))%>%\n  ungroup()\n\n\nedu_exp4%>%summary\n\n\nlibrary(plotly)\nlibrary(hrbrthemes)\nlibrary(extrafont)\n# loadfonts()\n\n\nedu_exp4%>%count(entity)\n\n\nset.seed(123)\np <- ggplot(edu_exp4, aes(x=year, y=fct_reorder(entity,value))) +\n  geom_tile(aes(fill = value),color=\"black\") +\n  geom_vline(aes(xintercept=c(1969.5)),linetype=\"dashed\",size=1,alpha=0.2)+\n  geom_vline(aes(xintercept=c(1979.5)),linetype=\"dashed\",size=1,alpha=0.2)+\n  geom_vline(aes(xintercept=c(1989.5)),linetype=\"dashed\",size=1,alpha=0.2)+\n  geom_vline(aes(xintercept=c(1999.5)),linetype=\"dashed\",size=1,alpha=0.2)+\n  geom_vline(aes(xintercept=c(2009.5)),linetype=\"dashed\",size=1,alpha=0.2)+\n  geom_vline(aes(xintercept=c(2019.5)),linetype=\"dashed\",size=1,alpha=0.2)+\n  scale_fill_gradient(low=\"white\",high=\"blue\",\n                      breaks=c(1.5,12),\n                      labels=c(\"Min\",\"Max\")) +\n  guides(fill = guide_colourbar(barwidth = 9, \n                                barheight = 2,title.position = \"top\",\n                                label = F,\n                                ticks = FALSE))+\n  scale_x_continuous(expand=c(0,0),\n                     breaks=seq(1970,2019,10),\n                     label=c(\"1970-1979\",\"1980-1989\",\"1990-1999\",\"2000-2009\",\"2010-2019\"))+\n  labs(title = \"Government expenditure on education\", subtitle=\"Selected countries with on average total (% of GDP) between 3 and 9%\",\n       caption=\"#30DayChartChallenge 2022 #Day23 -Tiles\n       DataSource: UNESCO Institute for Statistics via OurWorldInData\\n \n       DataViz: Federica Gazzelloni\",\n       x=\"\",y=\"\",fill=\"AVG tot GDP %\")+\n    theme_ipsum()+\n  theme(text=element_text(size=12,face=\"bold\",\n                          family=\"Roboto Condensed\"),\n        axis.text.x = element_text(size=16,vjust=0.5,hjust=-0.5),\n        axis.text.y = element_text(size=15),\n        plot.title = element_text(size=42,\n                                  family=\"Roboto Condensed\"),\n        plot.subtitle = element_text(family=\"Roboto Condensed\",size=18,face=\"bold\"),\n        plot.caption = element_text(family=\"Roboto Condensed\",size=15,hjust=1,face=\"bold\"),\n        plot.title.position = \"panel\",\n        plot.background = element_rect(color=\"grey80\",fill=\"grey80\"),\n        panel.background = element_rect(color=\"grey80\",fill=\"grey80\"),\n        legend.title = element_text(size=18,vjust=1,color=\"grey30\"),\n        legend.text = element_text(size=18,color=\"grey30\"),\n        legend.position = c(0,-0.09),\n        legend.direction = \"horizontal\",\n        plot.margin = margin(10,10,10,1,unit = \"pt\"))+\n  annotate(\"text\",x=1975,y=-4,label=\"How to read it:\\n- white means 0/empty-value\\n- color gradient range on avg between 3 and 9%\\n- avg calculated from 1970 to 2019\",hjust = 0)+\n  coord_cartesian(ylim=c(1,50),clip=\"off\")\n\np\n#ggplotly(p)\nggsave(\"day23_tiles.png\",\n       dpi=320,\n       width = 12,\n       height = 14)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day29_storytelling/day29_storytelling.html",
    "href": "chartchallenges/cases2022/posts2022/day29_storytelling/day29_storytelling.html",
    "title": "Storytelling",
    "section": "",
    "text": "capacity <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-03/capacity.csv')\naverage_cost <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-03/average_cost.csv')\n\n# calculate the numbers\ncapacity%>%\n  arrange(-year) %>%\n  group_by(type)%>%\n  mutate(pct_change = ifelse(round((total_gw/lead(total_gw) - 1) * 100)>100,100,round((total_gw/lead(total_gw) - 1) * 100)))%>%\n  ungroup() %>%\n  filter(!is.na(pct_change))%>%\n  group_by(type)%>%\n  summarize(avg_pct_change=round(mean(pct_change)))\n\naverage_cost%>% # count(year)\n  drop_na() %>%\n  pivot_longer(cols=c(2,3,4),names_to=\"type\",values_to=\"mwh\")%>%\n  mutate(type=gsub(\"_mwh\",\"\",type)) %>%\n  arrange(-year) %>%\n  group_by(type) %>%\n  mutate(pct_change = ifelse(round((mwh/lead(mwh) - 1) * 100)>100,100,round((mwh/lead(mwh) - 1) * 100)))%>%\n  ungroup() %>%\n  filter(!is.na(pct_change))%>%\n  group_by(type)%>%\n  summarize(avg_pct_change=round(mean(pct_change)))\n\n\nplot1 <- capacity%>% \n  filter(!type==\"Storage\")%>%\n  mutate(tot_cum=cumsum(total_gw))%>%\n  arrange(-year) %>%\n  group_by(type)%>%\n  mutate(pct_change = ifelse(round((total_gw/lead(total_gw) - 1) * 100)>100,100,round((total_gw/lead(total_gw) - 1) * 100)))%>%\n  ungroup() %>%\n  ggplot(aes(x=factor(year),y=total_gw,fill=factor(year)))+\n  geom_col()+\n  geom_line(group=1,color=\"grey70\")+\n  geom_text(aes(label=pct_change),family=\"Roboto Condensed\")+\n  facet_wrap(~type,scales = \"free\")+\n  scale_x_discrete(breaks=seq(2014,2020,2))+\n  labs(x=\"\",y=\"\",\n       title=\"Energy Power Sources\",\n       subtitle = \"Berkeley Lab data shows among total gigawatts of powers capacity from 2014 to 2020:\\nSolar, Wind and Nuclear increased by 50%, 15%, and 1% respectively while Coal registered 10%\\ndecrease, Gas and Other sources decreased by 10%.\")+\n  ggthemes::scale_fill_hc()+\n  ggthemes::theme_hc()+\n  theme(text=element_text(family=\"Roboto Condensed\"),\n        legend.position = \"none\",\n        plot.title = element_text(face=\"bold\",size=44),\n        plot.caption = element_text(hjust=0))\n\n\nplot2 <- average_cost%>%  #count(year)\n  drop_na() %>%\n  pivot_longer(cols=c(2,3,4),names_to=\"type\",values_to=\"mwh\")%>%\n  mutate(type=gsub(\"_mwh\",\"\",type)) %>% \n  ggplot(aes(x=(year),y=mwh,group=type))+\n  geomtextpath::geom_textline(aes(label=type,color=type),hjust=0.05,size=6,family=\"Roboto Condensed\",fontface=\"bold\") +\n  scale_x_continuous(breaks=seq(2009,2021,2))+\n  ggthemes::scale_color_hc()+\n  labs(title=\"Average cost trend of increasing capacity power sources\",\n       subtitle=\"Estimated costs in dollars per megawatt-hour (MWh) 2009-2021\",\n       x=\"\",y=\"\",\n       caption=\"DataSource: Berkeley Lab | #30DayChartChallenge #Day29 StoryTelling\\nDataViz: Federica Gazzelloni | Visualization excluded Storage as power source\") +\n  ggthemes::theme_hc()+\n  theme(text=element_text(family=\"Roboto Condensed\"),\n        legend.position = \"none\",\n        plot.title = element_text(face=\"bold\",size=18),\n        plot.caption = element_text(hjust=0,size=12),\n        axis.line.x = element_line(color=\"grey70\",size=1))+\n  annotate(\"text\",x=c(2013,2015,2018),y=c(140,100,80),label=c(\"-16% Solar\",\"-6% Wind\",\"-7% Gas\"),\n           size=12,family=\"Roboto Condensed\") +\n  annotate(\"segment\", x = 2018, xend = 2018, y = 160, yend = 100,colour = \"grey70\",size=8,\n           arrow = arrow(length = unit(1.5,\"cm\")))\n\n\nlibrary(patchwork)\n\nplot1/plot2\n\nggsave(\"storytelling.png\",\n       dpi=320,\n       width = 7,\n       height = 9)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day10_experimental/day10_experimental.html",
    "href": "chartchallenges/cases2022/posts2022/day10_experimental/day10_experimental.html",
    "title": "Experimental",
    "section": "",
    "text": "data()\ntabplot::tableplot(airquality,\n                   select=Ozone)\n\nsummary(airquality$Ozone)\nlength(airquality$Ozone)\n\nrm(list=ls())\n\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\nlibrary(tidyverse)\nlibrary(RcmdrPlugin.KMggplot2)\n\n\nairquality%>%\n  mutate(Ozone=ifelse(is.na(Ozone),0,Ozone)) %>%\n  ggplot(aes(y=Ozone,x=seq(0,100,0.6535948))) +\n  geom_step()+\n  RcmdrPlugin.KMggplot2::geom_stepribbon(aes(ymin =0, ymax = Ozone + 0),\n                                         fill = \"grey70\")+\n  geom_smooth(se=T)+\n  geom_hline(aes(yintercept=mean(Ozone)),\n             linetype=\"dashed\")+\n  scale_x_reverse(limits=c(100,0))+\n  coord_flip() +\n  labs(title=\"Ozone level\",\n       subtitle = \"experimenting RcmdrPlugin.KMggplot2\",\n       caption=\"#30DayChartChallenge 2022 day10 - Experimental\\nDataSource: airquality dataset from {datasets} | DataViz: Federica Gazzelloni \")+\n  tvthemes::theme_brooklyn99()+\n  theme(axis.title.y = element_blank())\n\n\n\nggsave(\"day10_experimenting.png\")"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day30_un_pop/day30_UNPOP.html",
    "href": "chartchallenges/cases2022/posts2022/day30_un_pop/day30_UNPOP.html",
    "title": "UN POP",
    "section": "",
    "text": "library(tidyverse)\n\n\nlibrary(readr)\n\nunpop<-read_csv((\"WPP2019_TotalPopulationBySex.csv\"))\n\n\nunpop\n\n\nunpop%>%DataExplorer::profile_missing()\n\n\ndf <- unpop %>%\n  janitor::clean_names()%>%\n  filter(!is.na(location)) #%>% DataExplorer::profile_missing()\n\n275175 4\n\noptions(scipen = 999)\ndf1 <- df %>%\n  select(location,time,pop_total,pop_density)\n\n\n  df1%>%\n    ggplot(aes(x=time,y=pop_total,group=location)) +\n    geom_line(data=df1%>%filter(time<=2021)) +\n    geom_point(data=df1%>%filter(time>2021),size=0.2) \n  \n    theme_dark()\n\n\ntop_1950_location <- df1 %>%\n  filter(time==1950) %>%\n  count(location,time,pop_total)%>%\n  arrange(-pop_total) %>%\n  slice(1:10) %>%\n  select(location) %>%\n  unlist()\n\n\ndf2 <- df1 %>% filter(location %in% top_1950_location) \n  \n\ndf2 <- df1 %>%filter(location==\"UNICEF REGIONS\") \ndf2 <- df1 %>%filter(location==\"United Nations Member States\") \n\n  \n  df2 %>%\n  ggplot(aes(x=time,y=pop_total,group=location)) +\n    geom_line(data=df2%>%filter(time<=2021)) +\n    geom_point(data=df2%>%filter(time>2021),size=0.2)\n\n\nlibrary(extrafont)\n# loadfonts()\nlibrary(showtext)\n#showtext.auto()\nshowtext.opts(dpi=320)\n\n\ndf3 <- df1 %>%\n  filter(str_detect(location,regex(\"United Nations\", ignore_case = TRUE))) %>%\n  filter(!location==\"UNITED NATIONS Regional Groups of Member States\")\n\ndf3 %>% count(location)\n   \nplot <- df3 %>%\n  ggplot(aes(x=time,y=pop_total/100000,group=location)) +\n   #geomtextpath::geom_textpath(data=df3%>%filter(time<=2021),aes(label=location),size=3) \n  geomtextpath::geom_textline(aes(label=location),\n                              linewidth=1.5,\n                              size=4.2,hjust=1,color=\"white\") +\n  #scale_x_continuous(expand = c(0,1))+\n  labs(y=\"UN POPULATION\",x=\"TIME\",\n       caption=\"#30DayChartChallenge 2022 #Day30 data day: UN Population | DataSource: UN | DataViz: Federica Gazzelloni (@fgazzelloni)\",\n       xlim(1950,2100))+\n  tvthemes::theme_brooklyn99() +\n  theme(text = element_text(family=\"Roboto Condensed\"),\n        plot.caption = element_text(hjust=0),\n        plot.caption.position = \"panel\",\n        panel.grid = element_blank(),\n        axis.title.y = element_text(size=70,hjust=1,vjust=0.2),\n        axis.text.y = element_blank(),\n        axis.line.x = element_line(color=\"white\",linetype=\"solid\",size=0.1),\n        axis.ticks.x = element_line(size=20,color=\"white\"),\n        plot.margin = margin(10,10,10,10,\"pt\"))+\n  annotate(\"text\",label=\"2019 projection revision includes nine different\\nvariants to explore the implications of alternative\\nfuture scenarios of population change.\\n193 countries are United Nations Member States.\\nThe Holy See (Vatican City) has not chosen\\nto become part of the international organization.\",\n           size=3.5,\n           x=1945,y=102,hjust=0,color=\"white\")\n\n\nlibrary(ggpubr)\n\nggpubr::ggarrange(plot)\n\n\nggsave(\"day30_dataday_un.png\",\n       scale=1.2,\n       width = 8.41, height =5.94,\n       limitsize=TRUE)\n\n\nlibrary(tidyverse)\n\n\nlibrary(readr)\n\nunpop<-read_csv((\"WPP2019_TotalPopulationBySex.csv\"))\n\n\nunpop\n\n\nunpop%>%DataExplorer::profile_missing()\n\n\ndf <- unpop %>%\n  janitor::clean_names()%>%\n  filter(!is.na(location)) #%>% DataExplorer::profile_missing()\n\n275175 4\n\noptions(scipen = 999)\ndf1 <- df %>%\n  select(location,time,pop_total,pop_density)\n\n\n  df1%>%\n    ggplot(aes(x=time,y=pop_total,group=location)) +\n    geom_line(data=df1%>%filter(time<=2021)) +\n    geom_point(data=df1%>%filter(time>2021),size=0.2) \n  \n    theme_dark()\n\n\ntop_1950_location <- df1 %>%\n  filter(time==1950) %>%\n  count(location,time,pop_total)%>%\n  arrange(-pop_total) %>%\n  slice(1:10) %>%\n  select(location) %>%\n  unlist()\n\n\ndf2 <- df1 %>% filter(location %in% top_1950_location) \n  \n\ndf2 <- df1 %>%filter(location==\"UNICEF REGIONS\") \ndf2 <- df1 %>%filter(location==\"United Nations Member States\") \n\n  \n  df2 %>%\n  ggplot(aes(x=time,y=pop_total,group=location)) +\n    geom_line(data=df2%>%filter(time<=2021)) +\n    geom_point(data=df2%>%filter(time>2021),size=0.2)\n\n\nlibrary(extrafont)\n# loadfonts()\nlibrary(showtext)\n#showtext.auto()\nshowtext.opts(dpi=320)\n\n\ndf3 <- df1 %>%\n  filter(str_detect(location,regex(\"United Nations\", ignore_case = TRUE))) %>%\n  filter(!location==\"UNITED NATIONS Regional Groups of Member States\")\n\ndf3 %>% count(location)\n   \nplot <- df3 %>%\n  ggplot(aes(x=time,y=pop_total/100000,group=location)) +\n   #geomtextpath::geom_textpath(data=df3%>%filter(time<=2021),aes(label=location),size=3) \n  geomtextpath::geom_textline(aes(label=location),\n                              linewidth=1.5,\n                              size=4.2,hjust=1,color=\"white\") +\n  #scale_x_continuous(expand = c(0,1))+\n  labs(y=\"UN POPULATION\",x=\"TIME\",\n       caption=\"#30DayChartChallenge 2022 #Day30 data day: UN Population | DataSource: UN | DataViz: Federica Gazzelloni (@fgazzelloni)\",\n       xlim(1950,2100))+\n  tvthemes::theme_brooklyn99() +\n  theme(text = element_text(family=\"Roboto Condensed\"),\n        plot.caption = element_text(hjust=0),\n        plot.caption.position = \"panel\",\n        panel.grid = element_blank(),\n        axis.title.y = element_text(size=70,hjust=1,vjust=0.2),\n        axis.text.y = element_blank(),\n        axis.line.x = element_line(color=\"white\",linetype=\"solid\",size=0.1),\n        axis.ticks.x = element_line(size=20,color=\"white\"),\n        plot.margin = margin(10,10,10,10,\"pt\"))+\n  annotate(\"text\",label=\"2019 projection revision includes nine different\\nvariants to explore the implications of alternative\\nfuture scenarios of population change.\\n193 countries are United Nations Member States.\\nThe Holy See (Vatican City) has not chosen\\nto become part of the international organization.\",\n           size=3.5,\n           x=1945,y=102,hjust=0,color=\"white\")\n\n\nlibrary(ggpubr)\n\nggpubr::ggarrange(plot)\n\n\nggsave(\"day30_dataday_un.png\",\n       scale=1.2,\n       width = 8.41, height =5.94,\n       limitsize=TRUE)\n\n, width =8.41 , height = 5.94, units = “px”"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day17_connections/day17_connections.html",
    "href": "chartchallenges/cases2022/posts2022/day17_connections/day17_connections.html",
    "title": "Connections",
    "section": "",
    "text": "library(tidyverse)\nbird_baths <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-08-31/bird_baths.csv')\nbird_baths <- bird_baths %>%\n  drop_na() %>%\n  filter(bird_count>0)\n\nbird_baths_type <- bird_baths %>% \n  group_by(bird_type) %>%\n  summarise(tot_bird_count = sum(bird_count),.groups=\"drop\") \n\nbird_baths_type <- column_to_rownames(bird_baths_type, var = \"bird_type\")\n\n\n# Compute distances and hierarchical clustering\ndd <- dist(scale(bird_baths_type), method = \"manhattan\")\nhc <- hclust(dd, method = \"ward.D2\")\nplot(hc)\n\nlibrary(\"ape\")\ncolors = RColorBrewer::brewer.pal(12,\"Set2\")\nclus4 = cutree(hc, 12)\n\n#library(extrafont)\n#loadfonts()\n\npng(filename = \"test.png\",  \n    width = 25, \n    height = 18, units = \"cm\", \n    res = 320)\nplot(as.phylo(hc), \n     type = \"radial\", #\"fan\", #type = \"phylogram\", \n     show.tip.label = TRUE,\n     edge.color = \"midnightblue\", \n     edge.width = 1, \n     edge.lty = 6,\n     use.edge.length = T,\n     node.depth = 1,\n     node.pos = 2,\n     cex = 0.6, \n     label.offset = 0.01,\n     no.margin = TRUE,\n     tip.color = colors[clus4])\ndev.off()\n\n\nlibrary(extrafont)\nlibrary(showtext)\nshowtext_auto(enable = F)\nlibrary(cowplot)\n\n\nif (requireNamespace(\"magick\", quietly = TRUE)){\n  img <- magick::image_transparent(\n    magick::image_read(\"bird-pict.png\"),\n    color = \"white\"\n  )\n  img2 <- magick::image_negate(\"bird-pict.png\")\n  p<-ggplot(data.frame(x = 1:3, y = 1:3), aes(x, y)) +\n    geom_point(size = 3) +\n    geom_abline(slope = 1, intercept = 0, \n                linetype = 2, color = \"beige\") +\n    draw_image(\"test-removebg.png\", x = 1.5, y = 1.5, scale = 2.5)+\n    draw_image(\"bird-pict.png\" , x = 0.9, y = 1.9, scale = .9) \n    \n}\n\n\np +\n  labs(title=\"Avian Assemblages at Bird Baths - Australia\",\n       caption=\"DataViz: @fgazzelloni\\n#TidyTuesday 2021 week36 Bird Baths\\n#30DayChartChallenge 2022 #day17 - Connections\")+\n  theme_void()+\n  theme(plot.background = element_rect(color=\"grey20\",fill=\"grey20\"),\n        panel.background = element_rect(color=\"grey20\",fill=\"grey20\"),\n        plot.title = element_text(family = \"Roboto Condensed\",\n                                  color=\"beige\",size=28,\n                                  vjust=-1,hjust = 0.1),\n        plot.caption = element_text(family = \"Roboto Condensed\",\n                                    color=\"beige\",size=15,\n                                    vjust = 3,hjust = 0.9))\nggsave(\"bird-network.png\",\n       dpi=320,\n       width = 8,\n       height = 8)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day5_slope/day5_slope.html",
    "href": "chartchallenges/cases2022/posts2022/day5_slope/day5_slope.html",
    "title": "Slope",
    "section": "",
    "text": "library(tidyverse)\n\n#load data\nnews_orgs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-05/news_orgs.csv')\n\n#news_orgs %>% head(50)%>% View\n\n#news_orgs%>% count(year_founded)\n\nlibrary(extrafont)\nloadfonts()\nlibrary(showtext)\n#sysfonts::font_add_google(\"Public Sans\",\"publicsans\")\n\n  \ndf <- news_orgs %>%\n  select(publication_name,year_founded,budget_percent_editorial,budget_percent_revenue_generation) %>% \n  drop_na() %>%\n  arrange(budget_percent_editorial) %>% #count(year_founded) %>% View\n  filter(!budget_percent_editorial==budget_percent_revenue_generation,\n         year_founded==2010) \n\n\n\ndf2 <- df %>%\n  arrange(desc(budget_percent_editorial)) %>%\n  mutate(photo=gsub(\" \",\"\",publication_name),.after=publication_name,\n         photo=tolower(photo),\n         photo=paste0(\"data/2022/w14_digital_pub/\",photo,\".png\"))\n\nlibrary(hrbrthemes)\nlibrary(ggbump)\nlibrary(ggh4x)\nlibrary(ggimage)\n\n\ndf2 %>%\n  ggplot(aes(x=0,xend=1,\n             y=budget_percent_editorial,yend=budget_percent_revenue_generation,\n             group=factor(publication_name))) +\n ggrepel::geom_text_repel(aes(x=0,label=publication_name),\n                          color=\"grey80\",\n                          \n                           direction = \"y\", hjust = \"left\",\n                           min.segment.length = 0,\n                           nudge_x = 1.1,\n                           box.padding = 0.5,\n                           nudge_y = 0,\n                          segment.color=\"grey32\",\n                           segment.curvature = -0.1,\n                           segment.ncp = 3,\n                           segment.angle = 20,\n                           segment.size = 0.2)+\n  geom_image(aes(x=rev(seq(0,1.2,0.08571429)),\n                 y=seq(1,10,0.6785714),\n                 image=rev(photo)),\n             alpha=0.6,size=0.04,\n             nudge_y = 0.1,by=\"height\")+\n  geom_segment(size=1) +\n  geom_point(size=8,shape=21,stroke=3)+\n  geom_point(aes(x=1,y=budget_percent_revenue_generation),size=8,shape=21,stroke=3) +\n  labs(title=\"Publications funded in 2010: Editorial vs Revenue generation budget\",\n       subtitle=\"Report from PROJECT OASIS - Hussman School of Journalism and Media\",\n       caption=\"#TidyTuesday week14 & #30DayChartChallenge 2022 day5 - Slope\n       DataSource: Digital Publications|Project Oasis - DataViz: Federica Gazzelloni\",\n       x=\"Revenue generation budget (%)\",\n       y=\"Editorial budget (%)\") +\n  guides(y.sec = guide_axis_manual(labels = c(\"0-10\",\"11-20\",\"21-30\",\"31-40\",\"41-50\",\"51-60\",\"\",\"\",\"\",\"\")))+\n  scale_x_continuous(expand = c(0,0),limits=c(-0.1,1.3))+\n  hrbrthemes::theme_ft_rc()+\n  theme(text = element_text(),\n        axis.text.x = element_blank(),\n        plot.title = element_text(size=28),\n        plot.caption = element_text(size=11),\n        axis.title.x = element_text(size=10),\n        axis.title.y = element_text(size=10))\n\n\nggsave(\"w14_digital_publications.png\",\n       width = 12, height = 8,\n       dpi=320)\n\ndev.off()\n\n# Second version:\n\nlibrary(sigmoid)\n\nz <- rev(seq(0,1.2,0.08571429))\n\ndf2 %>%\n  ggplot(aes(x=0,xend=1,\n             y=budget_percent_editorial,yend=budget_percent_revenue_generation,\n             group=factor(publication_name))) +\n  ggrepel::geom_text_repel(aes(x=0,label=publication_name),\n                           color=\"grey80\",\n                           direction = \"y\", hjust = \"left\",\n                           min.segment.length = 0,\n                           nudge_x = 1.11,\n                           box.padding = 0.5,\n                           nudge_y = 0,\n                           segment.color=\"grey32\",\n                           segment.curvature = -0.1,\n                           segment.ncp = 3,\n                           segment.angle = 20,\n                           segment.size = 0.2)+\n  geom_image(aes(x=sigmoid(z, k=sd(z), x0=mean(z),\n                           method=\"tanh\",\n                           SoftMax = F\n                           ),\n                 y=seq(5.5,10.5,0.3571429),\n                 image=rev(photo)),\n             size=0.04,nudge_y = 0.1,by=\"height\")+\n  geom_segment(size=1,lineend = \"round\",color=\"grey32\") +\n  geom_segment(size=2,lineend = \"round\",linetype=\"dashed\") +\n  geom_point(size=8,shape=21,stroke=3,fill=\"grey80\",alpha=0.7)+\n  geom_point(aes(x=1,y=budget_percent_revenue_generation),\n             size=8,shape=21,stroke=3,fill=\"grey80\",alpha=0.7) +\n  labs(title=\"Publications funded in 2010: Editorial vs Revenue generation budget\",\n       subtitle=\"Report from PROJECT OASIS - Hussman School of Journalism and Media\",\n       caption=\"#TidyTuesday week14 & #30DayChartChallenge 2022 day5 - Slope\n       DataSource: Digital Publications|Project Oasis - DataViz: Federica Gazzelloni\",\n       x=\"Revenue generation budget (%)\",\n       y=\"Editorial budget (%)\") +\n  guides(y.sec = guide_axis_manual(labels = c(\"0-10\",\"11-20\",\"21-30\",\"31-40\",\"41-50\",\"51-60\",\"\",\"\",\"\",\"\")))+\n  scale_x_continuous(expand = c(0,0),limits=c(-0.1,1.3))+\n  hrbrthemes::theme_ft_rc()+\n  theme(text = element_text(color=\"grey40\",family=\"Impact\"),\n        axis.text.x = element_blank(),\n        axis.text.y = element_text(color=\"grey60\"),\n        plot.title = element_text(size=28),\n        plot.caption = element_text(size=11),\n        axis.title.x = element_text(size=10,color=\"grey60\"),\n        axis.title.y = element_text(size=10,color=\"grey60\"))"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day22_animation/day22_animation.html",
    "href": "chartchallenges/cases2022/posts2022/day22_animation/day22_animation.html",
    "title": "Animation",
    "section": "",
    "text": "library(tidyverse)\n\n\nbig_dave <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-19/big_dave.csv')\ntimes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-19/times.csv')\n\n\nbig_dave%>%glimpse\nbig_dave%>%arrange(-rowid)%>%head\n\n\nbig_dave1 <- big_dave%>% # DataExplorer::profile_missing()\n  select(answer,puzzle_date,puzzle_name) %>%\n  filter(!is.na(answer)) %>%\n  mutate(puzzle_bigdave=gsub(\"[[:punct:][:blank:]]\\\\d*\",\"\",puzzle_name))\n\n\nbig_dave1%>%count(answer)\n\n\ntimes%>%glimpse\ntimes%>%head\n\n\ntimes1 <- times%>%\n  select(answer,puzzle_date,puzzle_name) %>% #DataExplorer::profile_missing()\n  filter(!is.na(answer))%>%\n  mutate(puzzle_times=gsub(\"[[:punct:][:blank:]]\\\\d*\",\"\",puzzle_name))\n\n\ntimes1 %>%count(answer)\n\n\ndf <- big_dave1 %>%\n  inner_join(times1,by=c(\"answer\",\"puzzle_date\")) %>%\n  arrange(puzzle_date) %>% # \n  mutate(answer=as.factor(answer)) %>% #DataExplorer::profile_missing()\n  select(-puzzle_name.x,-puzzle_name.y) %>%\n  mutate(year=lubridate::year(puzzle_date),.after=answer,\n         year=as.integer(year))\n \ndf \n\n\ndf%>%\n  ggplot(aes(x=year,y=puzzle_bigdave))+\n  geom_col()\n\n\nlibrary(gganimate)\ncolors<- colorRampPalette(RColorBrewer::brewer.pal(12, \"Paired\"))(161)\nlibrary(extrafont)\nloadfonts()\n\n\nlibrary(showtext)\n# \nfont_add_google(\"Gentium Book Basic\",\"gbb\")\nfont_add_google(\"Nanum Gothic\",\"ng\")\nshowtext_auto()\n\n\np <- df %>%\n    pivot_longer(cols=c(\"puzzle_bigdave\",\"puzzle_times\"),\n               names_to=\"names\",values_to=\"values\")%>%\n  #count(year)\n  ggplot(aes(puzzle_date, fct_reorder(values,puzzle_date), color = values)) +\n  geom_jitter(show.legend = F,shape=\".\",color=\"white\")+\n  geom_text(aes(label=answer),\n            size=9,\n            check_overlap = T,family=\"gbb\")+\n  scale_color_manual(values=colors)+\n  labs(title = \"\\nSame Answers! Year: {closest_state}\\nBigDave & Times puzzles\\n\",  \n       subtitle=\"\\nwords are randomized\",\n       caption=\"#30DayChartChallenge 2022 #Day22\\n DataSource: #TidyTuesday week16 - Crossword \\n DataViz: Federica Gazzelloni\\n\\n\")+\n  theme_void() +\n  theme(text = element_text(family = \"ng\", face=\"bold\",color=\"#F0F8FF\"),\n        plot.title = element_text(size=28),\n        plot.subtitle = element_text(size=18),\n        plot.caption = element_text(size=14,vjust=2,hjust=0.5),\n        plot.background = element_rect(fill=\"grey10\",color=\"grey20\"),\n        panel.background = element_rect(fill=\"grey10\",color=\"grey20\"),\n    legend.position = \"none\")+\n   coord_polar(theta = \"x\") +\n  transition_states(year, \n                    transition_length = 2,\n                    state_length = 1,\n                    wrap = F) +\n  shadow_wake(wake_length = 0.5,wrap=F)\n\n\nanim_save(animate(p,res=100,\n                  renderer = gifski_renderer(\"animation3.gif\"),\n                  height = 710, width = 610))"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day27_future/day27_future.html",
    "href": "chartchallenges/cases2022/posts2022/day27_future/day27_future.html",
    "title": "Future",
    "section": "",
    "text": "Boston Weather data\nsource: https://www.ncdc.noaa.gov/cdo-web/search - https://www.ncei.noaa.gov/orders/cdo/2960933.csv\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(prophet)\n\n\nnew <- read.csv(\"https://www.ncei.noaa.gov/orders/cdo/2960933.csv\")\n# new <-read.csv(\"2960933.csv\")\n\n\nnew %>%\n  select(6:11) %>%\n  summary()\n\n\nnew_temps <- new%>%\n  select(6:11) %>%\n  janitor::clean_names()%>%\n  mutate(date=as.POSIXct(date),\n    year=lubridate::year(date),.after=date) \n\n\nmin_new_temps <- new_temps%>%select(ds=date,y=tmin)\nmax_new_temps <- new_temps%>%select(ds=date,y=tmax)\navg_new_temps <- new_temps%>%select(ds=date,y=tavg)\n\n\nMin model\n\nmin_mod_new_temps <- prophet(min_new_temps, \n                             #growth = \"logistic\",\n                             seasonality.mode = \"multiplicative\",\n                             yearly.seasonality=2,\n                             daily.seasonality=T,\n                             weekly.seasonality = TRUE\n                             )\n\nmin_future_new_temps <- prophet::make_future_dataframe(min_mod_new_temps, \n                                                       freq = \"week\",\n                                                       periods=6,\n                                                       include_history = T)\nmin_forecast_new_temps <- predict(min_mod_new_temps,min_future_new_temps)\n\n\n# min_mod_new_temps <- prophet(weekly.seasonality=FALSE)\n# min_mod_new_temps <- add_seasonality(min_mod_new_temps, \n#                                      name='yearly', \n#                                      period=365, \n#                                      fourier.order=3)\n# min_mod_new_temps <- fit.prophet(min_mod_new_temps, min_new_temps)\n# future <- make_future_dataframe(min_mod_new_temps, periods = 365)\n# forecast <- predict(min_mod_new_temps, future)\n# prophet_plot_components(min_mod_new_temps, forecast)\n\n\n\nMax model\n\nmax_mod_new_temps <- prophet(max_new_temps,\n                             #growth = \"logistic\",\n                             seasonality.mode = \"multiplicative\",\n                             yearly.seasonality=2,\n                             daily.seasonality=F,\n                             weekly.seasonality = TRUE\n                             )\nmax_future_new_temps <- prophet::make_future_dataframe(min_mod_new_temps, \n                                                       freq = \"week\",\n                                                       periods=6,\n                                                       include_history = T)\nmax_forecast_new_temps <- predict(max_mod_new_temps,max_future_new_temps)\n\n\n\nAvg model\n\navg_mod_new_temps <- prophet(avg_new_temps, #growth = \"logistic\",\n                             seasonality.mode = \"multiplicative\",\n                             yearly.seasonality=2,\n                             daily.seasonality=F,\n                             weekly.seasonality = TRUE\n                             )\navg_future_new_temps <- prophet::make_future_dataframe(min_mod_new_temps, \n                                                       freq = \"week\",\n                                                       periods=6,\n                                                       include_history = T)\navg_forecast_new_temps <- predict(avg_mod_new_temps,avg_future_new_temps)\n\n\nmin<-min_forecast_new_temps%>%\n  select(ds,yhat)%>%\n  mutate(name=rep(\"min\",length(ds)))\n\nmax <-max_forecast_new_temps%>%\n  select(ds,yhat)%>%\n  mutate(name=rep(\"max\",length(ds)))\n\n#avg <-avg_forecast_new_temps%>%\n#  select(ds,yhat)%>%\n#  mutate(name=rep(\"avg\",length(ds)))\n\npoint_forecast <- rbind(min,max)%>%\n  filter(ds>Sys.time())\n\nmin_forecast_new_temps%>%tail()\n\n\nMake the plot with ggplot2\n\n  ggplot()+\n  \n  geom_point(data=min_new_temps,mapping=aes(x=ds,y=y),size=0.2,color=\"navy\") + # original data\n  geom_point(data=max_new_temps,mapping=aes(x=ds,y=y),size=0.2,color=\"navy\") + # original data\n  geom_point(data=avg_new_temps,mapping=aes(x=ds,y=y),size=1,color=\"grey70\",shape=21,stroke=1) + # original data\n  #geom_jitter(data=avg_new_temps,mapping=aes(x=ds,y=y),size=0.05,color=\"darkred\") + #\n\n   geom_area(data=point_forecast,aes(x=ds,y=yhat),color=\"grey95\",alpha=0.1)+\n   geom_ribbon(data=point_forecast,aes(x=ds,ymin=yhat,ymax=yhat+1),color=\"grey90\",alpha=0.1)+\n   geom_point(data=point_forecast,aes(x=ds,y=yhat),shape=21,stroke=1,size=2,color=\"grey70\")+\n  #scale_color_grey()+\n  \n  geom_line(data=min_forecast_new_temps,aes(ds,yhat),color=\"grey50\",size=0.3) +\n  geom_line(data=max_forecast_new_temps,aes(x=ds,y=yhat),size=0.3,color=\"grey40\")+\n  geom_line(data=avg_forecast_new_temps,aes(x=ds,y=yhat),size=0.5,color=\"grey20\") +\n  \n  #geom_hline(data=avg_forecast_new_temps%>%filter(ds>Sys.time()),aes(yintercept=max(yhat)))+\n  # geom_hline(data=avg_forecast_new_temps%>%filter(ds>Sys.time()),aes(yintercept=min(yhat)))+\n  #geom_vline(data=avg_forecast_new_temps,aes(xintercept=Sys.time()),\n  #          size=1,linetype=\"dashed\",color=\"navy\")+\n    \n  #geom_label(data=avg_forecast_new_temps,aes(x=Sys.time(),y=60),\n  #           label=paste(\"Today:\",Sys.Date()))+\n\n  geom_smooth(data=avg_forecast_new_temps,aes(x=ds,y=yhat), \n              method = 'loess' , formula=y ~ x,alpha=0.3,size=0.5,fill=\"grey80\",\n              linetype=\"dotted\",color=\"navy\") +\n  geom_text(data=point_forecast,aes(x=min(ds),y=0),\n            label=\"Data forecasting up to July 26th 2022\",\n            hjust=-1)+\n  #scale_x_datetime(date_breaks = \"1 month\", date_labels = \"%B\")+\n  #scale_y_continuous(labels = seq(0,73,10))+\n  labs(title=\"Temperatures in Boston area\",\n       subtitle=\"from January to April 2022 with forecasting (Prophet)\",\n       caption=\"\",\n       x=\"Year 2022 - Months\", y=\"Temperature level (min/avg/max)\")+\n  ggthemes::theme_stata()+\n  theme(text = element_text(size=18),\n        plot.title = element_text(size=28),\n        axis.title.x = element_text(hjust = 0),\n        axis.line = element_line(size=1),\n        axis.line.x = element_line(arrow = arrow(length = unit(0.3,\"cm\"))))\n\n\navg_forecast_new_temps%>%\n  filter(ds<Sys.time())%>%\n  select(ds,trend,yhat)\n\n\ndf_original<-avg_new_temps%>%\n  mutate(date=as.Date(ds),.after=ds)\n  \ndf_original%>%\nggplot(aes(x=date,y=y))+\n  geom_line()\n\n\ndf <- avg_forecast_new_temps%>%\n  mutate(date=as.Date(ds),.after=ds)\ndf_min <- min_forecast_new_temps%>%\n  mutate(date=as.Date(ds),.after=ds)\ndf_max <- max_forecast_new_temps%>%\n  mutate(date=as.Date(ds),.after=ds)\n\n\ndf_max%>%\n  filter(date>Sys.Date()-7)%>%\n  arrange(-yhat)%>%\n  select(ds,date,yhat)\n\ndf%>%\n  filter(date>Sys.Date())%>%\n  arrange(date)%>%\n  select(ds,date,yhat)\n\n\navg_mod_new_temps2 <- prophet(avg_new_temps, \n                             #growth = \"logistic\",\n                             seasonality.mode = \"multiplicative\",\n                             yearly.seasonality=2,\n                             daily.seasonality=F,\n                             weekly.seasonality = TRUE\n                             )\n\navg_future_new_temps2 <- prophet::make_future_dataframe(avg_mod_new_temps2, \n                                                       freq = \"week\",\n                                                       periods=6,\n                                                       include_history = T)\navg_forecast_new_temps2 <- predict(avg_mod_new_temps2,avg_future_new_temps2)\n\n\ndf %>%\nggplot(aes(x=date,y=yhat))+\n  geom_smooth(color=\"navy\",size=0.5)+\n  geom_line(data=df_original,aes(x=date,y=y))+\n  \n  geom_line(linetype=\"dotted\",color=\"navy\",size=0.8)+\n  \n  geomtextpath::geom_textline(data=df_min%>%filter(date>Sys.Date()-7),inherit.aes = T,label=\"min\" )+\n  geomtextpath::geom_textline(data=df_max%>%filter(date>Sys.Date()-7),inherit.aes = T,label=\"max\" )+\n  \n  geom_text(data=df%>%filter(date==\"2022-05-03\"),\n            aes(x=date,y=yhat,label=round(yhat)),vjust=-1,color=\"navy\")+\n  geom_point(data=df%>%filter(date==\"2022-05-03\"),aes(x=date,y=yhat))+\n  \n  geom_segment(aes(x=Sys.Date()+2,xend=Sys.Date()+2, y=10,yend=yhat-4),\n                                 size=0.3,color=\"grey60\")+\n  geom_text(aes(x=Sys.Date(),y=25,label=\"3rd May avg temperature level\"),\n            color=\"navy\",angle=90)+\n  \n  scale_x_date(expand = c(0,0))+\n  scale_y_continuous(breaks = seq(10,60,10))+\n  \n  coord_cartesian(ylim = c(10,60),clip=\"off\")+\n  \n  annotate(\"text\",x=Sys.Date()-120,y=-5.5,label=\"Forecast is made for educational purposes:\\nthe AVG level of temperature takes consideration of\\nweekly sesonality over 6 weeks period from 26th of April to the 7th of June 2022\",\n           hjust=0,size=3)+\n  \n  labs(title=\"Forecast of the AVG Temperature level in Boston area\",\n       subtitle=\"January to April 26th, 2022 - Future made with {Prophet}\",\n       caption=\"#30DaychartChallege 2022 #Day27 - Future\\nDataSource: NCDC-NOOA Climate data\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n       x=\"Year 2022 - Months\", y=\"Temperature level (min/avg/max)\")+\n  ggthemes::theme_stata()+\n  theme(text = element_text(size=18),\n        plot.title = element_text(size=24),\n        plot.subtitle = element_text(size=12),\n        plot.caption = element_text(hjust=1,size=11),\n        axis.title.x = element_text(hjust = 0),\n        axis.title.y = element_text(hjust=0.5,vjust=2),\n        axis.line = element_line(size=1),\n        axis.line.x = element_line(arrow = arrow(length = unit(0.3,\"cm\"))))\n\n\nggsave(\"day27_future3.png\",\n       dpi=320,\n       width = 9,\n       height = 6)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day19_global_change/day19_global_change.html",
    "href": "chartchallenges/cases2022/posts2022/day19_global_change/day19_global_change.html",
    "title": "Global Change",
    "section": "",
    "text": "rm(list=ls())\n\n\npath=\"/Users/federica/Documents/R/R_general_resources/EDA/30DayChartChallenge/data/Edition_2022/day18_oecd\"\nsetwd(path)\n\n\nlibrary(tidyverse)\nairtransport <- read_csv(\"AIRTRANS_CO2_19042022233714776.csv\")\n\noptions(scipen = 999)\ndf <- airtransport%>%\n  janitor::clean_names()%>% #count(flight_type)\n  select(pollutant,country,time,value,frequency=frequency_2,flight_type)%>%\n  mutate(value=round(value))\n\ndf1 <-df %>% \n  count(country,time,value)%>%\n  filter(time==as.integer(substr(time, 1, 4)))%>%\n  distinct()\n\ndf2%>%DataExplorer::profile_missing()\n\n \n  \n  \n  my_countries <- df1 %>%\n  group_by(country)%>%\n  summarize(tot_value_per_country=round(mean(value)))%>%\n  arrange(-tot_value_per_country)%>%\n  ungroup()%>%\n  slice(1:10)%>%\n  select(country)%>%\n  unlist()\n\n  \n  \n\n  \n  df2 <- df1 %>%\n  #filter(country%in%my_countries) %>%\n  group_by(country,time)%>%\n  summarise(avg_value=mean(value),.groups=\"drop\")%>%\n  arrange(-avg_value) %>%\n  ungroup() \n  \n\n  \n  \ndf3 <- df2%>%filter(time==2020)\n\n\ndf3 <-df2%>%filter(!str_detect(country,\"Monaco\"))\n\n# it's Monaco\n  \nlibrary(hrbrthemes)\nlibrary(ggthemes)  \nlibrary(ggthemr)\nlibrary(tvthemes)\n\nmycolors <- colorRampPalette(RColorBrewer::brewer.pal(8, \"Set1\"))(186)\n\nggplot(df3,aes(x=factor(time),\n               y=avg_value,group=country,color=country,fill=country))+\n  geom_area(alpha=0.2)+\n  geom_point(size=0.2)+\n  geom_line()+\n  scale_color_manual(values=mycolors)+\n  scale_fill_manual(values=mycolors)+\n  labs(x=\"\",y=\"\",\n       title=\"Global CO2 emissions\",\n       caption=\"#30DayChartChallenge 2022 #Day19 - Global Change | OECD data | DataViz: Federica Gazzelloni\")+\ntheme_dark()+\n  theme(legend.position = \"none\",\n        plot.title = element_text(size=30,color=\"white\"),\n        plot.caption = element_text(size=12,color=\"white\"),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(color=\"white\",size=12),\n        axis.ticks.x = element_line(size=6,color=\"white\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_line(color=\"grey90\",size=2),\n        plot.background = element_rect(fill=\"grey20\"),\n        panel.background = element_rect(fill=\"grey20\"))\n\n\nggsave(\"day19_global_change.png\",\n       dpi=320,\n       width = 9,\n       height = 6)\n\n\n\n\n##------------\n\n\nlibrary(streamgraph)\n\n# Basic stream graph: just give the 3 arguments\nstreamgraph(df2, \n                  key=\"country\", \n                  value=\"avg_value\", \n                  date=\"time\", \n            offset=\"zero\",\n            height=\"300px\", width=\"1000px\")\npp"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day6_data_day/day6_data_day.html",
    "href": "chartchallenges/cases2022/posts2022/day6_data_day/day6_data_day.html",
    "title": "Data day",
    "section": "",
    "text": "rm(list=ls())\n\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\n#install.packages(\"devtools\")  # Only needed if you don't have devtools installed\n#library(devtools)\n#devtools::install_github(\"drsimonj/ourworldindata\")\n\n#library(easypackages)\neasypackages::libraries(\"ourworldindata\", \"tidyverse\", \"lubridate\", \"countrycode\", \"maps\")\n\n\n#https://drsimonj.svbtle.com/ourworld-an-r-data-package\n?ourworldindata\n\nfinancing_healthcare %>% names()\n\ndf <- financing_healthcare %>%\n  select(year,country ,contains(\"insurance\")) %>%\n  pivot_longer(cols = contains(\"insurance\"),names_to=\"types\",values_to=\"values\") %>%\n  mutate(values=ifelse(is.na(values),0,values)) %>%\n  group_by(types) %>%\n  mutate(values=round(values/sum(values)*100)) %>%\n  ungroup() %>%\n  arrange(year)\n\ndf %>% summary(year)\ndf %>% count(country)\nlevels(df$types) <- unique(df$types)\n\nlibrary(waffle)\n?waffle()\n\n\ndf2 <- df %>%\n  filter(country==\"United States\") %>%\n  filter(year %in% c(1989,1996,2005))\n\n\nggplot(df2,aes(fill = factor(types), values = values)) +\ngeom_waffle(n_rows = 10, size = 0.3, colour = \"black\", \n            make_proportional = TRUE,\n            radius = unit(4, \"pt\"),\n            height = 0.9, width = 0.9) +\nfacet_wrap(~year) +\n  scale_colour_manual(\n    values = c(\"black\", \"white\", \"white\",\"white\")\n  ) +\nlabs(title=\"United States financing healthcare in 1989,1996,2005\",\n       fill=\"Type of Insurance\") +\nhrbrthemes::theme_ipsum_rc() +\n  theme(legend.position = \"top\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank())\n\n\n\ndf3 <- financing_healthcare %>% \n  filter(!is.na(health_exp_total)) %>%\n  group_by(country,year) %>%\n  summarize(exp=sum(health_exp_total),.groups=\"drop\") %>%\n  ungroup() \n\n# df3%>%pull(exp)%>%summary()\nset.seed(123)\n  ggplot(df3, aes(x=factor(year),y=exp,group=country)) +\n  geom_point(size=0.2,color=\"grey10\")+\n  geom_line(color=\"grey85\",size=0.2) +\n  geom_line(data= subset(df3, country==\"United States\"),\n            aes(x=factor(year),y=exp,group=country),\n            color=\"grey52\") +\n    geom_line(data= subset(df3, country==\"Luxembourg\"),\n              aes(x=factor(year),y=exp,group=country),\n              color=\"grey50\") +\n    ggrepel::geom_text_repel(data =df3 %>% group_by(country) %>% \n                summarize(year=max(year),exp=max(exp)) %>% ungroup() %>%\n                  filter(exp>1000), \n              mapping= aes(x=factor(year),y=exp,group=country,label=country),\n              family = \"Roboto Condensed\",\n              nudge_x = 0, max.overlaps = Inf,\n              segment.size=0.2,\n              segment.color=\"grey40\",\n              box.padding = 0.5,\n              segment.curvature = -1e-20,\n              arrow = arrow(length = unit(0.009, \"npc\"), type = \"closed\", ends = \"first\"))+\n    geom_hline(aes(yintercept=mean(exp)))+\n    geom_text(aes(x=5,y=900,label=\"Average: 653.201$\"),size=6)+\n    scale_x_discrete(breaks=seq(1995,2013,3),expand = expansion(add=c(0,7)))+\n    scale_y_continuous(breaks = seq(0,6900,1000))+\n    labs(title=\"World countries comparison of total health expenses:\",\n         subtitle=\"from 1995 to 2013 - data are in constant 2011 international dollars.\",\n         caption=\"#30DayChartChallenge 2022 day6 - Data day | DataSource: financing_healthcare {ourworldindata} | DataViz: Federica Gazzelloni\",\n         x=\"Time (Year)\", y=\"Total Health Expenses\") +\n    hrbrthemes::theme_ipsum_rc() +\n    theme(axis.title.x = element_text(hjust = 0.8,size=10),\n          axis.title.y = element_text(size=10),\n          plot.title = element_text(size=25),\n          plot.subtitle = element_text(size=18))\n    \nggsave(\"day6_data_day.png\",dpi = 320,\n       width = 12,height = 10)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day1_part_to_whole/day1_part_to_whole.html",
    "href": "chartchallenges/cases2022/posts2022/day1_part_to_whole/day1_part_to_whole.html",
    "title": "Part to whole",
    "section": "",
    "text": "library(tidyverse)\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(RColorBrewer)\ntheme_set(silgelib::theme_roboto())\n\nsports <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-29/sports.csv')\n\nsports <- sports %>%\n  filter(!sports==\"All Track Combined\")\n\nmen <- sports %>%\n  select(year,state_cd,men_sports=sports,partic_men) %>%\n  drop_na()\n\nwomen <- sports %>% \n  select(year,state_cd,women_sports=sports,partic_women) %>%\n  drop_na()\n\n\ndf <- men %>%\n  left_join(women,by=c(\"year\",\"state_cd\")) %>%\n  distinct()\n\n\ndf1 <- df %>%\n  mutate(students=partic_men+partic_women) %>%\n  count(men_sports,women_sports,\n        wt= students,\n        name=\"students\",\n        sort=T) %>%\n  mutate(students=students/1000) %>%\n  filter(students>1000) %>%\n  graph_from_data_frame(directed = FALSE)\n\n\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\n\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Over the Rainbow\",family=\"overtherainbow\")\n\n\n\nset.seed(0104)\ndf1 %>%\n  ggraph(layout = \"linear\", circular = TRUE) +\n  geom_edge_arc(aes(edge_alpha = students, \n                    edge_width = students), \n                color = \"grey20\") +\n  geom_node_point(aes(fill=name,color=name),\n                  size=15,\n                  stroke=4,\n                  shape=21,\n                  alpha=0.5,\n                  show.legend = F) +\n  geom_node_point(aes(color=name),size=5,show.legend = F) +\n  geom_node_text(mapping = aes(label = name), \n                 position = position_nudge(y = 0.1),\n                 #position = position_dodge(width = 0),\n                 #position = position_jitter(seed = 111),\n                 repel = TRUE, \n                 color=\"grey15\",\n                 size=5,\n                 family = \"overtherainbow\",\n                 fontface=\"bold\")+\n  scale_colour_manual(values= rep( brewer.pal(8,\"Dark2\") , 30)) +\n  scale_fill_manual(values= rep(brewer.pal(9,\"Paired\") , 30)) +\n  labs(title=\"US college Sports 2015-2019\",\n       subtitle=\"Among all sports which ones are the most played by males vs females?\",\n       caption=\"#30daychartchallenge 2022 - day1 Part to whole\\nDataSource: Equity in Athletics Data Analysis | DataViz: Federica Gazzelloni\")+\n  theme(text=element_text(color=\"grey15\",size=12,family=\"overtherainbow\"),\n        plot.background = element_rect(color=\"grey30\",fill=\"grey80\"),\n        legend.position = c(0.93,0.9)) \n\n\nggsave(\"day1_part-to-whole.png\",width =  8.56, height =  8.44)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day9_statistics/day9_statistics.html",
    "href": "chartchallenges/cases2022/posts2022/day9_statistics/day9_statistics.html",
    "title": "Statistics",
    "section": "",
    "text": "library(ISLR2)\nlibrary(tidyverse)\nlibrary(ggdist)\nlibrary(distributional)\nlibrary(extrafont)\n# loadfonts()\n\np <- Wage %>%\n  mutate(education=gsub(\"\\\\d. \",\"\",education)) %>% #count(year)\n  group_by(education)%>%\n  mutate(mean=mean(wage),\n         sd=sd(wage)) %>%\n  ungroup() %>% # pull(mean)%>%summary\n  select(education,mean,sd) %>%\n  distinct()%>%\n  ggplot(aes(y=fct_reorder(education,mean),\n             xdist = dist_normal(mean, sd),\n             layout = \"weave\",\n             fill = stat(x < 111.70))) + \n  stat_dots(position = \"dodge\", color = \"grey70\")+\n  geom_vline(xintercept = 111.70, alpha = 0.25) +\n  scale_x_continuous(breaks = c(20,60,90,112,140,180,220)) +\n  tvthemes::scale_fill_hilda()+\n  labs(x=\"Wage values from 2003 to 2009\",\n       y=\"\",color=\"Race\",fill=\"wage < avg\",\n       title=\"Wage distribution vs education 2003-2009\",\n       subtitle=\"Normalized values\",\n       caption=\"#30DayChartChallenge 2022 #day9 - Distribution/Statistics - v2\\nDataSource: {ISLR2} Wage dataset | DataViz: Federica Gazzelloni\")+\n  tvthemes::theme_avatar()+\n  theme(text = element_text(family=\"Chelsea Market\"),\n        legend.background = element_blank(),\n        legend.box.background = element_blank(),\n        legend.key = element_blank(),\n        legend.key.width = unit(0.5,units=\"cm\"),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.8,0.1))\n\n\nggsave(\"day9_statistics_v2.png\",\n       dpi=320,\n       width = 9,\n       height = 6)\n\nlibrary(patchwork)\np/p\n\n\nggsave(\"poster.pdf\",\n       dpi=320,\n       height =841 , width = 594,\n       units = \"mm\")"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day13_correlation/day13_correlation.html",
    "href": "chartchallenges/cases2022/posts2022/day13_correlation/day13_correlation.html",
    "title": "Correlation",
    "section": "",
    "text": "STEM is science, technology, engineering, and mathematics.\nsources: - https://ncses.nsf.gov/pubs/nsb20221/u-s-and-global-stem-education-and-labor-force - https://ncses.nsf.gov/pubs/nsb20212/data\nextraresources: - https://www.bls.gov/oes/topics.htm#stem - https://www.aauw.org/resources/research/the-stem-gap/ - https://ngcproject.org/resources/state-girls-and-women-stem - https://blog.dol.gov/2022/02/10/women-and-girls-in-growing-stem-jobs - https://www.stemwomen.com/blog/2021/01/women-in-stem-percentages-of-women-in-stem-statistics\n\nlibrary(tidyverse)\n\nEmployed scientists and engineers, by sex and occupation: 2019\n\nscientists <- readxl::read_excel(\"~/Documents/R/WomenInSTEM/nsb20212-tabslbr-024_scientists.xlsx\",\n                                 na = \"0\", skip = 3)\n# View(scientists)\n\n\nscientists1 <- scientists[-1,]%>%\n  janitor::clean_names() %>%#names\n  rename(female_perc=x4,male_perc=x6) %>%\n  mutate(female=ifelse(female==\"s\",0,female),\n         female_perc=ifelse(female_perc==\"s\",0,female_perc),\n         male=ifelse(male==\"s\",0,male),\n         male_perc=ifelse(male_perc==\"s\",0,male_perc),\n         total=ifelse(total==\"s\",0,total)) %>%\n  mutate(across(-occupation,as.numeric)) %>% \n  filter(!occupation%in%c(\"All occupations\")) \n\n\nscientists1%>%\n  group_by(occupation)%>%\n  summarise_all(funs(mean)) %>%\n  ungroup() %>%\n  summary()\n\n\nscientists2 <- scientists1%>%\n#   mutate(occupation=case_when(occupation==\"Accountants, auditors, and other financial specialists\"~\"Financial # specialists\"),\n#          occupation==\"Accounting clerks and bookkeepers\"~\"Accounting clerks\",\n#          occupation==\"Aerospace, aeronautical, or astronautical engineers\"~\"Aerospace engineers\",\n#          occupation==\"Atmospheric and space scientists\"~\"Space scientists\",\n#          occupation==\"Biochemists and biophysicists\"~\"Biochemists\",\n#          occupation==\"Biological and medical scientists\"~\"Medical scientists\",\n#          occupation==\"Bioengineers or biomedical engineers\"~\"Bioengineers\",\n#          occupation==\"Business, commerce, and marketing\"~\"Business\",\n#          TRUE~occupation)\n  filter(occupation %in% c(\"Actuaries\",\"Aerospace, aeronautical, or astronautical engineers\",\n                           \"Chemical engineers\",\"Biological and medical scientists\",\n                           \"Computer and information scientists\",\"Computer network architects\",\n                           \"Earth, atmospheric, and ocean scientists\",\"Economics\",\n                           \"Earth, environmental, and marine sciences\",\"Electrical and electronics engineers\",\n                           \"Industrial engineers\",\"Marine engineers and naval architects\",\n                           \"Mathematics and statistics\",\"Mechanical engineers\",\n                           \"Nuclear engineers\",\"Physical and related scientists\",\n                           \"Physics\",\"Statisticians\",\"Transportation and material moving occupations\")) %>%\n  arrange(occupation) \n\n\nscientists1 %>%  \n  filter(female>0,female_perc>0.00001,total>0) %>%\nggplot(aes(x=total,y=female)) +\n  geom_smooth(method = \"lm\", se=FALSE, linetype=\"dashed\",color=\"grey65\")+\n   geom_jitter(aes(size=female_perc),\n               color=\"violet\",\n               alpha=0.3,\n               shape=21,\n               fill=\"pink\") +\n  geom_text(data=scientists2,\n            aes(label=occupation),\n            hjust=\"right\",\n            vjust=\"top\",\n            inherit.aes = TRUE,\n            check_overlap = T,\n            color=\"grey90\",\n            family=\"Roboto Condensed\",\n            fontface=\"bold\")+\n  #xlim(0,15000)+\n  scale_x_log10(expand=expansion(add=c(0,-0.5)))+\n  scale_y_log10(expand=expansion(add=c(0,0))) +\n  labs(title=\"Women employed as Scientists in 2019\",\n       subtitle=\"log scale by selected occupations\",\n       caption=\"#30DayChartChallenge 2022 day13 - Correlation\\nDataSource: NSF SCIENCE & ENGINEERING INDICATORS\\nDataViz: Federica Gazzelloni\",\n       size=\"Value(%)\") +\n  hrbrthemes::theme_ft_rc()+\n  theme(legend.position = c(0.5,0.95),\n        legend.direction = \"horizontal\") \n\n\nggsave(\"day13_correlation2.png\",\n       dpi=320,\n       width = 9, height = 6)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day26_interactive/day26_interactive.html",
    "href": "chartchallenges/cases2022/posts2022/day26_interactive/day26_interactive.html",
    "title": "Interactive",
    "section": "",
    "text": "# Library\nlibrary(dygraphs)\nlibrary(xts)          # To make the convertion data-frame / xts format\nlibrary(tidyverse)\nlibrary(lubridate)\n\n# https://rstudio.github.io/dygraphs/gallery-plot-labels.html\n\n# codesource: https://r-graph-gallery.com/318-custom-dygraphs-time-series-example.html\n# datasource: https://bookdown.org/content/b298e479-b1ab-49fa-b83d-a57c2b034d49/evolution.html\ndata <- read.table(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv\", header=T)\n\n# Check type of variable\n#str(data)\n#data%>%head\n\n\ndf <- data%>%\n  mutate(date=as.Date(date,\"%Y-%m-%d\"))\n\n\n\n# Then you can create the xts necessary to use dygraph\ndon <- xts(x = df$value, order.by = df$date)\n\npresAnnotation <- function(dygraph, x, text) {\n  dygraph %>%\n    dyAnnotation(x, text, attachAtBottom = F, width = 60)\n}\n\n\n# Finally the plot\np <- dygraph(don, \nmain = \"Bitcoin: decentralized peer-to-peer electronic exchange - 2013-2018 (DataViz: @fgazzelloni)\",\nylab = \"Value of Bitcoin in $\") %>%\n  dyOptions(labelsUTC = TRUE, fillGraph=TRUE, fillAlpha=0.13, drawGrid = FALSE, colors=\"black\") %>%\n  dyRangeSelector() %>%\n  dyCrosshair(direction = \"vertical\") %>%\n  dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE)  %>%\n  dyRoller(rollPeriod = 1) %>%\n  presAnnotation(\"2017-12-17\", text = \"Top 20k$\") %>%\n  dyShading(from = \"2013-04-28\",to=\"2013-11-01\",color = \"#b2d8d8\") %>%\n  dyShading(from = \"2013-11-02\", to = \"2014-05-18\", color = \"#CCEBD6\") %>%\n  dyShading(from = \"2014-05-19\", to = \"2017-05-25\", color = \"#b2d8d8\") %>%\n  dyShading(from = \"2017-05-26\", to = \"2017-11-11\", color = \"#CCEBD6\") %>%\n  dyShading(from = \"2017-11-12\", to = \"2018-02-06\", color = \"#b2d8d8\") %>%\n  dyShading(from = \"2017-11-17\", to = \"2018-02-06\", color = \"#dfe3ee\") %>%\n  dyShading(from = \"2018-02-07\", to = \"2018-04-18\", color = \"#b2d8d8\") %>%\n  dyEvent(\"2013-09-05\", \"CryptoLocker crippled more than 250,000 computer systems\", labelLoc = \"bottom\") %>%\n  dyEvent(\"2013-12-01\", \"Massive Protests in Ukraine for free Europe trade\", labelLoc = \"bottom\") %>%\n  dyEvent(\"2014-03-18\",\"Russia Annexes Crimea and Threatens the Rest of Ukraine\", labelLoc = \"bottom\") %>%\n  dyEvent(\"2015-09-30\", \"Russian military intervention in the Syrian civil war\", labelLoc = \"bottom\") %>%\n  dyEvent(\"2015-11-13\", \"Three teams of ISIS terrorists struck at four locations in Paris\", labelLoc = \"bottom\") %>%\n  dyEvent(\"2016-06-23\", \"The UK has voted to leave the EU by 52% to 48%\", labelLoc = \"bottom\") %>%\n  dyEvent(\"2017-01-20\", \"Barack Obama ended his tenure and Donald Trump became the 45th president of the United States\", labelLoc = \"bottom\") %>%\n  dyEvent(\"2017-05-25\", \"The Organization of American States examines the crisis in Venezuela\", labelLoc = \"bottom\") %>%\n  dyEvent(\"2017-12-01\", \"US CFTC approved Bitcoins trading on three major markets\", labelLoc = \"bottom\") %>%\n  dyEvent(\"2017-12-22\", \"Fell from an all-time trading high to 12k$\", labelLoc = \"bottom\") \n\np \n# save the widget\n#library(htmlwidgets)\n#saveWidget(p, file=paste0( getwd(), \"/data/Edition_2022/day26_interactive/day26_interactive.html\"))"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day3_historical/day3_historical.html",
    "href": "chartchallenges/cases2022/posts2022/day3_historical/day3_historical.html",
    "title": "Historical",
    "section": "",
    "text": "#30DayChartChallengre 2022 day3 - Historical\n\n# data from: https://github.com/ajstarks/dubois-data-portraits/tree/master/challenge/2022\n# DuboisChallenge2022 challenge n°8\n\nlibrary(tidyverse)\n\ndf <- read_csv(\"https://raw.githubusercontent.com/ajstarks/dubois-data-portraits/master/challenge/2022/challenge08/data.csv\")\n\nlibrary(hrbrthemes)\nlibrary(showtext); showtext_auto()\nfont_add_google(\"Rajdhani\", \"rajdhani\")\n# font_add_google(\"Titillium Web\", \"web\")\n# bg         <- \"#e1d1c1\" \n\ndf2 <- df %>%\n  arrange(-Year)\n\ndf2[7,1]  <- 1875\ndf2[7,2]  <- 0\n\n\n\n\nch8 <-  df2 %>%  \n  ggplot() + \n  \n  geom_line(data= subset(df2, Year%in%c(1875,1875)),\n            mapping = aes(x=Year, y= `Houshold Value (Dollars)`),\n            color=\"grey50\",size=6.3) +\n  geom_line(data= subset(df2, Year%in%c(1875,1875)),\n            mapping = aes(x=Year, y= `Houshold Value (Dollars)`),\n            color=\"#FFCDCB\",size=6) +\n  \n  geom_line(data= subset(df2, Year%in%c(1875,1875,1880)),\n            mapping= aes(x=Year +2, y= `Houshold Value (Dollars)`),\n            color=\"grey50\",size=6.3) +\n  geom_line(data= subset(df2, Year%in%c(1875,1875,1880)),\n            mapping= aes(x=Year +2, y= `Houshold Value (Dollars)`),\n            color=\"#989EB4\",size=6) +\n  \n  geom_line(data= subset(df2, Year%in%c(1875,1875,1880,1885)),\n            mapping= aes(x=Year +4, y= `Houshold Value (Dollars)`),\n            color=\"grey50\",size=6.3) +\n  geom_line(data= subset(df2, Year%in%c(1875,1875,1880,1885)),\n            mapping= aes(x=Year +4, y= `Houshold Value (Dollars)`),\n            color=\"#b08c71\",size=6) +\n  \n  geom_line(data= subset(df2, Year%in%c(1875,1875,1880,1885,1890)),\n            mapping= aes(x=Year +6, y= `Houshold Value (Dollars)`),\n            color=\"grey50\",size=6.3) +\n  geom_line(data= subset(df2, Year%in%c(1875,1875,1880,1885,1890)),\n            mapping= aes(x=Year +6, y= `Houshold Value (Dollars)`),\n            color=\"#FFC942\",size=6) +\n  \n  geom_line(data= subset(df2, Year%in%c(1875,1875,1880,1885,1890,1895)),\n            mapping= aes(x=Year +8, y= `Houshold Value (Dollars)`),\n            color=\"grey50\", size=6.3) +\n  geom_line(data= subset(df2, Year%in%c(1875,1875,1880,1885,1890,1895)),\n            mapping= aes(x=Year +8, y= `Houshold Value (Dollars)`),\n            color=\"#EFDECC\", size=6) +\n  \n  geom_line(mapping= aes(x=Year +10, y= `Houshold Value (Dollars)`),\n            color=\"grey50\",size=5.3) +\n  geom_line(mapping= aes(x=Year +10, y= `Houshold Value (Dollars)`),\n            color=\"#F02C49\",size=5) +\n  \n  coord_polar(theta = \"y\",\n              start = 0,\n              direction = 1, \n              clip = \"off\") +\n  #scale_x_reverse(expand=expansion(mult=c(-0.9,-0.1),add=c(29,-0.1))) +\n  #scale_y_continuous(expand=expansion(mult=c(0.09,0.01),add=c(0,-790000))) +\n  \n  #scale_y_continuous(expand = c(1, 0, 0.05, 1))\n\n  scale_x_reverse(expand=expansion(add=c(11,-1))) +\n  scale_y_continuous(expand=expansion(add=c(0,-600000))) +\n  labs(title=\"ASSESSED VALUE OF HOUSEHOLD AND KITCHEN FURNITURE \n       OWNED BY GEORGIA NEGROES.\")+\n  theme_void() +\n  theme(text = element_text(family=\"rajdhani\",\n                            face=\"bold\",\n                            color=\"grey27\"),\n        aspect.ratio =2/1.95,\n        plot.background = element_rect(color= \"#d9ccbf\", fill= \"#d9ccbf\"),\n        plot.title = element_text(hjust=0.5))\n\n    \nlibrary(cowplot)    \n\nfinal <- ggdraw()+\n  draw_plot(ch8) +\n  draw_label(label = \"\n                      1875__________ $ 21,186\n                      1880_______ $ 498,532\n                      1885________ $ 736,170\n                      1890______ $ 1,173,624\n                      1895_____ $ 1,322,694\n                      1899_____ $ 1,434,975\",\n             x=0.35,y=0.826,\n             size=8.5,fontfamily = \"rajdhani\")\n\n\nfinal\n\nggsave(\"test3.png\",final)\n\nragg::agg_png(here::here(\"test2.png\"),\n              #scaling=1.5,\n              res = 300, \n              width = 6, \n              height = 4, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day11_circular/day11_circular.html",
    "href": "chartchallenges/cases2022/posts2022/day11_circular/day11_circular.html",
    "title": "day11_circular",
    "section": "",
    "text": "Quarterly Earnings per Johnson & Johnson Share\n\nlibrary(tidyverse)\n# data()\nrm(list=ls())\n\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\nlibrary(extrafont)\n# loadfonts()\n\n# transform time series dataset into a dataframe class\nres <-data.frame(value=as.matrix(JohnsonJohnson), date=time(JohnsonJohnson))\nres$year <- trunc(res$date)\nres$month <- (res$date - res$year) * 12 + 1\n\n# summarize by total annual earnings\nlabel_data <- res %>% \n  arrange(year) %>%\n  group_by(year) %>% summarise(tot_val=sum(value)) %>% ungroup()\n\n# set the labels\nlabel_data$id <- seq(1, nrow(label_data))\nnumber_of_bars <- nrow(label_data)\nangle <- 90 - 360*(label_data$id - 0.5)/number_of_bars\nlabel_data$hjust <-ifelse(angle< -90,1,0)\nlabel_data$angle<- ifelse(angle< -90, angle + 180, angle)\nlabel_data$label <- paste(\"$\",label_data$tot_val,\"in\",label_data$year)\n\n# set the colors\nmycolors <- colorRampPalette(RColorBrewer::brewer.pal(8, \"Set2\"))(21)\nmycolors2 <- colorRampPalette(RColorBrewer::brewer.pal(8, \"Set2\"))(1627)\n\n# make the circular barplot\np <- res %>% \n  ggplot(aes(x=as.factor(year),y=value,fill=alpha(month,0.7)))+\n  geom_bar(stat=\"identity\",\n           width = 0.7,\n           show.legend = F) +\n  geom_text(data = label_data,\n            aes(label=label,x=as.factor(year), y=tot_val+1,\n                vjust=\"center\",hjust=hjust,angle=angle),\n            color=\"grey90\",\n            fontface=\"bold\",\n            size=4,\n            family=\"Roboto Condensed\",\n            inherit.aes = F)+\n  ylim(-30,60)+\n  coord_polar(start = 0,theta = \"x\",direction = 1) +\n  scale_fill_manual(values=mycolors) +\n  theme_void() +\n  theme(text = element_text(family = \"Roboto Condensed\"),\n        aspect.ratio = 2/2,\n        axis.text = element_blank(),\n        axis.title = element_blank(),\n        panel.grid = element_blank(),\n        plot.margin = unit(rep(-1,4),\"cm\"))\n\n# make the map\nworld <- map_data(\"world\")\n\nworld%>%count(group)\n\nmap <-world %>% #count(group)%>%dim()\n  filter(!region==\"Antarctica\") %>%\n  ggplot(aes(x=long,y=lat,group=group))+\n  geom_polygon(aes(fill=region),show.legend = F) +\n  scale_fill_manual(values=mycolors2) +\n  coord_map(\"ortho\",orientation=c(14.707540, -74.452362,0))+\n  ggthemes::theme_map()+\n  theme(text = element_text(family = \"Roboto Condensed\"))\n\n# draw the plot\nlibrary(cowplot)\n\nggdraw()+\n  draw_plot(p,scale=0.9,y=-0.1) +\n  draw_plot(map,scale=0.28,x=-0.005,y=-0.1)+\n  draw_label(\"Johnson & Johnson: Quarterly earnings (dollars) per share\",\n             x=0.5,y=0.95,size=28,color=\"grey90\",\n             fontface = \"bold\",\n             fontfamily = \"Roboto Condensed\") +\n  draw_label(\"summarized by total annual earnings from 1960 to 1980\", \n             x=0.5,y=0.9, size=20,color=\"grey90\",\n             fontfamily = \"Roboto Condensed\",\n             fontface = \"bold\") +\n  draw_label(\"#30DayChartChallenge 2022 day11 - Circular\\nDataSource:Johnson & Johnson dataset in {datasets}\\nDataViz: Federica Gazzelloni\",\n             x=0.5,y=0.05,size=15,color=\"grey90\",\n             fontface = \"bold\",\n             fontfamily = \"Roboto Condensed\")\n\n# save the plot\nggsave(\"day11_circular.png\",\n       bg=\"grey20\",\n       width = 10,height = 10)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day28_deviations/day28_deviations.html",
    "href": "chartchallenges/cases2022/posts2022/day28_deviations/day28_deviations.html",
    "title": "Deviations",
    "section": "",
    "text": "library(tidyverse)\n\n\nhidden_gems <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-26/hidden_gems.csv')\n\n\ndf <- hidden_gems%>%\n  count(vol,date,title,review,author_kaggle,author_name)\n\n\ndf1 <- df %>%  #pull(date)%>%summary\n  mutate(ym=zoo::as.yearmon(date),\n         year=lubridate::year(date))%>%\n  unnest_tokens(word,review) %>%\n  anti_join(get_stopwords()) %>%\n  filter(!str_detect(word,\"kaggle|c|https|2020|2021|also|end|r\")) %>%\n  count(author_name,word,sort=T) %>%\n\n inner_join(bing) %>%\n  mutate(sentiment2=sentiment)%>%\n  spread(sentiment, n, fill = 0) %>%\n  mutate(sentiment = positive - negative) %>%\n  mutate(index=row_number())%>%\n  relocate(index) %>% #count(word,sort=T)\n  mutate(word=reorder(word,-index)) \n\n\nmy_words<-df1 %>%\n  count(word,sort=T)%>%\n  filter(n>1) %>%\n  select(-n) %>%\n  unlist()\n  \n  \ndf2 <- df1 %>%\n   filter(word %in% my_words) \n\nNotches are used to compare groups; if the notches of two boxes do not overlap, this suggests that the medians are significantly different.\n\ndf2 %>%\n  mutate(word=toupper(word))%>%\n  mutate(word=as.factor(word),\n         word=reorder(word,-index))%>% #count(index,sort=T)\n  ggplot(aes(x=index,y=fct_reorder(word,sentiment),fill=sentiment2))+ # \n  geom_boxplot(size=0.5,\n               outlier.size = 0.3,outlier.shape = 21,\n               notch = T) +\n  geom_jitter(size=0.3,shape=21,stroke=0.5)+\n  coord_cartesian(xlim = c(-1,260),ylim=c(0,35),clip=\"off\")+\n  labs(title=\"How vary are words in the Hidden Gems Reviews?\",\n       subtitle=\"Some words repeated themselves more frequently than others,\\nwith significantly different medians.\",\n       caption=\"#30DayChartChallenge 2022 #Day28 - Deviations\\nDataSource: #TidyTuesday Week17 - Hidden Gems\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n       x=\"\",y=\"\",fill=\"Sentiment\")+\n  tvthemes::scale_fill_rickAndMorty()+\n  tvthemes::theme_rickAndMorty()+\n  theme(plot.background = element_rect(fill=\"grey80\"),\n        legend.background = element_rect(fill=NA),\n        legend.position = c(0.9,0.9),\n        plot.title = element_text(face=\"bold\",size=22),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_text(size=12),\n        axis.text.x = element_blank())+\n  annotate(\"text\",x=-70,y=-2.5,label=\"How to read this graph:\\n- the notches represent the median of the frequency of words\\nfound in the Hidden Gems reviews by Author\\n- the sidebars represent their deviations\",\n           hjust=0,size=3)\n\n\nggsave(\"day28_deviations.png\",\n       dpi=320,\n       width = 8,\n       height = 10)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day20_new_tool/day20_new_tool.html",
    "href": "chartchallenges/cases2022/posts2022/day20_new_tool/day20_new_tool.html",
    "title": "New Tool",
    "section": "",
    "text": "library(tidyverse)\n\npeace <- read_csv(\"R_general_resources/EDA/30DayChartChallenge/data/Edition_2022/day20_new_tool/un-peacekeeping-forces.csv\")\n\n\ndf <- peace%>%select(-Entity,-Code)%>%\n  janitor::clean_names()%>%\n  rename(peacekeeping_n=size_of_total_peacekeeping_force_united_nations_peacekeeping)\n\n\nwrite_csv(df,\"peacekeeping.csv\")"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day16_environment/day16_environment.html",
    "href": "chartchallenges/cases2022/posts2022/day16_environment/day16_environment.html",
    "title": "Environment",
    "section": "",
    "text": "indoor_pollution <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-12/indoor_pollution.csv')\nfuel_gdp<- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-12/fuel_gdp.csv\")\ndeath_timeseries<-read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-12/death_timeseries.csv\")\ndeath_source<-read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-12/death_source.csv\")\n\n\n# indoor_pollution;\n# fuel_gdp;\n# death_timeseries;\n# death_source\n\n\nindoor_pollution1 <- indoor_pollution%>%\n  rename(Deaths_age.std.pct=`Deaths - Cause: All causes - Risk: Household air pollution from solid fuels - Sex: Both - Age: Age-standardized (Percent)`,\nYear_death=Year) %>%\n  janitor::clean_names()\n\nindoor_pollution1%>%head\n\n\nfuel_gdp1 <- fuel_gdp%>%\n  rename(Clean.fuels=\"Access.to.clean.fuels.and.technologies.for.cooking....of.population.\",\n         GDP=\"GDP.per.capita..PPP..constant.2017.international...\",\n         Pop=\"Population..historical.estimates.\",\n         Year_fuel=Year) %>%\n  janitor::clean_names() \n\nfuel_gdp1 %>%head\n\n\ndeaths_pct <- indoor_pollution1 %>%\n  right_join(fuel_gdp1,by=c(\"year_death\"=\"year_fuel\",\"entity\",\"code\"))%>%\n  janitor::clean_names()\n\ndf <- deaths_pct%>%\n  filter(!is.na(deaths_age_std_pct),\n         !is.na(clean_fuels),\n         !is.na(gdp)) %>%\n  select(-continent)\n  \n# DataExplorer::profile_missing()\ndf %>%head\n\n\ndf%>%glimpse()\n\n\nlibrary(countrycode)\ndf$continent <- countrycode(df$entity,\n                            origin= \"country.name\",\n                            destination = \"continent\")\n\n\ndf%>% filter(is.na(continent)) %>% count(entity)\n\n\ndf <- df %>%\n  filter(!entity%in%c(\"Micronesia (country)\",\"Timor\",\"World\")) \n\n\ndf%>%\n  head\n\n\ndeath_plot <- df %>%\n  mutate(year=cut(year_death,5),.after=year_death) %>%\n  group_by(year)%>%\n  mutate(mean=mean(deaths_age_std_pct),\n         sd=sd(deaths_age_std_pct)) %>%\n  ungroup() %>% # pull(mean)%>%summary\n  select(year,mean,sd) %>%\n  distinct()%>%\n  ggplot(aes(y=fct_reorder(year,mean),\n             xdist = distributional::dist_normal(mean, sd),\n             layout = \"weave\",\n             fill = stat(x < 5.094))) + \n  ggdist::stat_dots(position = \"dodge\", color = \"grey70\")+\n  geom_vline(xintercept = 5.094, alpha = 0.25) +\n  scale_x_continuous() +\n  tvthemes::scale_fill_hilda()+\n  labs(x=\"\",\n       y=\"\",color=\"\",\n       title=\"Deaths\",\n       subtitle=\"\",\n       Caption=\"#30DayChartChallenge 2022 #day16 - Enviroment\\nDataSource: Indoor Air Pollution | DataViz: Federica Gazzelloni\")+\n  tvthemes::theme_avatar()+\n  theme(legend.background = element_blank(),\n        legend.box.background = element_blank(),\n        legend.key = element_blank(),\n        legend.key.width = unit(0.5,units=\"cm\"),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.8,0.1))\ndeath_plot\n\n\ndf%>%head\n\n\nfuel_plot <- df %>%\n  mutate(year=cut(year_death,5),.after=year_death) %>%\n  group_by(year)%>%\n  mutate(mean=mean(clean_fuels),\n         sd=sd(clean_fuels)) %>%\n  ungroup() %>% #pull(mean)%>%summary\n  select(year,mean,sd) %>%\n  distinct()%>%\n  ggplot(aes(y=fct_reorder(year,mean),\n             xdist = distributional::dist_normal(mean, sd),\n             layout = \"weave\",\n             fill = stat(x < 62.04))) + \n  ggdist::stat_dots(position = \"dodge\", color = \"grey70\")+\n  geom_vline(xintercept = 62.04, alpha = 0.25) +\n  scale_x_continuous() +\n  tvthemes::scale_fill_hilda()+\n  labs(x=\"\",\n       y=\"\",color=\"\",\n       title=\"Fuel\",\n       subtitle=\"\",\n       Caption=\"#30DayChartChallenge 2022 #day16 - Environment\\nDataSource: Indoor Air Pollution | DataViz: Federica Gazzelloni\")+\n  tvthemes::theme_avatar()+\n  theme(legend.background = element_blank(),\n        legend.box.background = element_blank(),\n        legend.key = element_blank(),\n        legend.key.width = unit(0.5,units=\"cm\"),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.8,0.1))\n\n\nlibrary(patchwork)\ndeath_plot|fuel_plot\n\n\ndf\n\n\ndf%>%count(entity)\n\n\nlibrary(rnaturalearth)\nworld <- ne_countries(returnclass = \"sf\")\n\nworld%>%\n  right_join(df,by=c(\"name\"=\"entity\"))%>% select(name) %>%\n  sf::st_drop_geometry() %>%\n  count(name)\n\ndf1 <- world%>%\n  select(name)%>%\n  right_join(df,by=c(\"name\"=\"entity\"))\n\n\nmap <- ggplot(data = world) +\n  geom_sf(size=0.5)+\n  geom_sf(data=df1,\n          mapping=aes(geometry=geometry,fill=deaths_age_std_pct),\n          size=0.1)+\n  coord_sf(xlim = c(-180.0,180.0), ylim = c(-60.0,90.0), expand = FALSE)+\n  labs(fill=\"Deaths (%)\",\n       title=\"Deaths caused by Indoor Air Pollution\") +\n  tvthemes::scale_fill_gravityFalls(178,type=\"continuous\")+\n  tvthemes::theme_hildaDay() +\n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        legend.background = element_blank(),\n        legend.position = c(0.1,0.3),\n        plot.background = element_rect(color=\"beige\",fill=\"beige\"))\n\n\nggsave(\"map.png\",dpi=320,width = 9,height = 6)\n\n\noptions(scipen = 999)\nlines <- ggplot(df, aes(x = clean_fuels, y = deaths_age_std_pct)) +\n     geom_point(aes(fill=entity),\n                size = 0.5,\n                shape=21,color=\"grey70\",\n                show.legend = F) + \n     geom_smooth(aes(color = as.factor(year_death)),\n                 size=0.2,show.legend = F,se=F)+\n     geom_label(data=df%>%\n                filter(year_death==\"2009\")%>%\n                group_by(continent)%>%\n                mutate(deaths_age_std_pct=max(deaths_age_std_pct),\n                                        clean_fuels=max(clean_fuels))%>%\n                arrange(-deaths_age_std_pct)%>%\n                slice(1:1)%>%\n                ungroup() ,\n                aes(label=entity),\n                position = \"identity\",\n                vjust=0.5,hjust=\"right\",\n                size=2,\n                inherit.aes = T,\n                check_overlap = T)+\n     #scale_x_log10()+\n     #scale_y_log10(breaks=seq(0,23,5))+\n     facet_wrap(vars(continent),scales = \"free\",ncol = 5)+\n     #tvthemes::scale_fill_gravityFalls()+\n     tvthemes::scale_colour_gravityFalls()+\n     tvthemes::theme_hildaDay() +\n     theme(legend.position = \"none\",\n           plot.background = element_rect(color=\"midnightblue\",fill=\"beige\"),\n           panel.grid = element_line(size=0.05),\n           axis.text = element_blank(),\n           axis.title = element_blank())\n\n\nggsave(\"lines.png\",\n       dpi=320,\n       width = 9,height = 4)\n\n\nlibrary(cowplot)\nlibrary(extrafont)\n#loadfonts()\n\nggdraw()+\n  draw_plot(map,y=0.2,\n            height = 0.6)+\n  draw_plot(lines,scale=0.5,\n            width = 2,height = 0.5,\n            x=-0.5,y=-0.2)\n\n\nggsave(\"day_16_enviroment.png\",\n       dpi=320,\n       width = 9,height = 6)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day18_oecd/day18_oecd.html",
    "href": "chartchallenges/cases2022/posts2022/day18_oecd/day18_oecd.html",
    "title": "OECD",
    "section": "",
    "text": "Source:\n\nhttps://www.oecd-ilibrary.org/environment/data/oecd-environment-statistics/air-transport-co2-emissions_13d4f295-en\nhttps://stats.oecd.org/viewhtml.aspx?datasetcode=AIRTRANS_CO2&lang=en\n\n\nrm(list=ls())\n\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\n\nlibrary(tidyverse)\nairtransport <- read_csv(\"AIRTRANS_CO2_19042022233714776.csv\")\n\noptions(scipen = 999)\ndf <- airtransport%>%\n  janitor::clean_names()%>% #count(flight_type)\n  select(pollutant,country,time,value,frequency=frequency_2,flight_type)%>%\n  mutate(value=round(value))\n\n\ndf_yr <- df %>%\n  filter(time==as.integer(substr(time, 1, 4)))%>%\n  distinct()\n\n\n# count(country)\nmy_countries <- df_yr %>%\n  group_by(country)%>%\n  summarize(tot_value_per_country=round(mean(value)))%>%\n  arrange(-tot_value_per_country)%>%\n  ungroup()%>%\n  slice(1:10)%>%\n  select(country)%>%\n  unlist()\n\ndf2 <- df_yr %>%\n  filter(country%in%my_countries)\n\nlibrary(extrafont)\n# loadfonts()\nlibrary(hrbrthemes)\nlibrary(tvthemes)\nlibrary(ggthemes)\nlibrary(geomtextpath)\n\n\n\n\ndf3 <- df2 %>%\n  group_by(time,country)%>%\n  mutate(avg_value=mean(value)) %>%\n  ungroup()\n\n\n\ndf3 %>%\n  filter(!country%in%c(\"Canada\",\"Japan\")) %>% \n  ggplot(aes(x=factor(time),y=avg_value,label=country,group=country))+\n  geom_hline(aes(yintercept=12268195),linetype=\"dashed\",size=2,color=\"grey90\")+\n  geom_textline(aes(color=country),\n                size=4,\n                fontface=\"bold\",\n                linewidth = 2,\n                show.legend = F)+\n  scale_y_log10(labels=scales::label_number(scale = 1e-6))+\n  labs(title=\"CO2 emissions related to \\ncommercial passenger, freight, and general aviation flights\",\n       caption=\"#30DayChartChallenge 2022 #Day18 - OECD\nDataSource: OECD - International Civil Aviation Organisation (ICAO)\n       Top CO2 level Countries - tonnes of CO2-equivalent | DataViz: Federica Gazzelloni\")+\n  annotate(\"segment\", x = 0.8, xend = 0.8, y = 55000000, yend = 85000000, \n           colour = \"darkred\", size=6, alpha=0.6)+\n  coord_cartesian(ylim = c(2690700, 46048382), \n                  xlim = c(1.5,8.5),clip = \"off\")+\n  tvthemes::scale_color_attackOnTitan()+\n  ggthemes::theme_fivethirtyeight()+\n  theme(legend.position = \"none\",\n        axis.text = element_text(face=\"bold\",size=10),\n        plot.caption = element_text(vjust=0.5),\n        plot.background = element_rect(fill=\"grey85\",color=\"grey85\"),\n        panel.background = element_rect(fill=\"grey85\",color=\"grey85\"))\n\n\nggsave(\"day18_oecd.png\",\n       dpi=320,\n       width = 9,\n       height = 6)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day12_theme_day/day12_theme_day.html",
    "href": "chartchallenges/cases2022/posts2022/day12_theme_day/day12_theme_day.html",
    "title": "Theme day",
    "section": "",
    "text": "rm(list=ls())\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\n# load libraries and options\noptions(scipen = 999) # this is to avoid number truncation\nlibrary(countrycode)\nlibrary(tidyverse)\n\n# set the colors\nmycolors <- colorRampPalette(RColorBrewer::brewer.pal(n=9, name=\"Set1\"))(5)\n\n# load data\ndeath_timeseries<-read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-12/death_timeseries.csv\")\n\n# data wrangling\ndeath_timeseries1<-death_timeseries%>%\n  rename(Deaths=`Deaths...Cause..All.causes...Risk..Household.air.pollution.from.solid.fuels...Sex..Both...Age..All.Ages..Number.`,\n         Deaths1=`Deaths...Cause..All.causes...Risk..Household.air.pollution.from.solid.fuels...Sex..Both...Age..All.Ages..Number..1`)\n\n\ndeath_timeseries2 <- death_timeseries1%>%\n  filter(Year==1990,Year.1==2019) %>%\n  filter(!str_detect(Entity,\"World|Region|Central|Countries|European\"),\n         !str_detect(Entity,\"Western|Southern|Eastern|Northen\"),\n         !str_detect(Entity,\"North|South|Southeast\"),\n         !str_detect(Entity,\"income|High|Low\"),\n         !str_detect(Entity,\"Commonwealth\"),\n         !str_detect(Entity,\"G20|SDI\"),\n         !str_detect(Entity,\"Europe|Asia|Africa|America|Oceania\")\n         ) \n\n# add missing continents' names with countrycode() function -----------\ndeath_timeseries2$continent <- countrycode(sourcevar = death_timeseries2[, \"Entity\"],\n                                           origin = \"country.name\",\n                                           destination = \"continent\")\n\n\ndeath_timeseries3 <- death_timeseries2%>%\n  # check for some values that were not matched unambiguously ---------\n  # filter(Entity%in%c(\"Australasia\", \"Caribbean\", \n  #                    \"England\", \"Micronesia (country)\", \n  #                    \"Scotland\", \"Timor\", \"Wales\")) %>%\n  mutate(Entity=as.character(Entity), # mutate Entity back as a character to use case_when() function\n         continent=case_when(Entity%in%c(\"England\",\"Scotland\",\"Wales\")~\"Europe\", \n                          Entity==\"Australasia\"~\"Oceania\", \n                          Entity==\"Caribbean\"~\"Americas\", \n                          Entity==\"Micronesia (country)\"~\"Asia\", \n                          Entity==\"Timor\"~\"Asia\",\n                          TRUE ~ continent),\n         Entity=as.factor(Entity)) %>%\n  filter(Deaths1>=1,Deaths>=1) \n\n# make the plot\ndeath_timeseries3 %>%\n  ggplot(aes(x=Deaths1,y=Deaths))+\n  geom_jitter(size=1.7,aes(fill=continent),shape=21,alpha=0.7,color=\"grey45\")+\n  geom_smooth(method = \"lm\",se=F,color=\"grey60\",\n              linetype=\"dashed\",size=0.5)+\n  geom_text(aes(label=Entity,color=continent),\n            hjust = \"left\",\n            show.legend = F,\n            vjust=\"top\",\n            check_overlap = T,\n            size=3)+\n  scale_x_log10(breaks=c(1,10,100,1000,10000,100000),\n                expand=expansion(add=c(0,0.05)),\n                label=scales::comma_format(accuracy = NULL))+\n  scale_y_log10(breaks=c(1,10,100,1000,10000,100000),\n                expand=expansion(add=c(0,0.8)),\n                label=scales::comma_format(accuracy = NULL))+ \n  scale_fill_manual(guide=guide_legend(nrow = 1),\n                    values=mycolors)+\n  scale_color_manual(values=mycolors)+\n  labs(title=\"Deaths due to Household air pollution\\nfrom solid fuels\",\n       subtitle=\"1990 vs 2019 All Ages and Gender\",\n       caption=\"\\n#30DayChartChallenge 2022 day12 - theme day: The Economist\\nDataSource: Our World in Data | #TidyTuesday week15 - Indoor Air Pollution\\nDataViz: Federica Gazzelloni\",\n       x=\"Deaths from indoor air pollution in 2019\",\n       y=\"Deaths from indoor air pollution in 1990\",fill=\"\") +\n  ggthemes::theme_economist() +\n  theme(legend.text = element_text(size=10),\n        plot.title = element_text(size=23),\n        axis.title.x = element_text(vjust = -0.8),\n        axis.title.y = element_text(vjust = 0.8),\n        plot.caption = element_text(vjust = -1,size=9),\n        legend.position = c(0.4,0.85))\n\n#save the plot\nggsave(\"day12_the_economist.png\",\n       dpi=320,\n       width = 8,\n       height = 6)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day8_mountains/day8_mountains.html",
    "href": "chartchallenges/cases2022/posts2022/day8_mountains/day8_mountains.html",
    "title": "Mountains",
    "section": "",
    "text": "Source for making a mountains.csv dataset\n\nhttps://learn.arcgis.com/en/projects/map-the-highest-mountains/\nhttps://learngis2.maps.arcgis.com/home/user.html?newUser=true\n\n\n\nfirst step:\n\nhttps://learngis2.maps.arcgis.com/home/content.html\n\n\nrm(list=ls())\n\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\nlibrary(tidyverse)\nlibrary(streamgraph)\n\nhighest_mountains <- read_csv(\"mountains.csv\")\nhighest_mountains\n\n\nlibrary(cowplot)\nlibrary(hrbrthemes)\nlibrary(extrafont)\nloadfonts()\n\n\nggdraw() +\n  draw_image(\"mountains_map.png\")+\n  draw_label(\"Where are the mountains of the world?\",\n             fontfamily = \"Eater\",color=\"grey60\",\n             size = 28, x=0.5,y=0.95) +\n  draw_label(\"approximate spatial resolution of the global distribution of mountains.\",\n             fontfamily = \"Eater\",\n             size = 15, x=0.5,y=0.89,color=\"grey60\") +\n  draw_label(\"coursework: https://learn.arcgis.com/en/projects/map-the-highest-mountains\",\n             fontfamily = \"Eater\",\n             size = 12, x=0.5,y=0.85,color=\"grey60\") +\n  draw_label(\"Map made with ArcGIS:\n- basemap: Modern Antique Map\\n- layer: World Mountain Ranges\\n- Triangles represent the highest mountains: \\nMt.Everest, Kangchenjunga, Lhotse, Makala (Himalayas)\n             \n             \\nDataSource: Learn ArcGIS | DataEdit: Federica Gazzelloni\",\n             x=0.5,y=0.13,fontfamily = \"Eater\",color=\"grey60\") \n\n\nggsave(\"day8_mountains.png\",\n       width = 9.87, height = 9.46,\n       bg=\"grey15\",\n       dpi=320)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day21_down_upwards/day21_down_upwards.html",
    "href": "chartchallenges/cases2022/posts2022/day21_down_upwards/day21_down_upwards.html",
    "title": "Down upwards",
    "section": "",
    "text": "rm(list=ls())\nlibrary(tidyverse)\n\nchocolate <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-18/chocolate.csv')\n\nchocolate%>%names\ndf <- chocolate%>% select(review_date,rating,cocoa_percent)\n\ndf%>%#count(review_date)\n  ggplot(aes(x=review_date))+\n  geom_histogram(binwidth=0.5)+\n  geom_freqpoly(binwidth=1)+\n  scale_x_continuous(breaks=seq(2006,2021,3))\n\n\nlibrary(extrafont)\n# loadfonts()\n\n\ndf%>%\n  arrange(review_date) %>%\n  mutate(cocoa_percent=sub(\"%\",\"\",cocoa_percent),\n         cocoa_percent=as.integer(cocoa_percent))%>%\n  group_by(review_date)%>%\n  summarise_all(.funs = mean) %>% \n  ungroup() %>% \n  mutate(rating=(rating/sum(rating))*100)%>%\n  mutate(rating_sc=scale(rating),cocoa_sc=scale(cocoa_percent)) %>%\n  #filter(review_date%in%c(2007,2008))\n  filter(review_date%in%c(2011,2012))\n                         \n#2007-2008\nrat \n1/(5.894628-6.096499)\n# [1] -4.953659\ncoc\n1/(72.67391-72.08219)\n# [1] 1.689989\n\n#2011-2012\nrat \n1/(6.249116-6.400915)\n# [1] -6.587659\ncoc\n1/(71.55155-70.96933)\n# [1] 1.717564\n\n\ndf%>%\n  arrange(review_date) %>%\n  mutate(cocoa_percent=sub(\"%\",\"\",cocoa_percent),\n         cocoa_percent=as.integer(cocoa_percent))%>%\n  group_by(review_date)%>%\n  summarise_all(.funs = mean) %>% \n  ungroup() %>% \n  mutate(rating=(rating/sum(rating))*100)%>%\n  mutate(rating_sc=scale(rating),cocoa_sc=scale(cocoa_percent))%>%\n  pivot_longer(cols=c(rating_sc,cocoa_sc),names_to=\"names\",values_to=\"values\")%>%#pull(values)%>%range()\n  ggplot()+\n  geom_line(aes(x=review_date,y=values,group=names,color=names),\n            size=2,key_glyph = \"timeseries\")+\n  geom_rect(aes(xmin = 2007, \n                xmax = 2008, \n                ymin = min(values), \n                ymax = max(values)),alpha=0.02,fill=\"pink\")+\n  geom_rect(aes(xmin = 2011, \n                xmax = 2015, \n                ymin = min(values), \n                ymax = max(values)),alpha=0.02,fill=\"pink\")+\n  geom_rect(aes(xmin = 2017, \n                xmax = 2019, \n                ymin = min(values), \n                ymax = max(values)),alpha=0.02,fill=\"pink\")+\n  scale_x_continuous(breaks=c(2007,2008,2011,2015,2017,2019,2021))+\n  scale_color_viridis_d(labels=c(\"Cocoa(%)\",\"Rating\"))+\n  annotate(\"curve\", x = 2005.4, xend = 2006.5, \n           y = 1.4, yend = 0.9, \n           curvature=0.5,\n           arrow = arrow(length = unit(0.3, \"cm\")),\n           colour = \"#800080\", size=1, alpha=0.6)+\n    annotate(\"text\", x = 2006.2, y = 1.4, \n             label=\"Cocoa(%)\\nUP\\n+1.7%\", family=\"Arial Black\",\n           colour = \"#800080\", size=4, alpha=0.6)+\n  annotate(\"text\", x = 2007.8, y = -0.8, \n             label=\"\\n-5%\", family=\"Arial Black\",\n           colour = \"#800080\", size=4, alpha=0.6)+\n   annotate(\"text\", x = 2011.9, y = -0.5, \n             label=\"\\n+1.8%\", family=\"Arial Black\",\n           colour = \"#800080\", size=4, alpha=0.6)+\n  annotate(\"text\", x = 2012, y = 1, \n             label=\"\\n-6.6%\", family=\"Arial Black\",\n           colour = \"#800080\", size=4, alpha=0.6)+\n  \n    annotate(\"curve\", x = 2011.5, xend = 2011.8, \n           y = 0.8, yend = 0.3, \n           curvature=-0.3,\n           arrow = arrow(length = unit(0.3, \"cm\")),\n           colour = \"#800080\", size=1, alpha=0.6)+\n  annotate(\"text\", x = 2010.8, y = 1, \n             label=\"Rating\\nDOWN\", family=\"Arial Black\",\n           colour = \"#800080\", size=4, alpha=0.6)+\n  annotate(\"segment\", x = 2005.4, xend = 2008.3, \n           y = 2.9, yend = 2.9, \n           colour = \"#800080\", size=7, alpha=0.6)+\n  annotate(\"text\",x=2007,y=-3,parse=T,family=\"Arial Black\",color=\"grey30\",\n           label=\"Slope == frac(y[2]-y[2],x[2]-x[1])\")+\n  coord_cartesian(ylim = c(-1.778707,1.780479), \n                  xlim = c(2006,2021),clip = \"off\")+\n  labs(color=\"\",title=\"Cocoa beans' Percent & Ratings\",\n       subtitle = \"Global AVG - scaled values\",\n       caption=\"#30DayChartChallenge 2022 #Day21 - Down/Upwards\n       DataSource: #TidyTuesday 2022 week3 - Chocolate Bar ratings\n       DataViz: Federica Gazzelloni\")+\n  ggthemes::theme_fivethirtyeight()+\n  theme(text = element_text(family=\"Arial Black\"),\n        axis.text.x = element_text(size=11,face=\"bold\"),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_line(size=3,lineend = \"butt\",color=\"grey50\"),\n        axis.ticks.length.x = unit(6,units = \"pt\"),\n        axis.line.x = element_line(color=\"#800080\",size=1),\n        plot.title = element_text(size=30),\n        plot.caption = element_text(color=\"grey30\"),\n        plot.background = element_rect(fill=\"grey90\",color=\"grey90\"),\n        panel.background = element_rect(fill=\"grey95\",color=\"grey90\"),\n        legend.background = element_blank(),\n        legend.key = element_blank(),\n        legend.text = element_text(size=12,face=\"bold\"))\nggsave(\"cocoa.png\",\n       dpi=320,\n       width = 8,\n       height = 6)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day2_pictogram/day2_pictogram.html",
    "href": "chartchallenges/cases2022/posts2022/day2_pictogram/day2_pictogram.html",
    "title": "Pictogram",
    "section": "",
    "text": "sources:\n\nhttps://www.statista.com/statistics/529312/sweden-number-of-accidental-deaths-by-type-and-gender/\nhttps://r-charts.com/part-whole/waffle-chart-ggplot2/\nhttps://stackoverflow.com/questions/61204259/how-can-i-resolve-the-no-font-name-issue-when-importing-fonts-into-r-using-ext\nhttps://rud.is/rpubs/building-pictograms.html\nhttps://stackoverflow.com/questions/56817353/how-to-save-ggrough-chart-as-png\n\n\nlibrary(tidyverse)\nlibrary(waffle)\nlibrary(hrbrthemes)\nlibrary(cowplot)\n\n\n# library(extrafont)\n\n#install.packages(\"rsvg\")\n#library(rsvg)\n\n#remotes::install_github(\"rstudio/fontawesome\")\n#library(fontawesome)\n\n# install_fa_fonts()\n\n# extrafont::font_import()\n#extrafont::loadfonts(quiet = TRUE)\n\n# extrafont::fonttable() %>% \n#   as_tibble() %>% \n#   filter(grepl(\"Aw\", FamilyName)) %>% \n#   select(afmfile, FullName, FamilyName, FontName)\n\n# fa_grep(\"car-crash\",\"dizzy\",\"flushed\",\"fill-drip\",\"frown\",\"frown-open\",\"medrt\",\n#         \"running\",\"procedures\",\"prescription-bottle-alt\",\"pills\",\"skull-crossbones\",\n#         \"sad-tear\",\"swimmer\",\"street-view\",\"water\",\n#         \"walking\")\nfa_list()\n\n\n#---------------\n\ndf <- gender <- readxl::read_excel(\"R_general_resources/EDA/30DayChartChallenge_2022/day2_pictogram/statistic_id529312_accidental-deaths-in-sweden-2020-by-type-and-gender.xlsx\", \n                           sheet = \"Data\",skip=1)\n\ndf1 <- df[c(-1,-2),]\n\nnames(df1) <- c(\"accidents\",\"men\",\"women\")\n\ndf2 <-df1 %>%\n  mutate(accidents=as.factor(accidents)) %>%\n  mutate(men=as.integer(men),\n    women=as.integer(women),\n    men=round(men/sum(men)*100),\n    women=round(women/sum(women)*100)) \n\n\n\nmen <- ggplot(df2, aes(label = accidents, values = men)) +\n  geom_pictogram(aes(colour = accidents), \n                 n_rows = 5,\n                 flip = F, make_proportional = T) +\n  scale_color_discrete(name = NULL,type=RColorBrewer::brewer.pal(5, \"Set2\")) +\n  scale_label_pictogram(\n    name = NULL,\n    values = c(`Drowning accidents` =\"swimmer\",\n               `Falling accidents` =\"running\",\n               `Other accidents` =\"procedures\",\n               `Poisoning` = \"skull-crossbones\",\n               `Traffic accidents` =\"car-crash\")) +\n  coord_equal() +\n  theme_ipsum_rc(grid=\"\") +\n  theme_enhance_waffle() +\n  theme(legend.key.height = unit(2.25, \"line\")) +\n  theme(legend.text = element_text(size = 10, hjust = 0, vjust = 0.75,\n                                   family=\"Roboto Condensed\"),\n        legend.position = c(0.5,1.1),\n        legend.direction = \"horizontal\")\n\n\nwomen <- ggplot(df2, aes(label = accidents, values = women)) +\n  geom_pictogram(aes(colour = accidents), \n                 n_rows = 5,\n                 flip = F, make_proportional = T) +\n  scale_color_discrete(name = NULL,type=RColorBrewer::brewer.pal(5, \"Set2\")) +\n  scale_label_pictogram(\n    name = NULL,\n    values = c(`Drowning accidents` =\"swimmer\",\n               `Falling accidents` =\"running\",\n               `Other accidents` =\"procedures\",\n               `Poisoning` = \"skull-crossbones\",\n               `Traffic accidents` =\"car-crash\")) +\n  coord_equal() +\n  theme_ipsum_rc(grid=\"\") +\n  theme_enhance_waffle() +\n  theme(legend.key.height = unit(2.25, \"line\")) +\n  theme(legend.text = element_text(size = 10, hjust = 0, vjust = 0.75),\n        legend.position = \"none\")\n\n\n\nggdraw()+\n  draw_line(x = c(0.15, 0.15),\n            y = c(0.75, 0.95),\n            color = \"blue\", size = 7) +\n  draw_label(\"Accidental deaths in Sweden in 2020, by type and gender\", \n             x = 0.5, y = 0.93,fontface = \"bold\",\n             fontfamily = \"Roboto Condensed\",size=27) +\n  draw_label(\"A higher number of men than women died from accidents in Sweden in 2020. \\nThe most common accident which led to death that year was falling accidents, \\nwhich caused the deaths of 567 men and 492 women.\",\n  x=0.5, y=0.85)+\n  draw_label(\"Men\",angle=90,x=0.12,y=0.6,size=15,fontfamily = \"Roboto Condensed\")+\n  draw_plot(men, scale = 0.88, x = 0, y = 0.05) +\n  draw_label(\"Women\",angle=90,x=0.12,y=0.3,size=15,fontfamily = \"Roboto Condensed\")+\n  draw_plot(women, scale = 0.88, x = 0, y = -0.28) +\n  draw_label(\"#30DayChatChalleng 2022 day2 - Pictogram | DataSource: Statista | DataViz: Federica Gazzelloni \", \n             x = 0.5, y = 0.05, fontfamily = \"Roboto Condensed\",size=12)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day15_multivariate/day15_multivariate.html",
    "href": "chartchallenges/cases2022/posts2022/day15_multivariate/day15_multivariate.html",
    "title": "Multivariate",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ISLR2)\n# data()\n\nMid-Atlantic Wage Data\nWage and other data for a group of 3000 male workers in the Mid-Atlantic region.\n\nWage%>%names\n\n\nsummary(Wage)\n\n\nwage1 <- Wage %>%\n  mutate(across(where(is.factor),as.character)) %>% #count(region)\n  mutate(maritl_id=gsub(\"\\\\D\",\"\",maritl),\n         race_id=gsub(\"\\\\D\",\"\",race),\n         education_id=gsub(\"\\\\D\",\"\",education),\n         jobclass_id=gsub(\"\\\\D\",\"\",jobclass),\n         health_id=gsub(\"\\\\D\",\"\",health),\n         health_ins_id=gsub(\"\\\\D\",\"\",health_ins)) %>%\n  select(-maritl,-race,-education,-region,-jobclass,-health,-health_ins) %>%\n  mutate(across(where(is.character),as.integer)) \n\n\ntmwr_cols <- colorRampPalette(c(\"#91CBD765\", \"#CA225E\"))\nwage1 %>%\n  cor() %>% \n  corrplot::corrplot(col = tmwr_cols(200), tl.col = \"black\") +\n  ggplot2::facet_wrap(~wage)\n\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nlibrary(corrplot)\nlibrary(ggforce)\nlibrary(bestNormalize)\n\n\nset.seed(1701)\nsplit <- initial_split(wage1, strata = wage, prop = 3/4)\n\ntrain <- training(split)\ntest  <- testing(split)\n\nset.seed(1702)\nval <- validation_split(train, strata = wage, prop = 4/5)\nval$splits[[1]]\n\n\nrec <-\n  # Use the training data from the val split object\n  recipe(wage ~ ., data = analysis(val$splits[[1]])) %>%\n  step_select(-logwage)%>%\n  step_zv(all_numeric_predictors()) %>%\n  step_orderNorm(all_numeric_predictors()) %>% \n  step_normalize(all_numeric_predictors())\n\n\nrec_trained <- prep(rec)\n\nshow_variables <- \n  rec %>% \n  prep(log_changes = TRUE)\n\nvalidation <- val$splits %>% pluck(1) %>% assessment()\nval_processed <- bake(rec_trained, new_data = validation)\n\n\nrec%>%prep()%>%bake(new_data=NULL) %>%\n  broom::tidy()\n\n\nlibrary(ggdist)\nlibrary(distributional)\nrec%>%prep()%>%bake(new_data=NULL) %>%\n  broom::tidy() %>%\n  filter(!column==\"wage\")%>%\n  ggplot(aes(x=column))+\n  geom_col(aes(y=mean))\n\n\nlibrary(ggdist)\nlibrary(distributional)\n\nWage_age_cat <- Wage %>%#count(age)\n  mutate(age_cat=cut(age,breaks = 5)) %>% #count(race)\n  select(-age,-logwage) \n\n# average calculation\nmod <- glm(wage~ education+race+age_cat+maritl-1,family = \"gaussian\",data=Wage_age_cat)\n\n\nmod%>%\n  tidy() %>% \n  mutate(term0=case_when(str_detect(term,\"education\")~\"education\",\n                         str_detect(term,\"race\")~\"race\",\n                         str_detect(term,\"maritl\")~\"maritl\",\n                         str_detect(term,\"age_cat\")~\"age_cat\",\n                         TRUE~term)) %>%\n  mutate(term1=gsub(\"^[A-z]+\\\\d. \",\"\",term)) %>%\n  ggplot(aes(y = fct_reorder(term1,estimate),\n             xdist = dist_student_t(df = df.residual(mod), \n                               mu = estimate, \n                               sigma = std.error))\n             ) +\n  ggdist::stat_halfeye()+\n  stat_dots(position = \"dodge\")+ # , color = \"pink\"\n  facet_wrap(vars(term0),scales = \"free\")+\n  tvthemes::scale_color_hilda()+\n  tvthemes::theme_theLastAirbender()\n\n\nmod%>%\n  tidy() %>% \n  mutate(term0=case_when(str_detect(term,\"education\")~\"education\",\n                         str_detect(term,\"race\")~\"race\",\n                         str_detect(term,\"maritl\")~\"maritl\",\n                         str_detect(term,\"age_cat\")~\"age_cat\",\n                         TRUE~term)) %>%\n  mutate(term1=gsub(\"^[A-z]+\\\\d. \",\"\",term)) %>%\n  \n  ggplot(aes(y = fct_reorder(term1,estimate),\n             xdist = dist_student_t(df = df.residual(mod), \n                               mu = estimate, \n                               sigma = std.error))\n             ) +\n  ggdist::stat_halfeye()+\n  stat_dots(position = \"dodge\")+ # , color = \"pink\"\n  facet_wrap(vars(term0),scales = \"free\")+\n  tvthemes::scale_color_hilda()+\n  tvthemes::theme_theLastAirbender()\n\n\nWage%>%\n  mutate(race=as.character(race)) %>%\nggplot()+\n  aes(x=wage,y=race)+\n  ggdist::geom_dotsinterval(layout=\"weave\",side=\"bottom\")+\n ggdist::stat_halfeye()\n\n\nlibrary(extrafont)\nloadfonts()\n\nWage %>%\n  mutate(education=gsub(\"\\\\d. \",\"\",education)) %>% #count(year)\n  group_by(education)%>%\n  mutate(mean=mean(wage),\n         sd=sd(wage)) %>%\n  ungroup() %>% # pull(mean)%>%summary\n  select(education,mean,sd) %>%\n  distinct()%>%\n  ggplot(aes(y=fct_reorder(education,mean),\n             xdist = dist_normal(mean, sd),\n             layout = \"weave\",\n             fill = stat(x < 111.70))) + \n  stat_dots(position = \"dodge\", color = \"grey70\")+\n  geom_vline(xintercept = 111.70, alpha = 0.25) +\n  scale_x_continuous(breaks = c(20,60,90,112,140,180,220)) +\n  tvthemes::scale_fill_hilda()+\n  labs(x=\"Wage values from 2003 to 2009\",\n       y=\"\",color=\"Race\",fill=\"wage < avg\",\n       title=\"Wage distribution vs education 2003-2009\",\n       subtitle=\"Normalized values\",\n       caption=\"#30DayChartChallenge 2022 #day9 - Distribution/Statistics - v2\\nDataSource: {ISLR2} Wage dataset | DataViz: Federica Gazzelloni\")+\n  tvthemes::theme_avatar()+\n  theme(text = element_text(family=\"Chelsea Market\"),\n        legend.background = element_blank(),\n        legend.box.background = element_blank(),\n        legend.key = element_blank(),\n        legend.key.width = unit(0.5,units=\"cm\"),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.8,0.1))\n\n\nggsave(\"education.png\")\n\n\nWage %>%\n  mutate(education=gsub(\"\\\\d. \",\"\",education)) %>% #count(year)\n  group_by(education)%>%\n  mutate(mean=mean(wage),\n         sd=sd(wage)) %>%\n  ungroup() %>%\n  ggplot(aes(x = wage, \n             y =fct_reorder(education,wage),color=race)) +\n  stat_dots(side = \"both\",size=2.5)+\n  scale_color_brewer(palette = \"Dark2\") +\n  xlim(20,200)+\n  labs(x=\"Wage values from 2003 to 2009\",\n       y=\"\",color=\"Race\")+\n  tvthemes::theme_theLastAirbender()+\n  theme(legend.background = element_blank(),\n        legend.box.background = element_blank(),\n        legend.key = element_blank(),\n        legend.key.width = unit(0.5,units=\"cm\"),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.2,0.97))\n\n\nplot_validation_results <- function(recipe, \n                                    dat = assessment(val$splits[[1]])) {\n  recipe %>%\n    # Estimate any additional steps\n    prep() %>%\n    # Process the data (the validation set by default)\n    bake(new_data = dat) %>%\n    # Create the scatterplot matrix\n    ggplot(aes(x = .panel_x, y = .panel_y, col = wage, fill = wage)) +\n    geom_point(alpha = 0.4, size = 0.5) +\n    geom_autodensity(alpha = .3) +\n    facet_matrix(vars(-wage), layer.diag = 2) +\n    viridis::scale_color_viridis(option = \"A\") + \n     viridis::scale_fill_viridis(option = \"A\")\n}\n\n\nrec_trained %>%\n  step_pca(all_numeric_predictors(), num_comp = 4) %>%\n  plot_validation_results() + \n  ggtitle(\"Principal Component Analysis\")+\n  tvthemes::theme_theLastAirbender()\n\n\nrec_trained %>%\n  step_pls(all_numeric_predictors(), outcome = \"wage\", num_comp = 4) %>%\n  plot_validation_results() + \n  ggtitle(\"Partial Least Squares\")+\n  tvthemes::theme_theLastAirbender()\n\n\nrec_trained %>%\n  step_ica(all_numeric_predictors(), num_comp = 4) %>%\n  plot_validation_results() + \n  ggtitle(\"Independent Component Analysis\")+\n  tvthemes::theme_theLastAirbender()\n\n\nWage%>%\n  mutate(age1=cut(age,5),.after=age)%>%\n  mutate(year=as.factor(year))%>%\n  ggplot(aes(year,wage,group=year))+\n  geom_violin()+\n # facet_wrap(~age1)+\n  tvthemes::theme_theLastAirbender()\n\n\np1 <- Wage%>%#names\n  ggplot(aes(age,logwage,color=maritl,fill=maritl))+\n    geom_jitter(size=0.5,alpha=0.5,shape=21,stroke=0.5)+\n  geom_smooth(size=0.5,se=F)+#,color=\"darkred\")+\n  labs(title=\"\\n\")+\n  scale_color_hilda(palette = \"Day\",n=6, type = \"discrete\",reverse=T) +\n  tvthemes::theme_theLastAirbender(text.font = \"Times\", title.font = \"Times\",\n                    legend.font = \"Times\")+\n  theme(axis.text.x = element_blank(),\n        legend.position = \"top\")\np1\n\n\nlibrary(extrafont)\nloadfonts()\nlibrary(hrbrthemes)\nlibrary(tvthemes)\nlibrary(ggthemes)\nlibrary(geomtextpath)\ngeomtextpath::geom_textpath()\n\np2 <-Wage%>%\n  pivot_longer(cols = c(\"year\",\"age\",\"wage\"),names_to=\"names\",values_to=\"values\")%>%\nggplot(aes(values))+\n    geom_textdensity(aes(label=names,color=\"red\"),size = 6, \n                     fontface = 2, #fontfamily= \"Chelsea Market\",\n                     hjust = 0.2, vjust = 0.3,\n                     show.legend = F) +\n  facet_wrap(~names,scales = \"free\")+\n   scale_color_hilda(palette = \"Day\",n=6, type = \"discrete\",reverse=T) +\n  tvthemes::theme_theLastAirbender(text.font = \"Times\", title.font = \"Times\",\n                    legend.font = \"Times\")+\n  theme(axis.text.x = element_blank())\np2\n\n\nlibrary(ggdist)\nWage%>%\n  pivot_longer(cols = c(\"year\",\"age\",\"wage\"),names_to=\"names\",values_to=\"values\")%>%\nggplot(aes(values))+\ngeom_slabinterval()\n\n\nlibrary(cowplot)\nfinal <- ggdraw()+\n  draw_plot(p1) +\n  draw_plot(p2,scale=0.5)\n\n\nggpubr::annotate_figure(\n  final,\n  top = \"Ciao\",\n  bottom = \"addio\",\n  left = \"align\",\n  right = \"ok\",\n  fig.lab = \"a\",\n  fig.lab.pos = c(\"top.left\", \"top\", \"top.right\", \"bottom.left\", \"bottom\",\n    \"bottom.right\"),\n  fig.lab.size=2,\n  fig.lab.face=\"bold\"\n)\n\n\nWage%>%#names\n  ggplot(aes(race,wage))+\n    geom_col()+\n  coord_polar(theta = \"y\")\n\n\nWage%>%#names\n  ggplot(aes(education,wage))+\n    geom_col()+\n  coord_polar(theta = \"x\")\n\n\n\n\n\nWage%>%\n  mutate(maritl=gsub(\"\\\\d. \",\"\",maritl))%>%\nggplot(aes(maritl))+\n    geom_textdensity(aes(label=maritl,color=maritl),size = 6, \n                     fontface = 2, #fontfamily= \"Chelsea Market\",\n                     hjust = 0.2, vjust = 0.3,\n                     show.legend = F) +\n # facet_wrap(~names,scales = \"free\")+\n   scale_color_hilda(palette = \"Day\",n=6, type = \"discrete\",reverse=T) +\n  tvthemes::theme_theLastAirbender(text.font = \"Times\", title.font = \"Times\",\n                    legend.font = \"Times\")+\n  theme(axis.text.x = element_blank())\n\n\nWage%>%\n  mutate(race=gsub(\"\\\\d. \",\"\",race))%>%\nggplot(aes(race))+\n    geom_textdensity(aes(label=race,color=race),size = 6, \n                     fontface = 2, #fontfamily= \"Chelsea Market\",\n                     hjust = 0.2, vjust = 0.3,\n                     show.legend = F) +\n # facet_wrap(~names,scales = \"free\")+\n  scale_color_hilda(palette = \"Day\",n=6, type = \"discrete\",reverse=T) +\n  tvthemes::theme_theLastAirbender(text.font = \"Times\", title.font = \"Times\",\n                    legend.font = \"Times\")+\n  theme(axis.text.x = element_blank())\n\n\nWage%>%#count(education)\n  mutate(education=gsub(\"\\\\d. \",\"\",education),\n         education=case_when(education==\"< HS Grad\"~\"Under graduate\",\n                             education==\"Advanced Degree\"~\"Degree\",\n                             TRUE~\"Graduate\"))%>%\nggplot(aes(race))+\n    geom_textdensity(aes(label=education,color=education),\n                     size = 6, \n                     fontface = 2,\n                     hjust = 0.2, vjust = 0.3,\n                     show.legend = F) +\n # facet_wrap(~names,scales = \"free\")+\n  scale_color_hilda(palette = \"Day\",n=6, type = \"discrete\",reverse=T) +\n  facet_wrap(~education)+\n  tvthemes::theme_theLastAirbender(text.font = \"Times\", title.font = \"Times\",\n                    legend.font = \"Times\")+\n  theme(axis.text.x = element_blank())\n\n\nlibrary(hrbrthemes)\nlibrary(ggthemes)\nlibrary(extrafont)\nextrafont::loadfonts()\nfonts()\n\n\ntvthemes::import_chelseaMarket()\nWage%>%\n  select(wage,age,race)%>%\n  distinct()%>%\n  ggplot(aes(x=wage,y=age,shape=race))+\n         geom_point(aes(size=wage,color=race))+\n         geom_smooth(method=lm,se=FALSE,\n                     fullrange=TRUE,\n                  aes(color=race))+\n  scale_x_log10()+\n  scale_y_log10()+\n  xlim(20,250)+\n  labs(title=\"Multivariate Wage Analysis - age and race\",\n       subtitle=\"Years: 2003 to 2009\",\n       caption=\"#30DayChartChallenge 2022 #day15 - Multivariate\\nDataSource: {ISLR2} Wage dataset | DataViz: Federica Gazzelloni\",\n       shape=\"Race\",color=\"Race\",size=\"Wage\",\n       x=\"Wage\",y=\"Age\")+\n  ggthemes::scale_shape_tableau()+\n  ggthemes::scale_color_tableau()+\n  ggthemes::theme_pander()+\n  theme(text = element_text(family=\"Chelsea Market\"))\n\n\nggsave(\"day15_multivariate.png\",\n       dpi=320,\n       width = 9,\n       height = 6)"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day7_physical/day7_physical.html",
    "href": "chartchallenges/cases2022/posts2022/day7_physical/day7_physical.html",
    "title": "Physical",
    "section": "",
    "text": "rm(list=ls())\n\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\n\n\n# sources:\n# https://ourworldindata.org/grapher/violence-against-children?country=~OWID_WRL\n\nlibrary(tidyverse)\ndf <- read.csv(\"violence-against-children.csv\",header = T)\n\ndf %>% View()\n\n# quote = \"Proportion.of.children.aged.1-14.years.who.experienced.physical.punishment.and.or.psychological.aggression.by.caregivers\"\n# quote <- gsub(\"\\\\.\",\" \",title)\n\n\nnames(df)[4] <- \"proportion\"\n\ndf1 <- df %>% \n  janitor::clean_names() \n  \ndf1 %>%count(entity)\nlibrary(ggtext)\nlibrary(MetBrewer)\n\n\n# density(df1$proportion)\n\ndf1 %>% \n  filter(!code==\"\") %>%\n  arrange(proportion) %>%\n  ggplot(aes(x=proportion))+\n  geom_density(aes(fill=\"red\"),size=1) + \n  geom_text(aes(x=proportion, \n                y=(seq(8e-03,3.2e-02,0.0003809524)),  # y=(seq(1.613e-05,3.322e-02,0.0005270456)),\n                label=entity,size=rev(proportion)),\n            #position = position_dodge(width=0.1),\n            #position = position_jitter(seed = 123,width = 0.1),\n            position = \"identity\",\n            family=\"Roboto Condensed\",\n            check_overlap = T)+\n  \n  # annotate(\"text\", x = 70, y =-0.001,\n  #          size=3.5,\n  #          family=\"Roboto Condensed\",angle=0,\n  #          color=\"black\",\n  #          label=\"#30DayCharChallenge 2022 day6 - Physical DataSource: ourworldindata.org | DataViz: Federica Gazzelloni\") +\n  # \n  # these values can be retrieved with: density(df1$proportion) + adjustments\n  # summary(df1$proportion)\n  annotate(\"point\", x=41.4,y=4.5e-03,size=3) +\n  annotate(\"point\", x=94.00,y=18e-03,size=3) +\n  \n  annotate(\"text\",x=42.4,y=3e-03,label=\"41.4%\",\n           size=7,\n           family=\"Roboto Condensed\") +\n  annotate(\"text\", x=94.00,y=16e-03,label=\"94%\",\n           size=7,\n           family=\"Roboto Condensed\") +\n  \n  # extra point\n  annotate(\"point\", x=67.80,y=1.83e-02,size=3) +\n  annotate(\"text\", x=67.80,y=2e-02,label=\"67.80%\",\n           size=7,\n           family=\"Roboto Condensed\") +\n\n  annotate(\"point\", x=86.6,y=3.1e-02,size=3) +\n  annotate(\"text\", x=82,y=3.1e-02,label=\"86.6%\",\n           size=7,\n           family=\"Roboto Condensed\") +\n  \n  # annotate(\"text\", x=50,y=3.1e-02,\n  #          label=\":\\n69 Countries around the World\",\n  #          size=7,\n  #          family=\"Roboto Condensed\") +\n  # \n  geom_richtext(aes( x = 70 , y = 0.002),\n                size=8, family=\"Roboto Condensed\",\n                label=\"Protect Me with Love and Care\",\n                fill = NA, label.color = NA) +\n  \n# bounds of the text\n  # annotate(\"point\", x=41.4,y=8e-03) +\n  # annotate(\"point\", x=86.72,y=3.2e-02,color=\"green\") + # (3.2e-02 - 8e-03)/63\n\n  geom_richtext(aes( x = 52 , y = 0.03),\n                size=10, family=\"Roboto Condensed\",\n                fill = NA, label.color = NA,\n                label=\"Violence against children\") +\n  geom_richtext(aes( x = 55 , y = 0.028),\n               size=10, family=\"Roboto Condensed\",\n               label=\"from 2008 to 2020\",\n               fill = NA, label.color = NA) +\n \n  \n  geom_richtext(aes( x = 55 , y = 0.024),\n                size=5, family=\"Roboto Condensed\",\n                label=\"Proportion of children aged 1-14 years<br>who experienced physical punishment<br>and or psychological aggression<br>by caregivers in last month\",\n                fill = NA, label.color = NA)+\n  scale_fill_manual(values=met.brewer(\"Morgenstern\", 6)) +\n  scale_x_continuous(breaks = seq(41.4,94,8.6)) +\n  scale_y_continuous(expand = c(0.001,0.0001)) +\n  labs(caption=\"#30DayCharChallenge 2022 day6 - Physical \\nDataSource: Data from multiple sources compiled by the UN & ourworldindata.org \\n DataViz: Federica Gazzelloni\") +\n  theme_void() +\n  theme(plot.background = element_rect(fill=met.brewer(\"Morgenstern\", 1),\n                                       color=met.brewer(\"Morgenstern\", 1)),\n        panel.background = element_rect(fill=met.brewer(\"Morgenstern\", 1),\n                                        color=met.brewer(\"Morgenstern\", 1),\n                                        size=0),\n        plot.margin = margin(0,0,0,0),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        # axis.text.x = element_text(color=\"black\",vjust = 0,family=\"Roboto Condensed\"),\n        # axis.text.y = element_blank(),\n        # axis.ticks.x = element_line(size=2),\n        # axis.line.x = element_line(size=1,\n        #                            arrow = arrow(type='closed', length = unit(5,'pt'))),\n        # axis.ticks.y = element_blank(),\n        # axis.title.y = element_blank(),\n        # axis.title.x = element_blank(),\n        plot.caption = element_text(size = 9,\n                                    family=\"Roboto Condensed\",hjust = 0.5),\n        plot.caption.position = \"panel\",\n        legend.position = \"none\") \n\n\nggsave(\"day7_physical3.png\",\n       width = 9,\n      height =  8,\n       dpi = 320)\n\n\ndev.off()\n\ndf1 %>% count(year)\n  filter(!code==\"\") %>%\n  ggplot(aes(x=factor(year),y=entity))+\n  geom_hex(aes(fill=entity)) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "chartchallenges/cases2022/posts2022/day25_trend/day25_trend.html",
    "href": "chartchallenges/cases2022/posts2022/day25_trend/day25_trend.html",
    "title": "Trend",
    "section": "",
    "text": "Source:\n\nAll PaleoTemps - Wikipedia: http://gergs.net/all_palaeotemps-2/\nNasa temperature: https://climate.nasa.gov/vital-signs/global-temperature/\n\n\nlibrary(tidyverse)\n\n\ndf <- read.csv(\"https://data.giss.nasa.gov/gistemp/graphs/graph_data/Global_Mean_Estimates_based_on_Land_and_Ocean_Data/graph.txt\",\n         header = F,\n         sep = \"\", \n         dec = \".\",\n         skip=5,\n         col.names=c(\"year\",\"avg\",\"lowess\"))\n\ndf%>%summary\n\n\ndf%>%\n  filter(year==2020)\n\n\nggplot(df,aes(x=year,y=avg)) +\n  geom_line(color=\"grey70\",alpha=0.7,size=1) +\n  geom_point(shape=21,stroke=1,color=\"grey70\",fill=\"white\")+\n  geom_line(aes(y=lowess),inherit.aes = T,color=\"black\",size=0.8)+\n  geom_point(x=2020,y=0.94,size=3,color=\"red\")+\n  scale_x_continuous(breaks=seq(1880,2021,20),expand=c(0,0.05))+\n  scale_y_continuous(expand=c(0,0),\n                     limits=c(-0.5,1.5),\n                     sec.axis = dup_axis())+\n  labs(title=\"GLOBAL LAND-OCEAN TEMPERATURE INDEX\",\n       subtitle = \"Data source: NASA's Goddard Institute for Space Studies (GISS).\\nCredit: NASA/GISS\\n\\n\",\n       caption=\"\\n#30DayChartChallenge 2022 #Day25 - Trend\\nDataViz: Federica Gazzelloni | Twitter: @fgazzelloni\",\n       x=\"YEAR\",y=\"Temperature Anomaly (C)\\n\")+\n  theme_linedraw()+\n  theme(text = element_text(color=\"grey60\"),\n        plot.caption = element_text(hjust=0,color=\"grey40\"),\n        plot.caption.position = \"plot\",\n        plot.title = element_text(color=\"#c15a4f\",face=\"bold\",size=17),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_text(color=\"grey40\",size=13,vjust=-2),\n        panel.border = element_rect(fill=NA,size=0.5,color=\"#e2e2e2\"),\n        panel.grid.major = element_line(color=\"grey60\",size=0.3),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        axis.title.x = element_text(color=\"grey40\",hjust=0.45,vjust=-1.5),\n        axis.text.x = element_text(size=11.5,color=\"grey30\",vjust=-0.5),\n        axis.text.y.left = element_text(size=11.5,color=\"grey30\"),\n        axis.text.y.right = element_blank(),\n        axis.title.y.left = element_text(color=\"grey40\"),\n        axis.title.y.right = element_blank(),\n        axis.line.y.right  = element_line(color = 'white'),\n        axis.ticks = element_blank(),\n        plot.margin = margin(20,20,10,20,unit = \"pt\"))+\n  # double rects-----\n  annotate(\"rect\", xmin = 1881.5, xmax = 1884.5, \n           ymin = 1.3, ymax = 1.4,\n           alpha = .9,color=\"grey70\",size=0.9,fill=\"grey70\") +\n  # grey square\n  annotate(\"rect\", xmin = 1881.5, xmax = 1884.5, \n           ymin = 1.3, ymax = 1.4,size=0.3,\n           alpha = .9,color=\"white\",fill=\"grey70\") +\n  \n  annotate(\"rect\", xmin = 1881.5, xmax = 1884.5, \n           ymin = 1.13, ymax = 1.23,\n           alpha = .9,color=\"grey70\",size=0.9,fill=\"grey70\")+\n  # black square\n  annotate(\"rect\", xmin = 1881.5, xmax = 1884.5, \n           ymin = 1.13, ymax = 1.23,\n           alpha = .9,color=\"white\",size=0.3,fill=\"black\")+\n  \n\n  # legend labels\n  annotate(\"label\",x=1897.46,y=1.35,\n           label=\"Annual mean\", size=5,\n           label.padding = unit(0.05, \"lines\"), \n           label.size = NA) +\n  annotate(\"label\",x=1902,y=1.18,\n           label=\"Lowess smoothing\",size=5,\n           label.size = NA,\n           label.padding = unit(0.05, \"lines\"))\n\n\nggsave(\"test.png\",\n       dpi=320,\n       width = 8,\n       height = 5)\n\n\nSPECIAL PALEOTEMPS———-\n\nAll_palaeotemps <- readxl::read_excel(\"/Users/federica/Documents/R/R_general_resources/EDA/30DayChartChallenge/data/Edition_2022/day25_trend/All_palaeotemps.xlsx\", \n    sheet = \"Data compilation\", skip = 2)\n\n\ndf1 <- All_palaeotemps%>%\n  janitor::clean_names()%>%\n  select(age1=age_my_1,\n         temp1=royer_veizer_x_2_0,\n         temp2=royer_veizer_co2_from_proxies_x_2_0,\n         low,high,\n         age2=age_my_8,\n         t_anomaly=t_anomaly_13)\n\ndf2 <- All_palaeotemps%>%\n  janitor::clean_names()%>%\n  select(age1=age_my_1,\n         temp1=royer_veizer_x_2_0,\n         temp2=royer_veizer_co2_from_proxies_x_2_0,\n         low,high,\n         age2=age_my_8,\n         t_anomaly=t_anomaly_13)%>%\n  pivot_longer(cols = c(age1,age2),names_to=\"ages\",values_to=\"age_val\")%>%\n  pivot_longer(cols=c(temp1,temp2,low,high,t_anomaly),names_to=\"temps\",values_to=\"temp_val\")\n  \n\ndf1\n\n\nggplot(df2,aes(x=(age_val),y=temp_val,group=factor(temps),color=factor(temps)))+\n  geom_line()+\n  scale_x_reverse()\n\n\n# df1$royer_veizer_x_2_0[is.na(df1$royer_veizer_x_2_0)]<-0\n\nggplot(df1,aes(x=age1,y=low))+\n  #geom_point()+\n  #geom_smooth(size=0.01)+\n  geom_line(inherit.aes = T,\n            size=0.5,\n            #alpha=0.5,\n            color=\"gold\")+\n  #geom_line(aes(x=age_my_1-10,y=low+2),\n  #         inherit.aes = T,\n  #         size=0.5,\n  #         #alpha=0.5,\n  #         color=\"gold\")+\n  geom_ribbon(aes(xmin=age1,\n                  xmax=age1,\n                  ymin=low,\n                 ymax=low+3),\n              fill=\"gold\")+\n # geom_ribbon(aes(xmin=age_my_1,\n #                 xmax=age_my_1-10,\n #                 ymin=low,\n #                 ymax=low+2))+\n  # geom_line(aes(y=high),\n  #           inherit.aes = T,\n  #           size=1,\n  #           alpha=0.5,\n  #           color=\"orange\")+\n    geom_line(aes(y=temp1),\n            inherit.aes = T,\n            size=0.8,\n            color=\"red\")+\n  geom_line(aes(y=temp2),\n            inherit.aes = T,\n            color=\"black\",\n            size=0.8,\n            linetype=\"dashed\")+\n  geom_hline(aes(yintercept=0))+\n  scale_x_reverse(breaks=c(500,400,300,200,100))+\n  geom_line(aes(x=age2,y=t_anomaly),color=\"darkgreen\")+\n  theme_bw()"
  },
  {
    "objectID": "contributor-docs/call-for-contributions.html",
    "href": "contributor-docs/call-for-contributions.html",
    "title": "Call for Contributions",
    "section": "",
    "text": "Your participation, valuable suggestions, and constructive feedback are warmly welcomed and highly appreciated."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to this data visualization website, where I am proudly spotlight the my contributions of our #R4DS community to the #TidyTuesday, #30DayChartChallenge, and #30DayMapChallenge contributions spanning 2021, 2022, and 2023.\nMy name is Federica Gazzelloni, and I am a passionate data enthusiast and a skilled storyteller who believes in the power of data visualization to communicate complex insights. With a keen eye for detail and a knack for making data accessible, I curated this unique collection of visualizations that tell stories beyond the numbers. Committed to sharing expertise for helping others to unlock the potential of data visualization, stay tuned for more exciting updates and insights as we continue this journey of discovery together."
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w23_Survivor_TV_Show/w23_Survivor_TV_Show.html",
    "href": "tidytuesday/cases2021/posts2021/w23_Survivor_TV_Show/w23_Survivor_TV_Show.html",
    "title": "Survivors",
    "section": "",
    "text": "TidyTuesdat Week 23\n\n# Survivor TV Show \n# survivoR Package\n# https://github.com/doehm/survivoR\n\n# http://gradientdescending.com/survivor-data-from-the-tv-series-in-r/\n\n\n# install.packages(\"survivoR\")\n\n\n# source of inspiration: \n# https://github.com/TIvanDijk/TidyTuesday/blob/main/Week%2023/survivors.R\n# https://cran.r-project.org/web/packages/ggtext/vignettes/plotting_text.html\n\nlibrary(survivoR)\n\nlibrary(tidytuesdayR)\ntuesdata <- tidytuesdayR::tt_load(2021, week = 23)\n\nchallenges <- tuesdata$challenges\nhead(challenges);dim(challenges)\nviewers <- tuesdata$viewers\nhead(viewers);dim(viewers)\njury_votes <- tuesdata$jury_votes\ncastaways <- tuesdata$castaways\nsummary <- tuesdata$summary\nhead(summary);dim(summary)\n\n#########################\n\n\nhead(castaways);dim(castaways)\n\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(extrafont)\nlibrary(patchwork)\nlibrary(ggtext)\nlibrary(forcats)\nlibrary(ggrepel)\nlibrary(showtext)\nlibrary(cowplot)\nlibrary(magick)\n# fonts()\n\nfont_add_google(\"Roboto\", \"roboto\")\nfont_add_google(\"Roboto Condensed\", \"roboto condensed\")\n\n\n##############################################\n\nlabels <-\n  tibble(\n    labels = c(\n      \"**The 4 Cognitive Functions dealing with '*How Processing Information*'**\",\n      \"Extroverted Sensing = ESTP, ESFP, ISTP, and ISFP                   \",\n      \"Introverted Sensing = ISTJ, ISFJ, ESTJ, and ESFJ                   \",\n      \"Extroverted Intuition = ENTP, ENFP, INTP, and INFP                 \",\n      \"Introverted Intuition = INTJ, INFJ, ENTJ, and ENFJ                 \"\n      ),\n    x = rep(3.5, 5),\n    y = c(0.8,0.7,0.6,0.5,0.4)#rep(1, 5)\n    )\n\npersonality_codes <-ggplot(labels, aes(x, y)) +\n  annotate(\"text\", x = 3, y = 1.45,\n           label = \"Survivor personality code explained\",\n           size = 14,color=\"#A91727\",\n           fontface = \"bold\",\n           family =  \"Roboto Condensed\" ) +\n  geom_text(aes(x=2.8,y=1,family= \"Roboto Condensed\" ),\n            label=\"The Myers-Briggs Personality Type Indicator is a personality classification system that breaks personalities into 16 different categories. \\nEach personality type has specific preferences in how they 1.) perceive the world and how they 2.) make decisions\",\n            color = 'black', size = 4,face=\"bold\")+\n  geom_richtext(aes(label = labels,family= \"Roboto Condensed\"),\n                label.color = NA,\n                vjust = 0.8,hjust=0.2,color=\"#A91727\",size=4,fill=NA) +\n  annotate(geom = \"curve\", x = 1.8, y = 0.6, xend = 2.5, yend = 0.75, curvature = -.2, arrow = arrow(length = unit(2, \"mm\")))+\n  annotate(geom = \"rect\",xmin=0.2,ymin=0.35,xmax =1.8 ,ymax =0.81, color=\"#FEED01\",fill=\"#FEED01\")+\n  annotate(geom = \"text\",x=1,y=0.6,\n           label=\"Each personality type has four cognitive functions:\\n1. dominant\\n2. auxiliary or secondary\\n3. tertiary\\n4. inferior or least developed\",\n           size = 3,color=\"black\",\n           family =  \"Roboto Condensed\")+\n  annotate(\"text\",x=1,y=0.25,\n           label=\"Each of the 16 personality types will have a unique combination of 4 out of 8 cognitive functions\",\n           size = 3,color=\"black\",\n           family =  \"Roboto Condensed\")+\n  scale_x_continuous(limits = c(0, 6.1)) +\n  scale_y_continuous(limits =  c(0.2, 1.5)) +\n  labs(title=\"Survivor (American TV series)\")+\n  theme_void()+\n  theme(plot.title = element_text(hjust=1,vjust=-0.5,face=\"bold\",family = \"Roboto Condensed\"),\n        plot.background = element_rect(fill = \"#EFCC24\"),\n        panel.border = element_blank(),\n        plot.margin = unit(c(1,1,0,1), \"cm\"))\n\n\npersonality_plot <- castaways%>%\n  group_by(personality_type)%>%\n  summarize(avg_age=mean(age),n=n())%>%\n  ungroup()%>%\n  arrange(desc(n))%>%\n  drop_na()%>%\n  ggplot(aes(x=reorder(round(avg_age),avg_age),y=n,\n             color=personality_type,fill=personality_type))+\n  geom_col()+\n  geom_label(aes(y=n,label=paste(personality_type),fill=personality_type),\n            #direction = \"y\",\n            color=\"white\",\n            position= position_stack(vjust=0.5))+\n  scale_fill_survivor(12)+\n  scale_colour_survivor(12)+#8\n  labs(title=\"Personality type by Age group\",\n       x=\"Survivor's Age\",y=\"Group(n)\",\n       fill=\"Personality Type\",color=\"\",\n       caption = \"Viz @fgazzelloni Source: TidyTuesday week 23 & Survivor TV Show, more info @Daniel's Oehm's Website\")+\n  guides(color=FALSE)+\n theme_base()+\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill=\"#EFCC24\"),\n    plot.title = element_text(color=\"#784937\",family=\"Roboto Condensed\"),\n    plot.caption = element_text(color=\"#784937\",family=\"Roboto Condensed\",size=9,face=\"bold\"),\n    panel.background = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(),\n    axis.title = element_text(family=\"Roboto Condensed\"))\n\n\n\np<-personality_codes / personality_plot\n\n\nimg <- image_read(\"hex-torch.png\")\n\n# Set the canvas where you are going to draw the plot and the image\nfinal <-ggdraw() +\n  # Draw the plot in the canvas setting the x and y positions, which go from 0,0\n  # (lower left corner) to 1,1 (upper right corner) and set the width and height of\n  # the plot. It's advisable that x + width = 1 and y + height = 1, to avoid clipping \n  # the plot\n  draw_plot(p,x = 0, y = 0, width = 1, height = 1) +\n  # Draw image in the canvas using the same concept as for the plot. Might need to \n  # play with the x, y, width and height values to obtain the desired result\n  draw_image(img,x = -0.85, y = 0.8, width = 1.85, height = 0.2)\n\n\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w23\",\"w23_survivor.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"w23_survivor.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"w23_survivor.png\",\n            format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w42_Global_Seafood/w42_Global_Seafood.html",
    "href": "tidytuesday/cases2021/posts2021/w42_Global_Seafood/w42_Global_Seafood.html",
    "title": "Global Seafood",
    "section": "",
    "text": "WEEK42 SEAFOOD\n\n# Load library and data\nlibrary(tidyverse)\n\nfarmed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/aquaculture-farmed-fish-production.csv')\ncaptured_vs_farmed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/capture-fisheries-vs-aquaculture.csv')\ncaptured <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/capture-fishery-production.csv')\nconsumption <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/fish-and-seafood-consumption-per-capita.csv')\nstock <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/fish-stocks-within-sustainable-levels.csv')\nfishery <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/global-fishery-catch-by-sector.csv')\nproduction <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/seafood-and-fish-production-thousand-tonnes.csv')\n\n# make one dataframe \ndf <- farmed %>%\n  full_join(captured_vs_farmed,by=c(\"Entity\",\"Code\",\"Year\",\"Aquaculture production (metric tons)\")) %>%\n  full_join(captured,by=c(\"Entity\",\"Code\",\"Year\",\"Capture fisheries production (metric tons)\")) %>%\n  full_join(consumption,by=c(\"Entity\",\"Code\",\"Year\")) %>%\n  full_join(stock,by=c(\"Entity\",\"Code\",\"Year\")) %>%\n  full_join(fishery,by=c(\"Entity\",\"Code\",\"Year\")) %>%\n  full_join(production,by=c(\"Entity\",\"Code\",\"Year\")) %>%\n  janitor::clean_names()\n\nnames(df);dim(df)\nDataExplorer::profile_missing(df)\n\n\n# set the dataset for the first plot \ndf_group1 <- df %>%\n  filter(is.na(code)) %>%\n  select(-code) %>%\n  filter(str_detect(entity,\"income\")) %>%\n  pivot_longer(cols = 3:19,names_to = \"names\",values_to = \"values\") %>%\n  mutate(values = ifelse(is.na(values),0,values)) %>%\n  filter(values > 0) %>% \n  mutate(entity = gsub(\"excluding high income\",\"*\",entity)) %>% #count(entity)\n  mutate(entity = factor(entity, levels = c('High income','Upper middle income','Middle income',\n                                          'Lower middle income','Low & middle income','Low income',\n                                          'Europe & Central Asia (*)','Latin America & Caribbean (*)',\n                                          'East Asia & Pacific (*)','Middle East & North Africa (*)','Sub-Saharan Africa (*)'))) \n\n\n# choose the color palette  \n# RColorBrewer::brewer.pal.info\n# set the text options \nlibrary(showtext)\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\nfont_add_google(\"Share Tech Mono\", \"techmono\")\n   \n\n# make the first plot: a facet_plot of the World Continents by income level\nfacet_plot <-  ggplot(data = df_group1, aes(x = factor(year), y = values/100000000,group = names,color = names)) +\n  geom_line(size = 1.3) +\n  guides(color = guide_legend(title = \"Production tons sc-%\",ncol = 1,title.position = \"top\", title.hjust = 0.5)) +\n  scale_x_discrete(breaks = seq(1960,2018,10)) +\n  scale_y_continuous(labels = scales::percent) +\n  scale_color_manual(limits = c(\"aquaculture_production_metric_tons\",\"capture_fisheries_production_metric_tons\"),\n                     labels = c(\"aquaculture_production_metric_tons\" = \"Aquaculture\",\n                                \"capture_fisheries_production_metric_tons\" = \"Capture Fisheries\"),\n                     values = RColorBrewer::brewer.pal(2,\"Reds\")) +\n  facet_wrap(vars(entity),scales = \"free\",nrow = 2) +\n  labs(subtitle = \" \", caption = \" \") +\n  ggthemes::theme_fivethirtyeight() +\n  theme(text = element_text(family = \"techmono\",color = \"#FFF8DC\",face = \"bold\"),\n        legend.position = c(0.92,0.3),\n        legend.title = element_text(face = \"bold\",size = 14),\n        legend.box.background = element_blank(),\n        legend.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        legend.key = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        legend.text = element_text(size = 9),\n        strip.text = element_text(size = 9,face = \"bold\"),\n        strip.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_line(size = 0.2),\n        plot.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        panel.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        plot.title = element_text(face = \"bold\",size = 30),\n        plot.margin = margin(0,0,0,0,unit = \"pt\")) \n\n\n\n#-------------\n# seafood supply time-series plot of all countries and selected countries of seafood supply kg per capita FAO yr 2020\n\n\n# data to use in the second plot for the first geom_line for all countries (in grey)\ndf_group2 <- df %>% \n  filter(!is.na(code)) %>%\n  pivot_longer(cols = 14:20,names_to = \"livestock\",values_to = \"livestock_commodity\") %>%\n  select(-4,-5) %>%\n  mutate(livestock = gsub(\"commodity_balances_livestock_and_fish_primary_equivalent_\",\"\",livestock),\n         livestock = gsub(\"_production_5510_tonnes\",\"\",livestock),\n         livestock = gsub(\"[0-9]\",\"\",livestock),\n         livestock = gsub(\"_\",\"\",livestock)) %>%\n  pivot_longer(cols = 5:6,names_to = \"share_of_fish\",values_to = \"fish_stocks\") %>%\n  mutate(share_of_fish = recode(share_of_fish,\n                                share_of_fish_stocks_that_are_overexploited = \"overexploited\",\n                                share_of_fish_stocks_within_biologically_sustainable_levels_fao_2020 = \"sustainable\")) %>%\n  pivot_longer(cols = c(5,7),names_to = \"commercial\",values_to = \"scale_commercial\") %>%\n  mutate(commercial = recode(commercial,\n                             artisanal_small_scale_commercial = \"artisanal\",\n                             industrial_large_scale_commercial = \"industrial\")) %>%\n  rename(seafood_supply = fish_seafood_food_supply_quantity_kg_capita_yr_fao_2020)\n\n\ndf_group2[is.na(df_group2)] <- 0\n\ndf_group2 <- df_group2 %>% \n  filter(seafood_supply > 0) %>% \n  select(year,entity,seafood_supply)\n\n\n\n# data to use in the second geom_line for selected countries\ndf_group3 <- df_group2 %>%\n  filter(entity %in% c(\"Iceland\",\"Maldives\",\"Lesotho\",\"Brazil\",'Sri Lanka',\"Malaysia\",\"Chile\",\"Tanzania\",\"Japan\")) \n\n\n\n# make the second plot: time series of all countries and selected countries of seafood supply kg per capita FAO yr 2020\n seafood_plot <- ggplot() +\n  geom_line(data = df_group2, \n            aes(x = factor(year),y = (seafood_supply),group = entity),color = \"grey75\",size = 0.2) +\n  geom_line(data = df_group3 ,\n            aes(x = factor(year),y = (seafood_supply),group = entity,color = entity),size = 1.2,\n            key_glyph = \"timeseries\") +\n  scale_x_discrete(breaks = seq(1960,2018,5), expand = expansion(add = 0.5)) +\n  scale_y_log10(labels = scales::comma_format()) +\n  scale_color_manual(values = RColorBrewer::brewer.pal(9,\"Set1\")) +\n  guides(color = guide_legend(title = \"Selected Countries seafood production kg per capita FAO yr 2020\",\n                              nrow = 1,title.position = \"top\", title.hjust = 0.5,title.vjust = 0.5)) +\n  labs(x = \"Years\",y = \"Values in log scale\",\n       title = \" \",\n       subtitle = \" \") +\n  ggthemes::theme_fivethirtyeight() +\n  theme(text = element_text(family = \"techmono\",color = \"#FFF8DC\",face = \"bold\"),\n        axis.title.x = element_text(vjust = 0.5,face = \"bold\"),\n        axis.title.y = element_text(vjust = 0.5,face = \"bold\"),\n        plot.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        panel.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\"),\n        panel.grid.major.x = element_line(size = 0.2,linetype = \"dashed\"),\n        legend.background = element_blank(),\n        legend.text = element_text(size = 14),\n        legend.position = \"top\",\n        legend.title = element_text(face = \"bold\",size = 16),\n        legend.key = element_blank(),\n        plot.title = element_text(face = \"bold\",size = 30),\n        plot.margin = margin(0,0,0,0,unit = \"pt\"))\n\n\n# make one plot\nlibrary(patchwork)  \nplot <- (seafood_plot / facet_plot ) \n  #theme_update(plot.background = element_rect(fill=\"#009ACD\",color=\"#009ACD\"),\n               #panel.background = element_rect(fill=\"#009ACD\",color=\"#009ACD\"),\n               #plot.margin = margin(0,0,0,0,unit = \"pt\"))\n\n\n# load the libraries for final touches\nrequire(ggpubr)\n\n# ggarrange from {ggpubr} frames the plot to make side annotations\ngraphics <- ggpubr::ggarrange(plot) \n\nfinal_plot <- ggpubr::annotate_figure(graphics,\n                              top = text_grob(\"Global Seafood Supply in 182 countries \\n(1960 - 2018)\",\n                                              color = c(\"#FFF8DC\"), face = \"bold\", size = 34,\n                                              family = \"techmono\",vjust = 0.8),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: OurWorldinData.org - TidyTuesday week42\",\n                                                 color = \"#FFF8DC\",family = \"techmono\",\n                                                 hjust = 0.5, vjust = 0.5, x = 0.5, face = \"bold.italic\", size = 14),\n                              left = text_grob(\" \", color = c(\"#778899\"), rot = 90,size = 12),\n                              right = text_grob(bquote(\" \"), color = c(\"#778899\"),rot = 90,size = 10),\n                              fig.lab = \"\", fig.lab.face = \"bold.italic\",fig.lab.size = 8,\n                              fig.lab.pos = \"bottom.right\"\n)\n\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label = \"(*) excluding high income\",\n         x = 0.91, y = 0.1,colour = \"#FFF8DC\",size = 4,family = \"techmono\",fontface = \"bold\") \n  \n  \nlibrary(cowplot)  \nlibrary(ggimage)\nlibrary(magick)\n\n# add the images for the legend keys \n\nimgOWD <- image_read(here::here(\"w42/owd.png\"))\nimgfish <- image_read(here::here(\"w42/fish.png\"))\nimgtt <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\n# ggdraw from {cowplot} draw the plot for setting the background colors of the side annotations\nfinal <- cowplot::ggdraw(final_plot) + \n  draw_image(imgfish, x = 0.03, y = 0.44,width = 0.07) +\n  draw_image(imgfish, x = 0.08, y = 0.37,width = 0.05) +\n  draw_image(imgfish, x = 0.12, y = 0.32,width = 0.03) +\n  draw_image(imgtt, x = 0.85, y = 0.45,width = 0.12) +\n  draw_image(imgOWD, x = 0.9, y = -0.46,width = 0.06) +\n  theme(plot.background = element_rect(fill = \"#009ACD\",color = \"#009ACD\")) \n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w42/w42_seafood.png\"),\n              res = 320, width = 16, height = 14, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w14_Makeup_Shades/w14_Makeup_Shades.html",
    "href": "tidytuesday/cases2021/posts2021/w14_Makeup_Shades/w14_Makeup_Shades.html",
    "title": "The Pudding",
    "section": "",
    "text": "Load libraries\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(extrafont)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ragg)\nlibrary(rmarkdown)\nlibrary(hrbrthemes)\nlibrary(wesanderson)\n\nLoad Datasets\n\nsephora <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/sephora.csv')\nulta <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/ulta.csv')\n\nallCategories <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/allCategories.csv')\nallShades <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/allShades.csv')\nallNumbers <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-30/allNumbers.csv')\n\nLoad fonts\n\nloadfonts()\nfont_add_google(name = \"Amatic SC\", family = \"amatic-sc\")\nfont_add_google(\"Cedarville Cursive\", \"cedarville\")\n\nshowtext_auto(enable = TRUE)\n\npalette <- c(\"#FF0000\",\"#FF7070\",\"#F09200\",\"#FFBF1F\",\"#00A08A\",\"#2989A3\",\"#5BBCD6\",\"#A475D9\")\n\nManipulation of data\n\nsephora_sub<-sephora%>%\n  mutate(shop=rep(\"sephora\",length(brand)),\n         brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name)\n\nulta_sub<-ulta%>%\n  mutate(shop=rep(\"ulta\",length(brand)),\n         brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name)\n\n\nshops<-rbind(sephora_sub,ulta_sub)\n\nManipulation of data\n\nallCategories_sub<-allCategories%>%\n  mutate(brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  separate_rows(categories, convert = TRUE) %>%\n  mutate(categories = fct_reorder(categories, lightness))  %>%\n  select(brand,product,name,hex,lightness,categories)\n\nallShades_sub<-allShades%>%\n  mutate(brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name,hex,hue,sat,lightness)\n\nallNumbers_sub<-allNumbers%>%\n  mutate(brand=tolower(brand),\n         product=tolower(product),\n         name=tolower(name))%>%\n  select(brand,product,name,hex,lightness,lightToDark)\n\n################### Full Join of the datasets ##############\n\nmake_up<-full_join(allCategories_sub,\n                   allShades_sub,by.x=hex,by.y=lightness)\nmake_up<-full_join(make_up,\n                   allNumbers_sub,by.x=hex,by.y=lightness)\n\nmake_up_sub<-make_up%>%\n  select(brand,name,hex,hue,sat,lightness)%>%\n  filter(!is.na(hue))%>%\n  arrange(hex)\n\nCounting uniqueness\n\nplyr::count(make_up$brand); #107\nplyr::count(make_up$product);#328\nplyr::count(make_up$name);#1,317\nplyr::count(allCategories_sub$categories)#17\n\nSelection of data for making plots\n\nmy_companies <- sort(c(\"shiseido\",\"maybelline\",\"mac\",\"lancôme\",\"l'oréal\",\"guerlain\",\"estée lauder\",\"clinique\",\"benefit cosmetics\"), decreasing = TRUE)\n\nmake_up_for_plot <- make_up_sub %>%\n  filter(brand %in% my_companies) %>%\n  select(brand, name,hex, hue,sat,lightness) %>%\n  mutate(brand=as.factor(brand)) %>%\n  group_by(brand) %>%\n  mutate(mean_lightness = mean(lightness)) %>%\n  ungroup() %>%\n  mutate(brand = fct_reorder(brand, mean_lightness))\n\n\nlibrary(ggfx)\nlibrary(gridExtra)\n\n\nplot1<-make_up_for_plot%>%\n  ggplot(aes(brand,lightness,col=hex)) + \n  with_blur(\n    geom_boxplot(size=5,show.legend = FALSE)) + \n  geom_jitter(width = 0.15,height = 0.0,size = 1) + \n  scale_colour_identity() + \n  coord_polar() + \n  labs(title = \"Shades of makeup from The Pudding\",\n       subtitle = \"All collected from the US versions of Sephora and Ulta’s websites\",\n       caption = \"107 brands, 328 products, 317 names and 17 categories\",\n       tag = \"The Pudding\",\n       x = \"Lightness\",\n       y = \"Brands)\",\n       colour = \"white\")+\n  theme_void(base_family = \"cedarville\") + \n  theme(plot.background = element_rect(fill = \"black\",color=\"black\"),\n        axis.text.x = element_text(size = 30, vjust = 2,color=\"white\"),\n        plot.title = element_text(size = 56,hjust = 0.5,color=\"white\"),\n        plot.subtitle = element_text(size = 46,hjust = 0.5,color=\"white\"),\n        plot.caption = element_text(size = 36,hjust = 0.5, \n                                    margin = margin(t = 5, b = 10),color=\"white\"),\n        plot.tag = element_text()\n        )\n          \n\nplot2<-make_up_for_plot%>%\n  ggplot(aes(brand,lightness,col=hex)) + \n  with_blur(\n    geom_point(show.legend = FALSE)) + \n  geom_jitter(width = 0.15,height = 0.0,size = 2) + \n  scale_colour_identity() +\n  coord_polar(direction=1) +\n  theme_void() + \n  theme(plot.background = element_rect(fill = \"black\")) + \n  facet_wrap(vars(brand))\n\nFinal plot\n\nlibrary(ggimage)\nrequire(magick)\n\n\nmain_plot <- plot1 + plot2\n\nfinal <- main_plot + \n  labs(title = \"Makeup - The naked truth\",\n       subtitle = \"combination for naming their shades\",\n       caption = \"TidyTuesday W14 - The Pudding - Viz - @fgazzelloni\") + \n  scale_fill_manual(values = palette,\n                    guide = guide_legend(title = NULL)) + \n  theme_void(base_family = \"cedarville\") + \n  theme(plot.background = element_rect(fill = \"#FCEBDA\",color = NA),\n        strip.text.x = element_text(color = NA),\n        axis.text.x = element_text(size = 20, vjust = 2),\n        panel.grid.major = element_line(size = 0.03, linetype = 'solid',colour = \"black\"),\n        plot.margin = margin(10, 10, 5, 10),\n        plot.title = element_text(size = 56,hjust = 0.5, margin = margin(t = 5, b = 10)),\n        plot.subtitle = element_text(size = 40,hjust = 0.5),\n        plot.caption = element_text(hjust = 0.5, size = 26))\n\nSave the plot in a .png file\n\nragg::agg_png(here::here(\"w14_the_pudding\", \"w14_the_pudding.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\nRead the image, attach the Tidytuesday logo and save it\n\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nThe_Pudding_plot <- image_read(here::here(\"w14_the_pudding/w14_the_pudding.png\"))\n\nattached_logo <- image_composite(The_Pudding_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"southeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, \n            path = \"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w14_the_pudding/w14_the_pudding.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w15_Global_deforestation/w15_Global_deforestation.html",
    "href": "tidytuesday/cases2021/posts2021/w15_Global_deforestation/w15_Global_deforestation.html",
    "title": "Global deforestation",
    "section": "",
    "text": "Libraries, fonts and colors\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(extrafont)\n# fonts()\n\nmy_col <- \"#720000\"\nmy_col2 <- \"#9900bfbf\"\n\nLoad data and wrangling\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 15)\n\nforest <- tuesdata$forest\nforest_area <- tuesdata$forest_area\nbrazil_loss <- tuesdata$brazil_loss\nsoybean_use <- tuesdata$soybean_use\nvegetable_oil <- tuesdata$vegetable_oil\n\n\nbrazil_loss <- tuesdata$brazil_loss\n\nslopes <- brazil_loss%>%\n  pivot_longer(cols=c(5,6,11,12,13),names_to=\"Predictors\",values_to=\"values\")\n\nslopes <- slopes %>% select(year,fire,Predictors,values)\n\nSlope plot\n\nslope_plot <- ggplot(slopes, aes(x = fire, y = values, color = Predictors) ) +\n  geom_point() +\n  geom_smooth(method = \"lm\", alpha = .15, aes(fill = Predictors)) +\n  theme_minimal() +\n  \n  scale_y_continuous(name=\"Predictors\", labels = scales::label_number_si(), limits=c(0,92000)) +\n  scale_x_continuous(name=\"Fire (hectares)\", labels = scales::label_number_si(), limits=c(26000,537000)) +\n  \n  \n  annotate(\"curve\", x = 400000, xend = 450000, y = 50000, yend = 75000, \n           color = \"red\", curvature = -0.5) +\n  annotate(\"text\", x=500000, y= 75000, label=\"driving down: tree plantations \\ndriving up: natural disturbances\", colour=my_col) +\n  \n  labs(x=\"Fire\",\n       y=\"Predictors\",\n       title = \"Brazil Fire due to predictors\",\n       subtitle = \"flooding, mining, disturbances, plantations, infrastructures...\",\n       caption = \"Viz @fgazzelloni | DataSource: @ourworldindata | Brazil Fire predictors\") +\n  \n  theme(legend.position = \"bottom\",\n        legend.text = element_text(family=\"Trebuchet MS\"),\n        legend.background = element_blank(),\n        legend.title = element_text(family=\"Trebuchet MS\"),\n        legend.key = element_rect(fill = \"white\", colour = NA),\n        \n        plot.title = element_text(family=\"Trebuchet MS\", size =32,face=\"bold\", hjust=0 ),\n        plot.subtitle = element_text(family=\"Trebuchet MS\", size =20),\n        \n        axis.title = element_text(family=\"Trebuchet MS\", size =12),\n        \n        strip.background = element_rect(colour = \"black\", fill = \"white\"),\n        strip.text.x = element_text(colour = \"white\", face = \"bold\"),\n        panel.spacing = unit(5, \"lines\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"azure\", color = NA),\n        panel.background = element_rect(fill = \"azure\")\n       ) +\n  annotate(\"text\", x = 280000, y = 80000, \n           family=\"Trebuchet MS\",\n           label = \"researchers at *Global Forest Watch* estimate that global deforestation \\nin 2019 was around 5.4 million hectares. \\n95% of this was in the tropics 33.12% in Brazil\")\n\nSave final plot\n\nragg::agg_png(here::here(\"w15\", \"tidytuesday_slope.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nslope_plot\n\ndev.off()\n\nRead the image, attach the Tidytuesday logo and save it\n\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\ntidy_slope <- image_read(\"tidytuesday_slope.png\")\n\nattached_logo <- image_composite(tidy_slope, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_slope.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w29_Scooby_Doo/w29_Scooby_Doo.html",
    "href": "tidytuesday/cases2021/posts2021/w29_Scooby_Doo/w29_Scooby_Doo.html",
    "title": "Scoobydoo",
    "section": "",
    "text": "scooby doo font\nfonts\n\n\nlibrary(gistfo)\nlibrary(carbonate)\n\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(ggtext)\nlibrary(viridis)\nlibrary(extrafont)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ggpubr)\nlibrary(png)\nlibrary(grid)\nlibrary(magick)\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 29)\nscoobydoo <- tuesdata$scoobydoo\nhead(scoobydoo)\n\n\nscoobydoo_long <- scoobydoo%>%\nselect(-imdb,-engagement,-run_time,-trap_work_first,-c(if_it_wasnt_for:door_gag),\n-c(jeepers:rooby_rooby_roo),-c(fred_va:scooby_va),-c(split_up:set_a_trap))%>%\nmutate(caught_other=as.character(caught_other),\ncaught_not=as.character(caught_not),\nunmask_other=as.character(unmask_other))%>%\npivot_longer(cols=contains(\"caught\"),names_to=\"caught\",values_to=\"caught_value\")%>%\npivot_longer(cols=contains(\"captured\"),names_to=\"captured\",values_to=\"captured_value\")%>%\npivot_longer(cols=contains(\"unmask\"),names_to=\"unmask\",values_to=\"unmask_value\")%>%\npivot_longer(cols=contains(\"snack\"),names_to=\"snack\",values_to=\"snack_value\")%>%\npivot_longer(cols=c(non_suspect,arrested),names_to=\"investigate\",values_to=\"investigate_value\")%>%\npivot_longer(cols=c(batman:blue_falcon),names_to=\"super_hero\",values_to=\"super_hero_value\")\n\n\nhead(scoobydoo_long)\n\n\nnames(scoobydoo_long)\n\n\ndim(scoobydoo_long)\n\n\nscoobydoo_long %>% \n  select(date_aired,caught,caught_value) %>%\n  mutate(year=lubridate::year(date_aired)) %>%\n  filter(caught_value==\"TRUE\") %>%\n  ggplot(aes(x=(year/1969)/100000,y=factor(caught),group=caught)) +\n  geom_col(aes(fill=caught)) +\n  guides(fill=\"none\") + \n  labs(title=\"Who caught more within the years?\") +\n  theme_fivethirtyeight() +\n  theme(axis.text.x = element_text(angle=0))\n\nPlotting final:\n\nscooby_family <- \"Scooby Doo\"\n\ncolors <- c(\"Fred\"=\"#0000CD\",\n            \"Scooby\"=\"#8B3E2F\",\n            \"Shaggy\"=\"#228B22\",\n            \"Daphnie\"=\"#FFD700\",\n            \"Velma\"=\"#FF7F00\")\n\ncaught <- scoobydoo_long %>% \n  select(date_aired,caught,caught_value) %>%\n  mutate(year=lubridate::year(date_aired)) %>%\n  filter(caught_value==\"TRUE\",year==\"1969\") %>%\n  ggplot(aes(caught,fill=caught)) +\n  geom_histogram(aes(y = after_stat(count / max(count))),stat=\"count\") + \n  scale_y_continuous(labels = scales::percent) +\n  scale_x_discrete(labels=c(\"Fred\",\"Scooby\", \"Shaggy\")) +\n  scale_fill_manual(values=c(\"#0000CD\",\"#8B3E2F\",\"#228B22\")) +\n  guides(fill=\"none\") +\n  labs(title=\"Caught\",y=\"\") +\n  theme_fivethirtyeight() +\n  theme(text=element_text(size=16,  family=scooby_family),\n        axis.text.x = element_text(size=10),\n        axis.title.x = element_blank())\n\ncaptured <- scoobydoo_long %>% \n  select(date_aired,captured,captured_value) %>%\n  mutate(year=lubridate::year(date_aired)) %>%\n  filter(captured_value==\"TRUE\",year==\"1969\") %>%\n  ggplot(aes(captured,fill=captured)) +\n  geom_histogram(aes(y = after_stat(count / max(count))),stat=\"count\") + \n  scale_y_continuous(labels = scales::percent) +\n  scale_x_discrete(labels=c(\"Daphnie\",\"Fred\",\"Scooby\", \"Shaggy\",\"Velma\")) +\n  scale_fill_manual(values=c(\"#FFD700\", \"#0000CD\",\"#8B3E2F\",\"#228B22\",\"#FF7F00\")) +\n  guides(fill=\"none\") +\n  labs(title=\"Captured\") +\n  theme_fivethirtyeight() +\n  theme(text=element_text(size=16,  family=scooby_family),\n        axis.text.x = element_text(size=10),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank())\n\nunmask <- scoobydoo_long %>% \n  select(date_aired,unmask,unmask_value) %>%\n  mutate(year=lubridate::year(date_aired)) %>%\n  filter(unmask_value==\"TRUE\",year==\"1969\") %>%\n  ggplot(aes(unmask,fill=unmask)) +\n  geom_histogram(aes(y = after_stat(count / max(count))),stat=\"count\") + \n  scale_y_continuous(labels = scales::percent) +\n  scale_x_discrete(labels=c(\"Fred\",\"Scooby\", \"Shaggy\",\"Velma\")) +\n  scale_fill_manual(values=c(\"#0000CD\",\"#8B3E2F\",\"#228B22\",\"#FF7F00\")) +\n  guides(fill=\"none\") +\n  labs(title=\"Unmask\",y=\"\") +\n  theme_fivethirtyeight() +\n  theme(text=element_text(size=16,  family=scooby_family),\n        axis.text.x = element_text(size=10),\n        axis.title.x = element_blank() )\n\nsnack <- scoobydoo_long %>% \n  select(date_aired,snack,snack_value) %>%\n  mutate(year=lubridate::year(date_aired)) %>%\n  filter(snack_value==\"TRUE\",year==\"1969\") %>%\n  ggplot(aes(snack,fill=snack)) +\n  geom_histogram(aes(y = after_stat(count / max(count))),stat=\"count\") + \n  scale_y_continuous(labels = scales::percent) +\n  scale_x_discrete(labels=c(\"Daphnie\",\"Fred\",\"Shaggy\",\"Velma\")) +\n   scale_fill_manual(values=c(\"#FFD700\", \"#0000CD\",\"#228B22\",\"#FF7F00\")) +\n  guides(fill=\"none\") +\n  labs(title=\"Snack\") +\n  theme_fivethirtyeight() +\n  theme(text=element_text(size=16,  family=scooby_family),\n        axis.text.x = element_text(size=10),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank())\n\nrequire(patchwork)\naction_plot <- caught+captured+unmask+snack\n\nimg <- png::readPNG('all5.png')\n\n lealeft <- ggplot()+\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#87cf80\")) + \n  background_image(img) +\n  action_plot \n \n\ngraphics <- ggarrange(lealeft) \n\nfinal_plot <- annotate_figure(graphics,\n               top = text_grob(\"Scooby-Doo 1969: Percent of \", \n                               color = c(\"#778899\"), face = \"bold\", size = 35,family=\"Scooby Doo\"),\n               bottom = text_grob(\"DataViz: @fgazzelloni DataSource: \\n TidyTuesday week29, Scooby-Doo,Kaggle,ScoobyPedia\",\n                                  color = \"#6C7B8B\",family=\"Scooby Doo\",\n                                  hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n               left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size=10),\n               right = text_grob(bquote(\"\"), color=c(\"#778899\"),rot = 90,size=10),\n               fig.lab = \"TidyTuesday week29\", fig.lab.face = \"bold.italic\",fig.lab.size=8,\n               fig.lab.pos=\"bottom.right\"\n)\n\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label=\"Scooby-Doo and Guess Who?\",x = 0.24, y = 0.87, \n           colour = \"#BF3EFF\", size = 9,family=scooby_family) +\n  annotate(geom = \"text\", label=\"Velma\",x = 0.10, y = 0.71, colour = \"#FF7F00\", size = 7,family=scooby_family) +\n  annotate(geom = \"text\", label=\"Shaggy\",x = 0.13, y = 0.82, colour = \"#228B22\", size = 7,family=scooby_family) +\n  annotate(geom = \"text\", label=\"Scooby\",x = 0.23, y = 0.67, colour = \"#8B3E2F\", size = 7,family=scooby_family) +\n  annotate(geom = \"text\", label=\"Fred\",x = 0.33, y = 0.78, colour = \"#0000CD\", size = 7,family=scooby_family) +\nannotate(geom = \"text\", label=\"Daphnie\",x = 0.40, y = 0.72, colour = \"#FFD700\", size = 7,family=scooby_family) \n\n  \nrequire(cowplot)\n\nimg2 <- png::readPNG('car_all5.png')\nimg3 <- png::readPNG('scooby.png')\n\n\nfinal <- ggdraw() +\n  draw_image(img2,  x = 0.4, y = 0.41, scale = .2) +\n  draw_image(img3,  x = -0.41, y = 0.45, scale = .15) +\n  draw_plot(final_plot)\nfinal\n\nSaving:\n\nragg::agg_png(here::here(\"w29\", \"w29_scoobidoo.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w25_WEB_Du_Bois_and_Juneteenth/w25_WEB_Du_Bois_and_Juneteenth.html",
    "href": "tidytuesday/cases2021/posts2021/w25_WEB_Du_Bois_and_Juneteenth/w25_WEB_Du_Bois_and_Juneteenth.html",
    "title": "Dubois Challenge",
    "section": "",
    "text": "Week 25\nDataSource: https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-06-15/readme.md\nDubois Style https://github.com/ajstarks/dubois-data-portraits/blob/master/dubois-style.pdf\nAdd fonts https://cran.rstudio.com/web/packages/showtext/vignettes/introduction.html https://fonts.google.com/specimen/Shadows+Into+Light#standard-styles\ninspirations https://github.com/ivoruaro/tidytuesday/blob/main/2021w25.R https://github.com/nrennie/tidytuesday/blob/main/2021/15-06-2021/15062021.R https://gist.github.com/clauswilke/783e1a8ee3233775c9c3b8bfe531e28a\nimage background https://www.pngwing.com/en/free-png-zfvci\n\n\nload libraries\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(DataExplorer)\nlibrary(ggtext)\nlibrary(DataEditR)\nlibrary(tidyquant)\n\n\nlibrary(RColorBrewer)\n\nlibrary(maps)\nlibrary(rnaturalearth)\nlibrary(sp)\nlibrary(sf)\n\nlibrary(extrafont)\n#library(ggrepel)\n\n#library(viridis)\nlibrary(hrbrthemes)\n\nlibrary(ggimage)\nlibrary(patchwork)\nlibrary(cowplot)\n\nlibrary(ggpattern)\n\n\n# add font -------------------------------------------------\nlibrary(showtext)\nfont_add_google(\"Shadows Into Light\",\"shadow_into_light\")\nfont_add_google(\"Schoolbell\", \"bell\")\nshowtext_auto(enable = TRUE)\n\n# load data ----------------------------------------\ntuesdata <- tidytuesdayR::tt_load('2021-06-15')\n\ntweets <- tuesdata$tweets\n\n# check data -----------------------\nhead(tweets)\n\nprofile_missing(tweets)\n\n# tidying -----------------------------------\ndf_tweets<-tweets%>%\n  arrange(-like_count,-followers)%>%\n  drop_na()\n\nplyr::count(df_tweets$location)\n\n# load map data ------------------------------\n\n# world data full \nworld_full <- ne_countries(scale = \"medium\", returnclass = \"sf\")\nworld_data <- filter(world_full, continent != \"Antarctica\")\n\n# world lat&long\nworld<-map_data(map = \"world\") \n\nmy_world_data<- world%>%\n  full_join(world_data, by = c(\"region\"=\"name\"))%>%\n  select(long,lat,group,order,region,region_wb)\n\n# states lat&long\nstates <- map_data(\"state\")\n\n# choose palette colors ----------------------\n# dubois palette taken from Dubois Style webpage\ndubois_pal <- c(\"black\" = \"#000000\", \n                \"brown\" = \"#654321\", \n                \"tan\" = \"#d2b48c\",\n                \"gold\" = \"#ffd700\",\n                \"pink\"=\"#ffc0cb\",\n                \"red\"=\"#dc143c\",\n                \"green\"=\"#00aa00\",\n                \"blue\"=\"#4682b4\")\n\npalette<-c(\"#000000\",\"#654321\",\"#d2b48c\",\"#ffd700\",\"#ffc0cb\",\"#dc143c\",\"#00aa00\",\"#4682b4\")\n\nstates_palette<-colorRampPalette(c(\"#654321\",\"#d2b48c\",\"#ffd700\",\"#ffc0cb\",\"#dc143c\",\"#00aa00\",\"#4682b4\"))(15537)\n\npal_west <- c(\"#000000\", \"#4682b4\")\npal_est <- c(\"#000000\", \"#4682b4\")\n\npal_fill<-c(\"background\"=\"#e8d8c3\",\n            \"water\"=\"#d9c09e\",\n            \"europe\"=\"#ffd700\",\n            \"canada\"=\"#654921\",\n            \"southAmerica\"=\"#1b1209\")\n\n\n# make the plot ---------------------\n\nworld_west <-ggplot() +\n  geom_polygon(data=my_world_data,aes(x=long,y=lat,group=group,fill=region_wb)) + scale_fill_manual(values=palette) + guides(fill=FALSE)+\n  \n  geom_polygon(data = states,aes(x = long, y = lat, group = group),fill=states_palette,color=\"#000000\",size=0.3)+#scale_fill_manual(values=states_palette) +guides(fill=FALSE)+\n  \n  geom_path(data=world,aes(x=long,y=lat,group=group),size=0.3) +\n  \n  geom_point(data = df_tweets,mapping=aes(x=long, y=lat, size=followers, shape=verified,color=verified),alpha=0.7) +\n  \n  geom_path(data = df_tweets,mapping=aes(x=long, y=lat,group=location),size=0.3,color=\"#654321\") + \n  \n  coord_map(\"ortho\", orientation = c(3.849945, -103.525750, 0)) + \n  \n  #geom_text(data = df_tweets,aes(x=long, y=lat, group=location, label=location), check_overlap = TRUE,color=\"#654321\",size = 3, hjust=0.5, vjust=-1)+\n  \n  #geom_curve(data = df_tweets,aes(x=long, y=lat, group=location, label=location))+\n  \n # annotate(\"text\", x = 0, y = 0,family= \"shadow_into_light\",label=\"World map of \",color = \"#ffc0cb\", size = 4,fontface=\"bold\") +\n  \n  scale_size(guide=FALSE, range = c(1,9)) +\n  scale_shape(guide=FALSE) +\n  scale_color_manual(values = pal_west, aesthetics = c(\"colour\")) +\n  labs(x=\"\",y=\"\",color=\"Verified accounts\") +\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#e8d8c3\", colour = \"#e8d8c3\"),#   element_rect(color=\"#e8d8c3\",fill=\"#e8d8c3\"),\n        panel.background = element_rect(color=\"#e8d8c3\",fill=\"#d9c09e\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"bottom\",\n        legend.text = element_text(family=\"shadow_into_light\"),\n        legend.title = element_text(family=\"shadow_into_light\"))\n\n# world_west\n\n\n\nworld_est <-ggplot() +\n  geom_polygon(data=my_world_data,aes(x=long,y=lat,group=group,fill=region_wb)) + scale_fill_manual(values=palette) + guides(fill=FALSE)+\n  \n  geom_polygon(data = states,aes(x = long, y = lat, group = group),fill=states_palette,color=\"#000000\",size=0.3)+#scale_fill_manual(values=states_palette) +guides(fill=FALSE)+\n  \n  geom_path(data=world,aes(x=long,y=lat,group=group),size=0.3) +\n  \n  geom_point(data = df_tweets,mapping=aes(x=long, y=lat, size=followers, shape=verified,color=verified),alpha=0.7) +\n  \n  geom_path(data = df_tweets,mapping=aes(x=long, y=lat,group=location),size=0.3,color=\"#654321\") + \n  \n  coord_map(\"ortho\", orientation = c(19.982182, 46.595135, 0)) +\n  \n  #geom_text(data = df_tweets,aes(x=long, y=lat, group=location, label=location), check_overlap = TRUE,color=\"#654321\",size = 3, hjust=0, vjust=-1)+\n  \n  #geom_curve(data = df_tweets,aes(x=long, y=lat, group=location, label=location))+\n  \n  #annotate(\"text\", x = 0, y = 0,family= \"shadow_into_light\",label=\"Tweets sized by followers\",color = \"#ffc0cb\", size = 4,fontface=\"bold\") +\n \n  scale_size(guide=FALSE, range = c(1,9)) +\n  scale_shape(guide=FALSE)+\n  scale_color_manual(values = pal_est,aesthetics = c(\"colour\"))+ #, \"fill\")) +\n  labs(caption=\"Viz @fgazzelloni DataSource: WEB Du Bois and Juneteenth #DuBoisChallenge tweets The Intercept #TidyTuesday 2021/25\",\n       x=\"\",y=\"\",color=\"\") +\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#e8d8c3\", colour = \"#e8d8c3\"),\n        panel.background = element_rect(color=\"#e8d8c3\",fill=\"#d9c09e\"),\n        plot.caption = element_text(color=\"#00aa00\",face=\"bold\",family=\"shadow_into_light\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"none\")\n\n# world_est\n\n\nmain_plot <- (world_west + world_est)\n\nplot <-plot_grid(main_plot)\n\nfinal <- plot +\n  theme(plot.background = element_rect(fill = \"#e8d8c3\", colour = \"#e8d8c3\"),\n        plot.margin = margin(t=0,r=1,b=0,l=1,unit=\"pt\"))\n\n\ntitle<- ggplot()+\n  labs(title=\"\\n\\n#DuBoisChalllenge 2021 Twitter Metrics\",\n       subtitle=\"Tweets by number of followers (verified or not) and by selected locations\\n\\nINSPIRED BY:\\n\",\n       tag=\"\\nTHE GEORGIA NEGRO \\nA SOCIAL STUDY \\nby W.E. BURGHARDT\\n\\n\") +\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#e8d8c3\", colour = \"#e8d8c3\"),# element_rect(color=\"#e8d8c3\",fill=\"#e8d8c3\"),\n        panel.background = element_rect(color=\"#e8d8c3\",fill=\"#e8d8c3\"),\n        plot.title = element_text(color=\"#000000\",size=20,face=\"bold\",family=\"bell\",hjust = 0.5,vjust = 0),\n        plot.subtitle = element_text(color=\"#000000\",size=12,face=\"bold\",family=\"bell\",vjust = 0,hjust = 0.5),\n        plot.tag = element_text(color=\"#000000\",size=12,face=\"bold\"),\n        plot.tag.position = \"bottom\",\n        plot.margin = margin(t=0,r=1,b=1,l=1,unit=\"pt\"))\n\ncaption<- ggplot()+\n  labs(title=\"ROUTES OF THE TWEETS BY LOCATIONS\",\n       subtitle=\"THIS CASE IS DEVOTED TO A SERIES OF CHARTS, MAPS AND OTHER DEVICES DESIGNED TO ILLUSTRATE \\nTHE DEVELOPMENT OF THE AMERICA NEGRO IN A SIGLE TYPICAL STATE OF THE UNITED STATES\",\n       tag=\"THE PROBLEM OF THE 20^th CENTURY IS THE PROBLEM OF THE COLOR-LINE\\n\") +\n  theme_void()+\n  theme(plot.background = element_rect(fill = \"#e8d8c3\", colour = \"#e8d8c3\"),# element_rect(color=\"#e8d8c3\",fill=\"#e8d8c3\"),\n        panel.background = element_rect(color=\"#e8d8c3\",fill=\"#e8d8c3\"),\n        plot.title = element_text(color=\"#000000\",size=11,face=\"bold\",family=\"bell\",hjust=0.5),\n        plot.subtitle = element_text(color=\"#000000\",size=10,face=\"bold\",family=\"bell\",vjust = -1,hjust = 0.5),\n        plot.tag = element_text(color=\"#000000\",size=8,face=\"bold\"),\n        plot.tag.position = \"bottom\",\n        plot.margin = margin(t=0,r=1,b=0,l=1,unit=\"pt\"))\n  \n\n        \nfinal_plot<-plot_grid(title,final,caption,ncol=1,rel_heights = c(0.4,1,0.15))\n\n\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w25\",\"w25_tweets.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"w25/w25_tweets.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"w25/w25_tweets.png\",\n            format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w24_Great_Lakes_Fish/w24_Great_Lakes_Fish.html",
    "href": "tidytuesday/cases2021/posts2021/w24_Great_Lakes_Fish/w24_Great_Lakes_Fish.html",
    "title": "Great Lakes Fish",
    "section": "",
    "text": "TidyTuesday week 24\nData Source: Great Lakes Fish, Great Lakes Database, Detroit Free Press database of all fish stocked from artificial propagation into the Great Lakes\nlibraries\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(hrbrthemes)\nlibrary(viridis)\nlibrary(forcats)\nlibrary(ggridges)\nlibrary(patchwork)\n\n# load data ##############################\ntuesdata <- tidytuesdayR::tt_load(2021, week = 24)\n\n\nstocked <- tuesdata$stocked\nfishing <- tuesdata$fishing\n\n# check #################################\nhead(stocked);dim(stocked)\nhead(fishing);dim(fishing)\n\nlibrary(DataExplorer)\nprofile_missing(fishing)\n\nfishing$grand_total[is.na(fishing$grand_total)]<-0\nfishing$values[is.na(fishing$values)]<-0\n\n# wrangling ###########################\nmy_df <- fishing%>%\n  arrange(year)%>%\n  mutate(\n    species=case_when(species==\"Amercian Eel\"~\"American Eel\",\n              species==\"Bullhead\"~\"Bullheads\",\n              species==\"Channel catfish\"~\"Channel Catfish\",\n              species==\"Cisco and chubs\"~\"Cisco and Chubs\",\n              species==\"Cisco and Chub\"~\"Cisco and Chubs\",\n              species==\"Crappie\"~\"Crappies\",\n              species==\"Drum\"~\"Freshwater Drum\",\n              species==\"Lake Trout - siscowet\"~\"Lake Trout\",\n              species==\"Pacific salmon\"~\"Pacific Salmon\",\n              species==\"White bass\"~\"White Bass\",\n              TRUE~species))\n\n\n# plotting #################################\n\nfig1 <- my_df %>%\n  filter(!str_detect(species,\"and\")) %>%\n  arrange(year)%>%\n  mutate(text = fct_reorder(species, year )) %>%\n  ggplot( aes(y=text, x=year,fill=species)) +\n  geom_density_ridges_gradient(scale = 2, rel_min_height = 0.01) +\n  scale_fill_viridis(discrete=TRUE) +\n  scale_x_continuous(breaks=seq(1867, 2015, 8))+\n  labs(title=\"All Fisheries from the Great Lakes Fishery Commission\",\n       subtitle=\"from 1867 to 2015\",\n       tag = \"Fig1\")+\n  xlab(\"\") +\n  ylab(\"Assigned Probability (%)\")+\n  theme_ft_rc()+\n  theme(axis.text.x = element_text(angle=90),\n    legend.position=\"none\",\n    plot.title.position = \"plot\",\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.spacing = unit(0.1, \"lines\"),\n    strip.text.x = element_text(size = 8))\n\n\nfig2 <- my_df%>%\n  filter(!str_detect(species,\"and\")) %>%\n  group_by(year,species)%>%\n  summarize(total_number=sum(grand_total),total_production=sum(values))%>%\n  ungroup()%>%\n  arrange(total_number)%>%\n  filter(!total_number==0)%>%\n  mutate(percent=total_production/total_number)%>%\n  filter(!percent>1)%>%\n  arrange(year,percent)%>%\n  filter(str_detect(species,(\"Lake\")))%>%\n  ggplot(aes(x=year,y=reorder(species,-total_production),group=species,color=species))+\n  geom_line(aes(size=total_production))+\n  labs(title=\"Lake Fisheries by Year\",\n       subtitle=\"sized by total value of production\",\n       tag=\"Fig2\",\n       size=\"Total value of production in $\",\n       x=\"\",\n       y=\"Species\"\n       #color=\"Species\",#size=\"Percent\",\n       #caption=\"Viz @fgazzelloni, DataSource: TidyTuesday Week24 - Great Lakes Fish,Great Lakes Database,Detroit Free Press\"\n       )+\n scale_color_viridis(discrete = TRUE)+\n  guides(color = FALSE)+\n   scale_x_continuous(breaks=seq(1867, 2015, 18))+\n  theme_ft_rc()+\n  theme(axis.text.x = element_text(angle=0),\n        legend.position = \"top\",\n        panel.grid = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank())\n\nfig3 <- my_df%>%\n  filter(!str_detect(species,\"and\")) %>%\n  arrange(year)%>%\n  filter(str_detect(species,(\"Lake\")))%>%\n  ggplot(aes(x=species, y=values, fill=species)) +\n  geom_boxplot() +\n  scale_fill_viridis(discrete = TRUE, alpha=0.6) +\n  geom_jitter(aes(colour=values), size=0.3, alpha=0.5) +\n  scale_colour_viridis_c()+\n  labs(tag = \"Fig3\",\n       x=\"\",y=\"Values\",\n       caption=\"Viz @fgazzelloni, DataSource: TidyTuesday Week24 - Great Lakes Fish,Great Lakes Database,Detroit Free Press\")+\n  theme_ft_rc() +\n  theme(\n    legend.position=\"none\",\n    panel.background = element_blank(),\n    panel.grid = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank())\n\n\n\n\n\n\n\nfinal <- fig1+(fig2/fig3)\n\nfinal\n\n\n\n\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w24\",\"w24_fisheries.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"w24/w24_fisheries.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"w24/w24_fisheries.png\",\n            format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w21_Ask_a_Manager_Salary_Survey/w21_Ask_a_Manager_Salary_Survey.html",
    "href": "tidytuesday/cases2021/posts2021/w21_Ask_a_Manager_Salary_Survey/w21_Ask_a_Manager_Salary_Survey.html",
    "title": "Ask a Manager Survey",
    "section": "",
    "text": "Ask a Manager Survey\n\nrm(list=ls())\n\nlibrary(tidyverse)\nlibrary(DataExplorer)\noptions(scipen=999)\n\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 21)\nsurvey <- tuesdata$survey\n\n\nhead(survey)\nprofile_missing(survey)\n\nmy_df<-survey%>%select(2,4,6,8,14,15)\n\n\narrange(plyr::count(my_df$currency),freq)\n\nmy_currency<-c(\"EUR\",\"GBP\",\"USD\")\n\ncountry_df<-data.frame(country_name=c(\"Europe\",\"UK\",\"USA\"),\n                       currency=c(\"EUR\",\"GBP\",\"USD\"))\n\nmy_df_curr<-my_df%>%\n  filter(currency%in%my_currency,annual_salary<3000000)%>%\n  inner_join(country_df,by=\"currency\")\n\nstr(my_df_curr)\nnames(my_df)\n\n\nmy_df_curr<-my_df_curr%>%\n  mutate(how_old_are_you=case_when(\n    how_old_are_you==\"65 or over\"~\"65+\",\n    how_old_are_you==\"under 18\"~\"<18\",\n    TRUE~how_old_are_you),\n    years_of_experience_in_field=case_when(\n      years_of_experience_in_field==\"1 year or less\"~\"0-1\",\n      years_of_experience_in_field==\"41 years or more\"~\"41+\",\n      TRUE~sub(\" years$\",\"\",years_of_experience_in_field)),\n    overall_years_of_professional_experience=case_when(\n      overall_years_of_professional_experience==\"1 year or less\"~\"0-1\",\n      overall_years_of_professional_experience==\"41 years or more\"~\"41+\",\n      TRUE~sub(\" years$\",\"\",overall_years_of_professional_experience)),\n    overall_years_of_professional_experience = as.factor(overall_years_of_professional_experience),\n    how_old_are_you = as.factor(how_old_are_you),\n    years_of_experience_in_field = as.factor(years_of_experience_in_field))%>%\n  arrange(desc(how_old_are_you))\n\n\nmy_df_curr<- my_df_curr%>%\n  mutate(years_of_experience_in_field=case_when(\n    TRUE~gsub(\" \",\"\",years_of_experience_in_field)),\n    overall_years_of_professional_experience=case_when(\n      TRUE~gsub(\" \",\"\",overall_years_of_professional_experience))\n  )\n\n\nnames(my_df_curr)<-c(\"age\",\"job_title\",\"annual_salary\",\"currency\" ,\"yr_prof_exp\",\"yr_exp\",\"country_name\")\n\n######### PLOTTING ####################\n\n\nlibrary(viridis)\nlibrary(hrbrthemes)\nlibrary(ggthemes)\n\nscr_df<-data.frame(country_name=c(\"Europe\",\"UK\",\"USA\"),\n                   scr=c(1/1.22,1/1.41,1))\n\nmy_df_curr<-my_df_curr%>%inner_join(scr_df,by=\"country_name\")%>%\n  mutate(salaryUSD=annual_salary*scr)\n\nlibrary(extrafont)\nfonts()\nleg_lab<-c(\"0-1\",\"2-4\",\"5-7\",\"8-10\",\"11-20\",\"21-30\",\"31-40\",\"40+\")\nnewcolors<-c(\"#004586\",\"#ffd320\",\"#314004\",\"#aecf00\",\"#ff420e\",\n             \"#579d1c\",\"#7e0021\",\"#83caff\")\n\n\nsurvey_plot<-ggplot(my_df_curr, aes(x=age, y=salaryUSD)) +\n  geom_line(aes(group=age))+\n  geom_point(aes(group=yr_exp,col=yr_exp),\n            alpha=0.5) +\n  geom_text(aes(label=job_title,size=salaryUSD),hjust = 0, nudge_x = 0.05,\n            check_overlap = TRUE,family=\"World of Water\") +\n  scale_y_continuous(labels = dollar_format(prefix=\"$\"), limits = c(0,NA))+\n  scale_color_manual(labels = leg_lab,values = newcolors)+\n  labs(title=\"Who is the Richest?\",\n       subtitle=\"Industry job title pyramid annual Salary(USD) by age - Ask a Manager Salary Survey \",\n       caption=\"Viz. @fgazzelloni | DataSource: Ask a Manager Salary Survey | TidyTuesday Week21\",\n       x=\"Age\", y=\"Salary(USD)\",\n       col=\"Years of experience in the field\",\n       size=\"\")+\n  scale_size(guide=FALSE)+\n  theme_calc() +\n  theme(plot.margin=unit(c(c(1, 1, 0.5, 0.5)), units=\"line\"),\n        legend.position = c(0.83,0.7),\n        #legend.justification = c(\"right\", \"top\"),\n        #legend.box.just = \"right\",\n        legend.margin = margin(6, 6, 6, 6),\n        legend.direction = \"horizontal\",\n        legend.title = element_text(family=\"World of Water\"),\n        legend.text = element_text(family=\"World of Water\"),\n        legend.background = element_rect(color = \"#4b1f6f\"),\n        plot.title = element_text(family=\"World of Water\",size=rel(4)),\n        plot.subtitle = element_text(family=\"World of Water\",size=20),\n        plot.caption = element_text(family=\"World of Water\",size=10,hjust = 0.5),\n        axis.title = element_text(family=\"World of Water\"),\n        axis.text = element_text(family=\"World of Water\"),\n        axis.line = element_line(size = 3, colour = \"grey80\"),\n        axis.ticks = element_line(size=2,color=\"#4b1f6f\"))\n\n\n\n################################################################################\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"tidytuesday_Ask_a_manager_survey.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nsurvey_plot\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"tidytuesday_Ask_a_manager_survey.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_Ask_a_manager_survey.png\",\n            format = \"png\") # save final plot\n\n\n\n##############################################################"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w22_Mario_Kart_World_Records/w22_Mario_Kart_World_Records.html",
    "href": "tidytuesday/cases2021/posts2021/w22_Mario_Kart_World_Records/w22_Mario_Kart_World_Records.html",
    "title": "Mario Kart World",
    "section": "",
    "text": "Mario Bross\n\n# https://mkwrs.com/\n# https://www.thegamer.com/mario-kart-64-speedrunner-is-the-first-to-hit-a-190000-trick-breaks-two-world-records-at-once/\n\n\nlibrary(ggcorrplot)\n\n\nlibrary(tidytuesdayR)\nlibrary(rtweet)\nlibrary(DataExplorer)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(viridis)\nlibrary(ggthemes)\nlibrary(extrafont)\nlibrary(hrbrthemes)\nlibrary(ggExtra)\nlibrary(ggtext)\nlibrary(ggrepel)\nlibrary(extrafont)\nlibrary(patchwork)\n# fonts()\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 22)\n\ndrivers <- tuesdata$drivers\nrecords <- tuesdata$records\n\ndriv_players<-plyr::count(drivers$player)\nplayers<-driv_players$x\n\nmy_df <- records%>%\n  arrange(player)%>%\n  filter(player%in%players)%>%\n  mutate(year=year(date))%>%\n  inner_join(drivers,by=c(\"player\",\"year\"))%>%\n  drop_na()\n\nsecond_plot\n\nlibrary(RColorBrewer)\ndisplay.brewer.all()\n\n\n\nplot<-ggplot(my_df,aes(x=date,y=records))+\n  geom_point(aes(group=track,color=system_played,size=record_duration),alpha=0.5)+\n  geom_smooth(color=\"purple\")+\n  scale_color_wsj()+\n  labs(title=\"How did the world records develop over time?\",\n       size=\"Record duration(days)\",\n       color=\"System played\")+\n  xlab(\"World record date(Year)\")+\n  ylab(\"Number of world records\")+\n  theme_wsj()+\n  theme(panel.background = element_blank(),\n        plot.background = element_blank(),\n        legend.title = element_text(size=12),\n        legend.background = element_blank(),\n        legend.key = element_rect(fill=NA),\n        legend.text = element_text(size=12,face=\"bold\"),\n        legend.box.margin = margin(6, 6, 6, 6),\n        plot.title.position = \"plot\",\n        plot.title = element_text(hjust=0,vjust=-1,size=28,color=\"darkblue\"),\n        axis.title = element_text(size=18,color=\"darkred\",face=\"bold\"),\n        panel.grid = element_line(color=\"white\"),\n        panel.grid.major.y = element_blank())\n\n\nplot<-ggMarginal(plot,\n           type=\"histogram\",color=\"blue\",xparams = list(bins=40),\n           fill = \"darkred\", yparams = list(bins=30))\n\n\n\nlabels <-\n  tibble(\n    labels = c(\n      \"<img src='super_mario_run_character_artwork.png'\n      +     width='120' /><br><b style='color:#d6182e'> </b><br><i style='color:#d6182e'> </i></b>\"),\n    x = 1:5,\n    y = rep(1, 5)\n    )\n\nlegend <-\n  ggplot(labels, aes(x, y)) +\n  geom_richtext(aes(label = labels),\n                fill = NA,\n                color = NA,\n                vjust = 0.5) +\n  annotate(\"text\", x = 3.5, y = 1.018,\n           label = \"Mario Kart World Records\",\n           size = 20,color=\"red\",\n           fontface = \"bold\",\n           family = \"Courier New\") +\n  scale_x_continuous(limits = c(0.6, 6.1)) +\n  scale_y_continuous(limits =  c(1, 1.02)) +\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#ebe046\"),\n        plot.margin = unit(c(1,1,0,1), \"cm\"))\n\ncaption <-\n  ggplot(data.frame(x = 1:2, y = 1:10)) +\n  labs(x = NULL, y = NULL,\n       caption = \"Viz @fgazzelloni| Source: Mario Kart World Records | TidyTuesday Week 22\")+\n  theme(line = element_blank(),\n        plot.caption = element_text(size=8, family=\"Courier New\",color=\"#460046\",face=\"bold\"),\n        panel.background = element_rect(fill = \"transparent\"),\n        plot.background = element_rect(fill = \"transparent\",color = \"transparent\"),\n        panel.border = element_rect(color = \"transparent\"),\n        axis.text = element_blank())\n\n\n \n\n###################### SAVING ############################\n\n\n\nfinal <- legend + plot  + caption + \n  plot_layout(ncol = 1,heights = c(0.3, 1, 0))\n\nragg::agg_png(here::here(\"w22\",\"w22_supermario.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"super_mario_w22.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"super_mario_w22.png\",\n            format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w52_Starbucks_drinks/w52_Starbucks_drinks.html",
    "href": "tidytuesday/cases2021/posts2021/w52_Starbucks_drinks/w52_Starbucks_drinks.html",
    "title": "Starbucks drinks",
    "section": "",
    "text": "library(tidyverse)\n\nstarbucks <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-21/starbucks.csv')\n\n\nhead(starbucks)\n\n\nmy_coffee<-starbucks%>%count(product_name,sort=T)%>%slice(1:10)%>%select(-n)%>%unlist()\n\n\n\nlibrary(extrafont)\nlibrary(showtext)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=110)\nlibrary(sysfonts)\nfont_add_google(name =\"Black Han Sans\" ,family = \"my_font\")\nfont_add_google(name =\"Odibee Sans\" ,family = \"my_font1\")\n\nfamily = \"my_font\"\nfamily1 = \"my_font1\"\n\n\nimage <- \"w52/cup.png\"\n\ndata<- starbucks%>%\n  mutate(trans_fat_g=as.numeric(trans_fat_g),fiber_g=as.numeric(fiber_g))%>%\n  select(-size,-milk,-serv_size_m_l)%>%\n  filter(product_name%in%my_coffee)%>%\n  arrange(product_name)%>%\n  mutate(product_name =fct_reorder(product_name,-calories)) %>%\n  group_by(product_name)%>%\n  summarise_all(.funs = mean)%>%\n  ungroup()%>%\n  tibble::column_to_rownames(\"product_name\")%>%\n  as.matrix()%>%\n  scale()%>%\n  as.data.frame()%>% \n  rownames_to_column()%>%\n  rename(product=rowname)%>%\n  mutate(product=as.factor(product))%>%\n  pivot_longer(cols=-product,names_to=\"names\",values_to=\"values\")%>%\n  mutate(names=gsub(\"_g|_mg\",\"\",names),\n         names=gsub(\"_\",\" \",names),\n         names=gsub(\"total \",\"\",names))%>%\n  mutate(names=ifelse(names==\"saturated fat\",yes = \"satur fat\",no = names))%>%\n  mutate(names=tools::toTitleCase(names),\n         values=round(values,5))%>%\n  mutate(img = image)%>%\n  group_by(product)%>%\n  mutate(values2 =ifelse(values==max(values),values,NA),\n         values3 =ifelse(values==min(values),values,NA))%>%\n  ungroup()%>%\n  mutate(imagemax=ifelse(!is.na(values2),img,NA),\n         imagemin=ifelse(!is.na(values3),img,NA))\n\nlibrary(RColorBrewer)\n  my_hmap<- data%>%\n    ggplot(mapping=aes(x=fct_reorder(names,values),y=fct_reorder(product,values),\n           fill=factor(values)))+\n  geom_tile(show.legend = F) +\n  ggimage::geom_image(aes(image=imagemax,scale=values),\n                      asp = 1.5, size = 0.1, by = \"width\") +\n  ggimage::geom_image(aes(image=imagemin,scale=values),\n                      asp = 1.5, size = 0.1, by = \"width\") +\n  labs(title=\" \")+\n  scale_fill_manual(values=colorRampPalette(brewer.pal(5, \"BrBG\"))(98))+\n  scale_color_manual(values=colorRampPalette(brewer.pal(5, \"BrBG\"))(98))+\n  theme_void()+\n  theme(text = element_text(family=family1,color=\"#F5F5F5\"),\n        axis.title = element_blank(),\n        axis.text.y = element_text(vjust=0,hjust=0.95,size=16),\n        axis.text.x = element_text(size=11),\n        plot.background = element_blank(),\n        panel.background = element_blank())\n  \n\n\n# build a nice legend\nlibrary(circlize)\ncol_fun = circlize::colorRamp2(c(0, 0.5, 1), c(\"#A6611A\", \"#F5F5F5\", \"#018571\"))\nlgd = ComplexHeatmap::Legend(at = c(0, 0.5, 1),\n                             labels = c(\"  Low\", \"\", \"  High\"),\n                             col_fun = col_fun, \n                             grid_width = unit(3.4, \"cm\"),\n                             labels_gp = gpar(col = \"#F5F5F5\", \n                                              fontsize=11,\n                                              fontface=\"bold\"))\n \nComplexHeatmap::draw(lgd)\ndev.off()\n\nlibrary(cowplot)\nlibrary(grid)\nleg<-grid.grabExpr(ComplexHeatmap::draw(lgd))\nlegend<-plot_grid(leg)\nclass(legend)\n\n# remove bg from pictures\n# https://www.remove.bg/upload\n\n # assemble all the pieces\n library(cowplot)\nfinal<- ggdraw()+\n  draw_image(image=\"w52/bg.jpg\",scale=1.5,x=0)+\n  draw_image(\"w52/title.png\",x=-0.05,y=0.35,scale=0.9)+\n  draw_plot(my_hmap,scale=0.83,x=0.05,y=-0.05)+\n  draw_label(\"STARBUCKS 10' COFFEE\",x=0.48,y=0.9,size=55,color=\"black\",\n             fontfamily = family,fontface = \"bold\")+\n  draw_image(\"w52/cup.png\",scale=0.5,x=-0.435,y=-0.25)+\n  draw_plot(legend,x=-0.422,y=-0.28)+\n  draw_label(\"STARBUCKS\",x=0.067,y=0.17,\n             size=9,color=\"black\",fontfamily = family)+\n  draw_label(\"DataSource: Starbucks Coffee Company | DataViz: Federica Gazzelloni\",\n             x=0.3,y=0.03,size=11,color=\"#F5F5F5\",\n             fontfamily = family1)+\n  draw_image(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\",\n             x=0.45,y=0.45,scale=0.09)\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w52/starbucks.png\"),\n              #res = 320, \n              width = 1200, \n              height = 675, \n              units = \"px\",\n              #pointsize = 12,\n              background = \"white\",\n              scaling = 1)\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w18_CEO_Departures/w18_CEO_Departures.html",
    "href": "tidytuesday/cases2021/posts2021/w18_CEO_Departures/w18_CEO_Departures.html",
    "title": "Ceo Departures",
    "section": "",
    "text": "Tidytuesday week 28——— & future day28 ————–\n\n# inspired by http://applied-r.com/plotting-forecast-data-objects-ggplot/\n\n\nlibrary(tidyverse)\nlibrary(tidytuesdayR)\nlibrary(DataExplorer)\nlibrary(lubridate)\nlibrary(tsibble)\nlibrary(ggrepel)\nlibrary(corrplot)\nlibrary(forecast)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ragg)\nlibrary(RColorBrewer)\n\n\n# load data ###############################\ndepartures <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-27/departures.csv')\n\n# check and wrangling #####################\nhead(departures)\nglimpse(departures)\nprofile_missing(departures)\n\n\ndf <- departures%>%\n  select(2,4,6,7,8,11,12,13)%>%\n  arrange(leftofc)%>%\n  mutate(diff=fyear_gone-fyear)%>%\n  drop_na()%>%\n  select(coname,exec_fullname,fyear,fyear_gone,diff,leftofc,departure_code,ceo_dismissal,max_tenure_ceodb)%>%\n  filter(abs(diff)<6)%>%filter(!diff<0)\n\nrange(df$fyear_gone)\n\n# first plot to see the pattern ###############\n# excluded raws with more than 6 years difference between fyear and fyear_gone\nggplot(df) + \n  geom_point(aes(x=factor(fyear),y=factor(fyear_gone),color=ifelse(abs(diff)<6 ,\"in bound\",\"out of bound\")) )+\n  labs(color=\"\")+\n  theme(axis.text.x = element_text(angle=90))\n  \n# selecting data for main plot ############################\ntot_dismissal <- df %>%\n  mutate(y_month=yearmonth(leftofc),month=month(leftofc))%>%\n  group_by(y_month,month)%>%\n  summarize(tot_dism=sum(ceo_dismissal),tot_posit=sum(max_tenure_ceodb))%>%\n  ungroup()\n\n\n# set the theme and modifications as it is needed --------------------\nlibrary(ggthemes)\n\n# theme for forecast data objects\ntheme.fxdat <- theme_gdocs() +\n  theme(plot.title = element_text(size = 25,color=\"grey45\"),\n        plot.subtitle = element_text(size = 11),\n        plot.caption = element_text(size = 9, hjust = 0, vjust = 0, colour = \"grey50\"),\n        axis.title.y = element_text(face = \"bold\", color = \"gray30\"),\n        axis.title.x = element_text(face = \"bold\", color = \"gray30\", vjust = -1),\n        axis.text.x = element_text(angle=90),\n        panel.background = element_rect(fill = \"grey95\", colour = \"grey75\"),\n        panel.border = element_rect(colour = \"grey75\"),\n        panel.grid.major.y = element_line(colour = \"white\"),\n        panel.grid.minor.y = element_line(colour = \"white\", linetype = \"dotted\"),\n        panel.grid.major.x = element_line(colour = \"white\"),\n        panel.grid.minor.x = element_line(colour = \"white\", linetype = \"dotted\"),\n        strip.background = element_rect(size = 1, fill = \"white\", colour = \"grey75\"),\n        strip.text.y = element_text(face = \"bold\"),\n        axis.line = element_line(colour = \"grey75\"),\n        legend.position = \"top\",\n        legend.box = \"horizontal\",\n        legend.box.just = \"bottom\")\n\ntot_dismissal$y_month[80]\ntot_dismissal$tot_dism+rnorm(tot_dismissal$tot_dism)[1]\n\n# plotting ########################################\nlibrary(zoo)\nset.seed(345)\nplot1 <- ggplot(tot_dismissal,aes(x=y_month,y=tot_dism+rnorm(tot_dism))) + \n  geom_point(aes(color=\"Number of dismissal\"),fill=\"black\")+\n  geom_line(aes(color=\"Dismissal Trend\"),size=0.2) +\n  geom_smooth(aes(color=\"Smoothed conditional means\"))+\n  geom_line(aes(y_month,rollmedian(tot_dism, k = 15, fill = NA, align = \"center\"),color=\"Rolling median\"),size=0.8)+\n  labs(x=\"Time(Year-Month)\",\n       y=\"Normalized total n. of dismissal\",\n       title=\"33 Years trend CEO Departures\",\n       subtitle=\"1988 - 2021\\n Rolling median, smooth variation line and trend\",\n       caption=\"\",\n       color=\"\"\n       )+\n  scale_color_brewer(palette = \"Dark2\")+\n  theme.fxdat \n\n\n\n# future ----------------------------\nx<-tot_dismissal$tot_dism\n\n# create time series data object (ts) using tot_dism\nres.gen <- ts(x, frequency = 12, start = c(1992, 6))\n\nxx<-tot_dismissal%>%\n  pivot_wider(names_from=\"month\",values_from=\"tot_dism\",values_fill=0)%>%select(-tot_posit,-y_month)\n\n########################\nfit.y <- tslm(res.gen ~ trend + season)\nfx.y <- forecast(fit.y, h = 17, level = c(80, 95, 99))\n\n\nsource(\"plot_fx.R\")\n\nplot2 <- plot_fx(fx.y,\n        PI = TRUE,\n        line.cols = NA,\n        shade.cols = NA,\n        show.gap = TRUE,\n        date.breaks = \"15 months\",\n        date.format = \"%b-%y\",\n        main.title = \"CEO Departures forecast\",\n        sub.title = \"Transformed 33 years trend in Linear trend with seasonal dummy variables\",\n        caption = \"Viz. @fgazzelloni | DataSource: Gentry et al. & investors.com | TidyTuesday week18\",\n        x.title = \"CEO Departures by Year and Month\",\n        y.title = \"Total numbers of CEO Departures\")\n\n\nfinal<-plot1+plot2\n\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w18\", \"tidytuesday_Departures.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################ \nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"W18/tidytuesday_Departures.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_Departures.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w48_Dr_Who/w48_Dr_Who.html",
    "href": "tidytuesday/cases2021/posts2021/w48_Dr_Who/w48_Dr_Who.html",
    "title": "Dr. Who",
    "section": "",
    "text": "rm(list=ls())\n\nlibrary(tidyverse)\nlibrary(\"datardis\")\n\ndirectors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-11-23/directors.csv')\nepisodes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-11-23/episodes.csv')\nwriters <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-11-23/writers.csv')\n\nmy_df <- directors%>%\n  full_join(episodes,by=\"story_number\")%>%\n  full_join(writers,by=\"story_number\")\n\n# my_df%>%head\n\nuk_viewers<- my_df$uk_viewers\nuk_viewers[is.na(uk_viewers)]<- 0\n\n\n# https://www.r-graph-gallery.com/59-nifty-graph.html\nmoxbuller = function(uk_viewers) {   \n  u = runif(uk_viewers)   \n  v = runif(uk_viewers)   \n  x = cos(2*pi*u)*sqrt(-2*log(v))  \n  y = sin(2*pi*v)*sqrt(-2*log(u))\n  r = list(x=x, y=y)\n  return(r) \n}\nr = moxbuller(5000) \n\n\n# https://github.com/coolbutuseless/threed\nlibrary(threed)\ncamera_to_world <- threed::look_at_matrix(eye = c(4, 2, 5), \n                                          at = c(0, 0, 0))\nobj <- threed::mesh3dobj$cube %>%\n  transform_by(invert_matrix(camera_to_world)) %>%\n  perspective_projection()\n\n\nplot<-  data.frame(r)%>%\n  ggplot(aes(x=x,y=y,z=0))+\n  geom_point(shape=\".\",col=\"blue\")+\n  geom_polygon(data=obj,aes(x = x*25, y = y*25, group = zorder,\n                            linetype = hidden,  size = hidden), #zorder the drawing order of the elements from back to front\n               fill = NA, colour = 'blue', size = 0.7,\n               show.legend = F) +\n  geom_rect(mapping=aes(xmin=-30,xmax=0.7,ymin=0.2,ymax=0.8),\n            fill=NA)+  \n  theme_void() +\n  theme(plot.background = element_rect(color=\"black\",\n                                       fill=\"black\"))\n \n\nlibrary(showtext)\n\n# Import fonts\nfont_add_google(\"Luckiest Guy\", \"Luckiest\")\nfont_add_google(\"Poiret One\", \"Poiret\")\nshowtext_auto()\nshowtext_opts(dpi = 320)\n\n\nplot2<-my_df%>%\nggplot(aes(x=uk_viewers,y=rating))+\n  geom_jitter(aes(color=duration),show.legend = T)+\n  geom_smooth()+\n  theme_void()+\n  labs(x=\"rating\",y=\"viewers\",color=\"\")+\n  scale_color_viridis_c()+\n  theme(plot.background = element_rect(color=NA,\n                                       fill=NA),\n        text = element_text(family=\"Luckiest\",color=\"blue\"),\n        legend.position = c(0.5,-0.4),\n        legend.direction = \"horizontal\",\n        legend.title = element_blank())\n\n\n\nmy_df%>%\n  mutate(year=lubridate::year(first_aired))%>%\n  group_by(year)%>%\n  summarize(tot_view=sum(uk_viewers))%>%\n  arrange(-tot_view)#,rating,director)%>%arrange(-uk_viewers,-rating)\n\n######################################\nlibrary(prophet)\ndf<-my_df%>%select(ds=first_aired,y=uk_viewers)\nm <-prophet(df)\nfuture <- prophet::make_future_dataframe(m, periods=365)\nforecast <- predict(m,future)\n\n#### PROPHET PLOT COMPONENTS ###############################################\nplot3<-prophet_plot_components(m, forecast)\n######################################\ntrend <- forecast%>%\n  ggplot(aes(x=ds,y=trend))+\n  geom_line(color=\"blue\")+\n  theme_void()+\n  labs(x=\"rating\",y=\"viewers\")+\n  theme(plot.background = element_rect(color=NA,\n                                       fill=NA),\n        text = element_text(family=\"Luckiest\",color=\"blue\"),\n        axis.text.x = element_text(color=\"blue\",family = \"Luckiest\"))\n######################################\ntrend\n######################################\nweekly<- forecast%>%\n  mutate(day=lubridate::wday(ds,label = T,abbr = F,\n                             week_start = getOption(\"lubridate.week.start\", 7),\n                             locale = Sys.getlocale(\"LC_TIME\")),\n         .after=ds) %>%\n  select(ds,day,weekly,yearly,trend) %>%\n  \n  ggplot(aes(x=day,y=weekly,group = 1))+\n  geom_line(color=\"blue\")+\n  #geom_text(aes(label=day),color=\"blue\",family=\"Luckiest\")+\n  theme_void()+\n  labs(x=\"rating\",y=\"viewers\")+\n  theme(plot.background = element_rect(color=NA,\n                                       fill=NA),\n        text = element_text(family=\"Luckiest\",color=\"blue\"),\n        axis.text.x = element_text(color=\"blue\",\n                                   family = \"Luckiest\",\n                                   angle=15,size=8))\n######################################\nweekly # m$changepoints\n######################################\n\nlibrary(patchwork)\nplot3<-trend/weekly\n\n\nlibrary(cowplot)\nfinal <- ggdraw()+\n  draw_plot(plot)+\n  draw_plot(plot2,x = 0.02, y = 0,scale = 0.3)+\n  draw_plot(trend,x = -0.4, y = 0.2,scale = 0.25,height = 0.7,width=1.2)+\n  draw_plot(weekly,x = -0.4, y = -0.06,scale = 0.25,height = 0.7,width=1.2)+\n  draw_text(\"Dr. WHO - UK Viewers\", x=0.4,y=0.93,\n            color=\"blue\",size=42,family=\"Luckiest\")+\n  draw_text(\"Favorite months for watching are April, June and September\n            While the Years with the highest numbers of views \n            are 2010 and 2008\",\n            x=0.34,y=0.8,size=18,family=\"Luckiest\",color=\"blue\")+\n  draw_text(\"General trend declined after 2010 \n            favorite days of the week for watching are Tuesday to Friday\",\n            x=0.4,y=0.1,size=18,family=\"Luckiest\",color=\"blue\")+\n  draw_text(\"Trend\",x=0.04,y=0.56,angle=90,color=\"blue\",family = \"Luckiest\")+\n  draw_text(\"Weekly\",x=0.05,y=0.3,angle=90,color=\"blue\",family = \"Luckiest\")+\n  draw_text(\"Ratings\",x=0.365,y=0.53,angle=90,color=\"blue\",family = \"Luckiest\")+\n  draw_text(\"Viewers\",x=0.5,y=0.35,angle=0,color=\"blue\",family = \"Luckiest\")+\n  draw_text(\"Duration\",x=0.43,y=0.25,angle=0,color=\"blue\",family = \"Luckiest\",size=12)+\n  draw_text(\"Nifty UK Viewers density\",x=0.94,y=0.73,angle=88,\n            color=\"blue\",size=12,\n            family=\"Luckiest\")+\n  draw_text(\"#TidyTuesday week48 Dr.Who - DataViz: Federica Gazzelloni\", \n            x=0.4,y=0.03,color=\"blue\",size=14,family=\"Luckiest\")+\n  draw_image(\"/Users/federica/Documents/R/R_general_resources/TidyTuesday/TidyTuesday/w48/drwho.png\",\n             x=-0.14,y=0.17,scale=0.15)+\n  draw_image(\"/Users/federica/Documents/R/R_general_resources/TidyTuesday/TidyTuesday/w48/tardis.jpg\",\n             x=-0.42,y=0.42,scale=0.12)\n\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resources/TidyTuesday/TidyTuesday/w48/dr_who2.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w39_Emmy_Awards/w39_Emmy_Awards.html",
    "href": "tidytuesday/cases2021/posts2021/w39_Emmy_Awards/w39_Emmy_Awards.html",
    "title": "Emmy Awards",
    "section": "",
    "text": "TidyTuesday\n\n\nweek 39 nominees EMMYS’\n\n\nload libraries ————–\n\nlibrary(tidyverse)\n\nlibrary(extrafont)\nlibrary(showtext)\n#font_families_google()\nfont_add_google(\"Roboto Condensed\",\"Roboto Condensed\")\n\nlibrary(patchwork)\nlibrary(cowplot)\n\n# load the data ------\n\nnominees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-21/nominees.csv')\nhead(nominees)\n\n# data wrangling -------\n# arrange the set to have the count of the types\n# add a column with the icons for types\n\nmy_df <-\n  nominees %>%\n  filter(year>=2015) %>%\n  filter(distributor==c(\"HBO\")) %>%\n  count(year,distributor,type,sort=T) %>%\n  mutate(distributor_lab=paste0(\"HBO_\",year))%>%\n  mutate(img = if_else(\n      type == \"Winner\",\n      \"<img src='w39/emmy_winner.png' width='12'/>\",\n      \"<img src='w39/emmy_nom.png' width='12'/>\"\n    ))\n\n\n\n# set a special vector for the facet strip names with the type counts\n\ntype_c <- c(\"HBO_2015\"= \"219 to 140\",\n            \"HBO_2016\"= \"198 to 75\",\n            \"HBO_2017\"= \"216 to 118\",\n            \"HBO_2018\"= \"302 to 96\",\n            \"HBO_2019\"= \"297 to 146\",\n            \"HBO_2020\"= \"217 to 124\",\n            \"HBO_2021\"= \"261 to 66\") \n\n\n# make the plot -------\n\nlibrary(waffle)\nlibrary(ggtext)\nlibrary(ggthemes)\n\n\nplot <- ggplot(my_df, aes(fill = type, values = n,label = img)) +\n  facet_wrap(distributor_lab~year, nrow = 1, strip.position = \"bottom\",\n             labeller = labeller(distributor_lab  = as_labeller(type_c))) +\n  stat_waffle(geom = \"richtext\", fill = NA, label.color = NA, flip = TRUE, n_rows = 10) +\n  scale_x_discrete() + \n  scale_y_continuous(labels = function(x) x * 10, expand = c(0,0)) +\n  ggthemes::scale_fill_fivethirtyeight(name=NULL) +\n  coord_equal() +\n  labs(title=\"\\n\",subtitle=\"\\n\",\n    caption=\"Source: The data this week comes from emmys.com\") +\n  theme_minimal(base_family = \"Roboto Condensed\") +\n  theme(text=element_text(family = \"Roboto Condensed\"),\n        axis.ticks.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_blank(),\n        strip.text = element_text(family = \"Roboto Condensed\",size=22,face=\"bold\"),\n        legend.position = \"top\",\n        panel.grid.major.x = element_line(color=\"grey50\",size=10),\n        panel.grid.minor.x = element_line(color=\"grey50\",size=10),\n        plot.margin = margin(5,5,1,5,unit = \"pt\"),\n        plot.background = element_rect(color=\"#F0F8FF\", fill=\"#F0F8FF\"),\n        plot.caption.position = \"panel\",\n        plot.caption = element_text(family = \"Roboto Condensed\",color= \"grey40\", face=\"bold\",size=30, hjust=0,vjust=-1)) \n\n\n#------------finish touches\n\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\n\n\nlibrary(ggpubr)\n\ngraphics <- ggarrange(plot) +\n  theme(plot.background = element_rect(fill = \"#F0F8FF\", color = \"#F0F8FF\"))\n\n\n# annotate the plot\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"EMMY AWARD WINNERS AND NOMINEES\",\n                                              color = c(\"grey28\"), face = \"bold\", size = 34,\n                                              family = \"Roboto Condensed\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: TidyTuesday week39\",\n                                                 color = \"grey28\",family = \"Roboto Condensed\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 24),\n                              left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size = 12),\n                              right = text_grob(bquote(\"\"), color = c(\"#778899\"),rot = 90,size = 10),\n                              fig.lab = \"\", fig.lab.face = \"bold.italic\",fig.lab.size = 8,\n                              fig.lab.pos = \"bottom.right\"\n)\n\nfinal_plot <-\n  final_plot +\n\n  annotate(geom = 'segment',y = 0.78, yend = 0.93, x = 0.1,xend = 0.1, color=\"#8A2BE2\", size = 9) +\n\n  annotate(geom = \"text\", label = \"HBO RECORD AT THE EMMYS \\nAWARDS AND NOMINEES\",\n           x = 0.44, y = 0.875,colour = \"black\",size = 16,family = \"Roboto Condensed\",fontface=\"bold\") +\n\n  annotate(geom = \"text\", label = \"Number of Emmy nominations and wins for HBO\",\n           x = 0.44, y = 0.79,colour = \"grey40\",size = 10,family = \"Roboto Condensed\") +\n  \n  annotate(geom = \"text\", label = \"Winner\",\n         x = 0.5, y = 0.1,colour = \"grey50\",size = 8,family = \"Roboto Condensed\") +\n  annotate(geom = \"text\", label = \"Nominee\",\n         x = 0.32, y = 0.1,colour = \"grey50\",size = 8,family = \"Roboto Condensed\") \n\n\n# add the images for the legend keys \n\nimgWin <- image_read(here::here(\"w39/emmy_winner.png\"))\nimgNom <- image_read(here::here(\"w39/emmy_nom.png\"))\nimgHBO <- image_read(here::here(\"w39/hbo.png\"))\n\nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(imgWin, x = 0.55, y = -0.4,width = 0.06)+\n  draw_image(imgNom, x = 0.37, y = -0.4,width = 0.06)+\n  draw_image(imgHBO, x = 0.1, y = -0.1,width = 0.12)\n\n\n\n## save final plot ----\n\nragg::agg_png(here::here(\"w39/w39_nominees.png\"),\n              res = 320, width = 12, height = 14, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\n\n\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\ntidy_final <- image_read(here::here(\"w39/w39_nominees.png\"))\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator = \"atop\",\n                                 gravity = \"southeast\")\n\nimage_write(attached_logo, path = \"w39_nominees.png\", format = \"png\")"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w16_US_Post_Offices/w16_US_Post_Offices.html",
    "href": "tidytuesday/cases2021/posts2021/w16_US_Post_Offices/w16_US_Post_Offices.html",
    "title": "US Post Office",
    "section": "",
    "text": "Loading libraries\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(maptools)\nlibrary(data.table)\n\nLoading data\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 16)\npost_offices <- tuesdata$post_offices\n\nWrangling\n\nhead(post_offices)\n\n\nmy_df<-post_offices%>%filter(established>=1639,established<=2000,\n                          discontinued>=1775 ,discontinued<=2002,\n                          !is.na(stamp_index),\n                          !duration<0,\n                          !is.na(gnis_dist),\n                          !stamp_index==55,\n                          !is.na(county1))%>%\n  select(\"duration\",\"gnis_dist\",\"stamp_index\")%>%\n  group_by(stamp_index)%>%\n  summarize(avg_duration=mean(duration),avg_dist=mean(gnis_dist))\n\nSetting data ready for plotting\n\nlibrary(igraph)\nmat <- cor(t(my_df))\nmat[mat<0.995] <- 0\n# Make an Igraph object from this matrix:\nnetwork <- graph_from_adjacency_matrix( mat, weighted=T, mode=\"undirected\", diag=F)\n\n# Basic chart\nplot(network)\n\n\n# color palette\nlibrary(RColorBrewer)\ncoul <- brewer.pal(nlevels(as.factor(my_df$stamp_index)), \"Set3\")\n\n# Map the color to cylinders\nmy_color <- coul[as.numeric(as.factor(my_df$stamp_index))]\n\nSetting for saving plot\n\nragg::agg_png(here::here(\"US_Post_office_space.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\n\n# plotting ############################################\n\npar(bg=\"mediumblue\", mar=c(1,1,1,1))\nset.seed(4)\nplot(network, \n     vertex.label.family=\"Georgia\", \n     edge.curved=0.08,\n     edge.width=2,                                 \n     edge.arrow.size=1,                       \n     edge.arrow.width=1,                          \n     edge.lty=\"solid\",\n     vertex.size=12,\n     vertex.shape=c(\"raster\",\"sphere\"), \n     vertex.color=my_color, \n     vertex.label.cex=0.7,\n     vertex.label.color=\"blue\",\n     vertex.frame.color=\"transparent\"\n)\n\nop <- par(family = \"Luminari\")\n\n#### legend and titles ########################\n\nlegend(x=1.3, y=0.7, \n       legend=paste( levels(as.factor(my_df$stamp_index)), \"stamp*\", sep=\"*\"), \n       col = coul , \n       bty = \"n\", pch=20 , pt.cex = 2, cex = 1,\n       text.col=\"white\" , horiz = F)\ntext(-1.4,1.1,\"US Post Offices\",col=\"white\", cex=1.5)\ntext(-1.3,1,\"Stamps index by distance\",col=\"white\", cex=1.2)\ntext(-1.1,0.9,\"visualization of the distance between offices by different stamps index\",col=\"white\", cex=0.8)\n\ntext(-1,-1.1,\"Viz @fgazzelloni | #TidyTueasday Week 16 | Space Day 14 | DataSource: Harvard Dataverse\",col=\"white\", cex=0.8)\npar(op)\n\nImaging\n\nlibrary(png)\nlibrary(grid)\nlibrary(magick)\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"400x400\")\n\nmypng2<-readPNG(\"satellite2.png\")\nmypng3<-readPNG(\"satellite3.png\")\n\n\ngrid.raster(tidy_logo, x=0.9, y=0.2, width=.08)\ngrid.raster(mypng2, x=.09, y=.7, width=.25)\ngrid.raster(mypng3, x=.9, y=.9, width=.25)\n\n####### final ###################\n\n# dev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w31_Olympic_Medals/w31_Olympic_Medals.html",
    "href": "tidytuesday/cases2021/posts2021/w31_Olympic_Medals/w31_Olympic_Medals.html",
    "title": "Olympic Medals",
    "section": "",
    "text": "35 Years of Olympic Games\nConverting “region” vector into country code “iso2c” with {countrycodes} to be able to use {ggflags}\nsome values were not matched unambiguously:\nI could do a dataset with only “Individual Olympic Athletes” and eventually use it to add some info in a geom_\nAfter a quick look at the “ambiguous_country_codes”, just one is relevant with a “Gold medal”, then will see how to use it.\nUpdate “my_olympics” with countrycode():\n35 Years: 1896 to 2016\nAge: 11 to 71 (61 different ages)"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w31_Olympic_Medals/w31_Olympic_Medals.html#section-age-sex",
    "href": "tidytuesday/cases2021/posts2021/w31_Olympic_Medals/w31_Olympic_Medals.html#section-age-sex",
    "title": "Olympic Medals",
    "section": "Section Age & Sex",
    "text": "Section Age & Sex\n\nage_sex_plot <- my_olympics %>% \n  group_by(sex) %>%\n  summarize(age,height,weight,year) %>% # count(age)\n  ungroup() %>% \n  ggplot(aes(x=factor(age),fill=factor(sex))) + \n  geom_bar(position=\"stack\") +\n  scale_fill_fivethirtyeight() +\n  labs(title=\"Distribution of age by sex\",\n       subtitle=\"61 different age years form 11 to 71 years old gamers\",\n       fill=\"Sex\") + \n  theme_fivethirtyeight() +\n  theme(axis.text.x = element_text(angle=20),\n        legend.position = \"bottom\",\n        plot.title = element_text(size=16,vjust=-0.5),\n        panel.grid.major.x = element_blank())\n\nage_sex_plot\n\nComposition of plots and background\n\nlibrary(magick)\nlibrary(ggimage)\nlibrary(ggpubr)\nlibrary(cowplot)\nlibrary(extrafont)\nlibrary(showtext)\nfonts()\nolympics_family<-\"Roboto Condensed\"\n#library(ggflags)\nlibrary(countrycode)\n\n\nolympics_plot <- ggplot() +\n  geom_blank() + \n  theme_void() +\n  theme()\n\n\nimg_olympics<-\"olympics.png\"\n\nplot <- ggbackground(age_sex_plot, img_olympics,alpha=.4, color=\"#CD919E\")\n\n\nplot +\n  theme(plot.background = element_rect())#fill=\"#FFEFDB\"))\n\nThen add a secon plot on the right corner"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w31_Olympic_Medals/w31_Olympic_Medals.html#section-medals",
    "href": "tidytuesday/cases2021/posts2021/w31_Olympic_Medals/w31_Olympic_Medals.html#section-medals",
    "title": "Olympic Medals",
    "section": "Section medals",
    "text": "Section medals\n“At the 1968 Summer Olympics in Mexico City, 29 events in swimming were contested. There was a total of 468 participants from 51 countries competing. The United States dominated the competition, winning 52 of 87 possible medals. 15-year-old phenom Debbie Meyer from Maryland won three gold medals.”\nsource: Swimming at the 1968 Summer Olympics\n\nmy_olympics_with_country_codes<- my_olympics%>%\n  mutate(country_code = countrycode(region, \n            origin = 'country.name', \n            destination = 'iso2c'),\n         country_code=tolower(country_code)) %>%\n  select(year,sport,medal,country_code) %>%\n  filter(medal==\"Gold\") %>%\n  count(year,sport,country_code) %>%\n  arrange(year) \n  \n\n\nmy_olympics_with_country_codes\n\n\nmy_favourites <- c(\"Athletics\",\"Wrestling\",\"Swimming\",\"Shooting\",\"Rowing\",\n                   \"Boxing\",\"Canoeing\",\"Cycling\")\n\n\nmy_favourite_sports <- my_olympics_with_country_codes%>%\n  filter(sport %in%my_favourites)\n\n\nlibrary(ggflags)\n\n\ntop_golden_sports <- ggplot(data=my_favourite_sports,\n       aes(x=factor(year),y=fct_reorder(sport,-year))) +\n  geom_point(shape = 21, colour = \"gold\", fill = NA, size = 7, stroke = 1) +\n  ggflags::geom_flag(aes(country=country_code), size=4.5) +\n  ggflags::scale_country() +\n  guides(country=\"none\") +\n  labs(title=\"Top 8 Gold medal sport winners\",\n       x=\"\",y=\"\") +\n  theme_fivethirtyeight()+\n  theme(axis.text.x = element_text(angle=90),\n        panel.grid.major.y = element_blank(),\n        panel.grid.major.x = element_line(color=\"#CD919E\"),\n        plot.title.position = \"plot\",\n        plot.background = element_blank(),\n        panel.background = element_blank())\n\n# top_golden_sports\n\n\n#png(\"top_golden_sports.png\")\nggsave(\"top_golden_sports.png\", width = 8, height = 6)\n\nprint(top_golden_sports)\ndev.off()\n\n\nlibrary(cowplot)\n\n\nimg <- \"top_golden_sports.png\"\n\ninset.plot <- ggdraw() +\n  draw_image(img,  x = 0.22, y = -0.2,  scale = .70) \n\ninset.plot <- inset.plot + theme(legend.position = \"none\",\n                                    plot.background = element_blank(),\n                                    panel.background = element_blank())\ninset.plot2 <- age_sex_plot + theme(legend.position = \"none\",\n                                    plot.background = element_blank(),\n                                    panel.background = element_blank())\n\ndouble_plot <- ggdraw() +\n  draw_plot(inset.plot2, x = 0, y = 0, width = 1, height = 1) +\n  draw_plot(inset.plot, x = -0.35, y = .18, width = 1.5, height = 0.9) \n\n\ndouble_plot\n\n\nimg_olympics<-\"olympics.png\"\nplot <- ggbackground(double_plot, img_olympics,alpha=.2, color=\"#CD919E\")\n\n\nplot +\n  theme(plot.background = element_rect(fill=\"#FFEFDB\"))\n\n\ngraphics <- ggarrange(plot) \n\nannotation_plot <- annotate_figure(graphics,\n               top = text_grob(\"Olympics outlook 1896 - 2016  \",color =c(\"#FF4040\", \"#FFFFFF\", \"#FFFFFF\"), \n                               face = \"bold\", size = 40,family=olympics_family),\n               bottom = text_grob(\"DataViz: @fgazzelloni DataSource: \\n TidyTuesday week31, Olympic Medals, Kaggle, Financial Times & FiveThirtyEight\",\n                                  color = c(\"black\"),family=olympics_family,\n                                  hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n               left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size=1),\n               right = text_grob(bquote(\"\"), color=c(\"#778899\"),rot = 90,size=1),\n               fig.lab = \"TidyTuesday week31\\n\", fig.lab.face = \"bold.italic\",fig.lab.size=7,\n               fig.lab.pos=\"bottom.right\"\n)\n\nfinal_plot <- annotation_plot +\n  annotate(geom = \"text\", label=\"The historical dataset on the modern Olympic Games,\\n including all the Games from Athens 1896 to Rio 2016\",x = 0.7, y = 0.81, \n           colour = \"black\", size = 6,family=olympics_family) \n  \n\nfinal_plot\n\nAttach the Olympic logo at the sides of the title\n\nimg_olympics<-\"olympics.png\"\n\nfinal <- ggdraw() +\n  draw_image(img_olympics,  x = -0.35, y = 0.45, scale = .10) +\n  draw_image(img_olympics,  x = 0.32, y = 0.45, scale = .10) +\n  draw_plot(final_plot)\n\nSaving:\n\nragg::agg_png(here::here(\"w31\", \"w31_olympics.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w26_Public_Park_Access/w26_Public_Park_Access.html",
    "href": "tidytuesday/cases2021/posts2021/w26_Public_Park_Access/w26_Public_Park_Access.html",
    "title": "US Public Parks",
    "section": "",
    "text": "Week 26 Public Parks\n\n\npoints for 14 measures across five categories: acreage, investment, amenities, access, and equity.\n\n\nOUTLIERS\n\n\nPARK INCLUSION CRITERIA\n\n# load libraries --------------\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(tidymodels)\ntidymodels_prefer()\n\nlibrary(forcats)\n\nlibrary(DataExplorer)\nlibrary(ggthemes)\nlibrary(hrbrthemes)\nlibrary(viridis)\nlibrary(extrafont)\n\nlibrary(showtext)\n#font_families_google()\nfont_add_google(\"Montserrat\",\"Montserrat\")\nshowtext.auto(enable = TRUE)\n\nlibrary(RColorBrewer)\nlibrary(ggwordcloud)\n\nlibrary(patchwork)\nlibrary(cowplot)\n\n\n# load data ------------------\ntuesdata <- tidytuesdayR::tt_load(2021, week = 26)\n\nparks <- tuesdata$parks\n\n\nhead(parks)\n\n# questions ------------\n\n# - how parks evolved within the years\n# - how many parks have a playground/sports amenities/dogpark/splashgrounds/general amenities/restrooms/benches\n# - has the parks size changed within the years\n# - how has the residents spending evolved\n# - what is the rank by cities\n\n\n# check of the data and tidy manipilation --------------------\nnames(parks)\nstr(parks)\n\nplyr::count(parks$year)\n\n# selecting the columns iwth just points as a measure to have omogeneous data, some of them are\n# on a 50 max scale and other on a 100 max scale, so if I want to used them all I would need to rescale\n# one of the two\n\n  \nminneapolis<-parks%>%\n  filter(city==\"Minneapolis\")\n\nmissing<-profile_missing(minneapolis)\n#View(missing)\nkableExtra::kable(skimr::skim(minneapolis)) %>% kableExtra::scroll_box(width = '100%')\n\nstr(minneapolis)\n\nminneapolis_long<-minneapolis%>%\n  pivot_longer(cols=c(6,8,10),names_to=\"data\",values_to=\"percent\")\n\nminneapolis_long$data2 = factor(minneapolis_long$data, \n                           levels=c(\"spend_per_resident_data\",\"park_pct_city_data\",\"pct_near_park_data\"))\n\nnew_labels=c(\"spend_per_resident_data\"=\"Spending\",\"park_pct_city_data\"=\"Park points\",\"pct_near_park_data\"=\"Neighborhood\")\n\n# first plot ----------------------------\nfirst<-ggplot(data=minneapolis_long,aes(x=year,y=percent,group=data2,colour=data2))+\n  geom_point(aes(size=total_pct))+\n  geom_line()+\n  geom_text(aes(label=percent),stat=\"identity\",vjust=-1.5,show.legend = F,size=2)+\n  guides(colour = FALSE, size = FALSE)+\n  scale_color_viridis(discrete=TRUE)+\n  labs(title=\"\\nPark spending, points, neighborhood\\n\",\n       # subtitle=\"\\n2012 - 2020\\n\",\n       caption=\"\",\n       colour=\"\",\n       # tag=\"The \\nTrust \\nfor \\nPublic \\nLand\",\n       x=seq(2012,2020,1), y=\"\")+\n  facet_wrap(~data2,labeller = labeller(data2=new_labels))+\n  theme_fivethirtyeight()+\n  theme(axis.text.x = element_text(angle=90,family=\"Montserrat\"),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(color=\"black\",family=\"Montserrat\"),\n        plot.title = element_text(family=\"Montserrat\",hjust = 0.5,size=12),\n        plot.subtitle = element_text(family=\"Montserrat\",hjust = 0.1),\n        # plot.tag = element_text(family=\"Montserrat\",size=10),\n        # plot.tag.position = c(0.05, 0.9),\n        #panel.grid = element_blank(),\n        #panel.grid.major = element_blank(),\n        #panel.grid.minor = element_blank(),\n        plot.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        strip.text.y  = element_text(family=\"Montserrat\"),\n        plot.margin = margin(0,0,0,0,unit=\"pt\"))\n\n\n#####################\n\nsub_minneapolis <- minneapolis%>%\n  filter(year==c(2020,2019,2018))%>%\n  select(city,matches(c(\"year\",\"rank\",\"points\")),-total_points)%>%\n  mutate(med_park_size_points=med_park_size_points/50*100,\n         park_pct_city_points=park_pct_city_points/50*100)%>%\n    group_by(year,rank,amenities_points)%>%\n   mutate(total= rowMeans(across(where(is.numeric))))%>%\n    ungroup()%>%\n  rename(c(\"Basketball\"=\"basketball_points\",\"Dogpark\"=\"dogpark_points\",\n           \"Playground\"=\"playground_points\",\"Recreation and senior centers\"=\"rec_sr_points\",\n           \"Splashground\"=\"splashground_points\",\"Restroom\"=\"restroom_points\"))\n  \n######################  \nmin=1\nmax=100\n\namenities_per_year <-minneapolis%>%\n  filter(year==c(2020,2019,2018))%>%\n  select(city,matches(c(\"year\",\"rank\",\"points\")),-total_points)%>%\n  rename(c(\"Basketball\"=\"basketball_points\",\"Dogpark\"=\"dogpark_points\",\n           \"Playground\"=\"playground_points\",\"Recreation and senior centers\"=\"rec_sr_points\",\n           \"Splashground\"=\"splashground_points\",\"Restroom\"=\"restroom_points\"))%>%\n    janitor::clean_names()%>%\n  mutate(basketball=basketball/10000*10000,\n         dogpark=dogpark/100000*10000,\n         playground=playground/10000*10000,\n         recreation_and_senior_centers=recreation_and_senior_centers/20000*10000,\n         restroom=restroom/100000*10000,\n         splashground=splashground/100000*10000)%>%\n    #select(8:13)%>%\n  pivot_longer(cols=c(8:13),names_to=\"data_points\",values_to=\"points\")%>%\n  select(year,data_points,points,amenities_points)%>%\n  group_by(data_points)%>%\n  mutate(#normalized = ((points-min(points))/(max(points)-min(points)))*100,\n         normalized100 = ((points-min)/(max-min)))%>%ungroup()\n\n\nnormalized_per_year_plot <- ggplot(data=amenities_per_year) +\n  geom_col(aes(x=data_points,y=normalized100,fill=factor(year),color=factor(year))) + \n  scale_color_viridis(discrete=TRUE,option=\"G\")  +\n    guides(color=FALSE)+\n    scale_fill_viridis(discrete=TRUE,option=\"G\") +\n  scale_x_discrete(label=c(\"Basketball\",\"Dogpark\",\"Playground\",\"Recreation\",\"Splashground\",\"Restroom\"))+\n    #annotate(\"text\",label=\"improvements\",x=2019.5,y=700,family=\"Montserrat\")+\n    labs(title=\"Amenities points Normalized100\",\n         #subtitle=\" 2018 - 2020 \",\n         caption=\"\",\n         fill=\"\",\n         color=\"\",\n         tag=\"\")+\n    theme_fivethirtyeight()+\n    theme(axis.ticks.x = element_line(size=2,color=\"red\"),\n          axis.text.x = element_text(family=\"Montserrat\",angle=20,size=5),\n          axis.text.y = element_text(family=\"Montserrat\"),\n          axis.ticks.y = element_blank(),\n          plot.title = element_text(family=\"Montserrat\",size=8),\n          plot.subtitle = element_text(family=\"Montserrat\",vjust=-0.5,hjust=0.3,size=10),\n          plot.caption = element_text(family=\"Montserrat\"),\n          plot.tag = element_text(family=\"Montserrat\",size=10),\n          plot.tag.position = c(0.08, 0.9),\n          plot.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n          panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n          legend.title = element_text(family=\"Montserrat\",hjust=0),\n          legend.background = element_blank(),\n          legend.position = \"top\",\n          legend.key.size = unit(0.3, 'cm'),\n          legend.text = element_text(family=\"Montserrat\",size=8),\n          plot.margin = margin(30,30,30,30,unit=\"pt\"))\n\n##########################   \n\n# sub_minneapolis%>%pivot_longer(cols=c(8:13),names_to=\"data_points\",values_to=\"points\")\n  \n# Level of Minneapolis park feautures  \namenities_per_year_plot <- ggplot(data=amenities_per_year,aes(x=year,y=points)) +\n  geom_col(aes(color=data_points,fill=data_points)) +\n  geom_smooth(aes(y = amenities_points),color=\"red\",method=\"lm\",formula = y ~ splines::bs(x, 5)) +\n  scale_color_viridis(discrete=TRUE)  +\n  guides(color=FALSE)+\n  scale_fill_viridis(discrete=TRUE,label=c(\"Basketball\",\"Dogpark\",\"Playground\",\"Recreation\",\"Splashground\",\"Restroom\")) +\n  labs(title=\"Amenities points by year\",\n       #subtitle=\"three years of points increase\",\n       caption=\"Viz @fgazzelloni DataSource: TidyTuesday week26 Public Park Access,TPL,CityLab\",\n       fill=\"\",\n       color=\"\"\n       #tag=\"Amenities points 2018-2020\"\n       )+\n  theme_fivethirtyeight() +\n  theme(axis.ticks.x = element_line(size=2,color=\"red\"),\n        axis.text.x = element_text(family=\"Montserrat\"),\n        axis.text.y = element_text(family=\"Montserrat\"),\n        axis.ticks.y = element_blank(),\n        plot.title = element_text(family=\"Montserrat\",size=8),\n        plot.subtitle = element_text(family=\"Montserrat\",vjust=-0.5,hjust=0.3,size=10),\n        plot.caption = element_text(family=\"Montserrat\",face=\"bold\"),\n        plot.tag = element_text(family=\"Montserrat\",size=10),\n        plot.tag.position = c(0.08, 0.9),\n        plot.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        legend.title = element_text(family=\"Montserrat\",hjust=0),\n        legend.background = element_blank(),\n        legend.text = element_text(family=\"Montserrat\",size=8),\n        legend.key.size = unit(0.3, 'cm'),\n        legend.position = \"top\",\n        plot.margin = margin(30,30,30,30,unit=\"pt\"))\n  \nsecond <- normalized_per_year_plot | amenities_per_year_plot\n\n\nthird<- ggplot()+\n  geom_blank() +\n  labs(title=\"Minneapolis\")+\n  theme_fivethirtyeight()+\n  theme(plot.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        plot.title = element_text(family=\"Montserrat\",color=\"yellow\"))\n\nfourth <- parks%>%\n  filter(rank<=10)%>%\n  mutate(city=case_when(city==\"Washington, DC\"~\"Washington, D.C.\",\n                                 TRUE~city))%>%\n  count(city)%>%\n  ggplot(aes(label=city,color=city))+\ngeom_text_wordcloud(family=\"Montserrat\") +\n  labs(title=\"Minneapolis ranked the first best 7 times between 2012 - 2020\",\n       tag=\"The \\nTrust \\nfor \\nPublic \\nLand\")+\n  theme_fivethirtyeight()+\n  theme(plot.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n        plot.title = element_text(family=\"Montserrat\",size=12,hjust=0.5),\n        plot.tag = element_text(family=\"Montserrat\",size=10,color=\"white\"),\n        plot.tag.position = c(0.04, 0.9))\n \nlibrary(magick)\nlibrary(ggimage)\n\n\n\nimg = \"minneapolis_park.png\"\nthird<-ggbackground(third, img,alpha=.9)\n\none <-third/first \n\ntwo<-fourth/second\n\nfinal <-one|two\n\nbck_color <- \"#a1d99b\"\n\nfinal <- final + plot_annotation(\n  title = \"\\nMinneapolis Park improvment racing\\n\",\n  subtitle=\"'The Trust for Public Land creates parks and protects land for people, ensuring healthy, livable communities for generations to come' \",\n  theme = theme(\n    plot.margin = margin(10,10,10,10),\n    plot.background = element_rect(fill = bck_color, color = NA),\n    panel.background = element_rect(color=\"#a1d99b\",fill=\"#a1d99b\"),\n    plot.title = element_text(family = \"Montserrat\",vjust=-0.5,face=\"bold\"),\n    plot.subtitle = element_text(family = \"Montserrat\"),\n    plot.caption = element_text(family = \"Montserrat\", size = 9, color = bck_color, \n                                margin = margin(15,0,0,0), hjust = 0.95)\n  )\n)\n\nfinal_plot <- stamp(final,label=\"#TidyTuesday week 26\",color=\"red\",alpha = 1,\n      vjust = 1.8,\n      hjust = 1.2,\n      size = 14,\n      family = \"Montserrat\",\n      fontface = \"bold\",\n      clip = \"on\")\n\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w26\",\"w26_parks.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w20_US_Broadband/w20_US_Broadband.html",
    "href": "tidytuesday/cases2021/posts2021/w20_US_Broadband/w20_US_Broadband.html",
    "title": "US Broadband",
    "section": "",
    "text": "# Week 20 US Broadband\n# source of data:\n# https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-05-11/readme.md\n# https://github.com/microsoft/USBroadbandUsagePercentages\n\n# load libraries ------------------------------------\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(DataExplorer)\n\nlibrary(zipcodeR)\nlibrary(janitor)\nlibrary(stringr)\n\n\n# load data -----------------------------------\ntuesdata <- tidytuesdayR::tt_load(2021, week = 20)\n\nbroadband <- tuesdata$broadband\nbroadband_zipcode <- tuesdata$broadband_zip\n\n#broadband_zipcode<-read.csv(\"https://raw.githubusercontent.com/microsoft/USBroadbandUsagePercentages/master/dataset/broadband_data_zipcode.csv\")\n# contains mean absolute error (MAE), mean signed deviation (MSD)\n\n# check missing data and str------------------------------\nprofile_missing(broadband);head(broadband)\nprofile_missing(broadband_zipcode);head(broadband_zipcode)\n\nstr(broadband);dim(broadband)\nstr(broadband_zipcode);dim(broadband_zipcode)\n\n\n# data wrangling -------------------------------\nnames(broadband)<-make.names(tolower(names(broadband)))\nnames(broadband_zipcode)<-make.names(tolower(names(broadband_zipcode)))\n\nbroadband%>%filter(str_detect(\"-\",broadband$broadband.availability.per.fcc))\nbroadband$broadband.availability.per.fcc[broadband$broadband.availability.per.fcc==\"-\"]<-\"0\"\nbroadband$broadband.availability.per.fcc<-as.double(broadband$broadband.availability.per.fcc)\n\nbroadband%>%arrange(broadband.usage)\nbroadband$broadband.usage[broadband$broadband.usage==\"-\"]<-\"0\"\nbroadband$broadband.usage<-as.double(broadband$broadband.usage)\n\n###########################################################\n\nbroadband <- broadband %>%\n  mutate(county.name=sub(\" County\",\"\",county.name)) %>%\n  separate(county.id,into=c(\"state.id\",\"county.id\"),sep=-3) %>%\n  mutate(county.name = case_when(\n    county.name==\"LaSalle Parish\" ~ \"La Salle Parish\",\n    TRUE~county.name))\n\n# separate the county.id by state and county---------------\n  broadband_zipcode <- broadband_zipcode %>%\n  separate(county.id,into=c(\"state.id\",\"county.id\"),sep=-3)\n\n\n#####################################\n# in broadband_zipcode\n# some postal codes are made of 4 digits, to use \"geocode_zip\"\n# need 5 digits, so add a zero at the begin of the string\n\n# plyr::count(sprintf(\"%05d\", broadband_zipcode$postal.code))\n\nbroadband_zipcode$postal.code<-sprintf(\"%05d\", broadband_zipcode$postal.code)\n\n# broadband%>%filter(str_detect(county.name,\"Bedford\"))\n\n\n##################################################\n# make a unified dataset with broadband, postal codes and geodada------------------------------\nmy_df <- broadband%>%\n  full_join(broadband_zipcode, by= c(\"st\",\"state.id\",\"county.id\"))%>%\n  select(1,2,3,7,8,5,6,9:12) %>%\n  drop_na()\n\n\nnames(my_df)<-c(\"st\",\"state.id\",\"county.id\",\"county.name\",\"postal.code\",\"brd.available\",\"usage.1119\",\"usage.1020\",\"mae\",\"alpha\",\"msd\")\n\nhead(my_df);dim(my_df)\n\n\n#########################################\n# check of the counties in the data sets ----------\nc$county.name.x[!c$county.name.x%in%d$county.name.y]\nd$county.name.y[!d$county.name.y%in%c$county.name.x]\n\nss<-broadband%>%\n  full_join(broadband_zipcode, by= c(\"st\",\"state.id\",\"county.id\")) %>%\n  filter(county.name.x %in% c(\"Bedford city\",\n                              \"Covington city\",\n                              \"Emporia city\",\n                              \"Fairfax city\",\n                              \"Kusilvak Census Area\",\n                              \"Lexington city\",\n                              \"Manassas Park city\",\n                              \"Martinsville city\",\n                              \"Oglala\",\n                              \"Otter Tail\")) %>%\n  group_by(st,state.id,county.id) %>%\n  summarize(unique(county.name.x),unique(county.name.y),unique(postal.code))\n####################################\n\n\n# make a new column with y/n broadband in the county\nmy_df <- my_df %>%\n  mutate(broadband.id=ifelse(brd.available==0,\"no\",\"yes\"))\n\n\n# find the geocodes with postal codes -------------------\ngeocode_zip<-geocode_zip(my_df$postal.code)\n\n\n# add the geocodes------------------------------\ns<-my_df%>%\n  inner_join(geocode_zip,by=c(\"postal.code\"=\"zipcode\"))%>%\n  unite(\"id\",state.id:county.id,sep= \"\")\n\n\n# load the libraries for plotting ---------------------\nlibrary(sf)\nlibrary(raster)\nlibrary(spData)\nlibrary(spDataLarge)\n\nlibrary(maps)\nlibrary(viridis)\nlibrary(ggthemes)\nlibrary(RColorBrewer)\n\n# add font to mac---\nlibrary(showtext)\nlibrary(extrafont)\n#font_import(pattern=\"world of water\")\nloadfonts()\nfonts()\n\n# mapping --------------------------------\n\nmypalette<-display.brewer.pal(7,\"BrBG\")\nus_county_map <- map_data(\"county\")\n\nfinal_plot<-ggplot()+\n  geom_polygon(data=us_county_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"lightblue\")+\n  geom_point(data=subset(s,lat>25&lat<50),\n             aes(x=lng,y=lat, group =st,color=brd.available),\n             alpha=0.3,size=0.5)+\n  scale_color_viridis(labels = scales::percent)+\n  labs(title=\"America's Broadband\",\n       subtitle=\"available values by County\",\n       caption=\"Viz. Federica Gazzelloni | US Broadband,Microsoft GitHub,The Verge | TidyTuesday week20\",\n       color=\"\")+\n  theme_map()+\n  theme(plot.title =element_text(size=40,face=\"bold\",family =\"Courier New\",color=\"black\"),\n        plot.subtitle =element_text(size=25,face=\"bold\",family =\"Courier New\"),\n        plot.caption =element_text(size=9,face=\"bold\",family =\"Courier New\"),\n        plot.title.position = \"panel\",\n        plot.margin = margin(5,5,5,5),\n        legend.text = element_text(size=8,family =\"Courier New\"))\n\n\n################################################################################\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"tidytuesday_Broadband.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################ \nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"tidytuesday_Broadband.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_Broadband.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w43_Big_Pumpkins/w43_Big_Pumpkins.html",
    "href": "tidytuesday/cases2021/posts2021/w43_Big_Pumpkins/w43_Big_Pumpkins.html",
    "title": "Big Pumpkins",
    "section": "",
    "text": "final week 43 Pumpkins\nrm(list=ls())\n\n# Libraries-----\nlibrary(tidyverse)\nlibrary(extrafont)\nlibrary(showtext)\nshowtext_opts(dpi = 320)\nshowtext_auto(enable=T)\nfont_add_google(\"Eater\",\"Eater\")\n\n\n# Data-----\npumpkins <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-19/pumpkins.csv')\n\n\n# Data wrangling-------\ndf <- pumpkins%>% #\n  filter(!str_detect(state_prov,\"Entries\")) %>%\n  filter(!country==\"Unknown country\") %>%\n  separate(id,into=c(\"year\",\"type\")) %>%\n  mutate(#place=as.integer(place),\n    year=as.integer(year),\n    pct_chart=as.double(pct_chart))%>%\n  mutate(type = factor(type,labels=c(\"F\"=\"Field Pumpkins\",\n                                     \"L\"=\"Long Gourds\",\n                                     \"P\"=\"Pumpkins\",\n                                     \"S\"=\"Squash\",\n                                     \"T\"=\"Tomato\",\n                                     \"W\"=\"Watermelon\"))) %>%\n  count(place,year,type,country,weight_lbs,ott,est_weight,pct_chart,sort=T) %>%\n  mutate(weight_lbs=as.factor(weight_lbs),\n         weight_lbs=as.double(weight_lbs),\n         est_weight=as.factor(est_weight),\n         est_weight=as.double(est_weight),\n         ott=as.factor(ott),\n         ott=as.numeric(ott)) %>%\n  filter(!ott==0) %>%\n  mutate(pct_weight=round(sum(weight_lbs),2),\n         pct_weight=round(weight_lbs/pct_weight*100,2),\n         .after=pct_chart) %>%\n  # I added this new information, so I need to re-run all the models\n  mutate(base=median(weight_lbs[year==2013]),\n         w_ratio=weight_lbs/base) %>% #head\n  arrange(year) %>%\n  select(-n,-base) # %>%count(year,w_ratio)\n\n\n# Set the df for plotting\nmed_ratios <- df%>%\n  filter(type==\"Pumpkins\")%>%\n  filter(year%in%c(\"2013\",\"2020\"))%>%\n  arrange(w_ratio) %>%\n  filter(!country%in%c(\"The Netherlands\",\"Spain\",\"Belgium\",\"Poland\",\"Portugal\"))%>%\n  group_by(country,year) %>%\n  summarize(median_w_ratio=round(median(w_ratio),2))%>%\n  ungroup()%>%\n  pivot_wider(names_from=year,values_from=median_w_ratio)%>%\n  arrange(2013,2020)\n\n# find the values for the secondary axis\nmy_y_axis <- df %>%\n  left_join(med_ratios,by=\"country\")%>%\n  mutate(country_ratio_13=paste0(`2013`,\"-\",country),\n         country_ratio_20=paste0(country,\"-\",`2020`),\n                                 .after=\"country\") \n\nmy_sec_y_axis <- c(\"Italy-0.78\",\"United Kingdom-0.97\",\n                   \"Germany-0.99\",\"United States-0.84\",\n                   \"Finland-0.96\",\"Japan-1.17\",\n                   \"Austria-0.96\",\"Canada-0.87\",\n                   \"Slovenia-1.21\",\"Switzerland-1.42\",\"France-1.13\")\n\nmy_sec_y_axis<- as.factor(my_sec_y_axis)\nmy_sec_y_axis <- rev(my_sec_y_axis)\n\n\n\n# violin plot\nfinal <- my_y_axis%>%\n  filter(type==\"Pumpkins\")%>%\n  filter(year%in%c(\"2013\",\"2020\"))%>%\n  arrange(w_ratio) %>%\n  filter(!country%in%c(\"The Netherlands\",\"Spain\",\"Belgium\",\"Poland\",\"Portugal\"))%>%\n  ggplot(aes(x=(w_ratio),y=fct_reorder(country_ratio_13,-(w_ratio)),group=country)) +\n  geom_jitter(shape=\".\",color=\"gold\")+\n  geom_violin(fill= \"darkorange\", color=\"darkgreen\",alpha=0.8,size=0.3)+\n  geom_boxplot(width=0.1,outlier.colour = NA,fill=\"sandybrown\",color=NA)+\n  scale_color_manual(values=c(\"green\",\"pink\"))+\n  scale_x_discrete(expand = expansion(mult = c(0, .1)))+\n  facet_wrap(~year)+\n  # from: https://cran.r-project.org/web/packages/ggh4x/vignettes/PositionGuides.html\n  guides(y = guide_axis_manual( label_size = c(12, 8)),\n    y.sec = guide_axis_manual(labels = my_sec_y_axis, label_size = c(12,8)))+\n  #label_colour = c(\"gold\", \"blue\")\n  labs(title=\"Pumpkins variability weights\",\n       subtitle=\"on selected countries 2013-2020\",\n       x=\"Ratios (Base 2013)\",y=\"Selected Countries\")+\n  theme(axis.text.x = element_text(angle=0))+\n  ggthemes::theme_solarized() +\n  theme(text = element_text(family=\"Eater\"),\n        strip.background = element_blank(),\n        strip.text = element_text(color=\"gold\",face=\"bold\",size=16),\n        plot.background = element_rect(fill=\"grey33\",color=\"grey33\"),\n        plot.title = element_text(color=\"gold\",face=\"bold\",size=34),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_text(color=\"springgreen4\"),\n        panel.background = element_rect(fill=\"grey33\",color=\"grey33\"),\n        axis.text.y = element_text(color=\"gold\",face=\"bold\"),\n        axis.title.y = element_blank(),\n        axis.title.x = element_text(color=\"gold\",face=\"bold\",family=\"Eater\",hjust=0.5),\n        axis.line.x = element_blank(),\n        axis.text.x = element_text(color=\"gold\",face=\"bold\",size=8),\n        axis.ticks.x = element_line(color=\"gold\",size=2),\n        plot.margin = margin(0.5,1,1.2,1,\"cm\"),\n        panel.spacing=unit(0, \"lines\"))\n\n\n# frame the plot\nlibrary(ggpubr)\ngraphics <- ggarrange(final)\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"\",\n                                              color = c(\"grey28\"), face = \"bold\", size = 3,\n                                              family = \"Eater\"),\n                              left = text_grob(\" \",\n                                               color = c(\"grey28\"), face = \"bold\", size = 5,\n                                               family = \"Eater\"),\n                              right = text_grob(\" \",\n                                                color = c(\"grey28\"), face = \"bold\", size = 10,\n                                                family = \"Eater\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: BigPumpkins - GPW - TidyTuesday week43\\n\",\n                                                 color = \"grey28\",family = \"Eater\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 13)\n)\n\n#source: BigPumpkins.com    Great Pumpkin Commonwealth\n\n# add annotations\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label = \"talking about Pumpkins\",\n           x = 0.75, y = 0.1,colour = \"gold\",size = 6,\n           family = \"Eater\",fontface = \"bold\") +\n  annotate(geom = \"text\", label = \"88% median value\",\n           x = 0.5, y = 0.85,colour = \"gold\",size = 6,\n           family = \"Eater\",fontface = \"bold\") +\n  annotate(geom = \"curve\",curvature=-0.2,\n           x = 0.6, xend=0.4, y = 0.7,yend=0.8,\n           colour = \"gold\",size = 1,\n           arrow=arrow(length=unit(0.03,\"npc\")))+\n  annotate(geom = \"text\", label = \"decreased in variability\",\n           x = 0.7, y = 0.7,colour = \"gold\",size = 3,\n           family = \"Eater\",fontface = \"bold\")\n\n\n\nlibrary(cowplot)\nlibrary(ggimage)\nlibrary(magick)\n\n# add the images for the legend keys\nimgpump <- image_read(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w43/GPCMedium512.png\")\nimgtt <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>% image_resize(\"300x300\")\n\n\n# ggdraw from {cowplot} draw the plot for setting the background colors of the side annotations\nfinal <- cowplot::ggdraw(final_plot) +\n  draw_image(imgtt, x = 0.8, y = 0.4,width = 0.15) +\n  draw_image(imgpump, x = 0.9, y = -0.45,width = 0.06) +\n  theme(plot.background = element_rect(fill = \"orange\",color = \"gold\"))\n\n\n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w43/pumpkins.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w49_World_Cup_Cricket/w49_World_Cup_Cricket.html",
    "href": "tidytuesday/cases2021/posts2021/w49_World_Cup_Cricket/w49_World_Cup_Cricket.html",
    "title": "World Cup Cricket",
    "section": "",
    "text": "TidyTuesday week49 Cricket author: Federica Gazzelloni\n\nrm(list=ls())\n# libraries----------\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(extrafont)\nloadfonts()\nlibrary(xkcd)\n\nmatches <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-11-30/matches.csv')\n\n# matches%>%View\n\n# data wrangling------------\n# 113 ground, 109 ground_city, 21 ground_country\nmatches <- matches%>% # count(ground,ground_city,ground_country)%>%View\n  mutate(date=lubridate::mdy(match_date))%>%\n  filter(!date==is.na(date)) %>% \n  mutate(points=ifelse(winner==team1,score_team1,score_team2),\n         year=lubridate::year(date))\n\n# exploratory data analysis----------\n# points plot\npoints_yr<-matches %>% # count(date,winner)\n  ggplot(aes(x=(date),y=points))+\n  geom_point(aes(color=factor(year)),show.legend = F,shape=\".\")+\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\")+\n  geom_smooth(size=0.2)+\n  theme_xkcd()+\n  labs(x=\"Years\",y=\"Points rating\",\n       title=\"Points by Years\",\n       caption = \"Observed Values\")+\n  theme(text = element_text(size=12),\n        panel.grid.minor.x = element_line(size=6,color=\"darkseagreen3\"),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        plot.title = element_text(size=14),\n        axis.line = element_line(),\n        axis.text.x = element_text(size=7,angle = 15))\n\n# time series | for extra plots------------\n# model sesonality \npr_df<- matches%>%select(ds=date,y=points)\nlibrary(prophet)\nm <-prophet(pr_df)\nfuture <- prophet::make_future_dataframe(m, periods=365)\nforecast <- predict(m,future)\n# tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])\n\nforecast%>%\n  mutate(ds=as.Date(ds,\"%Y-%m-%d\"))%>%\n  ggplot(aes(ds,yhat))+\n  geom_point(data=pr_df,aes(x=ds,y=y),size=0.05)+ # original data\n  geom_line(aes(x=ds,y=yhat_upper),size=0.03)+\n  geom_line(aes(x=ds,y=yhat_lower),size=0.03)+\n  geom_line(col=\"violet\",size=0.5)+\n  geom_smooth()\n\nprophet_plot_components(m, forecast)\n\n# week_trend plot\nweek_trend<- forecast%>%\n  mutate(day=lubridate::wday(ds,label = T,abbr = T,\n                             week_start = getOption(\"lubridate.week.start\", 7),\n                             locale = Sys.getlocale(\"LC_TIME\")),\n         .after=ds) %>%\n  select(ds,day,weekly,yearly,trend) %>%\n  \n  ggplot(aes(x=day,y=weekly,group = 1))+\n  geom_line(color=\"black\")+\n  theme_xkcd()+\n  labs(x=\"Weekdays\",y=\"Points rating\",\n       title=\"Days of the week with higher points\",\n       caption = \"Prophet Time Series\")+\n  theme(text = element_text(size=12),\n        plot.background = element_blank(),\n        plot.title = element_text(size=14),\n        axis.line = element_line(),\n        axis.text.x = element_text(size=8))\n\n\n# flags----------\n# add country code\nlibrary(ggflags)\nlibrary(countrycode)\n#countrycode::codelist_panel%>%View\ncountrycode::codelist%>%filter(str_detect(country.name.en,\"United\"))\n# countrycode::countrycode(matches)\nlibrary(maps)\n\nmatches%>%\n  select(date,year,winner,points,ground,ground_city,ground_country,match_date)%>%\n  mutate(country_code = countrycode(ground_country, \n                                    origin = 'country.name', \n                                    destination = 'iso2c'),\n         country_code=tolower(country_code))\n\n# not matched unambiguously England, Midlothian, Wales, West Indies\n# England, Midlothian, Wales == United Kingdom\n# West Indies ?\nambiguous_values <- matches%>%\n  select(ground,ground_city,ground_country)%>%\n  filter(ground_country==\"West Indies\")%>%\n  count(ground,ground_city,ground_country)\n\nmy_missing_cities<- ambiguous_values%>%\n  pull(ground_city)%>%\n  unlist()\n\n\nflags_df <- matches%>% #count(ground_country)\n  select(date,year,winner,points,ground,ground_city,ground_country,match_date)%>%\n  mutate(country=case_when(ground_country==\"England\"~\"United Kingdom\",\n                                  ground_country==\"Midlothian\"~\"United Kingdom\",\n                                  ground_country==\"Wales\"~\"United Kingdom\",\n                                  TRUE~ground_country))%>%\n  mutate(country=case_when(ground_city==\"Bridgetown\"~\"Barbados\",\n                           ground_city==\"Gros Islet\"~\"Saint Lucia\",\n                           ground_city==\"Kingston\"~\"Jamaica\",\n                           ground_city==\"Port of Spain\"~\"Trinidad and Tobago\",\n                           ground_city==\"Arnos Vale\"~\"Saint Vincent e Grenadine\",\n                           ground_city==\"St John's\"~\"Antigua e Barbuda\",\n                           TRUE~country))%>%\n  mutate(country_code = countrycode(country, \n                                    origin = 'country.name', \n                                    destination = 'iso2c'),\n         country_code=tolower(country_code),.after=winner)\n\n\n# ground country winners dataset--------\nworld1_geo<- rnaturalearth::ne_countries(scale=110,\n                                         returnclass = \"sf\")\n\n\nworld1_geo <- world1_geo%>%filter(!name==c(\"Antarctica\",\"Fr. S. Antarctic Lands\"))\n\npolygon_df <- matches%>%\n  left_join(world1_geo,by=c(\"ground_country\"=\"name\"))%>%\n  select(date,year,points,winner,ground_country,geometry)\n\n# centroids and coords with spData::world-----\nworld2_geo<- spData::world\nworld2_ctr<- st_centroid(world2_geo)\nworld2_ctr_coords<- st_coordinates(world2_ctr)%>%\n  as.data.frame()\n\ncountries <- matches$ground_country\n\nworld2_ctr_coords_my_countries<-cbind(world2_ctr_coords,ground_country=world2_geo$name_long)%>%\n  filter(ground_country%in%countries)%>%\n  left_join(polygon_df%>%select(year,ground_country,winner,points),by=\"ground_country\")\n\n# flags data sets\nflags_df_coords<- flags_df%>%\n  inner_join(world2_ctr_coords_my_countries,by=c(\"ground_country\",\"year\",\"winner\",\"points\"))\n\n# this set will be used\nflags_df_coords2<- flags_df_coords%>%count(country_code,X,Y)\n\n\n\n# map plot----------------\n  # world polygons\nmap_plot <- ggplot(world2_ctr_coords_my_countries)+\n  geom_sf(data=world1_geo,\n          aes(geometry=geometry),\n          fill=\"#f0ebc7\",size=0.2) +\n  # my polygons\n  geom_sf(data=polygon_df,\n          aes(geometry=geometry),color=\"red\",\n          fill=\"#d9ed53\",\n          show.legend = F) +\n  # polygons centroids\n  geom_point(data=world2_ctr_coords,\n             aes(x=X,y=Y),shape=\".\") +\n  # my polygons centroids\n  geom_point(data=world2_ctr_coords_my_countries,\n             aes(x=X,y=Y),size=0.3,color=\"red\") +\n  # my country names\n  geom_text(data=world2_ctr_coords_my_countries%>%  #count(ground_country)\n             filter(!ground_country%in%c(\"Ireland\",\n                                      \"United Arab Emirates\",\n                                      \"Bangladesh\")),\n            aes(x=X,y=Y,label=ground_country),\n            check_overlap = F,\n            vjust=-1.5,hjust=0.5,family=\"Roboto Condensed\") +\n  # flags\n  ggflags::geom_flag(data=flags_df_coords2,\n                     aes(x=X,y=Y,country=country_code), size=4.5) +\n  coord_sf()+\n  ggthemes::theme_map() +\n  theme(text = element_text(family=\"Roboto Condensed\"),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(face=\"bold\"))\n\n# green background plot------------\nbackround_plot<- ggplot()+\n  geom_blank()+\n  ggthemes::theme_map() +\n  theme(plot.background = element_rect(fill=\"darkseagreen3\",color=\"#42f59b\"),\n        panel.background = element_rect(fill=\"darkseagreen3\",color=\"#42f59b\"))\n  \n\n# draw plot------------\nlibrary(cowplot)\nfinal<- ggdraw()+\n  #plot background\n  draw_image(\"R_general_resources/TidyTuesday/TidyTuesday/w49_world_cup_cricket/ball.jpg\",\n             x=0,y=0,scale=1)+\n  draw_image(\"R_general_resources/TidyTuesday/TidyTuesday/w49_world_cup_cricket/ball.jpg\",\n             x=0.4,y=0.4,scale=0.2,width = 1,height = 0.98)+\n  draw_plot(backround_plot,width=1,heigh=0.75,x=0,y=0.1) +\n  # main playing area\n  draw_line(x=c(0.05,0.95),y=c(0.5,0.5),\n            size=90,color=\"#a8e657\",alpha=0.4)+\n  # map with extra labels\n  draw_plot(map_plot) +\n  draw_label(\"Ireland\",x=0.45,y=0.68,size=10,color=\"black\")+\n  draw_label(\"United Arab Emirates\",x=0.57,y=0.58,size=10,color=\"black\")+\n  draw_label(\"Bangladesh\",x=0.7,y=0.57,size=10,color=\"black\")+\n  # red lines \n  draw_line(x=c(0.05,0.05),y=c(0.33,0.665),\n            size=0.2,color=\"red\",alpha=1)+\n  draw_line(x=c(0.95,0.95),y=c(0.33,0.665),\n            size=0.2,color=\"red\",alpha=1)+\n  # crease: popping crease\n  draw_label(\"Popping Crease\",x=0.19,y=0.28,size=12)+\n  draw_line(x=c(0.19,0.18),y=c(0.29,0.37),size=0.4,color=\"red\")+\n  draw_line(x=c(0.18,0.18),y=c(0.38,0.635),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.82,0.82),y=c(0.38,0.635),\n            size=0.5,color=\"white\",alpha=1)+\n  # crease: return crease\n  draw_label(\"Return Crease\",x=0.138,y=0.32,size=12)+\n  draw_line(x=c(0.17,0.15),y=c(0.33,0.42),size=0.4,color=\"red\")+\n  draw_line(x=c(0.05,0.18),y=c(0.42,0.42),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.82,0.95),y=c(0.42,0.42),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.05,0.18),y=c(0.6,0.6),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.82,0.95),y=c(0.6,0.6),\n            size=0.5,color=\"white\",alpha=1)+\n  # crease: bowling crease\n  draw_label(\"Bowling Crease\",x=0.126,y=0.62,size=12)+\n  draw_line(x=c(0.13,0.15),y=c(0.61,0.58),size=0.4,color=\"red\")+\n  draw_line(x=c(0.15,0.15),y=c(0.42,0.6),\n            size=0.5,color=\"white\",alpha=1)+\n  draw_line(x=c(0.85,0.85),y=c(0.42,0.6),\n            size=0.5,color=\"white\",alpha=1) + \n  draw_plot(week_trend,x=0.25,y=-0.3,scale=0.2,width=1,heigh=1)+\n  draw_plot(points_yr,x=0.01,y=-0.3,scale=0.2,width=1,heigh=1)+\n  # title & caption\n  draw_label(\"Cricket Ground Country Winners \\n1996-2005\",\n             x=0.4,y=0.93,size=34,fontfamily=\"Impact\",\n             fontface=\"bold\")+\n  draw_label(\"Datasource: World Cup Cricket | ESPN Cricinfo\\n#TidyTuesday w49\\nInfographics: Federica Gazzelloni\",\n             x=0.82,y=0.05,size=12,fontfamily=\"Impact\",\n             fontface=\"plain\")\n\n\n# save the plot---------\nragg::agg_png(here::here(\"TidyTuesday/w49/cricket.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w46_Learning_with_afrilearndata/w46_Learning_with_afrilearndata.html",
    "href": "tidytuesday/cases2021/posts2021/w46_Learning_with_afrilearndata/w46_Learning_with_afrilearndata.html",
    "title": "Learning with afrilearndata",
    "section": "",
    "text": "library(tidyverse)\nlibrary(afriadmin)\nlibrary(afrihealthsites)\nlibrary(afrilearndata)\nlibrary(tmap)\n\n\nafriadmin::afcountries\n#afriadmin::afcountrynames(afcountries$name)\n\ncountries<- afriadmin::afcountries$name\n\nafrilearndata::africapitals\nafrilearndata::afrihighway\nafrilearndata::afripop2000\nafrilearndata::afripop2020  \nafrilearndata::africountries\nafriadmin::sf_af_gadm0\nafrihealthsites::sf_healthsites_af\n\n\nsf::st_crs(africountries)=st_crs(4326)\nsf::st_crs(afrihighway)=st_crs(4326)\nsf::st_crs(africapitals)=st_crs(4326)\n\n\ntmap_mode(\"plot\")\n\npop_00 <- tmap::tm_shape(africountries) +\n  tm_polygons(col = \"#42ecf5\") +\n  \n  tm_shape(afripop2000)+\n  tm_raster(title=\"Population density\",\n            palette = rev(viridisLite::inferno(5)),\n            breaks = c(0,2,20,200,2000,25000)) +\n  \n  tm_shape(afrihighway) +\n  tm_lines(col=\"#f5b342\") +\n  \n  tm_shape(africountries)+\n  tm_borders() +\n  tm_text(text =\"iso_a3\", \n          fontface = \"bold\",\n          col=\"midnightblue\",\n          size = \"pop_est\",\n          title.size = \"\",\n          legend.size.show = TRUE,\n          sizes.legend.text = \"Pop\"\n          ) +\n  \n  tm_shape(africapitals) +\n  tm_symbols(col=\"midnightblue\",scale = 0.2) +\n  \n  tm_layout(title=\"2000\",\n            title.position = c(0.8,0.9),\n            legend.title.size = 1,\n            legend.text.size = 0.5,\n            legend.position = c(\"left\",\"bottom\"),\n            legend.bg.color = NA\n            )\n  \n    \npop_20 <- tmap::tm_shape(africountries) +\n  tm_polygons(col = \"#42ecf5\") +\n  \n  tm_shape(afripop2020)+\n  tm_raster(title=\"Population density\",\n            palette = rev(viridisLite::inferno(5)),\n            breaks = c(0,2,20,200,2000,25000)) +\n  \n  tm_shape(afrihighway) +\n  tm_lines(col=\"#f5b342\") +\n  \n  tm_shape(africountries)+\n  tm_borders() +\n   tm_text(text =\"iso_a3\", \n          fontface = \"bold\",\n          col=\"midnightblue\",\n          size = \"pop_est\",\n          title.size = \"\",\n          legend.size.show = TRUE,\n          sizes.legend.text = \"Pop\"\n          ) +\n  \n  tm_shape(africapitals) +\n  tm_symbols(col=\"midnightblue\",scale = 0.2) +\n  \n  tm_layout(title=\"2020\",\n            title.position = c(0.8,0.9),\n            legend.title.size = 1,\n            legend.text.size = 0.5,\n            legend.position = c(\"left\",\"bottom\"),\n            legend.bg.color = NA\n            )  \n  \nmy_raster<-tmap_arrange(pop_00,pop_20,ncol = 2)\n\n\n# save final plot\nragg::agg_png(here::here(\"day10_raster/raster.png\"),\n              res = 320, width = 8, height = 6, units = \"in\")\nmy_raster\ndev.off()\n\n\nlibrary(showtext)\nlibrary(extrafont)\nsysfonts::font_info_google(\"Josefin Sans\")\n#fonts()\n#loadfonts()\nfont_add_google(\"Josefin Sans\",\"josefin\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\n# final touches\nlibrary(cowplot)\nlibrary(magick)\n\nraster_image<- magick::image_read(here::here(\"day10_raster/raster.png\"))\n\ng <- grid::circleGrob(gp = grid::gpar(fill = NA,color=\"black\"))\n\n\nfinal <- cowplot::ggdraw()+\n  draw_image(raster_image,x = 0.1, y = 0,width = 0.7)+\n  draw_label(label=\"Africa\",x=0.3,y=0.2,fontfamily=\"josefin\",size=40) +\n  draw_label(label=\"density increased\\nin some areas\\nmore than others\",x=0.52,y=0.35,fontfamily=\"josefin\",size=8) +\n  draw_label(label=\"Population density transition 2000-2020\", x=0.45, y=0.95, size=30, fontfamily=\"josefin\") +\n  \n  draw_line(x = c(0.52, 0.5),y = c(0.38, 0.48),color = \"black\", size = 0.2)+\n  \n  draw_line(x = c(0.52, 0.6),y = c(0.38, 0.5),color = \"black\", size = 0.2)+\n  \n  draw_text(\"Datasource: afrilearndata\\n#TidyTuesdat week46 and #30DayMapChallenge day10 Raster\\nInfographics: Federica Gazzelloni\",x=0.5,y=0.05,family=\"josefin\",size=11)+\n  draw_grob(g, scale = 0.2,x = 0,y = 0.03)\n\n# save final plot\nragg::agg_png(here::here(\"day10_raster/raster2.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w19_Water_Access_Points/w19_Water_Access_Points.html",
    "href": "tidytuesday/cases2021/posts2021/w19_Water_Access_Points/w19_Water_Access_Points.html",
    "title": "Water Access",
    "section": "",
    "text": "Week 19 Water————\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(raster)\nlibrary(spData) # spatial data\nlibrary(spDataLarge)\nlibrary(tmap)    # for static and interactive maps\nlibrary(leaflet) # for interactive maps\n\n\n# loading data --------------------------\ntuesdata <- tidytuesdayR::tt_load(2021, week = 19)\n\n# manipulation ---------------\nwater <- tuesdata$water\nwater$water_source[is.na(water$water_source)] <- \"unknown\"\nwater_df<-water%>%\n  arrange(row_id)%>%\n  clean_names()%>%\n  mutate(report_date=format(as.Date(report_date,\"%m/%d/%Y\")),\n         report_date=as.Date(report_date),\n         water_source=as.factor(water_source),\n         status_id=as.factor(status_id))%>%\n  select(1:6,9)\n\n# loading africa -------------------\nworld_africa = world[world$continent == \"Africa\", ]\nafrica = st_union(world_africa)\n\n# plotting --------------------\nlibrary(extrafont)\nlibrary(patchwork)\n\nwater_plot<-ggplot() +  \n  geom_sf(data = africa) +\n  geom_point(data = water_df,\n             aes(x=lon_deg,y=lat_deg,color=country_name),\n             alpha=0.5) +\n  labs(title=\"Africa source of water by country\",\n       subtitle=\"\",\n       caption=\"Viz. Federica Gazzelloni DataSource: Water Access Points, WPDX TidyTuesday week 19\")+\n  theme_ps()+\n  theme(legend.position = \"none\",\n        plot.margin = margin(5,5,5,5),\n        plot.title = element_text(size=24,family=\"xkcd\",vjust=-2),\n        plot.caption = element_text(size=8,family=\"xkcd\",hjust = 0.5,vjust=-2))\n\n\n# background ---------\nlibrary(ggimage)\n\n\nimage<-\"frame.png\"\n\nfinal_plot<-ggbackground(water_plot, image, alpha=.7,color=\"#94BCFF\")\n\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"tidytuesday_Water.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################ \nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\nfinal_plot <- image_read(\"W19/tidytuesday_Water.png\")\n\nattached_logo <- image_composite(final_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_Water.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w38_Billboard_Top_100/w38_Billboard_Top_100.html",
    "href": "tidytuesday/cases2021/posts2021/w38_Billboard_Top_100/w38_Billboard_Top_100.html",
    "title": "Billboard",
    "section": "",
    "text": "Load libraries:\n\nlibrary(tidyverse)\n\nLoad data:\n\nbillboard <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv')\naudio_features <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/audio_features.csv')\n\nData wrangling and saving data on a csv file:\n\nmy_df <- billboard %>%left_join(audio_features,by=c(\"song\",\"song_id\",\"performer\"))%>%\n  select(-url,-instance,-key,-mode,-valence,-tempo,-time_signature,-previous_week_position,-starts_with(\"spotify\"))\n\n#write_csv(my_df,here::here(\"w38/my_df.csv\"))\nmy_df <- read.csv(here::here(\"w38/my_df.csv\"))\n\nmy_df\n\nI’d like to study the “speackness” variable:\n\nsummary(my_df$speechiness)\n\nDataExplorer::profile_missing(my_df)\n\nSome values are missing (about 13% of the total), we leave them out for this visualization.\n\nmy_df <- my_df%>%drop_na(speechiness)\n\nLoad fonts to use in the theme():\n\nlibrary(extrafont)\n#fonts()\n\nMake a plot:\n\nplot <- my_df %>%#pull(peak_position)%>%summary(peak_position)\n  mutate(speechiness_class=case_when(speechiness<=0.33~\"Most likely music\",\n                                            speechiness>0.33&speechiness<=0.66~\"Contain music and speech\",\n                                            speechiness>0.66&speechiness<=0.75~\"Probably spoken words\",\n                                            speechiness>0.75~\"Exclusively speech-like\"))%>%\n  mutate(peak_position_class=case_when(peak_position<=15~\"low\",\n                                            peak_position>15&peak_position<=30~\"medium\",\n                                            peak_position>30&peak_position<=50~\"high\",\n                                            peak_position>=50~\"top\"))%>%\n  \n  ggplot(aes(x=-log10(speechiness)))+ #aes(x=speechiness))+\n  geom_histogram(binwidth=0.03,aes(color=factor(peak_position_class),fill=factor(peak_position_class)))+\n  #guides(color=\"none\",fill=\"none\")+\n  #scale_x_reverse()+\n  labs(subtitle=\"The Billboard Hot 100 is the music industry standard record chart in the United States for songs, \\npublished weekly by Billboard magazine. (Billboard Top 100 - Wikipedia)\\nCharts show the `Speechiness` distributions based on peak positions on radio play, and online streaming in the United States.\\n\",\n       color=\"Peak position\",fill=\"Peak position\",\n       x=\"Speechiness values (Log10-tranformation)\",y=\"\")+\n  facet_wrap(~speechiness_class,scales=\"free\")+\n  theme(text = element_text(family=\"Luminari\",color=\"midnightblue\",face = \"bold\"),\n        plot.subtitle = element_text(family=\"Luminari\",color=\"midnightblue\",size=14,vjust=-0.5),\n        legend.position = \"top\", #c(0.1,0.85),\n        legend.background = element_blank(),\n        legend.text = element_text(face = \"bold\",color=\"midnightblue\",size=14),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(face = \"bold\",color=\"midnightblue\",size=14),\n        axis.text = element_text(face = \"bold\",color=\"midnightblue\",size=14)\n        )\n\nAdd some features such as phrases of explanation, add some logos and other little information:\n\nlibrary(ggpubr)\ngraphics <- ggarrange(plot)+\n  theme(plot.background = element_rect(fill=NA, color = NA))\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"Top 100 Billboard\",\n                                              color = \"#9A32CD\", face = \"bold\", size = 45,\n                                              family = \"Luminari\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: Top 100 Billboard from Data.World\",\n                                                 color = \"black\",family = \"Luminari\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 15),\n                              left = text_grob(\"#TidyTuesday week38: Top 100 Billboard\", color = c(\"#778899\"), rot = 90,size = 30),\n                              right = text_grob(bquote(\"Top 100 Billboard MUSIC 🎼\"), color = c(\"#778899\"),rot = 90,size = 30),\n                              fig.lab = \"TidyTuesday week38\", fig.lab.face = \"bold.italic\",fig.lab.size = 12,\n                              fig.lab.pos = \"bottom.right\"\n)\n\n\n\nfinal_plot <-\n  final_plot +\n\n  annotate(geom = \"text\", label = \"The Billboard Hot 100 \\nwas first released in August 1958\",\n           x = 0.11, y = 0.74,colour = \"#00D2BE\",size = 4,family = \"Luminari\") +\n  annotate(geom = \"curve\", x = 0.07, xend = 0.09, y = 0.85, yend = 0.78, colour = \"#00D2BE\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"Luminari\",size=1.5) +\n\n  \n  \n  annotate(geom = \"text\", label = \"a good balance hits \\nin all positions\",\n           x = 0.3, y = 0.6,colour =\"#6B8E23\",size = 4,family = \"Luminari\") +\n  annotate(geom = \"curve\", x = 0.25, xend = 0.28, y = 0.53, yend = 0.69, colour = \"#6B8E23\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Luminari\",size=1.5) +\n\n  \n  \n  annotate(geom = \"text\", label = \"Peak positions high \\nare most likely found with \\n`Most likely music`\",\n           x = 0.18, y = 0.63,colour = \"#FF4040\",size = 4,family = \"Luminari\") +\n  annotate(geom = \"curve\", x = 0.11, xend = 0.10, y = 0.63, yend = 0.70, colour = \"#FF4040\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Luminari\",size=1.5) +\n  \n  \n\n  annotate(geom = \"text\", label = \"all music hits \\nthe top high with higher frequency\",x = 0.22, y = 0.25, colour = \"#9A32CD\", size = 5,family = \"Luminari\") +\n\n  annotate(geom = \"text\", label = \"MUSIC 🎼\", x = 0.18, y = 0.03, colour = \"red\", size = 7,family = \"Luminari\")+\n\n\n  annotate(geom = \"text\", label = \"worthy speech hit \\nthe top-high\\n without music \\nvery rarely\", x = 0.62, y = 0.34, colour = \"#FF7256\", size = 5,family = \"Luminari\") +\n  annotate(geom = \"curve\", x = 0.68, xend = 0.64, y = 0.52, yend = 0.41, colour = \"#FF7256\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Luminari\",size=1.5)\n\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\n\n\nimg <- image_read(here::here(\"w38/colored_Billboard_logo.png\"))\nimg2 <- image_read(here::here(\"w38/Billboard_Hot_100_logo.png\"))\n\nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(img, x = 0.85, y = 0.39,width = 0.12)+\n  draw_image(img2, x = 0.1, y = -0.2,width = 0.12)\n\nSave final plot\n\nragg::agg_png(here::here(\"w38/w38_billboard.png\"),\n              res = 320, width = 16, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w36_Bird_Baths/w36_Bird_Baths.html",
    "href": "tidytuesday/cases2021/posts2021/w36_Bird_Baths/w36_Bird_Baths.html",
    "title": "Bird Baths",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggdendro)\nlibrary(dendextend)\nlibrary(ggraph)\nlibrary(tidygraph)\nlibrary(purrr)\nlibrary(rlang)\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 36)\nbird_baths <- tuesdata$bird_baths\n\nbird_baths <- bird_baths %>%\n  drop_na() %>%\n  filter(bird_count>0)  # %>% count(bird_type,sort=TRUE) %>% View()\n\nsurvey_year_id <- bird_baths %>% count(survey_year) %>%\n  mutate(survey_year_id = row_number()) %>% select(-n)\nurban_rural_id <- bird_baths %>% count(urban_rural) %>%\n  mutate(urb_rul_id = row_number()) %>% select(-n)\nbioregions_id <- bird_baths %>% count(bioregions) %>% \n  mutate(bioregions_id = row_number()) %>% select(-n)\nbird_type_id <- bird_baths %>% count(bird_type) %>% \n  mutate(bird_type_id = row_number()) %>% select(-n)\n\n\nbird_baths_numeric <- bird_baths %>%\n  inner_join(survey_year_id,\n             by=\"survey_year\") %>%\n  inner_join(urban_rural_id,\n             by=\"urban_rural\") %>%\n  inner_join(bioregions_id,\n             by=\"bioregions\") %>%\n  inner_join(bird_type_id,\n             by=\"bird_type\") %>%\n  count(survey_year_id,urb_rul_id,bioregions_id,bird_type_id) %>%\n  arrange(survey_year_id,urb_rul_id,bioregions_id,bird_type_id) \n\n\nbird_baths_half_numeric <- bird_baths %>%\n  inner_join(survey_year_id,\n             by=\"survey_year\") %>%\n  inner_join(urban_rural_id,\n             by=\"urban_rural\") %>%\n  inner_join(bioregions_id,\n             by=\"bioregions\") %>%\n  inner_join(bird_type_id,\n             by=\"bird_type\") %>%\n  count(survey_year,survey_year_id,\n        urban_rural,urb_rul_id,\n        bioregions,bioregions_id,\n        bird_type,bird_type_id) %>%\n  arrange(survey_year) \n\nbird_baths_numeric_short <- bird_baths %>%\n  inner_join(survey_year_id,\n             by=\"survey_year\") %>%\n  inner_join(urban_rural_id,\n             by=\"urban_rural\") %>%\n  inner_join(bioregions_id,\n             by=\"bioregions\") %>%\n  inner_join(bird_type_id,\n             by=\"bird_type\") %>%\n  count(survey_year_id,urb_rul_id,bioregions_id,bird_type_id) %>% #View()\n  filter(n<=20)\n\n\nbird_baths_half_numeric_short <- bird_baths %>%\n  inner_join(survey_year_id,\n             by=\"survey_year\") %>%\n  inner_join(urban_rural_id,\n             by=\"urban_rural\") %>%\n  inner_join(bioregions_id,\n             by=\"bioregions\") %>%\n  inner_join(bird_type_id,\n             by=\"bird_type\") %>%\n  count(survey_year,survey_year_id,\n        urban_rural,urb_rul_id,\n        bioregions,bioregions_id,\n        bird_type,bird_type_id) %>% #View()\n  filter(n<=20)\n\n\n\n#-------- data to use\n\n\nbb_piv_w <- bird_baths_half_numeric %>%\n  count(survey_year,bird_type,urban_rural,bioregions) %>%\n  pivot_wider(names_from=c(survey_year,urban_rural,bioregions),values_from=n,values_fill = 0)\n\n\n# https://cran.r-project.org/web/packages/dendextend/vignettes/Cluster_Analysis.html#the-3-clusters-from-the-complete-method-vs-the-real-species-category\nbirds <- column_to_rownames(bb_piv_w,var = \"bird_type\")\n\n\n\n# View(birds)\n\n# build a dendrogram\n\ndend_r <- birds %>%\n  dist(method = \"man\") %>%\n  hclust(method = \"ward.D2\") %>%\n  as.dendrogram %>%\n  ladderize %>%\n  color_branches(k=4)\n\ndend_c <- t(birds) %>%\n  dist(method = \"man\") %>%\n  hclust(method = \"com\") %>%\n  as.dendrogram %>%\n  ladderize%>%\n  color_branches(k=3)\n\n# set the colors\nsome_col_func <- function(n) (\n  colorspace::diverge_hcl(n, h = c(246, 40), c = 96, l = c(65, 90)))\n\n\n# plot the heatmap with the dendrograms\npar(mar = c(5,5,5,5))\n\nlibrary(gplots)\nset_graph_style(plot_margin = margin(1,1,1,1))\n\nplot <- gplots::heatmap.2(as.matrix(birds),\n                          main = \"Bird types concentration\",\n                          srtCol = 35,\n                          Rowv = dend_r,\n                          Colv = dend_c,\n                          trace=\"row\", hline = NA, tracecol = \"darkgrey\",\n                          margins =c(11,8),\n                          key.xlab = \"spotted/unspotted\",\n                          denscol = \"grey\",\n                          density.info = \"density\",\n                          col = some_col_func\n)\n\n## Save the plot as an image ----\n\nragg::agg_png(here::here(\"w36/heat_map.png\"),\n              res = 320, width = 15, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n#------------finish touches\n\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\n\nheat_map <- image_read(here::here(\"w36/heat_map.png\"))\n\nplot <- ggdraw() +\n  draw_image(heat_map)\n\nlibrary(ggpubr)\ngraphics <- ggarrange(plot)\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"\",\n                                              color = c(\"#8a5d24\"), face = \"bold\", size = 24,\n                                              family = \"xkcd\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: Cleary et al, 2016 TidyTuesday week36\",\n                                                 color = \"black\",family = \"xkcd\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n                              left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size = 10),\n                              right = text_grob(bquote(\"\"), color = c(\"#778899\"),rot = 90,size = 10),\n                              fig.lab = \"TidyTuesday week36\", fig.lab.face = \"bold.italic\",fig.lab.size = 8,\n                              fig.lab.pos = \"bottom.right\"\n)\n\nfinal_plot <-\n  final_plot +\n\n  annotate(geom = \"text\", label = \"While wild bird feeding is recognised as one of\nthe most popular forms of\nhuman-wildlife interaction, almost nothing is known\n           about the use of bird baths.\",\n           x = 0.15, y = 0.25,colour = \"black\",size = 3,family = \"xkcd\") +\n\n  annotate(geom = \"text\", label = \"\",\n           x = 0.15, y = 0.65,colour = \"black\",size = 3,family = \"xkcd\") +\n\n  annotate(geom = \"text\", label = \"Urbanisation is one of the leading causes of species extinction\n           due to extensive habitat alteration\",\n           x = 0.82, y = 0.04,colour = \"black\",size = 3,family = \"xkcd\") +\n\n  annotate(geom = \"text\", label = \"Bioregions\",x = 0.85, y = 0.88, colour = \"#FF7F00\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Rural\",x = 0.73, y = 0.58, colour = \"white\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Urban\",x = 0.1, y = 0.5, colour = \"#FF7F00\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.82, xend = 0.76, y = 0.88, yend = 0.72, colour = \"#FF7F00\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.72, xend = 0.68, y = 0.6, yend = 0.65, colour = \"#FF7F00\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.12, xend = 0.2, y = 0.5, yend = 0.43, colour = \"#FF7F00\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n\n  annotate(geom = \"text\", label = \"Comparing Bird types' while enjoing a bird bath\",\n           x = 0.4, y = 0.84,colour = \"#FF7F00\",size = 3,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Avian assemblages at urban and rural bird baths\n           differed between bioregions with aggressive\n           nectar-eating species\",\n           x = 0.67, y = 0.38,colour = \"black\",size = 3,family = \"xkcd\")\n\n\n\nrainbow_lorikeet_img <- image_read(here::here(\"w36/parrot2.png\"))\n\nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(rainbow_lorikeet_img, x = 0.89, y = 0.4,width = 0.12)\n\n\nfinal\n\n\n## Save final plot ----\n\nragg::agg_png(here::here(\"w36/w36_bird_baths.png\"),\n              res = 320, width = 15, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\n\n\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\nimg <- image_read(\"image.png\")\n\n\ntidy_final <- image_read(\"w35_lemurs.png\")\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator = \"atop\",\n                                 gravity = \"southwest\")\n\nimage_write(attached_logo, path = \"w35_lemurs.png\", format = \"png\")"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w28_International_Independence_Days/w28_International_Independence_Days.html",
    "href": "tidytuesday/cases2021/posts2021/w28_International_Independence_Days/w28_International_Independence_Days.html",
    "title": "International Independence Days",
    "section": "",
    "text": "library(tidyverse)\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 28)\n\nholidays <- tuesdata$holidays\nnames(holidays)\n\n\nlibrary(maps)\nlibrary(sf)\n\nmaps::map(\"world\")\n\n\nworld <- sf::st_as_sf(map(\"world\",plot=FALSE,fill=TRUE))\nworld <- cbind(world, sf::st_coordinates(sf::st_centroid(world)))\n\n\nholidays_map <- holidays %>%\n  filter(str_detect(name_of_holiday,\"(?i)inde\"))%>%\n  left_join(world, by=c(\"country\"=\"ID\")) %>%\n  select(country,date_parsed,name_of_holiday,independence_from,X,Y)%>%\n  mutate(country=as.factor(country))\n\n\nlibrary(showtext)\nlibrary(extrafont)\nshowtext.auto(enable=FALSE)\n\n“#EEE9E9”\n\nmapdata <- ggplot2::map_data(\"world\") %>%\n  filter(!region==c(\"Antartica\",\"Greenland\",\"French Southern and Antartic Lands\")) %>%\n  mutate(region=recode(region, \n                       USA=\"United States\",\n                       UK=\"United Kingdom\"))\n           \n\nfinal_plot <- ggplot() +\n  geom_map(data=mapdata,map = mapdata,aes(map_id=region),fill= \"#F0F8FF\",color= \"#FAEBD7\")+\n  geom_point(data=world,aes(x=X,y=Y),size=1,color=\"grey\",alpha=0.3)+\n  geom_point(data=holidays_map,aes(x=X,y=Y),size=0.5,color=\"black\")+\n  geom_text(data=holidays_map,aes(x=X,y=Y,label=country),family=\"Andalus\",\n                            check_overlap = TRUE,size=1.5,color=\"#363636\",hjust=0,vjust=0)+ #\n  geom_text(data=holidays_map,aes(x=X,y=Y,label=date_parsed),\n            family=\"Andalus\", check_overlap = TRUE,size=0.8,\n            color=\"#CD1076\",vjust=0.8,hjust=-1)+\n  expand_limits(x=mapdata$long,y=mapdata$lat)+\n  coord_map(projection = \"mercator\",xlim=c(-180,180)) +\n  labs(title=\"Date parsed: Independent Days celebrating Countries\",\n       caption= \"DataViz: @fgazzelloni, DataSource: International Independence Days,    Wikipedia,WorldAtlas.com - #TidyTuesday w28\")+\n  guides(fill=\"none\") +\n  ggthemes::theme_map()+\n    theme(axis.text = element_blank(),\n          plot.background = element_rect(fill=\"#C5E5F0\",color=\"#E0EEEE\"),\n          plot.title = element_text(color=\"#363636\",family=\"Andalus\",size=18,face=\"bold\"),\n          plot.caption = element_text(size=10))\n\n\n\nfinal_plot\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w28\",\"w28_independence_days.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()\n\n##################################################"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w17_Netflix_Titles/w17_Netflix_Titles.html",
    "href": "tidytuesday/cases2021/posts2021/w17_Netflix_Titles/w17_Netflix_Titles.html",
    "title": "NETFLIX & Upwards",
    "section": "",
    "text": "library(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(extrafont)\nlibrary(showtext)\n\nshowtext_opts(dpi = 320)\n\n\nshowtext_auto(enable = TRUE)\nmy_family = \"Roboto Condensed\"\n\n#tuesdata <- tidytuesdayR::tt_load(2021, week = 17)\n\nnetflix <- tuesdata$netflix\n\nhead(netflix)\ndim(netflix)\n\nset.seed(73)\nNETFLIX_plot <- ggplot(data=netflix, aes(x=release_year, y=sample(7787),fill=release_year)) +\n  geom_col() +\n  scale_fill_gradient(low = \"#333333\",high = \"red\") + \n  labs(title=\"NETFLIX\",\n       subtitle=\"Show released years from 1925 to 20121\",\n       caption=\"Viz Federica Gazzelloni | DataSource: Kaggle - 'NETFIX titles'| Tidytuesday week 17 & Upwards Day 20\",\n       x=\"Time(Year)\",\n       y=\"\",\n       fill=\"Release Year\")+\n  theme_void() +\n  theme(plot.title=element_text(family=my_family,size=50,face=\"bold\",color=\"red\"),\n        plot.subtitle = element_text(family=my_family,size=15,face=\"bold\"),\n        plot.caption = element_text(family=my_family,size=10,face=\"bold\"),\n        \n        panel.background = element_rect(fill = \"#333333\") ,\n        plot.margin = margin(10,10,10,10),\n        panel.grid = element_line(color = \"white\",size=2),\n        panel.grid.major = element_line(color = \"white\",size=1.5),\n        panel.grid.minor =element_line(color = \"white\",size=2), \n        axis.line = element_line(colour = \"white\"),\n        axis.line.x = element_line(color=\"white\"),\n        axis.line.y = element_blank(),\n        axis.text.x = element_text(family=my_family,size=10,face=\"bold\"),\n        legend.text = element_text(family=my_family,size=10,face=\"bold\"),\n        legend.title = element_text(family=my_family,size=10,face=\"bold\"),\n        legend.position = \"bottom\")\n\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w17\", \"tidytuesday_NETFLIX.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nNETFLIX_plot\n\ndev.off()\n\n\n\n#### ATTACHING LOGO ############################ \nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\ntidy_NETFLIX_plot <- image_read(\"W17/tidytuesday_NETFLIX.png\")\n\nattached_logo <- image_composite(tidy_NETFLIX_plot, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"tidytuesday_NETFLIX.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w13_UN_Votes/w13_UN_Votes.html",
    "href": "tidytuesday/cases2021/posts2021/w13_UN_Votes/w13_UN_Votes.html",
    "title": "UN Votes",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\neu_data <- read_csv(\"/Users/federica/Documents/R/GBD/Comunicable_diseases/Covid19/variants/data.csv\")\neu_data2 <- read_csv(\"/Users/federica/Documents/R/GBD/Comunicable_diseases/Covid19/variants/data2.csv\")\n\n\neu_data%>%\n  select(country,variant)%>%\n  filter(str_detect(variant,\"B.1.1.\"))%>% #variant B.1.1.529\n  count(variant)\n\n\ncountrySubmissionCount <- read_csv(\"/Users/federica/Documents/R/GBD/Comunicable_diseases/Covid19/variants/countrySubmissionCount.csv\")\ncountrySubmissionCount2 <- read_csv(\"/Users/federica/Documents/R/GBD/Comunicable_diseases/Covid19/variants/countrySubmissionCount2.csv\")\n\n# map data\nlibrary(sf)\nworld <- rnaturalearth::ne_countries(scale=110,returnclass = \"sf\")\nworld<-filter(world,!continent==\"Antarctica\")\n\n\n# December 2021 data\nnew_data<- countrySubmissionCount%>%\n  mutate(variant=\"B.1.1.529\")%>%\n  rename(percent_variant=\"%GR/484A (B.1.1.529) in past 4 weeks\",\n         number_detections_variant=\"Total #GR/484A (B.1.1.529)\")%>%\n  mutate(year_week=\"2021-46\")%>%\n  janitor::clean_names()%>%\n  select(country,variant,percent_variant,year_week,number_detections_variant)\n\nfull_data <- eu_data%>%#count(country)%>%View()\n  full_join(new_data,by=c(\"country\",\"variant\",\"percent_variant\",\"year_week\",\"number_detections_variant\"))%>%\n  filter(str_detect(variant,\"B.1.1.5\"))%>%\n  filter(number_detections_variant>0)\n\nfull_data_geo<- full_data%>%\n  inner_join(world,by=c(\"country\"=\"name\"))\n\n# January 2022 data\nnew_data2<- countrySubmissionCount2%>%\n  mutate(variant=\"B.1.1.529\")%>%\n  rename(percent_variant=\"%Omicron GRA (B.1.1.529+BA.*) in past 4 weeks\",\n         number_detections_variant= \"Total #Omicron GRA (B.1.1.529+BA.*)\")%>%\n  mutate(percent_variant=gsub(\"%\",\"\",percent_variant),\n         percent_variant=as.double(percent_variant))%>%\n  mutate(year_week=\"2022-01\")%>%\n  janitor::clean_names()%>%\n  select(country,variant,percent_variant,year_week,number_detections_variant)\n\nfull_data2 <- eu_data2%>%#names()\n  select(country,year_week,new_cases,variant,percent_variant,number_detections_variant)%>%\n  full_join(new_data2,by=c(\"country\",\"variant\",\"percent_variant\",\"year_week\",\"number_detections_variant\"))%>%\n  filter(str_detect(variant,\"B.1.1.5\"))%>%\n  filter(number_detections_variant>0)\n\nfull_data_geo2<- full_data2%>%\n  inner_join(world,by=c(\"country\"=\"name\"))\n\n\n\ndec<-new_data%>%group_by(country)%>%summarise(median_dec=median(percent_variant))\n\njan<-new_data2%>%group_by(country)%>%summarise(median_jan=median(percent_variant))\n\nmerged<-dec%>%\n  merge(jan,by=\"country\")\n\ncountries<-merged%>%count(country)%>%select(-n)\n\n# libraries for fonts\nlibrary(ggCyberPunk)\nggCyberPunk::import_aldrich()\n\nlibrary(extrafont)\nlibrary(showtext)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=110)\nlibrary(sysfonts)\nsysfonts::font_families_google()\nfont_add_google(name =\"Texturina\" ,family = \"my_font\")\nfont_add_google(name =\"Suravaram\" ,family = \"my_font2\")\n\nfamily<-\"my_font\"\nfamily2<-\"my_font2\"\n\nlibrary(ggh4x)\nbarplot<-merged%>%\n  pivot_longer(cols = 2:3,names_to=\"names\",values_to=\"values\")%>%\n  ggplot()+\n  geom_col(aes(x=fct_reorder(country,-values),values,fill=names),\n           width = 0.5)+\n  scale_fill_cyberpunk(palette= \"laser sword\",reverse=F,\n                       labels=c(\"December\",\"January\"),\n                       name=\"\")+\n  scale_x_discrete(expand = expansion(mult = c(0,0)))+\n  # from: https://cran.r-project.org/web/packages/ggh4x/vignettes/PositionGuides.html\n  guides(y = guide_axis_manual( label_size = c(12, 9),label_hjust=1))+\n  coord_flip()+\n  theme_void()+\n  theme(text = element_text(family=family,size=14,color = \"#FFE1FF\"),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_text(family=family2,\n                                   size=8,color = \"#FFE1FF\",hjust = 0),\n        panel.grid = element_blank(),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        legend.position = c(0.7,0.5),\n        legend.key.size = unit(0.5, 'cm'), #change legend key size\n        legend.key.height = unit(0.5, 'cm'), #change legend key height\n        legend.key.width = unit(0.5, 'cm'), #change legend key width\n        legend.text = element_text(size=10))\n\n\n\nplot <- ggplot(world)+\n  geom_sf(aes(geometry=geometry),fill=\"white\",size=0.01)+\n  geom_sf(data=full_data_geo,\n          mapping=aes(geometry=geometry,\n                      fill=percent_variant,\n                      color=percent_variant),\n          size=0.01)+\n  scale_fill_cyberpunk(palette = \"laser sword\",\n                       reverse=F,discrete=F,\n                       name=\"Percent Variant\",\n                       labels=c(\"<10%\",\"20%\",\"40%\",\"60%\"))+\n  coord_sf()+\n  labs(title=\"How fast is the New OMICRON variant spreading in the World?\")+\n  guides(color=\"none\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family=family,size=14,color = \"#FFE1FF\"),\n        plot.title = element_text(vjust=-1.5,size=12),\n        plot.title.position = \"panel\", \n        plot.caption = element_text(vjust=8),\n        legend.background = element_blank(),\n        legend.position = \"none\")\n\n\nplot2 <- ggplot(world)+\n  geom_sf(aes(geometry=geometry),fill=\"white\",size=0.01)+\n  geom_sf(data=full_data_geo2,\n          mapping=aes(geometry=geometry,\n          color=percent_variant,fill=percent_variant),size=0.1)+ \n  scale_fill_cyberpunk(palette= \"laser sword\",\n                       discrete = F,reverse = F,\n                       labels=c(\">0\",\"25%\",\"50%\",\"75%\",\"100%\"),\n                       name=\"\")+\n  coord_sf()+\n  guides(color=\"none\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family=family,size=14,color=\"#FFE1FF\"),\n        legend.direction = \"horizontal\",\n        legend.background = element_blank(),\n        legend.position =c(-0.35,0.5),\n        legend.justification = \"center\",\n        legend.text.align = 0.5,\n        legend.title = element_text(face = \"bold\",size=14),\n        legend.key.size = unit(0.5, 'cm'), #change legend key size\n        legend.key.height = unit(0.5, 'cm'), #change legend key height\n        legend.key.width = unit(0.5, 'cm'), #change legend key width\n        legend.text = element_text(size=10))\n\n\n\nlibrary(cowplot)\n\nfile<-\"data/2022/w1_your_own_data/your_own_data.png\"\nragg::agg_png(file,\n              res = 320, \n              width = 1200, \n              height = 675, \n              units = \"px\",\n              background = \"#5e3e4e\",#\"#4287f5\",\n              scaling = 0.5)\n\nggdraw()+\n  draw_label(\"Omicron genome sequences with unprecedented speed - one month of infection\",\n             x=0.5,y=0.97,fontfamily = family,size=20,\n             color=\"#eb3471\")+\n  draw_label(\"Omicron genome sequences with unprecedented speed - one month of infection\",\n             x=0.5,y=0.975,fontfamily = family,size=21,\n             color=\"#FFE1FF\")+\n  draw_plot(plot,x=0.18,y=0.2,scale=0.65)+\n  draw_plot(plot2,x=0.18,y=-0.25,scale=0.65)+\n  draw_label(\"Percent Variant (median values)\",\n             x=0.15,y=0.88,fontfamily = family,size=12,\n             color=\"#FFE1FF\")+\n  draw_plot(barplot,x=-0.28,y=0.15,scale=0.4)+\n  draw_label(\"Datasource: ECDC & GISAID | Map: Federica Gazzelloni\",\n             x=0.5,y=0.025,fontfamily = family,size=11.5,\n             color=\"#FFE1FF\")+\n  draw_label(\"Date: December 1st 2021\",x=0.98,y=0.73,size=10,angle=-90,\n             color=\"#FFE1FF\",fontfamily = family)+\n  draw_label(\"Date: January 7th 2022\",x=0.98,y=0.3,size=10,angle=-90,\n             color=\"#FFE1FF\",fontfamily = family)+\n  draw_label(\"Percent Variant\",x=0.15,y=0.33,size=12,color=\"#FFE1FF\",fontfamily = family)+\n  draw_label(\"Percent Variant values are calculated\\nconsidering the increase in\\nCovid19 new cases due\\nto the Omicron variant\",\n             x=0.15,y=0.1,size=10,color=\"#FFE1FF\",fontfamily = family) +\n  draw_image(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\",x=0.25,y=-0.45,scale=0.09)+\n  draw_image(\"data/2022/w1_your_own_data/omicron.png\",x=0.35,y=-0.45,scale=0.09)\n\ninvisible(dev.off())"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w40_NBER_Papers/w40_NBER_Papers.html",
    "href": "tidytuesday/cases2021/posts2021/w40_NBER_Papers/w40_NBER_Papers.html",
    "title": "NBER Papers",
    "section": "",
    "text": "Title: “TidyTuesday Week 40 - NBER Programs Category”\n\n\nAuthor: “Federica Gazzelloni”\n\n\nDate: “9/30/2021”\n\n\nDatasource: https://www.nber.org/\n\n#----Libraries----\n# Load the libraries\nlibrary(tidyverse)\nlibrary(tidymodels)\ntidymodels_prefer()\n#library(nberwp)\nlibrary(extrafont)\n#fonts()\nlibrary(RColorBrewer)\nlibrary(patchwork)\n\n#----Load Data----\n# TidyTuesday week40 datasets\npapers <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/papers.csv')\nauthors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/authors.csv')\nprograms <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/programs.csv')\npaper_authors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/paper_authors.csv')\npaper_programs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/paper_programs.csv')\n\n#----Data Wrangling----\n# Joining sets\nauthors <- authors %>% select(author,name)\nprograms <- programs %>% drop_na()\n\ndf <- papers %>%  #count(paper)                # 29434     4\n  inner_join(paper_authors, by =\"paper\") %>%   # 67090     2\n  full_join(paper_programs, by = \"paper\") %>%  # 53996     2\n  inner_join(authors, by = \"author\") %>%       # 15437     2\n  full_join(programs, by = \"program\") %>%      #    20     3\n  drop_na() \n\n# Make a dataframe with programs category and proportions\ndf_cat <- df %>%\n  count(program_desc,program_category,sort=T) %>%\n  mutate(prop = n/sum(n)*100) %>%\n  pivot_wider(names_from = program_category, values_from = program_desc)\n\ndf_cat\n\n# Set the data ready to use in the plot function\n\ndf_plot <- df %>% count(year,program_category,program_desc) \n\nplot_fin_df <- df_plot %>% filter(program_category == \"Finance\")\nplot_mic_df <- df_plot %>% filter(program_category == \"Micro\")\nplot_mac_df <- df_plot %>% filter(program_category == \"Macro/International\")\n\n#----Plot features----\n# Set all the specifications for the plot function to build\n# Make three tibbles as to be used in the legends\nleg_fin <- tibble(\"Finance\"=paste(df_cat$Finance,\"-\",round(df_cat$prop,2),\"%\"))%>%filter(!str_detect(Finance,\"NA\"))\nleg_mic <- tibble(\"Micro\"=paste(df_cat$Micro, \"-\",round(df_cat$prop,2),\"%\"))%>%filter(!str_detect(Micro,\"NA\"))\nleg_mac <- tibble(\"Macro/International\"=paste(df_cat$`Macro/International`,\"-\",round(df_cat$prop,2),\"%\"))%>%filter(!str_detect(`Macro/International`,\"NA\"))\n\nleg_fin;leg_mic;leg_mac\n\n#Set the `color` option for the plot function\nrequire(RColorBrewer)\n# color\ncut_colors1 <- setNames(brewer.pal(2, \"Set1\"), levels(plot_fin_df$program_desc))\ncut_colors2 <- setNames(brewer.pal(4, \"Paired\"), levels(plot_mac_df$program_desc))\ncut_colors3 <- setNames(c(brewer.pal(name = \"Set3\", n = 12), brewer.pal(name = \"Pastel1\", n = 2)), levels(plot_mic_df$program_desc))\n\n# Unlist legends-dataframe to be used in the legends\n# leg_lab\nleg_fin <- unlist(leg_fin$Finance)\nleg_mac <- unlist(leg_mac$`Macro/International`)\nleg_mic <- unlist(leg_mic$Micro)\n\n# leg_pos  \nset1 = c(0.73,0.78)\nset2 = c(0.7,0.8)\nset3 = c(0.55,0.8)\n\n#----ggcombo-------\n# Make a `ggcombo()` plot building a function for plotting the program categories\n\nggcombo <- function(data1,data2,data3){\n  \n  ggbar_cat <- function(data,leg_pos,leg_lab,leg_col,color){\n    \n    data %>%\n      ggplot(aes(x = year,y = n,group = program_desc,fill = program_desc)) +\n      geom_col() +\n      facet_wrap(vars(program_category), ncol = 1, strip.position = \"right\") +\n      \n      scale_fill_manual(values = color, label = leg_lab, name = paste(data[[1,2]],\"category Impact proportion\")) +\n      scale_y_continuous(position = \"right\") +\n      guides(fill = guide_legend(ncol = leg_col,title.position = \"top\", title.hjust = 0.5)) +\n      ggthemes::theme_fivethirtyeight() +\n      theme(text = element_text(family = \"Roboto Condensed\"),\n            axis.text.x = element_text(face = \"bold\",size = 8),\n            axis.text.y = element_text(),\n            legend.text = element_text(size = 8),\n            legend.key.size = unit(0.3, 'cm'),\n            legend.title = element_text(face = \"bold\"),\n            \n            legend.position = leg_pos,\n            legend.background = element_blank(),\n            strip.placement = \"outside\",\n            strip.text = element_text(face = \"bold\",size = 14))\n  }\n  \n  plot_fin <- ggbar_cat(data1,set1,leg_fin,1,cut_colors1)\n  plot_mac <- ggbar_cat(data2,set2,leg_mac,1,cut_colors2)\n  plot_mic <- ggbar_cat(data3,set3,leg_mic,2,cut_colors3)\n  \n  require(patchwork)\n  plot_fin <- plot_fin +\n    labs(title = \"\\n\",subtitle = \"\\n\")\n  \n  plot_fin/plot_mac/plot_mic\n}\n\n\n# Assign a name to the ggcombo \nplot <- ggcombo(plot_fin_df,plot_mac_df,plot_mic_df)\n\n\n#----Pie chart----\n# Make a pie_chart logo\npie_colors <- brewer.pal(name = \"Set2\", n = 3)\n\npie_df <- df %>%\n  count(program_desc,program_category,sort = T) %>%\n  mutate(prop = n/sum(n)*100)\n\npar_prop <- pie_df %>%\n  group_by(program_category) %>%\n  summarize(par_prop = round(sum(prop),0))\n\npie_plot <- pie_df %>%\n  left_join(par_prop,by = \"program_category\") %>%\n  ggplot(aes(x = \"\", y = prop, fill = program_category)) +\n  geom_col(width = 1, stat = \"identity\") +\n  scale_fill_manual(values = pie_colors,name = \"NBER Programs Category\") +\n  guides(fill = guide_legend(ncol = 1,title.position = \"top\", title.hjust = 0.5)) +\n  ggthemes::theme_fivethirtyeight() +\n  theme(text = element_text(family = \"Roboto Condensed\"),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text = element_blank(),\n        legend.text = element_text(size = 14),\n        legend.key.size = unit(0.5, 'cm'),\n        legend.title = element_text(face = \"bold\",size = 16),\n        legend.position = \"none\",#c(0.21,0.9),\n        legend.background = element_blank(),\n        strip.placement = \"outside\") +\n  annotate(geom = \"text\", label = \"Micro\\n62%\", x = 1.1, y = 20, colour = \"grey20\", size = 14, family = \"Roboto Condensed\") +\n  annotate(geom = \"text\", label = \"Macro\\n28%\", x = 1.2, y = 80, colour = \"grey20\",size = 14, family = \"Roboto Condensed\") +\n  annotate(geom = \"text\", label = \"Finance\\n10%\", x = 1.2, y = 95, colour = \"grey20\", size = 11,family = \"Roboto Condensed\") +\n  coord_polar(\"y\", start = 0) \n\n# save the pie_chart_logo\nragg::agg_png(here::here(\"w40/w40_pie_ep.png\"),\n              res = 320, width = 8, height = 8, units = \"in\")\npie_plot\ndev.off()  \n\n#----Annotations----\n# Annotate the figure first with adding top and bottom information to have it framed with `ggarrange()`\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\nlibrary(ggpubr)\n\ngraphics <- ggarrange(plot)\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"NBER National Bureau of Economic Research\",\n                                              color = c(\"grey28\"), face = \"bold\", size = 34,\n                                              family = \"Roboto Condensed\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: NBER - TidyTuesday week40\\n\",\n                                                 color = \"grey28\",family = \"Roboto Condensed\",\n                                                 hjust = 0.5, x = 0.58, face = \"bold.italic\", size = 16)\n)\n\n\n# Finally, add some other extra information with more annotations\nlibrary(gridExtra)\n\nfinal_plot <-\n  final_plot +\n  \n  annotate(geom = 'segment',y = 0.87, yend = 0.93, x = 0.9,xend = 0.9, color = \"#1E90FF\", size = 10) +\n  \n  annotate(geom = \"text\", label = \"All three Program Categories reached the top level in 2020 with \n           the highest number of paper publications due to Covid19\",\n           x = 0.58, y = 0.90,colour = \"grey20\",size = 6,family = \"Roboto Condensed\",fontface = \"bold\") +\n  \n  annotate(geom = \"text\", label = \"Finance topic started in 1978 \n           but with lack of success since late 1990 \n           when started its continuous growth\",\n           x = 0.25, y = 0.7,colour = \"grey20\",size = 5,family = \"Roboto Condensed\") +\n  \n  annotate(geom = \"text\", label = \"Macro/International topic started in 1975 \n           reaching the highest level among the other \n           categories, after the first decrease in early 1990 decade, \n           most probably for the increased interest in other topics, \n           maintained a steady growth along the years\",\n           x = 0.28, y = 0.5,colour = \"grey20\",size = 4,family = \"Roboto Condensed\") +\n  \n  annotate(geom = \"text\", label = \"Micro topic is the most varied one, \n           and maintained little but steady increase \n           along the whole period\",\n           x = 0.24, y = 0.15,colour = \"grey20\",size = 5,family = \"Roboto Condensed\") \n\n#----Logos----\n# add the logos \nimg_pie <- image_read(here::here(\"w40_NBER_papers/pie_ep.png\"))\nimglogo <- image_read(here::here(\"w40_NBER_papers/nber-logo.png\"))\n\nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(img_pie, x = 0.05, y = 0.35,width = 0.22) +\n  draw_image(imglogo, x = 0.01, y = -0.48,width = 0.2)\n\n\n#----Save final plot----\nragg::agg_png(here::here(\"w40_NBER_papers/w40_NBER_papers.png\"),\n              res = 320, width = 10, height = 12, units = \"in\")\nfinal\ndev.off()\n\n#----Tidytuesday logo----\n# read the image, attach the Tidytuesday logo and save it\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\ntidy_final <- image_read(here::here(\"w40_NBER_papers/w40_NBER_papers.png\"))\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator = \"atop\",\n                                 gravity = \"southeast\")\n\nimage_write(attached_logo, path = \"w40_NBER_papers.png\", format = \"png\")"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w32_Paralympic_Medals/w32_Paralympic_Medals.html",
    "href": "tidytuesday/cases2021/posts2021/w32_Paralympic_Medals/w32_Paralympic_Medals.html",
    "title": "Paralympic",
    "section": "",
    "text": "To set the search() function to check the kind of packages installed in the session:\n\nold <- search()\n\n\nlibrary(tidyverse)\n\nlibrary(extrafont)\n# loadfonts() # to do just once at the beginning of the session\n\nLoad this week data:\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 32)\ntidytuesdayR::readme(tuesdata)\nathletes <- tuesdata$athletes\n\n\nnames(athletes)\n\n\nhead(athletes,3)\n\n\nDataExplorer::profile_missing(athletes)\n\nSee the sports for the Paralympic Games: a total of 11 sports takes place with an avg of 8 each four year round 8,9,9,9,10,10,10,10,10,11\n\nathletes %>% filter(year==\"2016\") %>%count(type) %>% arrange(-n)\n\nSee which country “abbreviation” are missing: 49 rows, 1996 Gold 1\n\nathletes %>% filter(is.na(abb)) %>% count(medal)\n\nWhich Country won the Gold medal at the Paralympic in 1996 with Wheelchair Rugby ?\n\nUSA Rugby was the only US “Team Sport” to capture Gold during the 1996 Summer Paralympics.\n\nsource: Wheelchair rugby at the Summer Paralympics\n\nathletes %>% filter(is.na(abb)) %>% count(gender,type,medal,year)%>%arrange(-year)\n\nFill the row with the information above:\n\nid <- row.names(athletes)\n\nathletes <- cbind(id,athletes)\n\nathletes[athletes$id==\"9796\",\"abb\"]<-\"USA\"\n\n\nathletes%>%filter(abb==\"USA\" & year==\"1996\" & medal==\"Gold\",type==\"Rugby\") \n\n\nathletes %>% filter(is.na(abb)) %>% count(id,gender,type,medal,year)%>%count(medal,year)\n\nIn 1980 the USA won 75 Gold medals as well as Poland, while West Germany won just 68 Gold medals.\nsource\nTo see effectively who are the countries who have won the Paralympic and fill the gaps found, the best way is to check it by the year.\n\nathletes %>% filter(year==\"1980\") %>% count(medal,abb==\"USA\")\n\nLoad the Olympic Games data from last TidyTuesday: add the regions data to our dataset to use {ggflag} and add the round shaped flag to our geoms\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 31)\nregions <- tuesdata$regions\n\nSet up the full dataset with some minor changes:\n\nathletes_full <- athletes %>%\n  mutate(gender=case_when(gender==\"Mixed\" ~ \"Mixed team\",\n                          TRUE ~ gender)) %>%\n  inner_join(regions,by=c(\"abb\"=\"NOC\")) %>%\n  select(year,abb,country,region,type,gender,medal,event,athlete) %>%\n  mutate(abb=tolower(abb),country=tolower(country))\n\n\nDataExplorer::profile_missing(athletes_full)\n\nJust a double chek of the “country” vector and then we drop it:\n\nhead(athletes_full,3)\n\n\nathletes_full %>% count(abb,country,region)\n\n\nathletes_full <- athletes_full %>%\n  select(-country) \n\n10 years from 1980 to 2016 of Summer Paralympic Games:\n\nathletes_full %>% count(year)\n\nabb: abbreviation of country region are 112 , while the region vector contains 104 countries.\n\nChina region id divided in “chn” and “hkg”, only hkg has 198 events\nCzech Republic divided in “cze” and “tch”\nGermany divided in “frg”, “gdr”, “ger”\nRussia divided in “rus” and “urs”\nSerbia divided in “scg”, “srb”, “yug”\n\n\nathletes_full %>% count(region,abb)%>%arrange(region)\n\nAdd the {ggflags} package:\n\nlibrary(ggflags)\nlibrary(countrycode)\n\nAssigning a new name to have the athletes_full set as back up:\n\nmy_df <- athletes_full %>% \n  mutate(country_code = countrycode(region, \n            origin = 'country.name', \n            destination = 'iso2c'),\n         country_code = tolower(country_code)) %>%\n  rename(sport=type) %>%\n  select(year,region,sport,medal,country_code) \n\n\nmy_df %>% DataExplorer::profile_missing()\n\nWhat we want is to make a sigmoid network with geom_segment, geom_sigmoid, and geom_flag: to connect the 50+ highest frequency of countries at the Paralympic Games and the same by sports and Gold medals.\nSet the index vectors for each variable to connect with a sigmoid and rebuild a new set:\n\norder_year <- my_df %>%\n  count(year) %>% \n  mutate(index_year = row_number())\n\n\norder_region <- my_df %>%\n  count(region) %>% arrange(-n) %>%\n  mutate(index_region = row_number())\n\norder_sport <- my_df %>%\n  count(sport) %>% arrange(-n) %>%\n  mutate(index_sport = row_number())\n\n\norder_medal <- my_df %>%\n  count(medal) %>% arrange(-n) %>%\n  mutate(index_medal = row_number())\n\n\nmy_df_ordered <- my_df %>%\n  left_join(order_year) %>% select(-n) %>%\n  left_join(order_region) %>% select(-n) %>%\n  left_join(order_sport) %>% select(-n) %>%\n  left_join(order_medal) %>% select(-n) \n\nAdd the groups vectors and select the first 20 regions/countries by the highest frequency:\n\ngold_medal_sports <- my_df_ordered %>%\n  mutate(group = glue::glue(\"{year}-{region}\"),\n         group2 = glue::glue(\"{region}-{sport}\"),\n         group3 = glue::glue(\"{sport}-{medal}\"),\n         group4 = glue::glue(\"{region}-{medal}\"))\n         \n\nfirst_20_regions<- gold_medal_sports %>% \n  count(region) %>% \n  arrange(-n) %>% \n  filter(n>=259) %>% \n  select(-n) %>% \n  unlist()\n\nMake three more dataset for selected sigmoids data:\n\nsig_short <- gold_medal_sports %>% \n  filter(region %in% first_20_regions)# & year==2016)#  & region==c(\"UK\",\"Italy\",\"USA\")) \n\n\nsig_short_gold <- sig_short%>%filter(medal==\"Gold\")\n\n\nsig_short_gold_yr <- sig_short %>% \n  filter(medal==\"Gold\") %>% \n  count(year,region,index_year,index_region,group) %>% \n  arrange(-n) %>%\n  filter(n>=50)\n\n\nsig_short_gold_sport <- sig_short %>% \n  filter(medal==\"Gold\") %>% \n  count(region,sport,index_region,index_sport,group2) %>% \n  arrange(-n) %>%\n  filter(n>=50)\n\n\nlibrary(scales)\nlibrary(ggbump)\nlibrary(extrafont)\nlibrary(showtext)\nlibrary(cowplot)\nlibrary(ggstream)\nlibrary(colorspace) \nlibrary(ggpubr)\n\n## Automatically use showtext to render text for future devices\nshowtext_auto()\n\n## Tell showtext the resolution of the device,\n## only needed for bitmap graphics. Default is 96\nshowtext_opts(dpi = 320)\n\n## Loading Google fonts (https://fonts.google.com/)\n\nfont_add_google(\"Oswald\", \"oswald\")\nfont_add_google(\"Rock Salt\", \"rock\")\nfont_add_google(\"Amatic SC\" , \"amatic\")\n\n\nfont_add_google(\"Share Tech Mono\", \"techmono\")\nfont_add_google(\"Roboto Condensed\", \"roboto condensed\")\nfont_add_google(\"Gochi Hand\", \"gochi\")\nfont_add_google(\"Schoolbell\", \"bell\") # title\nfont_add_google(\"Covered By Your Grace\", \"grace\")\n\n\n\n\n\nbackground <- \"red\"\ntext_color <- \"grey50\"\n\npalette <- c(\"#0286c3\" , lighten(\"#0286c3\" , 0.5)  , \n             \"#fbb22e\" , lighten( \"#fbb22e\" , 0.5) , \n             \"#168c39\" , lighten(\"#168c39\" , 0.5)  ,\n             \"#ee2f4d\" , lighten(\"#ee2f4d\" , 0.5)  )\n\nOlympic Games color palettes: source: palettes\n\ncolor_paralympics <- c(\"#FF0000\",\"#C4161C\",\"#820000\",\"#ec008c\",\"#c40063\",\"#8B0037\",\"#92278F\",\"#6F2C91\",\"#3D1063\",\n                  \"#0095da\",\"#0063A5\",\"#013B82\",\"#39bb9d\",\n                  \"#39bb9d\",\"#00695E\",\"#B2D235\",\"#88ac2e\",\"#28752B\",\n                  \"#ffd400\",\"#e5A812\",\"#B18906\",\"#f7941E\",\n                  \"#E66A1F\",\"#985006\")\n\nMake the sigmoid network:\n\npara_plot <- ggplot(data=sig_short) +\n  \n  geom_text(\n    aes(x = -2.9, y = index_year+5, label = year), vjust=0, hjust=\"left\", color = \"red\", size = 4.5,family = \"oswald\") +\n\n  geom_text(\n    aes(x = -0.65, y = index_region, label = region), vjust=0, hjust=\"center\", color = \"red\", size = 4.5,family = \"oswald\") +\n  \n  geom_text(aes(x = 1.75, y = index_sport+5, label = sport),family = \"oswald\", hjust=\"center\", vjust=0, color = \"red\", size = 4.5) +\n  \n  geom_text(aes(x = 3.25, y = index_medal+10, label = medal),family = \"oswald\", hjust=0, vjust=0, color = \"red\", size = 4.5) +\n  \n  #################\n  # first sigmoid connecting years to regions\n  \n   geom_point(data = sig_short_gold, aes(x = -2.7, y = index_year+5), color = \"gold\", size = 2, inherit.aes = FALSE) +\n  \n  geom_sigmoid(\n     aes(x = -2.7, xend = -1, y = index_year+5, yend =index_region, group=factor(group)), color = \"#DCDCDC\") + \n  \n  geom_point(data = sig_short_gold, aes(x = -1, y = index_region), shape = 21, colour = \"gold\", fill = NA, size = 7, stroke = 1,inherit.aes = FALSE) +\n  \n  geom_sigmoid(data=sig_short_gold_yr,\n     aes(x = -2.7, xend = -1, y = index_year+5, yend =index_region, group=factor(group),color = region)) +\n  \n\n  ggflags::geom_flag(data = sig_short_gold, aes(x = -1, y = index_region, country = country_code), size=4.5) +\n  \n  ggflags::scale_country() +\n  guides(country=\"none\") +\n  \n  \n  #################\n  # second sigmoid to connect regions to sports\n  \n\n  geom_point(data = sig_short_gold, aes(x = -0.4, y = index_region),color = \"gold\", size = 2, inherit.aes = FALSE) +\n  \n  geom_sigmoid(\n     aes(x = -0.4, xend = 1.4, y = index_region, yend =index_sport+5, group=factor(group2)),color = \"#DCDCDC\") +\n  \n  geom_point(data = sig_short_gold, aes(x = 1.4, y = index_sport+5), color = \"gold\", size = 2, inherit.aes = FALSE) +\n  \n  geom_sigmoid(data=sig_short_gold_sport,\n     aes(x = -0.4, xend = 1.4, y = index_region, yend =index_sport+5, group=factor(group2),color = sport)) +\n \n  \n  ################### \n  # third sigmoid to connect sports to medals\n\n\n  geom_point(data = sig_short_gold, aes(x = 2.10, y = index_sport+5), color = \"gold\", size = 2, inherit.aes = FALSE)+\n  \n  geom_sigmoid(\n     aes(x = 2.10, xend = 3.15, y = index_sport+5, yend =index_medal+10, group=factor(group3)),color = \"#DCDCDC\") +\n  \n  geom_point(data = sig_short_gold, aes(x = 3.15, y = index_medal+10, color = medal), shape = 21, colour = \"gold\", fill = NA, size = 7, stroke = 1, inherit.aes = FALSE) +\n\n  geom_sigmoid(data = sig_short_gold,\n     aes(x = 2.10, xend = 3.15, y = index_sport+5, yend =index_medal+10, group=factor(group3), color = sport)) +\n  \n  \n  #####################\n\n  \n  ylim(0,200) +\n  xlim(-5,4) +\n  scale_y_reverse() +\n  scale_color_manual(values = color_paralympics) +\n  theme_void() +\n  theme(plot.background = element_blank(),\n        panel.background = element_blank(),\n        legend.position = \"none\")\n\n\n\nimg_olympics<-\"https://www.pngall.com/wp-content/uploads/2017/05/Olympic-Rings-Download-PNG.png\"\n\nsigmoid <- ggimage::ggbackground(para_plot, img_olympics,alpha=.2, color=\"#CD919E\")\n\n\nfinal <- ggdraw(\n  sigmoid \n  ) + \n  ggtitle(label=\"Paralympic Games: from 1980 to 2016\") +\n  theme_void() +\n  theme(\n    text = element_text(color = text_color , face = \"bold\"),\n    plot.title = element_text(family = \"amatic\" , size = 40 , hjust = 0.24,vjust=2),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_blank(),\n    plot.margin = margin(1,0,1,0, unit = \"cm\"),\n    plot.title.position = \"panel\") +\n  \n    annotate(geom = \"text\" , label = \"Source: Paralympic Medals, IPC, kaggle.com | Graphic: @fgazzelloni\" , x = 0.5 , y = 0 , family = \"rock\" , size = 6) +\n  \n    annotate(\"text\",label=\"The Paralympic Games or Paralympics is the largest international event for disabled athletes \\nand societal change and take place shortly after every Olympic Games in the same host city. \\nThe Paralympic Games are held every two years\", size=2.5,x = 0.78, y = 0.97,family=\"rock\") +\n    \n   annotate(\"text\",label=\"In 1980 the USA won 75 Gold medals \\nas well as Poland, while\\n West Germany won just 68 Gold medals.\", size=3,x = 0.14, y = 0.6,family=\"rock\") + \n    \n   annotate(\"text\",label=\"Which Country won the Gold medal at the Paralympic \\nin 1996 with Wheelchair Rugby ?\\nUSA Rugby was the only US “Team Sport” to capture \\nGold during the 1996 Summer Paralympics.\", size=3,x = 0.15, y = 0.2,family=\"rock\") +\n  \n   annotate(\"text\",label=\"Sigmoid network of the years, countries, sports and medals\", size=3,x = 0.8, y = 0.1,family=\"rock\") +\n  \n   annotate(\"text\",label=\"Countries with the highest frequency in participation\", size=3,x = 0.23, y =0.9,family=\"rock\") +\n  \n# annotate images\ndraw_image(image = (\"Olympic-Torch-PNG-Free-Download.png\"),\n             #\"https://www.pngall.com/wp-content/uploads/2017/05/Olympic-Rings-Download-PNG.png\",\n           x = -0.05 , y = 0.65 , height = 0.45 , width = 0.25) +\n  draw_image(image = \"https://camo.githubusercontent.com/1411a00ca19fc49c4b0099d26246d261baafd979a76c007ae835984f8c1ae3d2/68747470733a2f2f7777772e706172616c796d7069632e6f72672f73697465732f64656661756c742f66696c65732f7374796c65732f6c617267655f6f726967696e616c2f7075626c69632f323031392d31302f4950432532304e4557253230454d424c454d2e4a50473f69746f6b3d5f46534a62623651\",\n           x = 0.55 , y = 0.78 , height = 0.08 , width = 0.25)\n\n\nragg::agg_png(\"w32_paralympic.png\",\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\n\ntidy_final <- image_read(\"w32_paralympic.png\")\n\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") # tell R where to put the logo\n\n\nimage_write(attached_logo, path = \"w32_paralympic.png\", format = \"png\") # save final plot"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w45_Making_maps_with_R/w45_Making_maps_with_R.html",
    "href": "tidytuesday/cases2021/posts2021/w45_Making_maps_with_R/w45_Making_maps_with_R.html",
    "title": "Making maps with R",
    "section": "",
    "text": "https://osdatahub.os.uk/downloads/open#CODEPO https://datatricks.co.uk/london-map-in-3-easy-steps https://data.police.uk/data/statistical-data/\n\nlibrary(tidyverse)\nlibrary(spData)\nlibrary(sf)\nlibrary(rgeos)\nlibrary(sp)\n# x <- c(\"ggmap\", \"rgdal\", \"rgeos\", \"maptools\", \"dplyr\", \"tidyr\", \"tmap\")\n#  # install.packages(x) # warning: uncommenting this may take a number of minutes\n# lapply(x, library, character.only = TRUE) # load the required packages\n\n\nspData::cycle_hire_osm\nspData::lnd\n\n\ncoord_lnd_cycl <- data.frame(st_coordinates(cycle_hire_osm$geometry))\n\ncycle_hire_osm <- as.data.frame(cycle_hire_osm)\n\n\ncycle_hire_osm$X <- coord_lnd_cycl$X\ncycle_hire_osm$Y <- coord_lnd_cycl$Y\n\n\ncycle_hire_osm\n\n\nspData::lnd\n\n\nplot(lnd)\n\n\nlondon_data <- lnd\n\nlnd_geo <- data.frame(london_data$GSS_CODE,london_data$HECTARES,london_data$geometry)\n\nnames(lnd_geo)[1]<- \"GSS_CODE\"\n\ncoord_london <- data.frame(st_coordinates(lnd_geo$geometry))\n\nlnd_geo_coord<- merge.data.frame(lnd_geo,coord_london)\n\n\nlnd_geo_coord%>%count(L3)\n\nLONDON MAP!!!!!!\n\nggplot() +\n  geom_polygon(data=lnd_geo_coord,\n               aes(x = X, y = Y,group=L3, fill = L3), \n               colour = \"black\")+\n  labs(x = \"Longitude\", y = \"Latitude\", \n       title = \"Map of Greater London with the borough boundaries\")\n\n\ncycle_hire_osm\n\n\nlibrary(extrafont)\nlibrary(showtext)\nfonts()\nloadfonts()\nfont.families.google()\nfont_add_google(\"Mr Dafoe\", \"MrDafoe\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n\n\nlnd_center<- lnd_geo_coord%>%filter(X>c(-0.3) & X<0.0,\n                                    Y>51.4 & Y<51.6)\n\ncycle_hire_osm%>%count(name)\n\nfinal <-ggplot()+\n     geom_polygon(data=lnd_geo_coord,\n               aes(x = X, y = Y,group=L3, fill = L3), \n               colour = \"black\")+\n     geom_point(data=cycle_hire_osm, mapping=aes(x=X,y=Y),\n                color = 'gold', size=0.2, alpha=0.5)+ \n  coord_map()+\n  scale_fill_gradient(low = \"honeydew2\",high = \"darkgreen\")+\n  labs(x = \"Longitude\", y = \"Latitude\", \n       title = \"Map of Greater London with cycle hire\",\n       subtitle = \"with the borough boundaries\",\n       caption = \"Datasource: #TidyTuesday week45 - {spData} package \\n Infographics: Federica Gazzelloni\")+\n  cowplot::theme_map()+\n  theme(panel.grid.major = element_blank(),\n        axis.title.x=element_blank(), \n        axis.text.y=element_blank(), \n        plot.background = element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        panel.background=element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        plot.title=element_text(color=\"honeydew2\",size=33,family=\"Arial\"),\n        plot.subtitle=element_text(color=\"honeydew2\",size=24,family=\"Arial\"),\n        plot.caption = element_text(family=\"Arial\",color=\"honeydew2\"),\n        legend.position = \"none\")\n\n\n# save final plot\nragg::agg_png(\"~/Documents/R/R_general_resources/30DayMapChallenge/day7_green/green.png\",\n              res = 320, width = 11, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w30_US_Droughts/w30_US_Droughts.html",
    "href": "tidytuesday/cases2021/posts2021/w30_US_Droughts/w30_US_Droughts.html",
    "title": "US drought",
    "section": "",
    "text": "library(tidyverse)\n\nResources for this week:\n\nrfordatascience\nComprehensiveStatistics\nNYT\nCNN\nDrought Classification\ndrought Monitor\n\nFacts 2001 to 2021:\n\nSix states are now entirely in drought conditions\nThe drought has nearly doubled in size from this time last year\nAround 25% of the country was in drought conditions in July 2020\nMore than 94% of the West is in drought\nMore than 60% of the region is in ‘extreme’ or ‘exceptional’ drought\nSix states completely in drought conditions; California, Oregon, Nevada, Utah, Idaho and North Dakota\n\nData limitations:\n\nstatistics are limited to areas based on counties\npopulation changes over time\npopulation is distributed evenly across each county\nlimitation\n\nCaption: The U.S. Drought Monitor is jointly produced by the National Drought Mitigation Center at the University of Nebraska-Lincoln, the United States Department of Agriculture, and the National Oceanic and Atmospheric Administration. Map courtesy of NDMC.\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 30)\n\ndrought <- tuesdata$drought\n\n\nglimpse(drought)\n\n\ndrought%>%count(drought_lvl)\n\nIntensity and Impacts\n\nintensity_impacts<- c(\"D0\"=\"Abnormally Dry\",\n                      \"D1\"=\"Moderate Drought\",\n                      \"D2\"=\"Severe Drought\",\n                      \"D3\"= \"Extreme Drought\",\n                      \"D4\"=\"Exceptional Drought\")\n\n\nDataExplorer::profile_missing(drought)\n\n\ndrought_short <- drought %>%\n  dplyr::select(-map_date,-stat_fmt) %>%\n  filter(!drought_lvl==\"None\",!area_pct==0)\n\ndrought_short\n\n\nlibrary(sf)\nlibrary(raster)\nlibrary(spData)\nlibrary(spDataLarge)\n\nlibrary(maps)\nlibrary(viridis)\nlibrary(ggthemes)\n\n\nus_county_map <- map_data(\"county\")\n\ncounty_plot<-ggplot()+\n  geom_polygon(data=us_county_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"lightblue\") +\n  theme_map()\n\ncounty_plot\n\n\nmy_states <- drought_short%>%count(state_abb)\n\n\nus_state_map <- map_data(\"state\")\n\nstate_plot<-ggplot()+\n  geom_polygon(data=us_state_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"lightblue\") +\n  theme_map()\n\nstate_plot\n\n\nus_plot<-ggplot()+\n  geom_polygon(data=us_county_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"lightblue\") +\n   geom_polygon(data=us_state_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"pink\") +\n  theme_map()\n\nus_plot\n\n\nlibrary(zipcodeR)\nzipcodeR::download_zip_data()\n\ngeo_codes<- zipcodeR::search_state(drought_short$state_abb)%>%\n  dplyr::select(major_city,county,state,lat,lng,\n         population,population_density,\n         land_area_in_sqmi,water_area_in_sqmi,\n         housing_units,occupied_housing_units,\n         median_home_value,median_household_income) %>%\n  drop_na()\n\ngeo_codes\n\n\nmy_geo_codes_df<-geo_codes%>%\n  dplyr::select(state,lat,lng)\n  \n\ndrought_short_map <- drought_short %>%\n  arrange(valid_start)%>%\n  mutate(year=lubridate::year(valid_start),\n         month=lubridate::month(valid_start))%>%\n  filter(str_detect(valid_start,\"2021\")) %>%\n  #filter(month==c(1,2,3)) %>%\n  group_by(month,state_abb,drought_lvl) %>%\n  summarize(med_area_pct=round(median(area_pct),2))%>%\n  ungroup() %>%\n  filter(!med_area_pct==0) %>%\n  left_join(my_geo_codes_df,by=c(\"state_abb\"=\"state\")) %>%\n  mutate(month = month.name[month])\n  \ndrought_short_map\n\n\nlibrary(extrafont)\nloadfonts()\nfonts()\n\ndroughts_family <- \"Roboto Condensed\"\n\n\ndrought_plot <- ggplot() +\n  geom_point(data=subset(drought_short_map,lat>25&lat<50),\n                         aes(x=lng,y=lat,color=drought_lvl),\n             alpha=0.5,size=.4) +\n  geom_polygon(data=us_county_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"lightblue\",size=0.2) +\n   geom_polygon(data=us_state_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"pink\",size=0.4) +\n  facet_wrap(~factor(month, levels=c('January','February','March','April',\n                                     'May','June','July'))) +\n  labs(title=\"\",\n       subtitle=\"\",\n       caption=\"US Droughts map: available values by County\\n Jan to July 2021\",\n       #tag = \"Jan to July 2021\",\n       color=\"Level\") +\n  scale_color_viridis(labels = intensity_impacts,discrete = TRUE) +\n  guides(color = guide_legend(override.aes = list(size = 3))) +\n  ggthemes::theme_map() +\n  theme(legend.position = \"top\",\n        legend.title = element_text(family = droughts_family),\n        legend.text = element_text(size=8,family =droughts_family),\n        legend.background = element_blank(),\n        legend.box.background = element_blank(),\n        legend.key = element_blank(),\n        strip.background = element_blank(),\n        strip.text = element_text(family = droughts_family),\n        plot.title =element_text(size=15,face=\"bold\",family =droughts_family,color=\"black\"),\n        plot.subtitle =element_text(size=12,face=\"bold\",family =droughts_family),\n        plot.caption =element_text(size=9,family =droughts_family,hjust = 0),\n        #plot.tag = element_text(size=9,face=\"bold\",family =droughts_family,hjust = 0),\n        plot.caption.position = \"panel\",\n        plot.title.position = \"panel\")\n  \n\n\n# drought_plot \n\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\n\ncooked_drought <- recipe(drought_lvl ~ med_area_pct+month + lat+lng +state_abb,drought_short_map) %>%\n  prep()%>%\n  bake(new_data=NULL)\n\ncooked_drought\n\n\ncooked_drought_plot <- cooked_drought%>%\n  group_by(drought_lvl,month) %>%\n  summarise(med_med_area_pct=median(med_area_pct)) %>%\n  mutate(month_f= case_when(month==\"January\"~1,\n                            month==\"February\"~2,\n                            month==\"March\"~3,\n                            month==\"April\"~4,\n                            month==\"May\"~5,\n                            month==\"June\"~6,\n                            month==\"July\"~7)) %>%\n\n  ggplot(aes(x=month_f,y=med_med_area_pct,fill=month)) +\n  geom_col()+\n  geom_text(aes(label=month),nudge_y = 1.5,size=1.5,family = droughts_family) +\n  geom_text(aes(label=med_med_area_pct),nudge_y = -1.5,size=1.5,color=\"white\") +\n  facet_wrap(~factor(drought_lvl,labels = intensity_impacts),\n             nrow = 1,ncol = 5,strip.position=\"bottom\",\n             scales = \"fixed\")+\n  scale_fill_viridis(discrete = TRUE) +\n  labs(y=\"\",\n       caption=\"Forecasted Droughts affected area pct median value by first 7 months of the year\")+\n  theme_void()+\n  theme(legend.position = \"none\",\n        plot.caption = element_text(family = droughts_family),\n        axis.text.x = element_blank(),\n        axis.ticks = element_blank(),\n        strip.placement = \"inside\",\n        strip.text = element_text(family = droughts_family,size=6),\n        plot.background = element_blank())\n\n\n  \n# cooked_drought_plot\n\n\nlibrary(cowplot)\n\n\ninset.plot <- cooked_drought_plot + theme(legend.position = \"none\")\n\ndouble_plot <- ggdraw() +\n  draw_plot(drought_plot,width = 1, height = 1) +\n  draw_plot(inset.plot, x = 0.39, y = .035, width = .55, height = .25)\n\n# double_plot\n\n\nlibrary(ggpubr)\nlibrary(ggimage)\n\n\ngraphics <- ggarrange(double_plot) \n\nannotation_plot <- annotate_figure(graphics,\n               top = text_grob(\"US droughts monitor condition outlook: \",color =c(\"#36648B\", \"#607B8B\", \"#668B8B\"), \n                               face = \"bold\", size = 30,family=droughts_family),\n               bottom = text_grob(\"DataViz: @fgazzelloni DataSource: \\n TidyTuesday week30, US Droughts,Drought Monitor,NYTimes & CNN\",\n                                  color = c(\"#36648B\", \"#607B8B\", \"#668B8B\"),family=droughts_family,\n                                  hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n               left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size=1),\n               right = text_grob(bquote(\"\"), color=c(\"#778899\"),rot = 90,size=1),\n               fig.lab = \"TidyTuesday week30\\n\", fig.lab.face = \"bold.italic\",fig.lab.size=7,\n               fig.lab.pos=\"bottom.right\"\n)\n\nfinal_plot <- annotation_plot +\n  annotate(geom = \"text\", label=\"map approximates drought-related impacts\",x = 0.7, y = 0.87, \n           colour = \"#BF3EFF\", size = 8,family=droughts_family) \n  \n\n# final_plot\n\n\nimg <- png::readPNG('NDMC-logo-usdm-opt.png')\nimg1 <- png::readPNG('DOC-logo-usdm.png')\nimg2 <- png::readPNG('NOAA-logo-usdm.png')\nimg3 <- png::readPNG('USDA-logo-usdm-opt.png')\n\n\nfinal <- ggdraw() +\n  draw_image(img,  x = -0.45, y = 0.44, scale = .10) +\n  draw_image(img1,  x = -0.38, y = 0.44, scale = .10) +\n  draw_image(img2,  x = 0.33, y = 0.44, scale = .10) +\n  draw_image(img3,  x = 0.42, y = 0.44, scale = .10) +\n  draw_plot(final_plot)\n\n# final\n\nSaving:\n\nragg::agg_png(here::here(\"w30\", \"w30_drought.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w34_Star_Trek_Voice_Commands/w34_Star_Trek_Voice_Commands.html",
    "href": "tidytuesday/cases2021/posts2021/w34_Star_Trek_Voice_Commands/w34_Star_Trek_Voice_Commands.html",
    "title": "StarTrek",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2021, week = 34)\ntidytuesdayR::readme(tuesdata)"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w34_Star_Trek_Voice_Commands/w34_Star_Trek_Voice_Commands.html#designing-speech-interactions-from-the-imagined-ideal-of-star-trek",
    "href": "tidytuesday/cases2021/posts2021/w34_Star_Trek_Voice_Commands/w34_Star_Trek_Voice_Commands.html#designing-speech-interactions-from-the-imagined-ideal-of-star-trek",
    "title": "StarTrek",
    "section": "Designing Speech Interactions from the Imagined Ideal of Star Trek",
    "text": "Designing Speech Interactions from the Imagined Ideal of Star Trek\nvoice user interfaces (VUIs) like Alexa reveals mismatches between current designs and user expectations The analysis study voice interactions with the Enterprise’s computer and compare them to current interactions\n\ncomputer <- tuesdata$computer\nhead(computer,3)\nDataExplorer::profile_missing(computer)\n\n\ndf <- computer %>%\n  select(char,line,type,pri_type,nv_resp:error) %>% #count(char)\n  mutate(char=if_else(str_detect(char,\"Computer\"),\"Computer\",char),\n         type=if_else(str_detect(type,\"command\"),\"Command\",type),\n         type=if_else(str_detect(type,\"question\"),\"Question\",type))\n\n\ndf %>% \n  group_by(char) %>%\n  summarize(type,nv_resp) %>%\n  ungroup() %>%\n  ggplot(aes(y=char,x=type,z=nv_resp)) +\n  stat_summary_hex(alpha=0.8,bins=50)+\n  scale_fill_viridis_c()+\n  labs(fill = \"char\",title = \"type\")+\n  theme(axis.text.x = element_text(angle=90,size=6))\n\n\nlibrary(extrafont)\nloadfonts()\n\n\nfinal <- df %>% #count(type,nv_resp,sort=TRUE)%>%\n  ggplot(aes(x=fct_reorder(sort(type,decreasing = TRUE),nv_resp),group=nv_resp)) +\n  geom_histogram(aes(fill=nv_resp),stat=\"count\",position =\"stack\")+ #position_dodge(width=0))+\n  coord_flip()+\n  scale_fill_viridis_d()+\n  labs(title=\"Type of words when the computer completes the query but without speaking a response\", \n       subtitle=\"False or True?\",\n       caption=\"Infographic: @fgazzelloni\\n DataSource: TidyTuesday Week34:Star Trek Voice Commands,SpeechInteraction.org\",\n       fill=\"Response\",\n       y=\"N°\",x=\"Word type\") +\n  ggthemes::theme_solarized()+\n  theme(text = element_text(family=\"Impact\"),\n        axis.text.x = element_text(angle=0,size=10),\n        axis.text.y = element_text(angle=0,size=10),\n        axis.title.x = element_text(size=14),\n        axis.title.y = element_text(size=14),\n        plot.title.position = \"plot\",\n        plot.title = element_text(face=\"bold\",size=20),\n        plot.subtitle = element_text(face=\"bold\",size=14),\n        plot.caption = element_text(size=10),\n        plot.caption.position = \"plot\")\n\n\nragg::agg_png(\"w34_star_trek.png\",\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\n\nlibrary(scales)\nlibrary(ggbump)\nlibrary(extrafont)\nlibrary(showtext)\nlibrary(cowplot)\nlibrary(ggstream)\nlibrary(colorspace) \nlibrary(ggpubr)\nlibrary(ggbump)\nlibrary(ggimage)\nlibrary(magick)\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\nimg <-image_read(\"1200px-Star_Trek_TNG_logo.svg.png\")\n\n\ntidy_final <- image_read(\"w34_star_trek.png\")\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"southwest\") \nimage_write(attached_logo, path = \"w34_star_trek.png\", format = \"png\") \ntidy_final2 <- image_read(\"w34_star_trek.png\")\n\nattached_logo2 <- image_composite(tidy_final2, img,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") \nimage_write(attached_logo, path = \"w34_star_trek.png\", format = \"png\") \n\n\nlibrary(\"ggmosaic\")\n\n\nfinal2 <- df %>% \n  select(type,char_type) %>%\n  ggplot() +\n  geom_mosaic(aes(x = product(type, char_type), fill = type)) +\n  labs(title=\"Type of request by count Person or Computer?\",\n       x=\"\",fill=\"Type of interaction\",\n       caption=\"Infographic: @fgazzelloni\\n DataSource: TidyTuesday Week34:Star Trek Voice Commands,SpeechInteraction.org\")+\n  theme(text=element_text(family=\"Roboto Condensed\"),\n  axis.text.y = element_blank(),\n  axis.ticks.y = element_blank(),\n  axis.title.y = element_blank(),\n  axis.text.x = element_text(color=\"white\",size=10),\n  axis.ticks.x = element_line(color=\"white\",size=1),\n  panel.background = element_blank(),\n  panel.border = element_blank(),\n  panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),\n  plot.background = element_rect(color=\"darkgrey\",fill=\"black\"),\n  plot.title = element_text(color=\"white\",size=30),\n  legend.position = \"left\",\n  legend.text = element_text(color=\"white\"),\n  legend.background = element_rect(color=\"darkgrey\",fill=\"black\"),\n  plot.caption = element_text(color=\"white\")\n)\n\n\nragg::agg_png(\"w34_star_trek2.png\",\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal2\n\ndev.off()\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo<-image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\ntidy_final <- image_read(\"w34_star_trek2.png\")\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator=\"atop\",\n                                 gravity=\"southwest\") \nimage_write(attached_logo, path = \"w34_star_trek2.png\", format = \"png\") \n\n\nimg <-image_read(\"white_startrek.png\")\n\ntidy_final2 <- image_read(\"w34_star_trek2.png\")\n\nattached_logo2 <- image_composite(tidy_final2, img,\n                                 operator=\"atop\",\n                                 gravity=\"northeast\") \nimage_write(attached_logo2, path = \"w34_star_trek2.png\", format = \"png\") \n\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\ndummy\n\ndf %>% select(char,type,nv_resp) %>%\n  #mutate(nv_resp=factor(nv_resp)) %>%\n  recipe(char~.) %>%\n  step_dummy(all_nominal_predictors(),one_hot = TRUE)%>%\n  prep() %>%\n  bake(df) %>%\n  group_by(char,nv_resp) %>%\n  summarise_all(.funs = sum) %>%\n  ungroup() %>%\n  pivot_longer(cols=type_Alert:type_Wake.Word,names_to=\"type\",values_to=\"values\") %>%\n  mutate(type=gsub(\"^type_\",\"\",type)) %>%\n  group_by(char,nv_resp,type) %>%\n  summarize(tot=sum(values)) %>%\n  ungroup() %>%\n  \n  ggplot() +\n  geom_mosaic(aes(x = product(type, char), fill = nv_resp)) +\n  #geom_text(aes(x=nv_resp,y=type,label=type))+\n  theme(\n  axis.text.y = element_blank(),\n  axis.ticks.y = element_blank(),\n  axis.title.y = element_blank(),\n  panel.background = element_blank(),\n  panel.border = element_blank(),\n  panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),\n  plot.background = element_blank(),\n  legend.position = \"left\"\n)"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w50_Spiders/w50_Spiders.html",
    "href": "tidytuesday/cases2021/posts2021/w50_Spiders/w50_Spiders.html",
    "title": "Spiders",
    "section": "",
    "text": "library(tidyverse)\nspiders <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-07/spiders.csv')\n\n# spiders%>%View\nsp_family_graph<-spiders%>%\n  count(family,genus,species,sort=T)%>%\n  select(-n)\n\n# https://stackoverflow.com/questions/24173194/remove-parentheses-and-text-within-from-strings-in-r\nmy_spider_countries<- spiders%>%\n  separate(distribution,into=c(\"country\",\"region\"),sep=\",|;\",remove = FALSE)%>%\n  mutate(country=stringi::stri_trans_totitle(country))%>%\n  mutate(country2=gsub(\"\\\\s*\\\\([^\\\\)]+\\\\)*\",\"\",country))%>%\n  mutate(country2=gsub(\"^D.r.|Dr.\",\"Dem. Rep. \",country2))%>%\n  \n  mutate(country2=gsub(\"^ \",\"\",country2))%>%\n  \n  mutate(country2=gsub(\" To .*$\",\"\",country2))%>% \n  \n  mutate(country2=gsub(\" Or .*$\",\"\",country2))%>% \n  \n  mutate(country2=gsub(\"Is.$\",\"Islands\",country2))%>%\n  \n  mutate(country2=gsub(\"\\\\?$\",\"\",country2))%>%\n  mutate(country2=gsub(\" And .*$\",\"\",country2))%>%#\n  \n  mutate(country2=gsub(\". Introduced$\",\"\",country2))%>%\n  \n  mutate(country2=case_when(str_detect(country2,\"Austral\")~\"Australia\",\n                            #str_detect(country2,\"Rep.\")~\"Republic\",\n                            str_detect(country2,\"Bahama\")~\"Bahamas\",\n                            str_detect(country2,\"Brazi\")~\"Brazil\",\n                            str_detect(country2,\"Brezi\")~\"Brazil\",\n                            str_detect(country2,\"Bosnia Herzegovina\")~\"Bosnia and Herz.\",\n                            #str_detect(country2,\"Canary\")~\"Canary Islands\",\n                            str_detect(country2,\"Caribbean\")~\"Caribbean\",\n                            str_detect(country2,\"Czechia\")~\"Czech Rep.\",\n                            str_detect(country2,\"Cina\")~\"China\",\n                            str_detect(country2,\"Central Africa\")~\"Central African Rep.\",\n                            str_detect(country2,\"Asia\")~\"Asia\",\n                            str_detect(country2,\"Cape Verde\")~\"Cape Verde\",\n                            str_detect(country2,\"Colombia\")~\"Colombia\",\n                            str_detect(country2,\"Columbia\")~\"Colombia\",\n                            str_detect(country2,\"Europ\")~\"Europe\",\n                            str_detect(country2,\"Himalaya\")~\"Himalayas\",\n                            str_detect(country2,\"Indonesia\")~\"Indonesia\",\n                            str_detect(country2,\"Guinea\")~\"Guinea\",\n                            str_detect(country2,\"Usa\")~\"United States\",\n                            str_detect(country2,\"Britain\")~\"United Kingdom\",\n                            str_detect(country2,\"Ecuador\")~\"Ecuador\",\n                            str_detect(country2,\"Ghana\")~\"Ghana\",\n                            str_detect(country2,\"Greece\")~\"Greece\",\n                            str_detect(country2,\"Guadeloupe\")~\"Guadaloupe\",\n                            str_detect(country2,\"Kyrgystan\")~\"Kyrgyzstan\",\n                            str_detect(country2,\"Laos\")~\"Laos\",\n                            str_detect(country2,\"Malaysia\")~\"Malaysia\",\n                            str_detect(country2,\"Spain\")~\"Spain\",\n                            str_detect(country2,\"Reunion\")~\"Réunion\",\n                            str_detect(country2,\"Saint Lucia\")~\"Saint Lucia\",\n                            str_detect(country2,\"São Tomé\")~\"São Tomé Príncipe\",\n                            str_detect(country2,\"Kerguelen\")~\"Kerguelen Islands\",\n                            str_detect(country2,\"St. Vincent\")~\"St. Vincent\",\n                            str_detect(country2,\"Virgin Islands\")~\"Virgin Islands\",\n                            str_detect(country2,\"Mexic\")~\"Mexico\",\n                            TRUE~country2))%>%\n  filter(!str_detect(country2,\"Unknown|West|North|Western|East|Poss|prob|Pres|Prob\"))\n\n\nit_to_from<-my_spider_countries%>%\n  filter(country2==\"Italy\")%>%\n  mutate(region=trimws(region))%>%filter(!is.na(region))%>% #count(region)%>%View\n  mutate(region=gsub(\"\\\\?$\",\"\",region))%>%\n  mutate(region=gsub(\"Central Europe to \",\"\",region))%>%#count(region)%>%View\n  filter(!str_detect(region,\"Central to \"),\n         !region==\"south-eastern Europe\")%>%#count(region)%>%View\n  mutate(region=gsub(\" and|to*$\",\"\",region))%>%\n  mutate(region=case_when(str_detect(region,\"Greece\")~\"Greece\",\n                          str_detect(region,\"Ukraine\")~\"Ukraine\",\n                          str_detect(region,\"Russia\")~\"Russia\",\n                          TRUE~region))%>%\n  mutate(region=gsub(\"\\\\)$\",\"\",region))%>%\n  rename(from=country2,to=region)\n\n#it_to_from%>%count(to)\n\n# library(ggraph)\n# library(igraph)\n# library(tidyverse)\n\nspiders_Balkans <-  c(\"Bulgaria\",\"Albania\",\"Greece\",\"Bosnia\",\"Kosovo\",\"Macedonia\",\n                      \"Montenegro\",\"Romania\",\"Serbia\")%>%as_tibble()%>%\n  rename(to=value)\n\nitaly_to<-it_to_from%>%count(to)%>%select(-n)\nitaly_to<- italy_to%>%filter(!to==\"Balkans\")\nitaly_to <- rbind(italy_to,spiders_Balkans)%>%unlist()\n\n\nworld <- map_data(\"world\")%>%\n  filter(!region==\"Antarctica\")\n\nitaly<- world%>%\n  filter(region==\"Italy\")\n\n\nlibrary(sf)\n# centroids and coords with spData::world-----\nworld2_geo<- spData::world\n# library(countrycode)\n# countrycode::codelist\n\n# italy centroids\nit_centroids<- world2_geo%>%\n  filter(name_long==\"Italy\")%>%\n  st_centroid()%>%\n  st_coordinates()%>%\n  as.data.frame()%>%\n  mutate(from=\"Italy\")%>%\n  rename(long_from=X,lat_from=Y)\n\n# extrapolate the centroids for italy_to countries\nto_country_geom<- world2_geo%>%\n  filter(name_long%in%italy_to) %>% #22 out of  28\n  st_centroid()%>%select(name_long)# %>%count(name_long) \n\n# check missing values\nas.data.frame(italy_to)%>% # count(italy_to) # 28\n  anti_join(to_country_geom,by=c(\"italy_to\"=\"name_long\")) # missing values (\"Malta\",\"North Macedonia\",\"Russia\",\"Sardinia\",\"Sicily\",\"Bosnia\")\n\n\nto_centroids<- to_country_geom%>%\n  st_coordinates()%>%\n  as.data.frame()%>%\n  rename(long_to=X,lat_to=Y)\n\n\n\nto_df<-cbind(to=to_country_geom$name_long,to_centroids)%>%\n  filter(!to%in%c(\"Kosovo\",\"France\"))    \n# 46.261157084423814, 2.3345436786735583\n\n\n\n\nto_and_from<- it_to_from%>%\n  count(family,genus,species,subspecies,year,from,to)%>%\n  select(-n)%>%\n  filter(to%in%to_df$to) %>%\n  left_join(it_centroids,by=\"from\") %>%#count(to)\n  left_join(to_df,by=\"to\")#%>%count(to,long_to,lat_to)\n\n\nbalkans_to<- to_df%>%\n  filter(to%in%c(\"Serbia\",\"Montenegro\",\"Macedonia\",\"Albania\"))%>%\n  merge(it_centroids)\n\n\nlng_rng <- range(to_and_from$long_to)\nlat_rng <- range(to_and_from$lat_to)\n\nlibrary(extrafont)\nloadfonts()\nlibrary(showtext)\nfont_add(family = \"Blackwidow\", regular = \"Blackwidow-o6ga.ttf\") # https://www.fontspace.com/blackwidow-font-f23155\n#font_add(family = \"Montserrat\", regular = \"Montserrat-Regular.ttf\") # https://fonts.google.com/specimen/Montserrat?category=Sans+Serif\nshowtext_auto()\nshowtext_opts(dpi = 320)\n\n# map--------\n\nitaly_map<-ggplot(world)+\n  # rest of the countries ploygons\n  geom_polygon(aes(x=long,y=lat,group=group),\n               alpha=0.5,fill=\"darkcyan\",color=\"grey58\") +\n  # italy polygon\n  geom_polygon(data=italy,\n               aes(x=long,y=lat,group=subregion),\n               color=\"azure4\",fill=\"darkgoldenrod3\") +\n  # name of the countries (to)\n  geom_text(data= to_df,\n            aes(x=long_to,y=lat_to,label=to),\n            color=\"black\",nudge_y = 0.5,nudge_x=0.5,\n            family=\"Blackwidow\",size=6) +\n  # to points\n  geom_point(data= to_df,\n             aes(x=long_to,y=lat_to),\n             color=\"#D16296\",size=4,alpha=0.9,shape=21,stroke=2)+\n  # points connections\n  geom_curve(data= to_and_from,\n               aes(x = long_from, y = lat_from, \n                   xend = long_to, yend = lat_to),\n             curvature = 0.2,size=0.3,\n             color=\"dodgerblue4\",\n             alpha=0.4,\n             arrow = arrow(length = unit(0.25, \"cm\"))) +\n  # adding balkans countries points connections\n  geom_curve(data= balkans_to,\n             aes(x = long_from, y = lat_from, \n                 xend = long_to, yend = lat_to),\n             curvature = 0.2,size=0.3,\n             color=\"dodgerblue4\",\n             alpha=0.4,\n             arrow = arrow(length = unit(0.25, \"cm\"))) +\n  # stroke of centre point of italy\n  geom_point(data= it_centroids,\n             aes(x=long_from,y=lat_from),\n             color=\"#D16296\",size=3,shape=21,stroke=2,alpha=0.9) +\n  # center point of italy\n  geom_point(data= it_centroids,\n             aes(x=long_from,y=lat_from),\n             color=\"yellow2\",size=1) +\n  geom_text(data= it_centroids,\n             aes(x=long_from,y=lat_from,\n                 label=\"Italy\"),\n            family=\"Blackwidow\",nudge_y = 1,\n             color=\"black\",size=10) +\n  geom_curve(aes(x = 12.1, y = 42.8, \n            xend = 2.3345436786735583, yend = 46.261157084423814),\n             curvature = 0.2,size=0.3,\n             color=\"dodgerblue4\",\n             alpha=0.4,\n             arrow = arrow(length = unit(0.25, \"cm\"))) +\n  geom_text(aes(x = 2.3345436786735583, y = 46.261157084423814,\n                label=\"France\"),\n            family=\"Blackwidow\",nudge_y = 1,\n            color=\"black\",size=8)+\n  coord_cartesian(xlim=c(-8.42048,54.28545),ylim=c(28.18548,49.14882))+\n  labs(caption=\"Datasource: World Spiders Database | Majer et al, 2015 | #TidyTuesday week50\\nDataViz: Federica Gazzelloni\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family=\"Roboto Condensed\"),\n        plot.caption = element_text(size=11))\n\n# export the radial plot and save it as .png\n\n# gt table -----------\n# https://gt.rstudio.com/reference/tab_options.html\nlibrary(gt)\nlibrary(tidyverse)\nlibrary(glue)\n\nspiders_italy <-  filter(my_spider_countries, grepl(\"Italy\", country2))\nspiders_italy<- spiders_italy%>%filter(!is.na(subspecies))\n\ntax_tb<-spiders_italy %>%\n  arrange(year)%>%\n  select(Year=year,Family=family,Genus=genus,Species=species,Subspecies=subspecies) %>%\n  gt() %>%\n  tab_header(\n    title = md(\"**Italy-Spiders Taxonomy**\"),\n    subtitle = glue(\"1907 to 1973\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"Datasource: **World Spiders Database** | Majer et al, 2015\")\n  )  %>%\n  tab_options(table.background.color=\"#D16296\")%>%\n  bstfun::as_ggplot()\n\n\n# final touches----------\nlibrary(cowplot)\nfinal_plot<- ggdraw(italy_map)+\n  draw_label(\"Spiders from Italy to?\",x=0.55,y=0.1,\n             fontfamily = \"Blackwidow\",size=65)+\n draw_line(x=c(0.715,0.985),y=c(0.52,0.52),size=45,\n           color=\"#D16296\")+\n  \n draw_label(\"The history of Italian spiders formally begins in 1868,\\na list of 404 species were reported at the time.\\nThere were unbalanced discoveries between \\nnorthen and southern Italy.\\nKnowledge on Italian spiders increased rapidly, \\nbetween 1901-1951\\nSpiders are mostly found in Alto-Adige, Valle D'Aosta,\\nLombardia,Veneto,Calabria and Sardegna.\",\n             x=0.85,y=0.52,size=10,color=\"white\",\n            fontfamily=\"Roboto Condensed\")+\n  draw_plot(tax_tb,scale=0.37,x=0.35,y=0.3)+\n  draw_image(\"w50/arages_small.png\",scale=0.1, x=-0.44,y=0.35)+\n  draw_image(\"w50/ESA.jpg\",scale=0.08,x=-0.44,y=0.25)+\n  draw_image(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\",\n             scale=0.1,x=-0.44,y=0.45) \n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w50/spiders2.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w27_Animal_Rescues/w27_Animal_Rescues.html",
    "href": "tidytuesday/cases2021/posts2021/w27_Animal_Rescues/w27_Animal_Rescues.html",
    "title": "Animal Rescues",
    "section": "",
    "text": "Week 27 TidyTuesday Animal Rescues\nmore reading: Animal rescues by London fire brigade rise 20% in pandemic year - TrackReconstruction - animate bar plot - composition of plots - annotate\n\nlibrary(tidyverse)\nlibrary(ggpubr)\nlibrary(ggthemes)\nlibrary(ggalt)\nlibrary(gganimate)\nlibrary(ggdist)\nlibrary(ggExtra)\nlibrary(ggtext)\n\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 27)\nanimal_rescues <- tuesdata$animal_rescues\n\nhead(animal_rescues)\n\n\ndim(animal_rescues)\n\n\nnames(animal_rescues)\n\n\nanimal_rescues_small <- animal_rescues %>% \n  select(date_time_of_call,cal_year,incident_notional_cost,animal_group_parent,\n         special_service_type,ward,borough,stn_ground_name,latitude,longitude) %>%\n  mutate(borough=tolower(borough)) %>% \n  drop_na() %>%\n  mutate(animal_group_parent=case_when(stringr::str_detect(animal_group_parent,\"^Unknown\") ~ \"Unknown\",\n                                       TRUE ~ animal_group_parent),\n         cal_year=as.factor(cal_year) ,\n         incident_notional_cost=ifelse(incident_notional_cost==\"NULL\",0,incident_notional_cost),\n         incident_notional_cost=as.numeric(incident_notional_cost),\n         date_time_of_call=as.Date(date_time_of_call,\"%d/%m/%Y\")) %>%\n  rename(date=date_time_of_call,year=cal_year) %>%\n  mutate(month=lubridate::month(date),\n         day=lubridate::day(date)) %>%\n  complete(date = full_seq(date, 1)) %>%\n  mutate(incident_notional_cost_full = round(spline(x = date, y = incident_notional_cost, xout = date)$y))\n  \n\nstr(animal_rescues_small)\n\nanimal_rescues_small %>% count(incident_notional_cost) %>% arrange(-n) #desc(incident_notional_cost))\n\n\nDataExplorer::profile_missing(animal_rescues_small)\n\n\ncalls <- animal_rescues_small%>%group_by(year)%>%count(year)%>%arrange(-n)\n\n\nbar_plot <- ggplot(data=animal_rescues_small%>%drop_na(),aes(x=year,y=borough)) + \n  geom_col(aes(group=borough,fill=borough,color=borough)) +\n  geom_text(data=calls, aes(x= year, y=n, label=n), hjust=0.5,\n           position = position_stack(vjust = 18),fontface = \"bold\"\n            )+\n  guides(color=\"none\",fill=\"none\") +\n  labs(title=\"Numbers of call by Year to the London Fire Brigate for Animal Rescues\",\n       x=\"Year\",y=\"by London Borough\") + \n  ggthemes::theme_calc() +\n  theme(axis.text.y = element_blank(),\n        axis.text.x = element_text(size=8),\n        axis.title.x = element_text(vjust=-2),\n        axis.ticks.x = element_line(size=2,color=\"pink\"),\n        plot.title = element_text(face=\"bold\",size=11),\n        plot.margin = unit(c(0.5,0.5,0.5,0.5), \"cm\"))\n\nbar_plot\n\n\nbox_plot <- animal_rescues_small %>%  drop_na() %>% # count(year)\n  filter(incident_notional_cost<2000) %>%\n  ggplot(aes(x=fct_reorder(animal_group_parent, incident_notional_cost),y=incident_notional_cost, group=animal_group_parent)) +\n  geom_boxplot(aes(color=animal_group_parent),size=0.5,alpha=0.4) +\n  scale_y_continuous(labels = scales::comma) +\n  guides(color=\"none\") +\n  labs(title=\"LFB Animal Rescues - Incident notional cost 2009 - 2021\",\n       color=\"Animal group parent\", y=\"Cost value £\",x=\"\") +\n  coord_flip() +\n  ggthemes::theme_calc() +\n  theme(axis.text.y = element_text(size=8,angle=0),\n        axis.text.x = element_text(size=8,angle=0),\n        axis.title.x = element_text(vjust=-2),\n        axis.ticks.x = element_line(size=2,color=\"pink\"),\n        axis.ticks.y = element_line(size=2,color=\"pink\"),\n        panel.grid.major.y = element_line(size=0.2),\n        plot.title = element_text(face=\"bold\",size=11),\n        plot.margin = unit(c(0.5,0.5,0.5,0.5), \"cm\"))\n\nbox_plot\n\n\nsmoth_line <-animal_rescues_small%>%\n  group_by(month)%>%\n  summarise(med_val=median(incident_notional_cost))%>%\n  ungroup() \n\n\n\ncost_month_plot <- ggplot(data=smoth_line,aes(x=month,y=med_val))+\n  geom_point(shape=21,aes(fill=month)) +\n  geom_line(linetype = 3)+\n  geom_smooth(size=0.3,fill=\"pink\") +\n  geom_boxplot(data=subset(animal_rescues_small,incident_notional_cost<500 & incident_notional_cost>200),\n               aes(x=month,y=incident_notional_cost,group=month,color=month),fill=NA) +\n  geom_text(aes(label=med_val),vjust = -1) +\n  scale_x_discrete(limits =seq(1,12,1), labels=c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\n                                                 \"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"))+\n  guides(fill=\"none\",color=\"none\") + \n  labs(title=\"Cost of incident by month (2009 - 2021)\",\n       x=\"Month\",y=\"Median value £\") +\n  ggthemes::theme_calc() +\n  theme(axis.text.y = element_blank(),\n        axis.text.x = element_text(size=8),\n        axis.title.x = element_text(vjust=-2),\n        axis.ticks.y = element_blank(),\n        axis.ticks.x = element_line(size=2,color=\"pink\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_line(size=0.1),\n        plot.title = element_text(face=\"bold\",size=11),\n        plot.margin = unit(c(0.5,0.5,0.5,0.5), \"cm\"))\n\ncost_month_plot\n\n\nsmoth_line_yr <-animal_rescues_small%>%#count(year)\n  mutate(year=as.numeric(year))%>% #count(year)\n  group_by(year)%>%\n  summarise(tot_val=sum(incident_notional_cost_full))%>%\n  ungroup() \n\n\n\ncost_yr_plot <- ggplot(data=smoth_line_yr,aes(x=year,y=tot_val))+\n  geom_point(shape=21,aes(fill=year)) +\n  geom_line(linetype = 3)+\n  geom_smooth(size=0.3,fill=\"pink\") +\n  geom_text(aes(label=scales::comma(tot_val)),vjust = -1.5,size=3) +\n  scale_x_discrete(limits =seq(1,13,1),labels=seq(2009,2021,1))+\n  guides(fill=\"none\",color=\"none\") + \n  labs(title=\"Annual cost of incidents by Year (2009 - 2021)\",\n       y=\"Annual cost - median value £\",x=\"Year\") +\n  ggthemes::theme_calc() +\n  theme(axis.text.y = element_blank(),\n        axis.text.x = element_text(size=8),\n        axis.title.x = element_text(vjust=-2),\n        axis.ticks.y = element_blank(),\n        axis.ticks.x = element_line(color=\"pink\",size=1),\n        panel.grid.major.x = element_line(size=0.1),\n        panel.grid.major.y = element_blank(),\n        plot.title = element_text(face=\"bold\",size=11),\n        plot.margin = unit(c(0.5,0.5,0.5,0.5), \"cm\"))\n\ncost_yr_plot  \n\n\np1 <- ggarrange(bar_plot, box_plot + \n                font(\"x.text\", size = 9),\n                ncol = 1, nrow = 2)\np2 <- ggarrange(cost_month_plot, cost_yr_plot +\n                font(\"x.text\", size = 9),\n                ncol = 1, nrow = 2)\ngraphics<- ggarrange(p1, p2, ncol = 2, nrow = 1)\n\n\n\n\nfinal_plot <- annotate_figure(graphics,\n               top = text_grob(\"Animal rescues by London fire brigade rise 20% in pandemic year\", \n                               color = c(\"#FF34B3\", \"#FFFFFF\", \"#FFFFFF\"), face = \"bold\", size = 14),\n               bottom = text_grob(\"DataViz: @fgazzelloni DataSource: \\n TidyTuesday and Animal Rescues - London.gov - The Guardian - week27\",\n                                  color = \"blue\",\n                                  hjust = 1, x = 1, face = \"italic\", size = 10),\n               left = text_grob(\"Last year 337 animals were helped compared with 269 in 2019\", color = c(\"#BA55D3\", \"#FFFFFF\", \"#FFFFFF\"), rot = 90,size=10),\n               right = text_grob(bquote(\"The LFB calculates the average cost of each rescue to be £346\"), rot = 90,size=10),\n               fig.lab = \"TidyTuesday week27\", fig.lab.face = \"bold\"\n)\n\nfinal_plot\n\n\n###################### SAVING ############################\n\n\nragg::agg_png(here::here(\"w27\",\"w27_animals.png\"),\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal_plot\n\ndev.off()\n\n##################################################"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w35_Lemurs/w35_Lemurs.html",
    "href": "tidytuesday/cases2021/posts2021/w35_Lemurs/w35_Lemurs.html",
    "title": "Lemurs",
    "section": "",
    "text": "inspired by https://github.com/cararthompson/30DayChartChallenge/blob/main/scripts/2.2_animals.R\nrm(list = ls()) ## Load libraries —-\n\nlibrary(tidyverse)\nlibrary(extrafont)\nlibrary(cowplot)\nlibrary(ggExtra)\nextrafont::fonts()\n\n## Read in data ----\nlemurs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-08-24/lemur_data.csv')\n\n#-----------\n\ndf <- lemurs %>%\n  filter(!sex == \"ND\") %>%\n  mutate(year_dob = lubridate::year(dob),\n         month_dob = lubridate::month(dob),\n         .after = dob) %>%\n  mutate(year_dod = lubridate::year(dod),\n         month_dod = lubridate::month(dod),\n         .after = dod) %>%\n  group_by(taxon,sex,birth_type, dob,year_dob,month_dob,dod,year_dod,month_dod,age_max_live_or_dead_y,age_category) %>%\n  summarize(mean_weight = round(mean(weight_g)/1000,2)) %>%\n  ungroup() %>%\n  filter(!mean_weight == 0) %>%\n  filter(!is.na(age_max_live_or_dead_y)) %>%\n  filter(!birth_type == \"unknown\") %>%\n  rename(mum_age_category = age_category,\n         max_age = age_max_live_or_dead_y) %>% #\n  mutate(status = if_else(is.na(dod),\"alive\",\"dead\"),\n         .after = dod) %>%\n  mutate(status_id = case_when(\n    status == \"alive\" ~ 1,\n    status == \"dead\" ~ 0),\n    .after = status )  %>% # DataExplorer::profile_missing()\n  mutate(birth_type = case_when(\n    birth_type == \"CB\" ~ \"captive-born\",\n    birth_type == \"WB\" ~ \"wild-born\",\n    TRUE ~ \"unknown\")) %>%\n  mutate(mum_age_category = case_when(\n    mum_age_category == \"IJ\" ~ \"infant\",\n    mum_age_category == \"young_adult\" ~ \"young\",\n    TRUE ~ mum_age_category)) %>%\n  select(-status) %>%\n  mutate(birth_type_id = if_else(birth_type == \"captive-born\",1,0),\n         sex_id = if_else(sex == \"F\",1,0),\n         mum_age_category_id = case_when(mum_age_category == \"infant\" ~ 1,\n                                         mum_age_category == \"young\" ~ 2,\n                                         mum_age_category == \"adult\" ~ 3)) %>%\n  mutate(sex = if_else(sex == \"F\",\"Female\",\"Male\"))\n\n\ndf <- df %>%\n  mutate(mean_weight_class = case_when(mean_weight<=0.2 ~ \"0.01 - 0.1\",\n                                       mean_weight>0.1 & mean_weight<=0.8 ~ \"0.11 - 0.8\",\n                                       mean_weight>0.8 & mean_weight<=1.45 ~ \"0.81 - 1.45\",\n                                       mean_weight>1.45 & mean_weight<=2.3 ~ \"1.46 - 2.3\",\n                                       mean_weight>2.3 ~ \"2.3 +\")) %>%\n  mutate(mean_weight_class = factor(mean_weight_class))\n\ndf_taxon_id <- df %>% count(taxon,sort = TRUE) %>% mutate(taxon_id = row_number()) %>% select(-n)\ndf_weight_class_id <- df %>% count(mean_weight_class) %>% mutate(weight_class_id = row_number()) %>% select(-n)\n\ndf <- df %>%\n  inner_join(df_weight_class_id, by = \"mean_weight_class\") %>%\n  inner_join(df_taxon_id, by = \"taxon\") %>%\n  select(last_col(),everything())\n# %>% select(-taxon,-mean_weight_class)\n\nhead(df,3)\n#--------\n\n# Create label data\nlabels <- tibble(mum_age_category = c(\"Infant\", \"Young\", \"Adult\"),\n                 mum_age_category_x = c(0, 0, 0),\n                 mum_age_category_y = c(1, 1, 1))\n\n\n\n\n## Create colour scheme and theme ----\nlemurs_hues <- c(\"#d2dbe4\", \"#8a5d24\", \"#646376\", \"#192029\", \"#acb3bf\", \"#596e94\")\n\ntheme_lemurs_light <- function() {\n  theme_minimal() %+replace%\n    theme(text = element_text(colour = lemurs_hues[4]),\n          axis.text = element_text(size = 8),\n          axis.title = element_text(size = 10),\n          axis.ticks = element_blank())\n}\n\n## Plot it ----\n\n\n\n# infant = grey\n# young = light brown\n# adult = light grey\n\np <- ggplot(df) +\n  scale_colour_manual(values = c(lemurs_hues[c(3, 2, 5)]),\n                      labels = c(\"Infant\", \"Young\", \"Adult\")) +\n  scale_fill_manual(values = c(lemurs_hues[c(3, 2, 5)]),\n                      labels = c(\"Infant\", \"Young\", \"Adult\")) +\n  geom_point(aes(x = dob,y = dod, colour = mum_age_category,size = mean_weight),alpha = 0.7) +\n  geom_smooth(aes(x = dob,y = dod, colour = mum_age_category), se = FALSE) +\n      labs(x = \"Year of birth\",\n           y = \"Year of death\",\n           size = \"Years\") +\n      guides(colour = \"none\", size = \"none\") +\n      theme_lemurs_light() +\n  theme(text = element_text(family = \"xkcd\"))\n\n\nmarg <- ggMarginal(p, type = \"densigram\", groupColour = T, groupFill = T, alpha = 0.7)\n\nbm <- ggplot(df, aes(x = mean_weight)) +\n  geom_histogram(aes(y = stat(count),fill = mum_age_category, colour = factor(mum_age_category)),\n                 position = position_dodge(width = 0.3),\n                 bins = 50,\n                 alpha = 0.7, show.legend = T) +\n  guides(color = \"none\") +\n  facet_wrap(vars(sex)) +\n  labs(y = \"N.\",\n       x = \"Lemurs' weight in kg\",\n       fill = \"Lemurs' mother age category\") +\n  scale_fill_manual(values = c(lemurs_hues[c(3, 2, 5)]),\n                    labels = c(\"Infant\", \"Young\", \"Adult\")) +\n  scale_colour_manual(values = c(lemurs_hues[c(3, 2, 5)]),\n                      labels = c(\"Infant\", \"Young\", \"Adult\")) +\n  theme_lemurs_light() +\n  theme(text = element_text(family = \"xkcd\"),\n        legend.position = c(0.5,1.1),\n        legend.justification = \"center\",\n        legend.direction = \"horizontal\"\n        )\n\ntitle <- ggdraw() +\n  draw_label(\"Is Lemurs life expectancy distribution dependent from their mums status at pregnancy?\",\n             fontfamily = \"xkcd\",\n             colour = lemurs_hues[6],\n             hjust = 0.5,\n             size = 22)\n\nsubtitle <- ggdraw() +\n  draw_label(\"Baby lemurs stay with their mothers for about two years. In this time span, the baby lemurs are nursed and protected by their mother.\n             When it grows up the lemur stays in the troop, if it is a female, or otherwise it joins another group. The life span of a lemur is approximately eighteen years\",\n             fontfamily = \"xkcd\",\n             colour = lemurs_hues[4],\n             hjust = 0.5,\n             size = 12)\n\ncaption <- ggdraw() +\n  draw_label(\"TidyTuesday week35 - InfoGraphic: Federica Gazzelloni - Source: Lemurs,Kaggle,Zehr et al, 2014 - Nature\",\n             fontfamily = \"xkcd\",\n             colour = lemurs_hues[4],\n             hjust = 0.5,\n             size = 9)\n\ncombined_p <- plot_grid(title,\n                        subtitle,\n                        marg,\n                        bm,\n                        caption,\n                        ncol = 1,\n                        rel_heights = c(0.05, 0.1, 0.6, 0.2, 0.05))\n\n\n\n\n\nlibrary(ggpubr)\ngraphics <- ggarrange(combined_p)\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"\",\n                                              color = c(\"#8a5d24\"), face = \"bold\", size = 24,\n                                              family = \"xkcd\"),\n                              bottom = text_grob(\"\",\n                                                 color = \"#6C7B8B\",family = \"xkcd\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n                              left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size = 10),\n                              right = text_grob(bquote(\"\"), color = c(\"#778899\"),rot = 90,size = 10),\n                              fig.lab = \"TidyTuesday week35\", fig.lab.face = \"bold.italic\",fig.lab.size = 8,\n                              fig.lab.pos = \"bottom.right\"\n)\n\nfinal_plot <- \n  final_plot +\n  \n  annotate(geom = \"text\", label = \"In the wild, ring-tailed lemurs can live about 20 years. \n           They are the most commonly found species of lemur in zoos, \n           where they can live up to a decade longer.\",\n           x = 0.15, y = 0.65,colour = \"black\",size = 3,family = \"xkcd\") +\n  \n  annotate(geom = \"text\", label = \"\",\n           x = 0.15, y = 0.65,colour = \"black\",size = 3,family = \"xkcd\") +\n  \n  annotate(geom = \"text\", label = \"The Indri,also known as the Babakoto,is the biggest living lemur. \n           A tree-dwelling Madagascar species, the Indri is known to grow as tall as 3 feet, \n           and weigh as much as 10 pounds.\",\n           x = 0.77, y = 0.18,colour = \"black\",size = 3,family = \"xkcd\") +\n  \n  annotate(geom = \"text\", label = \"Adult\",x = 0.83, y = 0.78, colour = \"#FF7F00\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Young\",x = 0.73, y = 0.58, colour = \"#FF7F00\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Infant\",x = 0.1, y = 0.5, colour = \"#FF7F00\", size = 5,family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.81, xend = 0.76, y = 0.78, yend = 0.72, colour = \"#FF7F00\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.72, xend = 0.68, y = 0.6, yend = 0.65, colour = \"#FF7F00\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n  annotate(geom = \"curve\", x = 0.12, xend = 0.2, y = 0.5, yend = 0.43, colour = \"#FF7F00\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"xkcd\") +\n\n  annotate(geom = \"text\", label = \"Comparing lemurs' life expectancy and weight\",\n         x = 0.5, y = 0.84,colour = \"#FF7F00\",size = 3,family = \"xkcd\") +\n  annotate(geom = \"text\", label = \"Male and female ring-tailed lemurs are similar physically.\nThey are roughly the same size, measuring about 42.5 cm or 1.4 ft.\n           from head to rump and weighing roughly 2.25 kg or 5 lb.\",\n           x = 0.67, y = 0.38,colour = \"black\",size = 3,family = \"xkcd\") \n\n\n\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\n\nlemur_img <- image_read(\"image.png\")\n#logo_file <- system.file(\"extdata\", \"logo.png\", package = \"cowplot\")\n  \nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(lemur_img, x = 0.04, y = 0.3,width = 0.15)\n  \n\nfinal\n\n\n## Save plot ----\n\nragg::agg_png(here::here(\"w35/w35_lemurs.png\"),\n              res = 320, width = 12, height = 14, units = \"in\")\nfinal\n\ndev.off()\n\n\n\n# read the image, attach the Tidytuesday logo and save it --------------------------\nlibrary(ggimage)\nlibrary(magick)\n\n\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\nimg <- image_read(\"image.png\")\n\n\ntidy_final <- image_read(\"w35_lemurs.png\")\nattached_logo <- image_composite(tidy_final, tidy_logo,\n                                 operator = \"atop\",\n                                 gravity = \"southwest\")\n\nimage_write(attached_logo, path = \"w35_lemurs.png\", format = \"png\")"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w37_Formula_1_Races/w37_Formula_1_Races.html",
    "href": "tidytuesday/cases2021/posts2021/w37_Formula_1_Races/w37_Formula_1_Races.html",
    "title": "FORMULA1",
    "section": "",
    "text": "TidyTuesday Week37 - FORMULA1\n\nlibrary(tidyverse)\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 37)\n\nresults <- tuesdata$results\nqualifying <- tuesdata$qualifying\nconstructors <- tuesdata$constructors\ndrivers <- tuesdata$drivers\n\n\nmy_df <- qualifying%>%\n  left_join(results%>%select(raceId,driverId,constructorId,points), by=c(\"raceId\",\"driverId\",\"constructorId\")) %>%\n  left_join(constructors,by=\"constructorId\") %>%\n  left_join(drivers%>%select(driverId,forename,surname),by=\"driverId\") %>%\n  count(qualifyId,raceId,driverId,forename,surname,constructorId,name,number,position,points,sort=T) %>%\n  unite(\"driver_name\",forename:surname,sep=\" \",remove=TRUE) %>%\n  count(driverId,driver_name,constructorId,name,number,position,points)%>%\n  arrange(position,-number,-points) %>%\n  filter(position<=10)\n\n\nrank_df<- my_df%>%\n  group_by(name,position)%>%\n  summarize(total=sum(points),.groups=\"drop\")%>%\n  ungroup()%>%\n  arrange(position) %>%\n  pivot_wider(values_from = total,names_from=position)\n\nrank_df[is.na(rank_df)]<-0\n\n\n# rank_df <- column_to_rownames(rank_df,var = \"driver_name\")\n\nrank_df\n\n#library(ggbump)\nlibrary(ggrepel)\nlibrary(extrafont)\n#fonts()\n\nrank_df_long <- rank_df %>%arrange(-`1`)%>% slice(1:10)%>%\n  pivot_longer(cols = 2:11,names_to=\"position\",values_to=\"points\")%>%\n  mutate(position=as.numeric(position),\n         position=factor(position))\n\nsummary_first_position <- rank_df_long%>%filter(name==c(\"Mercedes\",\"Red Bull\",\"Ferrari\"))%>%filter(position==1)%>%summary()\n\nlibrary(hrbrthemes)\nlibrary(GGally)\nlibrary(viridis)\n\ncolors <- c(\"#0EED4D\", \"#008B00\", \"#17B6EB\",\n            \"#C00000\" , \"#FF8700\", \"#00D2BE\",\n            \"#0600EF\", \"#FFF500\", \"#E68C17\", \"#0082FA\")\n\ncolors2 <- c(\"grey70\", \"grey70\", \"grey70\",\n            \"#C00000\" , \"#FF8700\", \"#00D2BE\",\n            \"#0600EF\", \"grey70\", \"grey70\", \"grey70\")\n\n\nplot <- rank_df_long%>%\n  ggplot(aes(x=fct_reorder(position,-position),y=points,group=name,color=factor(name)))+\n  geom_point(aes(size=points),shape = 21, fill = \"white\",  stroke = 5)+\n  geom_line(size=2)+\n  scale_color_manual(values = colors2)+\n  labs(y=\"Points\",x=\"Positions\",\n       color=\"Top 10 Constructors\",size=\"Points\")+\n  theme_gray()+\n  theme(text = element_text(family=\"Impact\",color=\"grey90\"),\n        plot.margin = margin(1,1,1,1,unit = \"pt\"),\n        panel.grid.major.y = element_line(size=2),\n        panel.background = element_rect(color=\"grey20\",fill=\"grey20\"),\n        plot.background = element_rect(color=\"grey20\",fill=\"grey20\"),\n        legend.key = element_blank(),\n        legend.background = element_blank(),\n        legend.text = element_text(color=\"grey90\",size=14),\n        legend.title = element_text(color=\"grey90\",size=14),\n        axis.text = element_text(color=\"grey90\"),\n        axis.title = element_text(size=14),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.y = element_blank()\n  )\n\n\nlibrary(ggpubr)\ngraphics <- ggarrange(plot)+\n  theme(plot.background = element_rect(fill=\"#228B22\", color = NA))\n\nfinal_plot <- annotate_figure(graphics,\n                              top = text_grob(\"FORMULA 1 WINNER CONSTRUCTORS\",\n                                              color = c(\"red\"), face = \"bold\", size = 45,\n                                              family = \"Impact\"),\n                              bottom = text_grob(\"Infographics Federica Gazzelloni DataSource: Ergast API, TidyTuesday week37\",\n                                                 color = \"black\",family = \"Impact\",\n                                                 hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 20),\n                              left = text_grob(\"FORMULA 1\", color = c(\"#778899\"), rot = 90,size = 30),\n                              right = text_grob(bquote(\"FORMULA1\"), color = c(\"#778899\"),rot = 90,size = 30),\n                              fig.lab = \"TidyTuesday week37\", fig.lab.face = \"bold.italic\",fig.lab.size = 12,\n                              fig.lab.pos = \"bottom.right\"\n)\n\n\n\nfinal_plot <-\n  final_plot +\n\n  annotate(geom = \"text\", label = \"Lewis Hamilton\\nNico Rosberg\\n Valtteri Bottas \\n- Mercedes\",\n           x = 0.11, y = 0.85,colour = \"#00D2BE\",size = 4,family = \"Impact\") +\n  annotate(geom = \"curve\", x = 0.07, xend = 0.09, y = 0.85, yend = 0.76, colour = \"#00D2BE\", curvature = .3, arrow = arrow(length = unit(2, \"mm\")),family = \"Impact\",size=1.5) +\n\n  annotate(geom = \"text\", label = \"Sebastian Vettel\\nMark Webber\\nMax Verstappen - Red Bull\",\n           x = 0.23, y = 0.49,colour = \"#0600EF\",size = 4.5,family = \"Impact\") +\n  annotate(geom = \"curve\", x = 0.25, xend = 0.28, y = 0.53, yend = 0.69, colour = \"#0600EF\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Impact\",size=1.5) +\n\n  annotate(geom = \"text\", label = \"Charles Leclerc\\nFernando Alonso\\n - Ferrari\",\n           x = 0.1, y = 0.63,colour = \"#C00000\",size = 4,family = \"Impact\") +\n  annotate(geom = \"curve\", x = 0.09, xend = 0.10, y = 0.67, yend = 0.70, colour = \"#C00000\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Impact\",size=1.5) +\n\n  annotate(geom = \"text\", label = \"F1\",x = 0.85, y = 0.88, colour = \"red\", size = 5,family = \"Impact\") +\n\n  annotate(geom = \"text\", label = \"MERCEDES, RED BULL and FERRARI\\n reached the higest level of points\\n at being number one\\nwith an average of 418.8 points\",x = 0.7, y = 0.81, colour = \"white\", size = 7,family = \"Impact\")+\n\n\n  annotate(geom = \"text\", label = \"Lewis Hamilton - McLaren\",x = 0.7, y = 0.53, colour = \"#FF8700\", size = 5,family = \"Impact\") +\n  annotate(geom = \"curve\", x = 0.68, xend = 0.64, y = 0.52, yend = 0.41, colour = \"#FF7F00\", curvature = -.3, arrow = arrow(length = unit(2, \"mm\")),family = \"Impact\",size=1.5)\n\nlibrary(ggimage)\nlibrary(magick)\nlibrary(cowplot)\n\n\nlogo_f1_img <- image_read(here::here(\"w37/F1.svg.png\"))\n\n\nfinal <- ggdraw() +\n  draw_plot(final_plot) +\n  draw_image(logo_f1_img, x = 0.1, y = 0.47,width = 0.12)\n\n\n\n## Save final plot ----\n\nragg::agg_png(here::here(\"w37/formula1_second_version.png\"),\n              res = 320, width = 16, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w44_Ultra_Trail_Running/w44_Ultra_Trail_Running.html",
    "href": "tidytuesday/cases2021/posts2021/w44_Ultra_Trail_Running/w44_Ultra_Trail_Running.html",
    "title": "Ultra Trail Running",
    "section": "",
    "text": "library(tidyverse)\n\nlibrary(tidyquant)\nlibrary(ggpattern)\n\nlibrary(extrafont)\nloadfonts()\nlibrary(showtext)\nfont_add_google(\"Shadows Into Light\",\"shadow_into_light\")\nfont_add_google(\"Schoolbell\", \"bell\")\nshowtext_opts(dpi = 320)\nshowtext_auto(enable = T)\n#font_families()\n\n\nultra_rankings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv')\nrace <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv')\n\n\nMake one dataset using the key primary variable “race_year_id” as a link between the two datasets\nselect the variables needed for making the map\n\nthere are some missing values, we deal with those later on the making\nCountry to fix:\n\nHong Kong, China ~“China”\nFL, United States ~ “US”\n\nLA, United States\n\nPA, United States\n\nUnited States\nMyoko, Japan ~ “Japan”\nUnited Kingdom ~ “UK”\n\n\nrace%>%\n  inner_join(ultra_rankings ,by=\"race_year_id\") %>% \n  mutate(year=lubridate::year(date))%>% #count(year)\n  mutate(participation=tolower(participation))%>%count(age,gender)\n\n\nmap_df <- race%>%\n  inner_join(ultra_rankings ,by=\"race_year_id\")%>%\n  mutate(year=lubridate::year(date))%>%\n  #select(city,country,gender,year,runner)%>%\n  filter(!is.na(country),!is.na(rank)) %>%\n  mutate(country=case_when(country==\"Hong Kong, China\"~\"China\",\n                           country==\"FL, United States\"~\"USA\",\n                           country==\"LA, United States\"~\"USA\",\n                           country==\"PA, United States\"~\"USA\",\n                           country==\"United States\"~\"USA\",\n                           country==\"United Kingdom\"~\"UK\",\n                           country==\"Myoko, Japan\"~\"Japan\",\n                           TRUE~country)) \n\nLet’s see the cities:\n\nmap_df <- map_df %>% #count(year)\n  arrange(city)%>%\n  mutate(city=tolower(city))%>%\n  mutate(city=gsub(\"\\\\d\",\"\",city),\n         city=gsub(\"\\\\?\",NA,city),\n         city=gsub(\"-\",\"\",city)) \n\ndrop the missing values\n\nmap_df<- map_df%>%drop_na()\n\n\nranks <- map_df%>%\n  filter(rank==\"1\")%>%\n  filter(gender==\"W\")%>%\n  count(country,nationality,distance,time_in_seconds,year)%>%\n  dplyr::select(-n)%>%\n  arrange(-distance,time_in_seconds) %>%#count(distance)\n  slice(1:10)\n\n\ncou_yr_m <- c(\"Finland_2018\",\"France_2019\",\"Spain_2019\",\"Indonesia_2019\",\"USA_2018\")\ncountry_m<- c(\"Finland\",\"France\",\"Spain\",\"Indonesia\",\"USA\")\nlatitude_m<- c(60.192059, 46.7111, 40.416775,-6.200000,40.981613)\nlongitude_m<-c(24.945831,1.7191,-3.703790,106.816666,-73.691925)\n\n\ncou_yr_w<-c(\"UK_2016\",\"Nepal_2018\",\"Greece_2016\",\"Poland_2017\",\"Italy_2018\",\"USA_2017\")\ncountry_w<- c(\"UK\",\"Nepal\",\"Greece\",\"Poland\",\"Italy\",\"USA\")\nlatitude_w<- c(43.844264,27.700769,39.366669,50.012100,42.349998,40.981613)\nlongitude_w<- c(-21.086052,85.300140,22.933332,20.985842,14.166667,-73.691925)\n\nmy_map_text_w<- data.frame(cou_yr_w,country_w,latitude_w,longitude_w)\n\nmy_map_text_m<- data.frame(cou_yr_m,country_m,latitude_m,longitude_m)\n\nload the libraries form the map\n\nlibrary(maps)\nlibrary(rnaturalearth)\nlibrary(sp)\nlibrary(sf)\n\nFirst step for the geo codes and geometry\n\ngeocode() {ggmap} finds latitude and longitude for the cities (See ?register_google)\nne_countries() {rnaturalearth} for world country polygons\nsf() {sf} for simple feature list column\nmap_data() {ggplot2} for a data frame of map data (require(“maps”))\n\nDataset is downloaded from:——–207 matches —– kaggle dataset\ngeonames can be another fount for geocodes\nLoad the data form {rnaturalearth} with geometry and join {maps} with map_data()for the lat and lon\n\n# world data full \nworld_full <- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\")\nworld_data <- filter(world_full, continent != \"Antarctica\")\n\n# world lat&long\nworld<-map_data(map = \"world\") #%>%count(subregion)\n# states lat&long\nstates <- map_data(\"state\") # let's see if we use it\n\nworld_geodata<- world %>%\n  full_join(world_data, by = c(\"region\"=\"name\"))%>%\n  select(long,lat,group,order,region,region_wb) #%>%count(region)\n\n# my df with geocodes\nmap_geodata <- map_df%>%\n  left_join(worldcitiespop_match,by=\"city\")%>%\n  janitor::clean_names()\n\n\ngeom_polygon() for the world borders\ngeom_polygon() for the US borders\ngeom_path() for delimiting world regions\n\n\nmap_geodata_dot <- map_geodata %>% \n  arrange(time_in_seconds)%>%\n  mutate(participation=tolower(participation))%>%\n  mutate(elevation=elevation_gain+elevation_loss,.after=elevation_gain)%>%\n  select(-elevation_gain,-elevation_loss) %>%\n  select(country,latitude,longitude,gender,participation,rank)%>%\n  mutate(country_code = countrycode(country, \n            origin = 'country.name', \n            destination = 'iso2c'),\n         country_code=tolower(country_code))\n\nWe do not use these features:\n\ngeom_polygon(data=world_geodata,aes(x=long,y=lat,group=group),fill=“lightslategray”) +\ngeom_polygon(data = states,aes(x = long, y = lat, group = group),fill=NA,color=“#000000”,size=0.3)+\ngeom_path(data=world,aes(x=long,y=lat,group=group),size=0.1,color=“darkslateblue”) +\n\n\npal_gender<- c(\"deepskyblue4\",\"mediumvioletred\")\n\n\nmy_map_text_w\n\nWest world\n\nworld_west<-  ggplot() +\n  \n  geom_point(data = states,aes(x = long, y = lat),color=\"darkslateblue\",shape=\".\") +\n  geom_point(data=world,aes(x=long,y=lat,group=group),shape=\".\",color=\"darkslateblue\") +\n  \n  # now we need to add our data \n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude,color=factor(gender)),\n             alpha=0.7,stroke=1,size=1,shape = 21,fill=NA) +\n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude),\n             alpha=0.7,shape=\".\",color=\"yellow3\",show.legend = T) +\n  geom_point(data=map_geodata,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  geom_text(data=my_map_text_m,mapping=aes(x=longitude_m, y=latitude_m,label=cou_yr_m),\n            family=\"shadow_into_light\",color=\"gold\",hjust=-0.5) +\n  \n  coord_map(\"ortho\", orientation = c(3.849945, -103.525750, 0)) +\n  \n  guides(color = guide_legend(override.aes = list(size = 5)))+\n  scale_color_manual(values = pal_gender,labels=c(\"Male\",\"Female\")) +\n  labs(x=\"\",y=\"\",color=\"Gender\") +\n  theme_void() +\n  theme(text = element_text(family=\"shadow_into_light\",color=\"gold\"),\n        plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n        panel.background = element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = c(0.2,0.5),\n        legend.text = element_text(family=\"shadow_into_light\"),\n        legend.title = element_text(family=\"shadow_into_light\"))\n\n\nworld_west\n\nEast World\n\nworld_east<-  ggplot() +\n  \n  geom_point(data = states,aes(x = long, y = lat),color=\"darkslateblue\",shape=\".\") +\n  geom_point(data=world,aes(x=long,y=lat,group=group),shape=\".\",color=\"darkslateblue\") +\n  \n  # now we need to add our data \n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude,color=gender),\n             alpha=0.7,stroke=1,size=1,shape = 21,fill=NA,show.legend = F) +\n  geom_point(data=map_geodata_dot,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  geom_point(data=map_geodata,\n             mapping=aes(x=longitude,y=latitude),alpha=0.7,shape=\".\",color=\"yellow3\") +\n  \n  geom_text(data=my_map_text_w,mapping=aes(x=longitude_w, y=latitude_w,label=cou_yr_w),\n            family=\"shadow_into_light\",color=\"gold\",hjust=-0.2) +\n  \n  coord_map(\"ortho\", orientation = c(19.982182, 46.595135, 0)) +\n  \n  scale_color_manual(values = pal_gender) +\n  labs(x=\"\",y=\"\",color=\"\") +\n  theme_void() +\n  theme(text = element_text(family=\"shadow_into_light\",color=\"gold\"),\n        plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n        panel.background = element_rect(color=\"midnightblue\",fill=\"midnightblue\"),\n        axis.line = element_blank(),\n        axis.text.x = element_blank(),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"none\")\n\n world_east \n\n\nlibrary(patchwork)\nlibrary(cowplot)\n\nmain_plot <- (world_west + world_east)# +\n  #theme_update(plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n  #             panel.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"),\n  #             plot.margin = margin(0,0,0,0,unit = \"pt\"))\n\n\n# load the libraries for final touches\nlibrary(ggpubr)\n\n# ggarrange from {ggpubr} frames the plot to make side annotations\ngraphics <- ggpubr::ggarrange(main_plot)\n\nfinal_plot <- ggpubr::annotate_figure(graphics,\n                              top = text_grob(\"Global State of Ultra Running 2012-2021\",\n                                              color = c(\"gold\"), face = \"bold\", size = 32,\n                                              family=\"shadow_into_light\",vjust = 0.8),\n                              bottom = text_grob(\"DataSource: BjnNowak-Github Repo, RunRepeat.com-TidyTuesday week44\\n30DayMapChallenge day1 - Infographics: Federica Gazzelloni\",\n                                                 color = \"gold\",family=\"shadow_into_light\",\n                                                 hjust = 0.5, vjust = 0.5, x = 0.5, \n                                                 face = \"bold.italic\", size = 14))\n\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label = \"Top 6 Countries with faster Female runners at distances between 164 and 173 km\",\n         x = 0.5, y = 0.9,colour = \"gold\",size = 4,family = \"shadow_into_light\",fontface = \"bold\")+\n  annotate(geom = \"text\", label = \"Ranking number one faster\",\n         x = 0.91, y = 0.12,colour = \"gold\",size = 4,family = \"shadow_into_light\",fontface = \"bold\")\n\n\nlibrary(cowplot)\nlibrary(ggimage)\nlibrary(magick)\n\n# add the images for the legend keys\nimgrunners <- image_read(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w44/runner.png\")\n\n\n# ggdraw from {cowplot} draw the plot for setting the background colors of the side annotations\nfinal <- cowplot::ggdraw(final_plot) +\n  draw_image(imgrunners, x = 0.9, y = -0.45,width = 0.06) +\n  theme(plot.background = element_rect(fill = \"midnightblue\", colour = \"midnightblue\"))\n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w44/w44_runners.png\"),\n              res = 320, width = 12, height = 8, units = \"in\")\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w41_Registered_Nurses/w41_Registered_Nurses.html",
    "href": "tidytuesday/cases2021/posts2021/w41_Registered_Nurses/w41_Registered_Nurses.html",
    "title": "Registered Nurses",
    "section": "",
    "text": "TidyTuesday week 41 Nurses\n\n# load libraries\nlibrary(ggExtra)\nlibrary(xkcd)\nlibrary(ggstatsplot)\nlibrary(extrafont)\nlibrary(extrafont)\nfonts()\n\noptions(scipen = 999)\nlibrary(tidyverse)\n\n\nnurses <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-05/nurses.csv')\n\n\ndf <- nurses %>%\n  janitor::clean_names() %>%\n  filter(!is.na(employed_standard_error_percent),!is.na(wage_salary_standard_error_percent))\n\nmy_df <- df %>%\n  mutate(salary_level = case_when(annual_salary_median < 35000 ~ \"low\",\n                                 annual_salary_median >= 35000 & annual_salary_median < 55000 ~ \"medium\",\n                                 annual_salary_median >= 55000 & annual_salary_median <= 80000 ~ \"high\",\n                                 TRUE ~ \"top high\"),\n         .after = year) %>%\n  mutate(salary_level_class = case_when(annual_salary_median < 35000 ~ \"<35\",\n                                       annual_salary_median >= 35000 & annual_salary_median < 55000 ~ \"35 to 55\",\n                                       annual_salary_median >= 55000 & annual_salary_median <= 80000 ~ \"56 to 80\",\n                                       TRUE ~ \"<80\"),\n         .after = salary_level) %>%\n  mutate(salary_leg = paste(salary_level,\"-\",salary_level_class),\n         .after = salary_level,\n         salary_leg = as.factor(salary_leg))\n\nunique(my_df$salary_leg)\nlegend_ord <- levels(with(my_df, reorder(annual_salary_median,year)))\nmy_df$salary_level <- factor(my_df$salary_level, # Relevel group factor\n                             levels = c(\"low\",\"medium\",\"high\",\"top high\"))\n\n\ntheme_nurses <- xkcd::theme_xkcd() +\n  theme(text = element_text(color = \"grey80\",family = \"Comic Sans MS\"),\n        plot.title = element_text(hjust = 0.5,size = 24,face = \"bold\"),\n        plot.title.position = \"plot\",\n        plot.caption = element_text(family = \"Comic Sans MS\"),\n        plot.subtitle = element_text(hjust = 0.5),\n        plot.caption.position = \"plot\",\n        legend.background = element_blank(),\n        legend.box.background = element_blank(),\n        legend.key = element_blank(),\n        legend.title = element_text(size = 11,family = \"Comic Sans MS\",face = \"bold\"),\n        legend.text = element_text(size = 9,family = \"Comic Sans MS\"),\n        axis.ticks = element_line(size = 2,color = \"orange\"),\n        axis.line.x = element_line(color = \"grey80\"),\n        axis.title.x = element_text(size = 12,face = \"bold\"),\n        axis.title.y = element_text(size = 12,face = \"bold\"),\n        axis.text.y = element_text(color = \"grey80\"),\n        axis.text.x = element_text(color = \"grey80\"),\n        panel.grid.major.y = element_line(color = \"grey80\"),\n        panel.background = element_rect(color = \"grey40\",fill = \"grey40\"),\n        plot.background = element_rect(color = \"grey40\",fill = \"grey40\"))\n\n\nstair_sal <- my_df %>%\n  ggplot(aes(factor(year), y = annual_salary_median, group = salary_level, fill = salary_level)) +\n  geom_col(width = 1) +\n  labs(fill = \"Salary level\",\n       x = \"Years\",y = \"Cumulate annual median salaries by salary level\",\n       title = \"How much should salary increase per year?\",\n       subtitle = \"Nurses' annual median salary values by 4 levels\n        \") +\n  scale_x_discrete(breaks = seq(1998,2020,3)) +\n  scale_y_continuous(labels = scales::number_format(scale = 1/1000000,suffix = \"M\",accuracy = 1)) +\n  scale_fill_manual(limits = c(\"low\", \"medium\",\"high\",\"top high\"),\n                    labels = c(\"high\" = \"high from 56,000 to 80,000\",\n                             \"low\" = \"low less than 35,000\",\n                             \"medium\" = \"medium from 35,000 to 55,000\",\n                             \"top high\" = \"top high greater than 80,000\"),\n                    values = RColorBrewer::brewer.pal(4,\"Spectral\")) +\n  guides(fill = guide_legend(ncol = 4,title.position = \"left\")) +\n  theme_nurses +\n  theme(legend.position = c(0.5,0.99)) +\n  annotate(\"text\", x = 5, y = 1100000,label = \"Medium Salary from 35,000 to 60,000\",family = \"xkcd\" ) +\n  annotate(\"text\", x = 20, y = 300000,label = \"Top High up to 118,500\",family = \"xkcd\" ) +\n  annotate(\"text\", x = 20, y = 160000,label = \"started in 2008\",family = \"xkcd\" ) +\n  annotate(\"text\", x = 16, y = 2000000,label = \"High Salaries between 56,000 and 80,000\",family = \"xkcd\" ) +\n  annotate(\"curve\", x = 3, xend = 5, y = 3600000, yend = 2600000,color = \"grey85\", curvature = 0.5,\n           arrow = arrow(angle = 30, length = unit(0.2, \"inches\"),ends = \"last\", type = \"open\")) +\n  annotate(\"text\", x = 4, y = 3700000,label = \"Low salaries below 30,000\",family = \"xkcd\" ,color = \"red\") +\n  annotate(\"text\", x = 8, y = 3500000,label = \"stopped in 2011\\nto reach 35,000\",family = \"xkcd\",color = \"red\" ) +\n  annotate(\"curve\", x = 9, xend = 13, y = 3500000, yend = 3400000,color = \"grey85\", curvature = -0.5,\n         arrow = arrow(angle = 30, length = unit(0.2, \"inches\"),ends = \"last\", type = \"open\"))\n\n\n\nsalaries_by_year <- my_df %>%\n  group_by(year,salary_level) %>%\n  summarize(total = sum(annual_salary_median),.groups = \"drop\") %>%\n  pivot_wider(names_from = year,values_from = total,values_fill = 0)\n\nfacet_sal <- salaries_by_year %>%\n  pivot_longer(cols = \"1998\":\"2020\",names_to = \"years\",values_to = \"tot salary by level\") %>%\n  ggplot(aes(`tot salary by level`,salary_level,group = years)) +\n  geom_col(aes(fill = salary_level)) +\n  labs(x = \"Total amount of annual median salaries by level\",\n       y = \"Salary levels - $10thous.\",\n       fill = \"Salary level\",\n       caption = \"(values are in $,10thous.,M = millions of $)\\nDataSource: Registered Nurses,DataWorld,BLS\\nTidyTuesday Week41 DataViz: Federica Gazzelloni\") +\n  scale_x_continuous(labels = scales::number_format(scale = 1/100000,accuracy = 1)) +\n  scale_fill_manual(limits = c(\"low\", \"medium\",\"high\",\"top high\"),\n                    labels = c(\"high\" = \"high from 56,000 to 80,000\",\n                             \"low\" = \"low less than 35,000\",\n                             \"medium\" = \"medium from 35,000 to 55,000\",\n                             \"top high\" = \"top high greater than 80,000\"),\n                    values = RColorBrewer::brewer.pal(4,\"Spectral\")) +\n  guides(fill = guide_legend(ncol = 2,title.position = \"top\", title.hjust = 0.5)) +\n  facet_wrap(~years,scale = \"free_x\") +\n  theme_nurses +\n  theme(legend.position = c(0.80,0.07),\n        strip.background = element_rect(color = \"grey40\",fill = \"grey40\"),\n        strip.text = element_text(color = \"grey80\",face = \"bold\"))\n\n\nimg_nurse <- image_read(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w41/nurse.png\"))\nimg_dataworld <- image_read(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w41/dataworld.png\"))\nimg_bls <- image_read(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w41/bls.png\"))\ntidy_logo <- image_read(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\") %>%\n  image_resize(\"300x300\")\n\nlibrary(cowplot)\nfinal <- ggdraw() +\n  draw_plot(stair_sal/facet_sal) +\n  draw_image(img_nurse, x = 0.1, y = 0.45,width = 0.08) +\n  draw_image(img_dataworld, x = 0.13, y = -0.46,width = 0.05) +\n  draw_image(img_bls, x = 0.18, y = -0.46,width = 0.05) +\n  draw_image(tidy_logo, x = 0.04, y = -0.46,width = 0.09) \n\n\n# save final plot\nragg::agg_png(here::here(\"/Users/federica/Documents/R/R_general_resourses/TidyTuesday/TidyTuesday/w41/w41_nurses.png\"),\n              res = 320, width = 12, height = 14, units = \"in\")\n#stair_sal/facet_sal\nfinal\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w33_BEA_Infrastructure_Investment/w33_BEA_Infrastructure_Investment.html",
    "href": "tidytuesday/cases2021/posts2021/w33_BEA_Infrastructure_Investment/w33_BEA_Infrastructure_Investment.html",
    "title": "Bea Infrastructure Investment",
    "section": "",
    "text": "Introduction\nThe measurement of infrastructure in the U.S. National Economic Accounts (NEAs) considers different metrics, provided are the resources devoted to different types of infrastructure each year and a useful overview of trends.\nClassification of investment categories is provided by North American Industry Classification System (NAICS)\n\nTypes of infrastructure:\n\nBasic: transportation and utilities\nSocial: pubblic safety, education and health\nDigital: it excludes servers owned by private firms outside of NAICS 518 and 519\n\nthe analysis spans through 70 Years of investments from 1947 to 2017.\n\n\nThis analysis starts with analysing the classification of the investment categories by looking at:\n\n\nThe original datasets provided by the website are very useful to check whether the category and the meta category variables are homogeneous within the data sets:\n1 - Investment data set:\nInvestment data set is extracted from the original .xlsx file and shows the basic structure of the group categories on which the analysis is based.\n\ndf_inv_raw <- readxl::read_excel(\"infrastructure-data-may-2020.xlsx\", sheet = \"cu$inv\",skip = 2)\n\n\ndf_inv_raw <- df_inv_raw %>% \n  rename(group = ...1, category = ...2) %>% \n  filter(!is.na(category)) %>% \n  mutate(\n    meta_cat = if_else(!is.na(group), category, NA_character_), \n    group_num = group,\n    .after = \"category\"\n    ) \n\n\nDT::datatable(df_inv_raw %>% select(meta_cat,group,category))\n\nIn addtion it contains the gross investment variable which is the variable that will be used in the analysis as one of the factors to construct the Implicit Price Deflators index.\n\nnames(investment)\n\n2 - Chain investment data set:\nIt is extracted as the same as the investment set and it contains the same group of category variables except for one element in the category which is missing, it will be shown in more details further below in the analysis.\nIt doesn’t contains the gross investment variable but it the gross investment chain instead.\n\nnames(chain_investment)\n\n3 - IPD: Implicit Price Deflators data set:\n\nDT::datatable(df_IPD_inv_raw %>% select(meta_cat,group,category))\n\n\nipd <- df_IPD_inv_raw %>%\n  fill(meta_cat, group_num) %>%\n  pivot_longer(names_to = \"year\", values_to = \"gross_inv_ipd\", cols = `1947`:`2017`,\n               names_transform = list(year = as.integer)) %>% \n  filter(is.na(group)) %>% \n  select(-group) \n\nIPD set contains one more meta category as well as one more group number for the GDP element of the vector, which corresponds to group category number 0.\nIn fact the script for the IPD variable changes slightly with the addition of one more line of code.\nIt also contains the gross investment ipd variables whixh is the object of this study.\n\n ipd <- ipd %>%\n  mutate(meta_cat = if_else(category == \"GDP\", \"GDP\", meta_cat)) \n\nnames(ipd)\n\n\n\n\nData can also be loaded via:\n\ntuesdata <- tidytuesdayR::tt_load(2021, week = 33)\ntidytuesdayR::readme(tuesdata)\n\n\n\n\n\n\nThe original data sets are very useful to check whether the investments classified within their categories are homogeneous within the other data sets.\nThe analysis starts with checking of the three data sets, to see what are the common categories and if there are any differences. Next step would be to unify the three data sets to make a model for the Implicit Price Deflators.\n\nThe first data set Investment is the one used for understanding the composition of the variables. The other two are quite similar except for the investment variable, and two other differences in group category.\nLet’s start having a look at any missing values:\n\ninvestment <- tuesdata$investment\nDataExplorer::profile_missing(investment)\n\nNo values are missing in investment which is made of 5 variables:\n\ncategory: Category of investment (60 categories)\nmeta_cat: Group category of investment (16 meta categories)\ngroup_num: Group number of investment (1 to 20 number of sub-group of investment category)\nyear: Year of investment (from 1947 to 2017)\ngross_inv: Gross investment in millions of USD (which ranges from -194 to 500 900 millions $)\n\nThe meta_cat vector is the Group category of investment, and it has a sub-group numeric version named group_num, and a sub-sub-group of more specific categories of investments named: category.\nThe last variable is gross_inv i.e. Gross investment which is the sum of gross private domestic investment, government gross investment, and balance on current account, national income and product accounts.\n\nDT::datatable(head(investment,3))\n\n\n\n\n16 meta_cat:\n\nDT::datatable(investment%>%count(meta_cat))\n\n\ninvestment <- investment %>%\n  mutate(meta_cat = case_when(meta_cat==\"Total basic infrastructure\" ~ \"Basic\",\n                              TRUE~meta_cat ))\n\n\n\n\n\n20 sub-group of the meta_cat corresponding to group_num:\n\nDT::datatable(investment %>% count(group_num))\n\n\n\n\n\n60 sub-sub-group category vector:\n\nDT::datatable(investment %>% count(category))\n\nThe list of category contains a specification of the classification method for some of the elements in the vector, such as:\n\nPrivate communications equipment in NAICS 515, 517, 518, and 519\nPrivate computers in NAICS 515, 517, 518, and 519\nOffice buildings, NAICS 518 and 519\nPrivate software in NAICS 515, 517, 518, and 519\n\nThese elements are part of the Digital meta category of investment and the numbers at the ends are to specify that they are classified by the NAICS and only those classified in North America are accepted within the list of digital investments. So, other form of digital investments are not considered in this study.\n\ninvestment <- investment %>%\n  mutate(category = case_when(\n    category==\"Private communications equipment in NAICS 515, 517, 518, and 519\"~\"Private communications equipment\",\n    category==\"Private computers in NAICS 515, 517, 518, and 519\"~\"Private computers\",\n    category==\"Office buildings, NAICS 518 and 519\"~\"Office buildings\",\n    category==\"Private software in NAICS 515, 517, 518, and 519\"~\"Private software\",\n    TRUE~category)) \n\n\n\n\nExploratory analysis on Gross investments shows an increase in investments in the private sector as the most flourishing category within the last 70 years, followed by basic, S&L and social investments in infrastructures. Digital infrastructure and transports are still below 200 000 millions $. To be noted is that the private category for gross investment is still divided by amount of investments, but as a whole it releases the stronger increase over time.\n\nplot1\n\nA second visualization of the gross investment shows the category with the highest level of gross investment within the last 70 years in millions $.\n\nplot2\n\n\nplot3\n\n\nBefore continuing with other visualizations of investment trends, let’s check the other data sets to see the differences and then decide if to make a unified dataframe to use for comparison of gross investments, chained investments with implicit price deflactors (IPDs).\nThe first 4 variables are in common within all datasets, the next step is to check whether there are differences within the first 4 variables.\nThe second set doesn’t contains differences in classification when compared with investment set.\n\nchain_investment <- tuesdata$chain_investment\nDataExplorer::profile_missing(chain_investment)\n\n\nchain_investment <- chain_investment%>% \n  mutate(meta_cat = case_when(meta_cat==\"Total basic infrastructure\" ~ \"Basic\",\n                              TRUE~meta_cat ))\n\n59 chain investment categories:\n\nchain_investment <- chain_investment %>% \n  mutate(category=case_when(category==\"Private communications equipment in NAICS 515, 517, 518, and 519\"~\"Private communications equipment\",\n                            category==\"Private computers in NAICS 515, 517, 518, and 519\"~\"Private computers\",\n                            category==\"Office buildings, NAICS 518 and 519\"~\"Office buildings\",\n                            category==\"Private software in NAICS 515, 517, 518, and 519\"~\"Private software\",\n         TRUE~category)) \n\n“Office buildings” is the only category in “investment” df which doesn’t appear in “chain_investment” df.\n\ncat <- chain_investment %>% count(category) %>% select(-n) %>% unlist()\ninvestment %>% filter(!category %in% cat) %>% \n  count(category)\n\n\nImplicit Price Deflators (IPDs). An implicit price deflator is the ratio of the current-dollar value of a series, such as gross domestic product (GDP), to its corresponding chained-dollar value, multiplied by 100.\n\nipd <- tuesdata$ipd\nDataExplorer::profile_missing(ipd)\n\n\nmeta_inv <- investment%>%count(meta_cat)%>%select(-n)%>%unlist()\nipd%>%filter(!meta_cat%in%meta_inv)%>%count(meta_cat)\n\n\nipd <- ipd%>%\n  mutate(meta_cat = case_when(meta_cat==\"Total basic infrastructure\" ~ \"Basic\",\n                              meta_cat==\"Infrastructure\"~\"Total infrastructure\",\n                              meta_cat==\"Health care\"~\"Health\",\n                                TRUE~meta_cat ))\n\n\nipd <- ipd %>%\n  mutate(category=case_when(category==\"Private communications equipment in NAICS 515, 517, 518, and 519\"~\"Private communications equipment\",\n                            category==\"Private computers in NAICS 515, 517, 518, and 519\"~\"Private computers\",\n                            category==\"Office buildings, NAICS 518 and 519\"~\"Office buildings\",\n                            category==\"Private software in NAICS 515, 517, 518, and 519\"~\"Private software\",\n         TRUE~category)) \n\n60 categories are in the “Implicit Price Deflators” df\n\nipd_cats <-ipd %>% count(category)%>%unlist()\n\ncomparing it with the “investment” and “chain investment” categories, 6 of those have a slightly different name, the best wat to handle this for obtaining a unified data set made of the three sets is to have homogeneous values for the category variable.\nThese are the 6 categories in ipd to be changed:\n\ncat_investment <- investment%>%count(category)%>%select(-n)%>%unlist()\nipd_cats_to_be_renamed <- ipd%>%filter(!category%in%cat_investment)%>%count(category)%>%select(-n)%>%unlist()\n\nipd_cats_to_be_renamed\n\nThese 6 categories are in the investment data set and we want to use these names for the category variable for all the sets:\n\nselected_categories <- investment %>% filter(!category %in% ipd_cats) %>% count(category,group_num) %>% arrange(group_num)\n\nselected_categories\n\n\nipd <- ipd %>% \n  mutate(category = case_when(\n    category == \"Basic\" ~ \"Total basic infrastructure\",\n    category == \"Social\" ~ \"Total social infrastructure\",\n    category == \"Digital\" ~ \"Total digital infrastructure\",\n    category == \"Health care\" ~ \"Health\",\n    category == \"Communications structures\" ~ \"Private communications structures\",\n    TRUE ~ category\n  ))\n\nLet’s see how meta_cat of these 6 categories perform:\n\nplot4\n\n\ntotal_inv_df <- ipd %>% \n  count(category,meta_cat,year,gross_inv_ipd) %>% \n  group_by(year,meta_cat) %>%\n  summarize(total=ifelse(!is.na(round(sum(gross_inv_ipd))),round(sum(gross_inv_ipd)), 0)) %>%\n  ungroup() %>%\n  filter(!total==0) \n\n\nlibrary(extrafont)\nlibrary(showtext)\nshowtext_auto()\nshowtext_opts(dpi = 320)\nfont_add_google(\"Roboto Condensed\", \"roboto condensed\")\n\n\nplot5\n\n\nlibrary(patchwork)\nlibrary(ggpubr)\nlibrary(cowplot)\n\n\nimg <- png::readPNG('images.png')\n\n \n\ngraphics <- ggarrange(plot5) \n\nfinal_plot <- annotate_figure(graphics,\n               top = text_grob(\"IPDs Group investment categories\\n\", \n                               color = c(\"#FFD700\"), face = \"bold\", size = 34,\n                               family=\"roboto condensed\"),\n               bottom = text_grob(\"BEA: measurement of infrastructure in the U.S. National Economic Accounts (NEAs)\\nInfographic: @fgazzelloni\\n DataSource: TidyTuesday Week33: BEA Infrastructure Investment\",\n                                  color = \"#6C7B8B\",family=\"roboto condensed\",\n                                  hjust = 0.5, x = 0.5, face = \"bold.italic\", size = 10),\n               left = text_grob(\"\", color = c(\"#778899\"), rot = 90,size=10),\n               right = text_grob(bquote(\"\"), color=c(\"#778899\"),rot = 90,size=10),\n               fig.lab = \"TidyTuesday week33\", fig.lab.face = \"bold.italic\",fig.lab.size=8,\n               fig.lab.pos=\"bottom.right\"\n)\n\nfinal_plot <- final_plot +\n  annotate(geom = \"text\", label=\"values of the implicit price deflator ratio\",x = 0.25, y = 0.92, \n           colour = \"black\", face=\"bold\",size = 7,family=\"roboto condensed\") +\n  annotate(geom = \"text\", label=\"Digital just started in 1978 and followed \\nwith a deep decline during the last 40 years\",x = 0.70, y = 0.68, colour = \"#FF7F00\", size = 5,family=\"roboto condensed\") \n\n  \n\nfinal <- ggdraw() +\n  draw_image(img,  x = -0.4, y = -0.48, scale = .15) +\n  draw_plot(final_plot)\n\nfinal\n showtext.auto(enable = FALSE) \n\n\nragg::agg_png(\"w33_bea2.png\",\n              res = 320, width = 14, height = 8, units = \"in\")\nfinal\n\ndev.off()\n\nInvestment on Electric power only appear starting from 1993 with a ratio of 336:\n\nlist<-total_inv_df %>% filter(year==1992)%>%count(meta_cat)%>%select(-n)%>%unlist()\ntotal_inv_df %>% filter(year==1993,!meta_cat%in%list)\n\nmeta_cat are the Group category of investment, there are 4 values which are different within the sets:\n\nHealth care = Health\nInfrastructure = Total infrastructure\nBasic = Total basic infrastructure\nGDP\n\nWe need to add GDP as further meta_cat for both investment and chain_investment sets, and chenge the other three values into common values as shown above.\n\ninv_meta_cats <- investment %>% count(meta_cat) %>% select(-n) %>% unlist()\n\nipd %>% filter(!meta_cat %in% inv_meta_cats) %>% count(meta_cat)\n\nGDP is the only left meta_cat category, that it is not present in the other sets.\n\nipd %>% filter(!meta_cat %in% inv_meta_cats) %>% count(meta_cat)\n\nWhat about category variable? What are the differences in ipd set when compared with the other two?\nAs seen investment and chain_investment sets have the same category variables except for one variable which is “Office buildings”, so next step is to find the differences of this vector in ipd set:\n\ncat_inv <- investment %>% count (category) %>% select(-n) %>% unlist\nipd %>% filter(!category %in% cat_inv) %>% count(category)\n\nwe need to convert these values in ipd set:\n\nBasic = Total basic infrastructure\nCommunications structures = Private communications structures\nDigital = Total digital infrastructure\nGDP\nHealth care = Health\nSocial = Total social infrastructure\n\nFinally, GDP is the category group number 0 which is not in investment and chain investment sets, but only in IPD. While “Office buildings” is only in investment.\n\nipd <- ipd %>% \n  mutate(category = case_when(\n    category==\"Basic\"~\"Total basic infrastructure\",\n    category==\"Communications structures\"~\"Private communications structures\",\n    category==\"Digital\"~\"Total digital infrastructure\",\n    category==\"Health care\"~\"Health\",\n    category==\"Social\"~\"Total social infrastructure\",\n    TRUE~category))\n\n\nipd %>% filter(!category %in% cat_inv) %>% count(category)\n\nThe new data sets will contain the 4 common variables plus these other three:\n\ngross_inv: Gross investment in millions of USD\ngross_inv_chain: Gross investment (chained 2021 dollars) in millions of USD\ngross_inv_ipd: Implicit Price Deflators (IPDs)\n\nThe Implicit Price Deflators (IPDs) is obtained as an index result of:\n[ (gross_inv *100) / (gross_inv_chain *100) ] *100\nThe ipd set contains some missing values, these values are the results of 0 investments for some of the selected categories within the years.\n\nipd %>% filter(is.na(gross_inv_ipd)) %>% count(meta_cat,category)\n\nLet’s calculate the gross_inv_ipd vector with the formula, assigning its value to a different name vector and then check the missing values. To do this we need to join the three sets together:\n\ninvestment_full <- investment%>%\n  full_join(chain_investment,by=c(\"category\",\"meta_cat\",\"group_num\",\"year\")) %>%\n  full_join(ipd,by=c(\"category\",\"meta_cat\",\"group_num\",\"year\")) %>%\n  #filter(meta_cat==\"GDP\"| category==\"Office buildings\") %>% \n  mutate(gross_inv_chain = if_else(category==\"Office buildings\",0,gross_inv_chain),\n         gross_inv_ipd = if_else(gross_inv<=0,0,gross_inv_ipd),\n         gross_inv_ipd2 = if_else(gross_inv_chain==0,0,((gross_inv/100)/(gross_inv_chain/100))*100),\n         gross_inv_ipd2 = round(gross_inv_ipd2,2))\n  #DataExplorer::profile_missing()"
  },
  {
    "objectID": "tidytuesday/cases2021/posts2021/w51_Spice_Girls/w51_Spice_Girls.html",
    "href": "tidytuesday/cases2021/posts2021/w51_Spice_Girls/w51_Spice_Girls.html",
    "title": "Spice Girls",
    "section": "",
    "text": "library(tidyverse)\n\nstudio_album_tracks <- readr::read_csv(\"https://github.com/jacquietran/spice_girls_data/raw/main/data/studio_album_tracks.csv\")\n\n\nstudio_album_tracks%>%select(contains(\"key\"))%>%distinct()%>%arrange(key)\n\ndf<-studio_album_tracks%>%select(danceability,\n                                 year=album_release_year,\n                                 #mode,\n                                 energy,\n                                 loudness,\n                                 speechiness,\n                                 acousticness,\n                                 instrumentalness,\n                                 liveness,valence,duration_ms,tempo)\n\nugly <- ggthemr::define_palette(\n  swatch = c('black', 'red', 'green', 'blue', 'brown', 'purple', 'yellow'), \n  gradient = c(lower = 'red', upper = 'green')\n)\n\nggthemr::ggthemr(ugly)\n\nlibrary(extrafont)\nloadfonts()\nfamily=\"Impact\"\n\nviolins<-df%>%\n  select(-year,-instrumentalness)%>%\n  #recipe()%>%\n  #step_normalize(all_numeric())\n  scale()%>%as.data.frame()%>%mutate(year=df$year)%>%\n  #mutate(duration_ms=duration_ms/sum(duration_ms))%>%#count(duration_ms)\n  pivot_longer(cols=c(1:8),names_to=\"variables\",values_to=\"values\")%>%\n  #pull(values)%>%summary()\n  mutate(variables=tools::toTitleCase(variables),\n         variables=case_when(variables==\"Duration_ms\"~\"Duration in ms\",\n                             TRUE~variables))%>%\n  #mutate(across(variables, factor, levels=c(\"\")\n  ggplot(aes(x=factor(year),y=values,fill=variables))+\n  geom_boxplot(alpha=0.7)+\n  geom_violin(alpha=0.5)+\n  geom_point(color=\"gold\",size=0.2)+\n  facet_wrap(vars(variables),scales=\"free\",nrow = 2)+\n  scale_fill_brewer(type = \"seq\", palette = \"Spectral\")+\n  guides(fill=\"none\")+\n  labs(x=\"\",title=\"\")+\n  theme(text = element_text(family=family),\n        axis.title.y = element_blank(),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        panel.grid = element_line(size=0.3),\n        strip.text = element_text(color=\"hotpink\",size=12),\n        strip.background = element_rect(color=\"black\",fill=\"black\"),\n        axis.line = element_line(color=\"hotpink\",size=2),\n        axis.text.x = element_text(color=\"gold\",size=10),\n        axis.text.y = element_text(color=\"darkolivegreen2\",size=10))\n\n#violins\nbg<-ggplot()+\n  geom_blank()+\n  theme_void()+\n  theme(plot.background = element_rect(color=\"black\",fill=\"black\"))\n\nlibrary(cowplot)\n\nfinal<-ggdraw()+\n  draw_plot(bg)+\n  draw_image(\"w51/spice_bg.png\",scale = 1,\n             y=0.2) +\n # draw_image(\"w51/spices_image.jpg\",scale = 1.2) +\n            # scale=0.4,x=0.25,y=-0.28)+\n  draw_plot(violins,height = 0.55,y=-0.04)+\n  draw_label(\"What Makes a Song Likeable?\",\n             x=0.5,y=0.95,size=42,color=\"gold\",\n             fontfamily = family,fontface = \"bold\")+\n  draw_label(\"What Makes a Song Likeable?\",\n             x=0.5,y=0.95,size=41,color=\"hotpink\",\n             fontfamily = family,fontface = \"bold\")+\n  draw_label(\"DataViz: Federica Gazzelloni\",\n             angle=90,size=9,x=0.02,y=0.8,\n             fontfamily=family)+\n  draw_label(\"DataSource: Spice Girls by Jacquie Tran\",\n             angle=0,size=9,x=0.8,y=0.49,\n             fontfamily=family)+\n  \n  draw_label(\"1996\",\n             angle=15,size=25,x=0.5,y=0.87,\n             fontfamily=family)+\n  draw_label(\"1997\",\n             angle=15,size=23,x=0.65,y=0.83,\n             fontfamily=family)+\n  draw_label(\"2000\",\n             angle=15,size=27,x=0.8,y=0.85,\n             fontfamily=family)+\n  \n  \n  draw_label(\"1996\",color=\"white\",\n             angle=15,size=24,x=0.5,y=0.87,\n             fontfamily=family)+\n  draw_label(\"1997\",color=\"white\",\n             angle=15,size=22,x=0.65,y=0.83,\n             fontfamily=family)+\n  draw_label(\"2000\",color=\"white\",\n             angle=15,size=26,x=0.8,y=0.85,\n             fontfamily=family) +\n  draw_label(\"scaled values\",color=\"white\",\n             angle=0,size=6,x=0.96,y=0.46,\n             fontfamily=family)\n\n\n####### SAVING ######################################\nragg::agg_png(here::here(\"w51/spicegirls.png\"),\n              res = 320, width = 8, height = 8, units = \"in\")\nfinal\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2021/index.html",
    "href": "tidytuesday/cases2021/index.html",
    "title": "TidyTuesday 2021",
    "section": "",
    "text": "Starbucks drinks\n\n\nNetworks\n\n\n\n\n\n\nDec 21, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpice Girls\n\n\nNetworks\n\n\n\n\n\n\nDec 14, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpiders\n\n\nNetworks\n\n\n\n\n\n\nDec 7, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorld Cup Cricket\n\n\nNetworks\n\n\n\n\n\n\nNov 30, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDr. Who\n\n\nNetworks\n\n\n\n\n\n\nNov 23, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearning with afrilearndata\n\n\nNetworks\n\n\n\n\n\n\nNov 9, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaking maps with R\n\n\nNetworks\n\n\n\n\n\n\nNov 2, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUltra Trail Running\n\n\nNetworks\n\n\n\n\n\n\nOct 26, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBig Pumpkins\n\n\nNetworks\n\n\n\n\n\n\nOct 19, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal Seafood\n\n\nNetworks\n\n\n\n\n\n\nOct 12, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRegistered Nurses\n\n\nNetworks\n\n\n\n\n\n\nOct 5, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNBER Papers\n\n\nNetworks\n\n\n\n\n\n\nSep 28, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEmmy Awards\n\n\nNetworks\n\n\n\n\n\n\nSep 21, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBillboard\n\n\nNetworks\n\n\n\n\n\n\nSep 14, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFORMULA1\n\n\nNetworks\n\n\n\n\n\n\nSep 7, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBird Baths\n\n\nNetworks\n\n\n\n\n\n\nAug 31, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLemurs\n\n\nNetworks\n\n\n\n\n\n\nAug 24, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStarTrek\n\n\nNetworks\n\n\n\n\n\n\nAug 17, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBea Infrastructure Investment\n\n\nNetworks\n\n\n\n\n\n\nAug 10, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParalympic\n\n\nNetworks\n\n\n\n\n\n\nAug 3, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOlympic Medals\n\n\nNetworks\n\n\n\n\n\n\nJul 27, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUS drought\n\n\nNetworks\n\n\n\n\n\n\nJul 20, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScoobydoo\n\n\nNetworks\n\n\n\n\n\n\nJul 13, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInternational Independence Days\n\n\nNetworks\n\n\n\n\n\n\nJul 6, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnimal Rescues\n\n\nNetworks\n\n\n\n\n\n\nJun 29, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUS Public Parks\n\n\nNetworks\n\n\n\n\n\n\nJun 22, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDubois Challenge\n\n\nNetworks\n\n\n\n\n\n\nJun 15, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat Lakes Fish\n\n\nNetworks\n\n\n\n\n\n\nJun 8, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSurvivors\n\n\nNetworks\n\n\n\n\n\n\nJun 1, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMario Kart World\n\n\nNetworks\n\n\n\n\n\n\nMay 25, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAsk a Manager Survey\n\n\nNetworks\n\n\n\n\n\n\nMay 18, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUS Broadband\n\n\nNetworks\n\n\n\n\n\n\nMay 11, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWater Access\n\n\nNetworks\n\n\n\n\n\n\nMay 4, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCeo Departures\n\n\nNetworks\n\n\n\n\n\n\nApr 27, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNETFLIX & Upwards\n\n\nNetworks\n\n\n\n\n\n\nApr 20, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUS Post Office\n\n\nNetworks\n\n\n\n\n\n\nApr 13, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal deforestation\n\n\nEnvironment\n\n\n\nFederica Gazzelloni\n\n\nApr 6, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Pudding\n\n\nConnections\n\n\n\nFederica Gazzelloni\n\n\nMar 30, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUN Votes\n\n\nSocial Networks\n\n\n\n\n\n\nMar 23, 2021\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tidytuesday/cases2023/index.html",
    "href": "tidytuesday/cases2023/index.html",
    "title": "TidyTuesday 2023",
    "section": "",
    "text": "USPP\n\n\n\n\n\n\nFederica Gazzelloni\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nUFSR\n\n\n\n\n\n\nFederica Gazzelloni\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nHstM\n\n\n\n\n\n\nFederica Gazzelloni\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nGIST\n\n\n\n\n\n\nFederica Gazzelloni\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nSAFIS\n\n\n\n\n\n\nFederica Gazzelloni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal Surface Temperatures\n\n\nNetworks\n\n\n\n\n\n\nJul 11, 2023\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nVerified Oldest People\n\n\nNetworks\n\n\n\n\n\n\nMay 30, 2023\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nCentral Park Squirrels\n\n\nNetworks\n\n\n\n\n\n\nMay 23, 2023\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nTornados\n\n\nNetworks\n\n\n\n\n\n\nMay 16, 2023\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nChildcare Costs\n\n\nNetworks\n\n\n\n\n\n\nMay 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Portal Project\n\n\nNetworks\n\n\n\n\n\n\nMay 2, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLondon Marathon\n\n\nNetworks\n\n\n\n\n\n\nApr 25, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNeolithic Founder Crops\n\n\nNetworks\n\n\n\n\n\n\nApr 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUS Egg Production Data\n\n\nNetworks\n\n\n\n\n\n\nApr 11, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPremier League Match Data\n\n\nNetworks\n\n\n\n\n\n\nApr 4, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTime Zones\n\n\nNetworks\n\n\n\n\n\n\nMar 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProgramming Languages\n\n\nNetworks\n\n\n\n\n\n\nMar 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEuropean Drug Development\n\n\nNetworks\n\n\n\n\n\n\nMar 14, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNumbats in Australia\n\n\nNetworks\n\n\n\n\n\n\nMar 7, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfrican Language Sentiment\n\n\nNetworks\n\n\n\n\n\n\nFeb 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBob Ross Paintings\n\n\nNetworks\n\n\n\n\n\n\nFeb 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHollywood Age Gaps\n\n\nNetworks\n\n\n\n\n\n\nFeb 14, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBig Tech Stock Prices\n\n\nNetworks\n\n\n\n\n\n\nFeb 7, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPet Cats UK\n\n\n\n\n\n\n\n\n\nJan 31, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlone data\n\n\nNetworks\n\n\n\n\n\n\nJan 24, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArt history data\n\n\nNetworks\n\n\n\n\n\n\nJan 17, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBird FeederWatch data\n\n\nNetworks\n\n\n\n\n\n\nJan 10, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBring your own data to start 2023!\n\n\nNetworks\n\n\n\n\n\n\nJan 3, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w4_Alone_data/w4_Alone_data.html",
    "href": "tidytuesday/cases2023/posts2023/w4_Alone_data/w4_Alone_data.html",
    "title": "Alone data",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 04)\n\n\nsurvivalists <- tuesdata$survivalists\nloadouts <- tuesdata$loadouts\nepisodes <- tuesdata$episodes\nseasons <- tuesdata$seasons\n\n\nsurvivalists%>%head\n\n\nepisodes <- episodes%>%\n  select(season,air_date,viewers)\n\n\nviewers <- seasons%>%\n  select(lon,lat,location,country,n_survivors,season)%>%\n  inner_join(survivalists,by=c(\"season\",\"country\"))%>%\n  inner_join(episodes,by=c(\"season\"))%>%\n  select(age,n_survivors,viewers,air_date,location,country,city,state)%>%\n  # select(lon,lat,location,country,city,state,\n  #        name,age,gender,profession,n_survivors,season,\n  #        air_date,viewers)%>%\n  distinct()%>%#DataExplorer::profile_missing()\n  drop_na()\nviewers\n\n\nlibrary(owidR)\n# df <- owidR::owid_covid()\n# save(df,file=\"df.RData\")\nload(\"df.RData\")\ndf_short <- df%>%\n  select(continent,country=location,\n         date,total_cases,median_age,life_expectancy)%>%\n  filter(country==\"Canada\")\n\n\ndf_short%>%count(country)\nviewers%>%count(country)\n\n\nviewers%>%\n  inner_join(df_short%>%filter(country==\"Canada\"),\n             by=c(\"air_date\"=\"date\",\"country\"))%>%\n  select(air_date,n_survivors,viewers,total_cases,median_age,age)%>%\n  #filter(!is.na(total_cases))%>%\n  distinct()%>%\n  count(air_date)\n\n\nmy_df <- viewers%>%\n  inner_join(df_short%>%filter(country==\"Canada\"),\n             by=c(\"air_date\"=\"date\",\"country\"))%>%\n  select(n_survivors,viewers,total_cases,median_age,age)%>%\n  distinct() %>%\n  scale()%>%\n  as.data.frame()%>%\n  select(viewers,total_cases)\nmy_df\n\n\nv <- my_df$viewers\nc <- my_df$total_cases\ncor(v,c)\n\n\nmy_df%>%\n  ggplot()+\n  geom_density(aes(viewers))+\n  geom_density(aes(total_cases),color=\"red\")\n\n\nlibrary(tidyverse)\nlibrary(ggdist)\nlibrary(distributional)\nlibrary(extrafont)\nlibrary(showtext)\nshowtext_auto()\nsysfonts::font_add_google(name=\"Chelsea Market\",\n                          family=\"Chelsea Market\")\n\n\nmy_df%>%\n  pivot_longer(cols = everything(), \n               names_to = \"type\" ,values_to = \"values\")%>%\n  mutate(type=ifelse(type==\"viewers\",\n                     \"TV series Alone - Viewers\",\n                     \"OWId Covid19 Total Cases in Canada\"))%>%\n  ggplot(aes(y=type,x=values,\n             #xdist=dist_normal(values, sd(values)),\n         #xdist = dist_normal(0, 1),\n         layout = \"weave\",\n         fill = stat(x > 0)))+\n  stat_dots(aes(xdist = dist_normal(0, 1)))+\n  ggnewscale::new_scale_fill()+\n  stat_dist_slabinterval(aes(x=values),alpha=0.8)+\n  geom_vline(xintercept = 0, alpha = 0.25) +\n   tvthemes::scale_fill_hilda()+\n  labs(title=\"Canada: TV Series ALONE Viewers and OWId Covid19 Total Cases\",\n       subtitle=\"Distributions of standardized values\",\n       caption = \"Correlation doesn't imply causation! These are 11 weeks of Covid-19 (2020-06-11 - 2020-08-20) and ALONE Viewers\\nDataSource: #TidyTuesday 2023 week4 Alone data\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day6 - OWId\\n\")+\n  tvthemes::theme_avatar(text.font = \"Chelsea Market\")+\n  theme(text=element_text(),\n        plot.title = element_text(hjust = 1),\n        plot.caption = element_text(hjust = 1),\n        legend.position = \"none\",\n        axis.title = element_blank())\n\n\nmy_df%>%\n  mutate(day=seq_along(1:11))%>%\n  pivot_longer(cols = c(\"viewers\",\"total_cases\"), \n               names_to = \"type\" ,values_to = \"values\")%>%\n  mutate(type=ifelse(type==\"viewers\",\n                     \"TV series Alone - Viewers\",\n                     \"OWId Covid19 Total Cases in Canada\"))%>%\n  ggplot(aes(x=day,y=values,group=type,color=type))+\n    geom_line()+\n  geom_smooth(method = \"lm\",se=F)+\n  tvthemes::scale_color_hilda()+\n  theme_bw()+\n  theme(legend.position = \"top\")"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w11_European_Drug_Development/w11_European_Drug_Development.html",
    "href": "tidytuesday/cases2023/posts2023/w11_European_Drug_Development/w11_European_Drug_Development.html",
    "title": "European Drug Development",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 11)\n\n\ndrugs <- tuesdata$drugs\ndrugs%>%names\n\n\ndrugs%>%head\n\n\ndrugs%>%\n  filter(category==\"veterinary\")%>%\n  count(species,pharmacotherapeutic_group,condition_indication,authorisation_status)%>%\n  count(authorisation_status)\n\n\ndrugs%>%count(therapeutic_area)%>%\n  filter(str_detect(therapeutic_area,regex('Abstinence', ignore_case=TRUE)))\n\n\nMental health: Mental health has become an increasingly prevalent topic in pop culture in recent years. For example, in 2017, the popular Netflix series “13 Reasons Why” depicted the experiences of a high school student struggling with mental health issues, sparking a national conversation about the portrayal of mental health in popular media. Additionally, in 2019, singer-songwriter Billie Eilish released a song titled “Everything I Wanted,” which addressed her own struggles with mental health and suicide ideation. The song went on to become a hit and was widely praised for its honest portrayal of mental health issues.\nCancer: Cancer has been a prevalent health condition in pop culture for many years. For example, the 1979 film “The China Syndrome” depicted the experiences of a television reporter investigating a nuclear power plant, which ultimately leads to a near-meltdown and radiation exposure. The film was released just weeks before the Three Mile Island nuclear accident in Pennsylvania, which brought the issue of nuclear safety to the forefront of public consciousness. Additionally, in 2012, the popular book and film “The Fault in Our Stars” depicted the experiences of two teenagers with cancer who fall in love. The book and film were widely praised for their honest portrayal of the emotional and physical toll of cancer.\nAddiction: Addiction, particularly to opioids and other drugs, has become a major health crisis in many parts of the world. Pop culture has played a role in raising awareness of the issue. For example, in 2018, the film “Beautiful Boy” depicted the experiences of a father and son dealing with the son’s addiction to drugs. The film was based on a memoir by journalist David Sheff and his son Nic, and was widely praised for its honest portrayal of addiction and its impact on families. Additionally, in 2019, rapper Lil Nas X released a song titled “Old Town Road,” which addressed his own struggles with addiction and the impact it had on his life. The song went on to become a massive hit and was widely praised for its honest portrayal of addiction.\n\n\nlibrary(ggtext)\n\n\ncolors <- c(\"#a668f1\",\"#35d2da\",\"#fdd433\",\"#f15e9c\",\"#9189c1\")\n\n\ndf <- drugs %>%\n  filter(category == \"human\", authorisation_status == \"authorised\") %>%\n  count(\n    therapeutic_area,\n    condition_indication,\n    pharmacotherapeutic_group,\n    marketing_authorisation_date\n  ) %>%\n  mutate(year = year(marketing_authorisation_date),\n         year = as.integer(year)) %>%\n  count(year) %>%\n  filter(!is.na(year), !year == \"2023\")\n\n\np <- df %>%\n  ggplot(aes(year,n))+\n  geom_col(fill=\"black\",color=\"black\",linewidth=0.3)+\n  geom_smooth(se=FALSE,linewidth=0.5,color=\"#d4a09f\") +\n    geomtextpath::geom_textvline(xintercept = c(1997), \n                 label = \"Mental Health| Good Will Hunting\", \n                 hjust = 0.8,\n                 size=5,\n                 family=\"Roboto Condensed\",\n                 fontface=\"bold\",\n                 linetype = 2, \n                 vjust = 1.3, \n                 color = \"#35d2da\") +\n  geomtextpath::geom_textvline(xintercept = c(2017), \n                 label = \"Mental Health| Netflix series 13 Reasons Why\", \n                 hjust = 0.8,\n                 size=5,\n                 family=\"Roboto Condensed\",\n                 fontface=\"bold\",\n                 linetype = 2, \n                 vjust = 1.1, \n                 color = \"#35d2da\") +\n    geomtextpath::geom_textvline(xintercept = c(2010), \n                 label = \"Mental Health| TV show Glee\", \n                 hjust = 0.8,\n                 size=5,\n                 family=\"Roboto Condensed\",\n                 fontface=\"bold\",\n                 linetype = 2, \n                 vjust = 1.3, \n                 color = \"#35d2da\") +\n    geomtextpath::geom_textvline(xintercept = c(1995), \n                 label = \"Cancer| The American President\", \n                 hjust = 0.8,\n                 size=5,\n                 family=\"Roboto Condensed\",\n                 fontface=\"bold\",\n                 linetype = 2, \n                 vjust = 1.3, \n                 color = \"#fdd433\") +\n    geomtextpath::geom_textvline(xintercept = c(2012), \n               label = \"Cancer| The Fault in Our Stars\", \n               hjust = 0.8,\n               size=5,\n               family=\"Roboto Condensed\",\n               fontface=\"bold\",\n               linetype = 2, \n               vjust = 1.3, \n               color = \"#fdd433\") +\n    geomtextpath::geom_textvline(xintercept = c(2018), \n             label = \"Opioids| Beautiful Boy\", \n             hjust = 0.8,\n             size=5,\n             family=\"Roboto Condensed\",\n             fontface=\"bold\",\n             linetype = 2, \n             vjust = 1.3, \n             color = \"#f15e9c\") +\n    geomtextpath::geom_textvline(xintercept = c(1996), \n             label = \"Opioids| Trainspotting\", \n             hjust = 0.8,\n             size=5,\n             family=\"Roboto Condensed\",\n             fontface=\"bold\",\n             linetype = 2, \n             vjust = 1.3, \n             color = \"#f15e9c\") +\n  scale_y_continuous(expand = c(0,0))+\n  scale_x_continuous(n.breaks = 6) + # #1380A1, #990000, #FAAB18\n  labs(title=\"**European Drug Development marketing authorisation year trend**\",\n       subtitle=\"Mid-Century onwards Pop culture movies depitching <span style='color:#35d2da;'>Mental health</span>,<span style='color:#fdd433;'>Cancer</span>, and <span style='color:#f15e9c;'>Opioids addiction</span>\",\n       caption=\"Films, shows, and books raise awareness of mental health, cancer, and addiction issues in pop culture.\\nDataSource: #TidyTuesday 2023 week11 European Drug Development\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day13 - Pop Culture\",\n       x=\"Time (Year)\", y=\"Count\")+\n  theme(text = element_text(family=\"Roboto Condensed\",color=\"black\",face=\"bold\"),\n        axis.text = element_text(family=\"Roboto Condensed\",color=\"white\"),\n        panel.grid = element_line(linewidth=0.1,color=\"grey90\"),\n        plot.title = element_markdown(family=\"Roboto Condensed\",size=18),\n        plot.subtitle = element_markdown(family=\"Roboto Condensed\"),\n        plot.caption = element_text(hjust = 1),\n        plot.background = element_rect(color=\"#d4a09f\",fill=\"#a668f1\"),\n        panel.background = element_rect(color=\"#a668f1\",fill=\"#a668f1\",linewidth=0.5))\n  \np\n\n\nbbplot::finalise_plot(plot_name = p,\n                      logo_image_path = \"images/pop-logo.png\",\n                      source_name = \"European Drug Development and Pop Culture\",\n                      save_filepath = \"w11_ErDD.png\")\n\npop culture is an important aspect of modern society, serving as a means to both entertain and inform individuals about the wider world around them.\nPop culture refers to the popular elements of cultural expression that are widely disseminated through mass media and enjoyed by large segments of the population.\nIt includes things like music, film, television, fashion, social media, and other forms of mass communication."
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w15_US_Egg_Production_Data/w15_US_Egg_Production_Data.html",
    "href": "tidytuesday/cases2023/posts2023/w15_US_Egg_Production_Data/w15_US_Egg_Production_Data.html",
    "title": "US Egg Production Data",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization US Egg Production down/upwards\n\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 15)\n\n\neggs <- tuesdata$`egg-production`\ncages <- tuesdata$`cage-free-percentages`\n\n\neggs%>%\n  inner_join(cages,by=\"observed_month\")%>%\n  distinct() %>%\n  mutate(ymon=zoo::as.yearmon(observed_month),\n         .after=observed_month)\n\n\ndf <- eggs %>%\n  inner_join(cages, by = \"observed_month\") %>%\n  mutate(ymon = zoo::as.yearmon(observed_month),\n         .after = observed_month) %>%\n  select(-source.x, -source.y, -observed_month) %>%\n  group_by(ymon, prod_process) %>%\n  mutate(pct_hens = round(n_hens / sum(n_hens) * 100, 2),\n         pct_eggs = round(n_eggs / sum(n_eggs) * 100, 2)) %>%\n  ungroup() %>%\n  arrange(ymon)\n\ndf%>%head\n\n\ndf %>%\n  ggplot(aes(ymon,n_hens))+\n  geom_line(aes(group=prod_type))+\n  facet_wrap(~prod_process,scales = \"free\")\n\n\ndf %>%\n  filter(!prod_process==\"all\")%>%\n  ggplot()+\n  geom_line(aes(ymon,n_hens,group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+  \n  facet_wrap(~prod_process,scales = \"free_y\")+\n  scale_y_log10()\n\n\ndf %>%\n  filter(!prod_process==\"all\")%>%\n  ggplot(aes(x=ymon))+\n  geom_line(aes(y=n_hens/sum(n_hens)*100,\n                group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+\n  geom_line(aes(y=n_eggs/sum(n_eggs)*100,\n                group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+\n  facet_wrap(~prod_process,scales = \"free_y\")+\n  scale_y_continuous(labels = scales::label_percent(decimal.mark = \",\",suffix = \" %\"))\n\n\ndf %>%\n  filter(!prod_process==\"all\")%>%\n  ggplot()+\n  geom_line(aes(ymon,percent_eggs,group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+  \n  geom_line(aes(ymon,percent_hens,group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))\n\n\nFill missing values\nyou can fill in the data with two approaches:\n\nUp - While filling the missing values, you have to specify the direction of filling of values. If you choose Up, then the filling process will be bottom-up.\nDown - In this method, you have to set the direction of filling to down.\n\nsource: https://www.digitalocean.com/community/tutorials/fill-missing-values-in-tidyr-r\nUse .direction = \"downup\" to fill missing values in both directions\n\ndf %>%\n  filter(!prod_process==\"all\")%>%\n  tidyr::fill(percent_eggs, .direction = 'downup') %>% # View()\n  mutate(percent_eggs=ifelse(is.na(percent_eggs),25,percent_eggs))%>% #View\n  ggplot()+\n  geom_line(aes(ymon,percent_eggs,group=prod_type),\n            color=\"red\",\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+  \n  geom_line(aes(ymon,percent_hens,group=prod_type),\n            lineend = \"butt\",\n            arrow = arrow(length = unit(0.05,\"inches\"),\n                          type=\"closed\"))+\n  ggthemes::theme_fivethirtyeight()\n\nAug 2016 - Feb 2021\n\ndf %>%\n  filter(!prod_process==\"all\")%>% # count(ymon)\n  tidyr::fill(percent_eggs, .direction = 'downup') %>% # View()\n  mutate(percent_eggs=ifelse(is.na(percent_eggs),25,percent_eggs))%>% #View\n  pivot_longer(cols = c(\"percent_eggs\",\"percent_hens\"))%>%\n  mutate(name=ifelse(name==\"percent_eggs\",\"eggs (%)\",\"hens (%)\")) %>%\n  ggplot()+\n  geom_line(aes(ymon,value,group=name,color=name),\n            linewidth= 1,\n            arrow = arrow(length = unit(0.1,\"inches\"),\n                          angle = 30,\n                          type=\"closed\"))+ \n  labs(title=\"US Egg Production Aug 2016 - Feb 2021\",\n       subtitle=\"Hens & Eggs down/upwards\",\n       color=\"\",\n       caption=\"DataSource: #TidyTuesday Week 15 US Egg Production\\n #30DayChartChallenge Day 21 down/upwards | DataViz: Federica Gazzelloni\")+\n  ggthemes::scale_color_fivethirtyeight()+\n  ggthemes::theme_fivethirtyeight()\n\n\nggsave(\"w15_UEPD.png\",width = 7,height = 5,bg=\"white\")"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w13_Time_Zones/w13_Time_Zones.html",
    "href": "tidytuesday/cases2023/posts2023/w13_Time_Zones/w13_Time_Zones.html",
    "title": "Time Zones",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 13)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w13_Time_Zones/w13_Time_Zones.html#bonne-projection",
    "href": "tidytuesday/cases2023/posts2023/w13_Time_Zones/w13_Time_Zones.html#bonne-projection",
    "title": "Time Zones",
    "section": "Bonne Projection",
    "text": "Bonne Projection\n\nlibrary(sf)\nprojection_bonne <- c(\"+proj=bonne +lat_1=10\")\n\nworld_graticule <- sf::st_graticule(lon= seq(-180,180, 15),\n                                    lat = seq(-90,90, 7.5),\n                                    ndiscr = 5000,\n                                    margin = 0.00000000001) %>%\n  sf::st_transform(projection_bonne)\n\n\nworld_pol <- rnaturalearth::ne_countries(returnclass = \"sf\")\n\nDT_sf = st_as_sf(timezones, coords = c(\"longitude\", \"latitude\"), \n                 crs = 4326, agr = \"constant\")\n\nggplot()+\n  geom_sf(data = world_graticule)+\n  geom_sf(data = world_pol)+\n  geom_sf(data=DT_sf)+\n  coord_sf()\n\n\n# input_coord <- st_point(c(<longitude>, <latitude>))\nproj_mollweide <- \"+proj=moll\"\noutput_coord <- st_transform(DT_sf, crs = proj_mollweide)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w13_Time_Zones/w13_Time_Zones.html#mollweide-projection",
    "href": "tidytuesday/cases2023/posts2023/w13_Time_Zones/w13_Time_Zones.html#mollweide-projection",
    "title": "Time Zones",
    "section": "Mollweide Projection",
    "text": "Mollweide Projection\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Patrick Hand\",\n                family=\"Patrick Hand\")\n\n\nggplot(output_coord)+\n  geom_rect(xmin=0,xmax=Inf,ymin=-Inf,ymax=Inf,fill=\"#fff1e0\")+\n  geom_rect(xmin=-Inf,xmax=0,ymin=-Inf,ymax=Inf,fill=\"#bfd0dd\")+\n  geom_rect(xmin=0,xmax=Inf,ymin=-Inf,ymax=0,fill=\"#bfd0dd\")+\n  geom_rect(xmin=-Inf,xmax=0,ymin=-Inf,ymax=0,fill=\"#fff1e0\")+\n  geom_sf(data = world_pol,fill=NA,color=\"grey40\")+\n  geom_sf(shape=21,stroke=0.3,fill=\"#7b9aca\")+\n  geom_vline(xintercept = 0)+\n  geom_hline(yintercept = 0)+\n  #coord_map(projection = \"mollweide\")+\n  labs(title=\"Positive & Negative Coordinates\",\n       subtitle = \"Time zone locations\",\n       caption=\"DataSource: #TidyTuesday Week13: Time Zones - #30DayChartChallenge Day15: positive/negative\\nDataViz: Federica Gazzelloni\")+\n  ggthemes::theme_map()+\n  theme(text=element_text(family=\"Patrick Hand\"),\n        plot.title = element_text(size=30),\n        plot.caption = element_text(size=10),\n        plot.background = element_rect(color=\"#7b9aca\",fill=\"#7b9aca\"))\n\n\nggsave(\"p.png\",\n       width = 7,height = 5)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w28_Global_Surface_Temperatures/w28_Global_Surface_Temperatures.html",
    "href": "tidytuesday/cases2023/posts2023/w28_Global_Surface_Temperatures/w28_Global_Surface_Temperatures.html",
    "title": "Global Surface Temperatures",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization GIST\n\nSource of original design: https://earthobservatory.nasa.gov/world-of-change/global-temperatures#:~:text=According%20to%20an%20ongoing%20temperature,1.9%C2%B0%20Fahrenheit)%20since%201880.\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 28)\n\n\ntuesdata$global_temps%>%head\n\n\nGlobal Temperature Anomalies\nAnomalies are calculated with respect to the 1951-1980 climatology.\nGlobal Temperatures are in C° degrees, what we see here is the difference in temperature as a result of an application of a model to estimate the mean difference in temperatures with respect to 1951-1980 time-frame.\n\nglobal_temps <- tuesdata$global_temps\nglobal_temps%>%select(1:13)%>%summary()\n\n\nHistorical spatial variations in surface temperature anomalies are derived from historical weather station data and ocean data from ships, buoys, and other sensors. Uncertainties arise from measurement uncertainty, changes in spatial coverage of the station record, and systematic biases due to technology shifts and land cover changes.1\n\nThe differencing applied to the estimated mean values are used to calculate the yearly rate of change in percentage value.\n\\[\\text{rate of change}=\\frac{y_2-y_1}{x_2-x_1}\\]\n\ndiff <- global_temps %>%\n  select(1:13) %>% # count(Year) 1880 - 2023\n  pivot_longer(cols = -Year)%>%\n  mutate(color=ifelse(value>0,\"up\",\"down\"))%>%\n  # grouping by Year, data are reframed to obtain a new vector\n  group_by(Year)%>%\n  # with the average values of the anomalies estimations\n  reframe(avg_val=mean(value))%>%\n  # the yearly rate of change in temperature anomalies\n  mutate(diff=c(0,diff(avg_val))*100)\n\ndiff%>%summary()\n\n\nsummary(diff$avg_val)\n\nHere we see the application:\n\\[\\text{rate ratio}=\\frac{y_{t+1}}{y_{t}}\\]\n\nrates_df <- diff%>%\n  mutate(abs_lag=abs(lag(avg_val)),\n         rate_change=diff/abs_lag,\n         rr= avg_val/lag(avg_val))\n\nrates_df%>%head\n\n\nrates_df%>%\n  ggplot(aes(x=Year,y=avg_val))+\n  geom_rect(xmin=1938,xmax=1980,ymin=-Inf,ymax=Inf,alpha=0.1,fill=\"grey\")+\n  geom_rect(xmin=1951,xmax=1980,ymin=-Inf,ymax=Inf,alpha=0.1,fill=\"grey60\")+\n  geom_line()+\n  geom_line(aes(y=rr/100),\n            color=\"darkred\",\n            inherit.aes = T)+\n  scale_x_continuous(n.breaks = 10)\n\n\nrates_df%>%\n  filter(Year>= 1980)%>%\n  select(rr)%>%\n  map_dbl(\\(rr) mean(rr,na.rm = T))\n\nConsidering all temperatures anomalies from 1978 to 2023, on average the steady increase is about 1.6% percent rate.\n\ndiff%>%\n  drop_na()%>%\n  filter(Year> 1977)%>%\n  select(diff)%>%\n  map_dbl(\\(diff) mean(diff))\n\nThe line plot shows yearly temperature anomalies from 1880 to 2023.\nEstimate of temperature change that could be compared with predictions of global climate change in response to atmospheric carbon dioxide, aerosols, and changes in solar activity.\nThese in situ measurements are analyzed using an algorithm that considers the varied spacing of temperature stations around the globe and urban heat island effects.\n\nglobal_temps %>%\n  select(1:13) %>% # count(Year) 1880 - 2023\n  pivot_longer(cols = -Year) %>%\n  mutate(color=ifelse(value>0,\"up\",\"down\")) %>%\n  # group_by(Year)%>%\n  # reframe(avg_val=mean(value))%>%\n  ggplot(aes(x=Year,y=value,group=name,color=name))+\n  geom_line(linewidth=0.3)+\n  geom_smooth(se=F,linewidth=0.1)+\n  scale_x_continuous(n.breaks = 10)+\n  scale_color_manual(values = RColorBrewer::brewer.pal(12,\"Paired\"))+\n  labs(color=\"Time(Month)\")+\n  ggthemes::theme_fivethirtyeight()\n\n\ndiff %>%\nggplot(aes(x=Year,y=diff))+\n  geom_line(color=\"darkred\",\n            linewidth=0.5)+\n  geom_hline(yintercept = 0)\n\n\nglobal_temps2 <- global_temps %>%\n  select(1:13) %>% # count(Year) 1880 - 2023\n  pivot_longer(cols = -Year) %>%\n  mutate(color=ifelse(value>0,\"up\",\"down\")) \n\nglobal_temps2 %>% head\n\nAn approximate explanation:\n\nset.seed(1234)\ntrain_id <-  sample_frac(tibble(id=row_number(global_temps2)),0.8)\ntraining <- global_temps2[pull(train_id),]\ntesting <-  global_temps2%>%anti_join(training)\n\n\nfit<- lm(value ~ Year, data=training)\nsummary(fit, show.intercept= FALSE)\n\n\nbroom::augment(fit)%>%head\n\n\nbroom::augment(fit)%>%\n  left_join(global_temps2,by=c(\"Year\",\"value\"))%>%\n  ggplot(aes(x=Year,value,group=name))+\n  geom_line(color=\"steelblue\",linewidth=0.5)+\n  geom_line(aes(y=.fitted),inherit.aes = T)\n\n\npredict(fit,newdata = tibble(Year=c(2024,2025,2026)))\n\n\nprediction<- tibble(Year=c(2024,2025,2026),\n                    pred=predict(fit,\n                                 newdata = tibble(Year=c(2024,2025,2026))))\n\nbroom::augment(fit)%>%\n  left_join(global_temps2,by=c(\"Year\",\"value\"))%>%\n  ggplot(aes(x=Year,value))+\n  geom_line(aes(group=name),color=\"steelblue\",linewidth=0.5)+\n  geom_line(aes(y=.fitted),inherit.aes = T)+\n  geom_line(data=prediction, mapping=aes(x=Year,y=pred),color=\"darkred\")\n\n\ntag<-tibble(tag_history= c(\"The basic GISS temperature analysis scheme was defined in the late 1970s by James Hansen when a method of estimating global temperature change was needed for comparison with one-dimensional global climate models.\"),\n            tag_stats = c(\"According to an ongoing temperature analysis led by scientists at NASA's Goddard Institute for Space Studies (GISS), the average global temperature on Earth has increased by at least 1.1° Celsius (1.9° Fahrenheit) since 1880.\"),\n            tag_reading =c(\"How to read this graph: The dashed-line depicts the average Global temperature with a one-year lag. The bars represent temperature anomalies estimated with respect to the 1951-1980 climatology.\"))\n\n\nlibrary(grid)\n\nglobal_temps2 %>%\n  ggplot(aes(x=Year,y=value))+\n  geom_line(data=diff,\n            mapping=aes(x=Year,y=diff),\n            inherit.aes = F,\n            linetype=\"dashed\",\n            color=\"red\",\n            linewidth=0.05)+\n  geom_rect(xmin=1951,xmax=1980,\n                ymin=-4,ymax=4,\n            #fill=\"grey70\",\n            alpha=0.8)+\n  geom_col(aes(fill=color))+\n  ggthemes::theme_fivethirtyeight()\n\n\nglobal_temps2 %>%\n  ggplot(aes(x=Year,y=value))+\n  geom_line(data=diff,\n            mapping=aes(x=Year,y=diff),\n            inherit.aes = F,\n            linetype=\"dashed\",\n            color=\"grey80\",\n            linewidth=0.1)+\n  geom_rect(xmin=1951,xmax=1980,\n                ymin=-4,ymax=4,\n            alpha=0.8)+\n  geom_col(aes(fill=color))+\n  geom_segment(aes(x=min(Year)-1,xend=min(Year)-1,\n                   y=0,yend=-10),\n               color=\"grey70\",\n               linewidth=1.5,\n               lineend=\"butt\",\n               arrow=arrow(length = unit(0.1, \"inches\")))+\n  geom_segment(aes(x=max(Year)+1,xend=max(Year)+1,\n                   y=0,yend=10),\n               color=\"grey70\",\n               linewidth=1.5,\n               lineend=\"butt\",\n               arrow=arrow(length = unit(0.1, \"inches\")))+\n  geom_segment(aes(x=1940,xend=1940,\n                 y=0,yend=10),\n               color=\"grey70\",\n               linewidth=0.5,\n               lineend=\"butt\",\n               arrow=arrow(length = unit(0.1, \"inches\")))+\n  geom_segment(aes(x=1957,xend=1957,\n               y=0,yend=10),\n             color=\"grey70\",\n             linewidth=0.5,\n             lineend=\"butt\",\n             arrow=arrow(length = unit(0.1, \"inches\")))+\n   geom_segment(aes(x=1979,xend=1979,\n              y=0,yend=-10),\n             color=\"grey70\",\n             linewidth=0.5,\n             lineend=\"butt\")+\n  ggtext::geom_textbox(data = tag,aes(x=1979,y=-15,label = tag_stats),\n                     size = 3, \n                     family=\"Roboto Condensed\",\n                     width = unit(20, \"line\"), \n                     alpha = 0.9,\n                     color=\"grey70\",\n                     fill=\"grey4\",\n                     box.colour = \"grey70\") +\n  ggtext::geom_textbox(data = tag,aes(x=1920,y=-25,label = tag_reading),\n                     size = 3, \n                     family=\"Roboto Condensed\",\n                     width = unit(20, \"line\"), \n                     alpha = 0.9,\n                     color=\"grey70\",\n                     fill=\"grey4\",\n                     box.colour = \"grey4\") +\n  geom_hline(yintercept = 0,linewidth=2,color=\"grey70\")+\n  geom_vline(xintercept = 1951,color=\"red\",alpha=0.2)+\n  geom_vline(xintercept = 1980,color=\"red\",alpha=0.2)+\n  scale_x_continuous(n.breaks = 10)+\n  scale_y_continuous()+\n  annotate(geom = \"text\",\n         family=\"Roboto Condensed\",\n         fontface=\"bold\",\n         label=\"Global Surface\\nTemperatures Anomalies\\n1880 - 2023\",\n         size=12,\n         color=\"grey70\",\n         hjust=0,\n         x = 1880 ,y =c(21) )+\n  annotate(geom = \"text\",\n         family=\"Roboto Condensed\",\n         fontface=\"bold\",\n         label=\"First rise\\nto previous year in 1940 \",\n         size=3,\n         color=\"grey70\",\n         hjust=0,\n         x = 1941 ,y =c(13) )+\n  annotate(geom = \"text\",\n        family=\"Roboto Condensed\",\n        fontface=\"bold\",\n        label=\"Second big rise\\nto previous year in 1957\",\n        size=3,\n        color=\"grey70\",\n        hjust=0,\n        x = 1959 ,y =c(7) )+\n  annotate(geom = \"text\",\n      family=\"Roboto Condensed\",\n      fontface=\"bold\",\n      label=\"Steady average rise of 1.09°C\\nsince 1979\",\n      size=3,\n      color=\"grey70\",\n      hjust=0,\n      x = 1980 ,y =c(-7) )+\n  annotation_custom(grob = grid::circleGrob(x=0,y=0.1,gp=gpar(col=\"grey70\",fill=NA)),\n                    xmin = 1940,\n                    xmax = 1950,\n                    ymin = 0,ymax = 10)+\n  ggthemes::scale_fill_fivethirtyeight()+\n  labs(title=\"\",\n       caption = \"\\nDataSource: NASA GISS Surface Temperature Analysis (GISTEMP v4)\\nDataViz: #TidyTuesday 2023 - week 28 by Federica Gazzelloni\\n\",\n       fill=\"Temperature\",\n       y=\"Monthly Means\")+\n  theme_void()+\n  theme(text=element_text(color=\"grey70\",family=\"Roboto Condensed\"),\n        plot.caption = element_text(hjust = 0.5,lineheight = 1),\n        axis.text.x = element_text(color=\"grey70\"),\n        plot.background = element_rect(color=\"grey4\",\n                                       fill=\"grey4\"),\n        legend.position = \"bottom\",\n        legend.title = element_text(color=\"black\"),\n        legend.text = element_text(color=\"black\"),\n        legend.background = element_rect(color=\"grey70\",fill=\"grey70\"))\n\n\nggsave(\"w28_GIST.png\")\n\n\n\n\n\n\nFootnotes\n\n\nSource: https://pubs.giss.nasa.gov/abs/le05800h.html↩︎"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w10_Numbats_in_Australia/w10_Numbats_in_Australia.html",
    "href": "tidytuesday/cases2023/posts2023/w10_Numbats_in_Australia/w10_Numbats_in_Australia.html",
    "title": "Numbats in Australia",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 10)\n\n\nnumbats <- tuesdata$numbats\n\n\nnumbats%>%count(scientificName)\n\n\n# devtools::install_github('bbc/bbplot')\nlibrary(bbplot)\n# bbplot::bbc_style()\n\n\nlibrary(ozmaps)\nlibrary(sf)\noz_states <- ozmaps::ozmap_states\ncentroids <- oz_states%>%\n  sf::st_centroid()%>%\n  as_tibble()%>%\n  filter(!NAME==\"Other Territories\")\n\n\nmapdata <- oz_states%>%as_tibble()\n# mapdata%>%count(NAME)\n\n# nine colors\ncolors <- c(\"#1380A1\",\"#cbcbcb\",\n            \"#FAAB18\",\"#990000\", \n            \"#588300\",\"#d4a09f\",\n            \"#d999fc\",\"#83b3d2\",\"#cc161d\")\n\np <- ggplot() + \n  geom_sf_text(data = centroids,\n          mapping = aes(geometry=geometry,\n                        label=NAME),size=3) + \n  geom_sf(data = mapdata,\n          mapping = aes(geometry=geometry,\n                        fill=NAME),\n          alpha=0.4,color=\"black\",linewidth=0.1) + \n  scale_fill_manual(values = colors)+\n  guides(fill=\"none\")+\n  ggnewscale::new_scale_fill()+\n  geom_point(data= numbats,\n             mapping=aes(x=decimalLongitude,y=decimalLatitude,\n                         fill=scientificName),\n             shape=21,stroke=0.3,size=3,\n             color=\"grey\",alpha=0.7) +\n  ggthemes::scale_fill_fivethirtyeight()+\n  coord_sf(clip = \"off\")+\n   labs(title=\"Mapping the Habitat of the Endangered Numbat\",\n        subtitle=\"A Geographic Analysis of the Species' Distribution in Australia\",\n        caption = \"DataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day12 - Theme Day: BBC News\")+\n  bbplot::bbc_style()+\n  ggthemes::scale_color_fivethirtyeight()+\n  theme(text=element_text(size=12),\n        plot.title = element_text(size=22),\n        plot.subtitle = element_text(size=14),\n        plot.caption = element_text(size=12),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank())\n\nbbplot::finalise_plot(plot_name = p,\n                      source_name = \"Source: #TidyTuesday 2023 week10 Numbats in Australia\",\n                      save_filepath = \"images/basemap.png\")\n\n\nlibrary(cowplot)\n\n\nggdraw()+\n  draw_image(\"images/basemap.png\")+\n  draw_image(\"images/numbat.png\",\n             scale=0.25,\n             x=0.35)\n\n\nggsave(\"w10_NmiA.png\")"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w3_Art_history_data/w3_Art_history_data.html",
    "href": "tidytuesday/cases2023/posts2023/w3_Art_history_data/w3_Art_history_data.html",
    "title": "Art history data",
    "section": "",
    "text": "Looking at making slopes for the #30DayCahrtChallenge 2023 - day 5\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 03)\n\n\nartists <- tuesdata$artists\nartists%>%head\n\n\nartists%>%DataExplorer::profile_missing()%>%arrange(-pct_missing)\n\n413 Artistis,\n\nggplot(artists)+\n  geom_point(aes(x = artist_unique_id,y=artist_nationality))+\n  facet_wrap(~artist_race)\n\n\nggplot(artists,aes(x = year, y = space_ratio_per_page_total, group = artist_unique_id)) +\n  geom_line()+\n  facet_wrap(~artist_gender)\n\n\nartists %>%\n  filter(artist_gender==\"Female\") %>%\nggplot(aes(x = year, y = space_ratio_per_page_total, group = artist_unique_id)) +\n  geom_line()+\n  facet_wrap(~artist_nationality)\n\n\nartists %>%\n  filter(artist_gender==\"Female\",\n         artist_nationality==\"French\",\n         artist_race==\"White\") %>%\nggplot(aes(x = year, y = space_ratio_per_page_total, group = artist_unique_id)) +\n  geom_line()+\n  facet_wrap(~book)\n\nGiorgio de Chirico space_ratio_per_page_total along the time.\n\nartists%>%\n  filter(artist_name==\"Giorgio de Chirico\") %>%\n  ggplot(\n       aes(x = year, y = space_ratio_per_page_total, group = artist_unique_id)) +\n  geom_point()+\n  geom_smooth(method = \"lm\")\n  geom_abline(slope=-0.000050,intercept = mean(artists$space_ratio_per_page_total))\n\n\nggplot(artists,\n       aes(x = year, y = space_ratio_per_page_total, group = artist_unique_id)) +\n  geom_line()+\n  facet_wrap(vars(artist_nationality))\n\n\nartists%>%\n  filter(artist_nationality==\"Italian\")%>%#count(year)\n  mutate(year=as.integer(year)) %>%\nggplot(\n       aes(x = year, y = space_ratio_per_page_total, \n           group = artist_name,\n           fill=artist_name,\n           color=artist_name,\n           label=artist_name)) +\n  geom_point(shape=21,\n             stroke=0.5,\n             alpha=0.5,\n             show.legend = FALSE)+\n  geomtextpath::geom_textsmooth(method = \"lm\",\n                                se=FALSE,\n                                family=\"Roboto Condensed\",\n                                show.legend = FALSE)+\n  scale_color_viridis_d()+\n  scale_x_continuous(limits = c(1945,2035),n.breaks = 5,expand = c(0,0))+\n  facet_wrap(~book,scales = \"free\") +\n  labs(y=\"Space Ratio per Page Total\",\n       x=\"Year\",\n       title=\"Male Italian Artists\",\n       subtitle=\"how much space their work took up in each textbook\",\n       caption = \"DataSource: #TidyTuesday 2023 week3 Art history\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day5 - slope\\n\")+\n  hrbrthemes::theme_ipsum_rc(plot_title_size = 28,\n                             caption_face = \"bold\",\n                             caption_family = \"Roboto Condensed\",\n                             base_family = \"Roboto Condensed\"\n                              )+\n    theme(strip.background = element_blank(),\n          strip.placement = \"outside\",\n          strip.clip = \"off\",\n          strip.text = element_text(hjust=0.5,size=20),\n          plot.margin = unit(c(5,10,5,5),units = \"pt\"))\n\n\nggsave(\"w3_Arhd.png\",\n       bg=\"white\",\n       width = 9,height = 5)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w19_Childcare_Costs/w19_Childcare_Costs.html",
    "href": "tidytuesday/cases2023/posts2023/w19_Childcare_Costs/w19_Childcare_Costs.html",
    "title": "Childcare Costs",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization Childcare Costs\n\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 19)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w25_UFO_Sightings_Redux/w25_UFO_Sightings_Redux.html",
    "href": "tidytuesday/cases2023/posts2023/w25_UFO_Sightings_Redux/w25_UFO_Sightings_Redux.html",
    "title": "USPP",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization USPP\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\ntuesdata <- tidytuesdayR::tt_load(2023, week = 26)\n\n--- Compiling #TidyTuesday Information for 2023-06-27 ----\n--- There are 2 files available ---\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 2: `us_place_names.csv`\n    Downloading file 2 of 2: `us_place_history.csv`\n\n\n--- Download complete ---"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w14_Premier_League_Match_Data/w14_Premier_League_Match_Data.html",
    "href": "tidytuesday/cases2023/posts2023/w14_Premier_League_Match_Data/w14_Premier_League_Match_Data.html",
    "title": "Premier League Match Data",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization Premier League Match Data Correlation\n\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 14)\n\n\ndf <- tuesdata$`soccer21-22`\ndf%>%head\n\n\ndf%>%\n  mutate(Date=as.Date(Date,\"%d/%m/%Y\"),\n         year=zoo::as.yearmon(Date),.after=Date)%>%\n  count(year)\n\n\ndf_corr <- df[,11:22]\ndf_corr%>%head()\n\n\ndf_named <- df[,11:22] %>%\n  rename(\"HomeShots\"=HS,\n         \"AwayShots\"=AS,\n         \"HomeShots-on-Target\"=HST,\n         \"AwayShots-on-Target\"=AST,\n         \"HomeFouls\"=HF,\n         \"AwayFouls\"=AF,\n         \"HomeCorners\"=HC,\n         \"AwayCorners\"=AC,\n         \"HomeYellowCards\"=HY,\n         \"AwayYellowCards\"=AY,\n         \"HomeRedCards\"=HR,\n         \"AwayRedCards\"=AR)\n\ndf_named%>%head\n\n\n# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables \nlibrary(GGally)\n\n \n# Nice visualization of correlations\nggcorr(df_named, #df[,11:22], \n       method = c(\"pairwise\"),\n       geom=\"circle\",\n       max_size = 15,\n       min_size = 5,\n       family=\"Roboto Condensed\",\n       nbreaks = 6,\n       angle = 0,\n       palette = \"Paired\",\n       hjust = 1, \n       size = 4, \n       color = \"grey50\",\n       #low = \"green\",\n       #mid = \"#EEEEEE\",\n       #high = \"#F21A00\",\n       layout.exp = 1,\n       name = expression(rho))+\n  geom_point(size = 10, aes(color = coefficient > 0, \n                            alpha = abs(coefficient) > 0.5)) +\n  scale_alpha_manual(values = c(\"TRUE\" = 0.25, \"FALSE\" = 0)) +\n  guides(alpha = FALSE)+\n  labs(caption=\"Correlation for home and away side such as fouls, shots, cards\\nDataSource: #TidyTuesday 2023 w14 Premier League Match Data\\n#30daychartchallenge day20 Correlation | DataViz: Federica Gazzelloni\") +\n  annotate(geom = \"text\",\n           family=\"Roboto Condensed\",\n           fontface=\"bold\",\n           label=\"Premier League\\nMatch\\n2021-2022\",\n           size=14,\n           color=\"#a8bd3a\",\n           hjust=0,\n           x = 0 ,y =c(10) )+\n  theme(text=element_text(family=\"Roboto Condensed\"),\n        plot.caption = element_text(size=12,vjust = 1),\n        plot.margin = margin(0,0,0,0, \"pt\"))\n\n\nggsave(\"corr.png\",width = 9,height = 6)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w17_London_Marathon/w17_London_Marathon.html",
    "href": "tidytuesday/cases2023/posts2023/w17_London_Marathon/w17_London_Marathon.html",
    "title": "London Marathon",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization London Marathon\n\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 17)\nwinners <- tuesdata$winners\nlondon_marathon <- tuesdata$london_marathon\n\n\nwinners%>%count(Nationality)\n\n\nlondon_marathon%>%head\n\n\nlondon_marathon%>%\n  mutate(ymon=zoo::as.yearmon(Date),.after=Date)%>%\n  arrange(ymon)%>%\n  pivot_longer(cols=c(Starters,Finishers))%>%\n  select(ymon,name,value)%>%\n  ggplot(aes(x=ymon,y=value,group=name,color=name))+\n  geom_point()+\n  geom_smooth(method=\"lm\",\n              linewidth=0.5,\n              se=F)\n\n\ntime <- winners%>%\n  count(Time)%>%\n  mutate(time=hms(Time))\n  \n\nlibrary(hms)\n\ndf <- winners%>%\n  select(Year,Nationality,Time)%>%\n  mutate(time=lubridate::hms(Time)) %>%\n  group_by(Nationality)%>%\n  mutate(mean=mean(Time),\n          sd=sd(Time),\n          max=max(Time),\n          min=min(Time))%>%\n  filter(!is.na(sd))\ndf\n\n\n# Create multiple plots using facet_wrap()\nggplot(df, aes(x = Year, y = time)) +\n  geom_point() +\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), color = \"grey80\") +\n  scale_color_gradient(low = \"blue\", high = \"red\") +\n  geom_smooth(method = \"lm\") +\n  #scale_y_time()+\n  facet_wrap(~Nationality,scales = \"free_y\")+\n  theme(axis.text.y = element_blank())\n\n\nlondon_marathon%>%\n  pivot_longer(cols=c(Applicants,Accepted))%>%\n  select(Year,name,value) %>%\n   ggplot(aes(x=Year,y=value,group=name,color=name))+\n  geom_point()+\n  geom_smooth(method=\"lm\",\n              linewidth=0.5,\n              se=F)\n\n\nlondon_marathon%>%\n  filter(!Year==2020)%>%\n  select(Year,Applicants,Accepted)%>%\n   ggplot(aes(x=Year))+\n   geom_point(aes(y=Applicants))+\n   geom_point(aes(y=Accepted))+\n   geom_segment(aes(xend=Year,y=Accepted,yend=Applicants))\n\n\nwinners%>%\n  group_by(Nationality)%>%\n  mutate(n=n())%>%\n  arrange(-n)%>%\n  filter(Nationality%in%c(\"United Kingdom\",\"Ireland\",\"Kenya\"))%>%\n  ggplot(aes(x=Nationality,y=n))+\n  geom_point()\n\n\nlondon_marathon%>%\n  filter(!is.na(Raised))%>%\n  select(Year,Accepted,Raised)%>%\n  inner_join(winners%>%count(Year,Nationality),by=\"Year\")%>%\n  arrange(Year)%>%\n  mutate(Nationality=as.factor(Nationality))%>%\n  filter(Nationality%in%c(\"Kenya\",\"United Kingdom\",\"United States\"))\n  ggplot(aes(Accepted,Raised,group=Nationality,color=Nationality))+\n  geom_point()+\n  geom_line()\n  facet_wrap(~Nationality)\n\n\nlibrary(sysfonts)\nsysfonts::font_add_google(\"Chelsea Market\",\"Chelsea Market\")\nlibrary(showtext)\nshowtext::showtext_auto()\n\n\nlondon_marathon%>%\n  filter(!is.na(Raised))%>%\n  select(Year,Accepted,Raised)%>%\n  inner_join(winners%>%count(Year,Nationality),by=\"Year\")%>%\n  arrange(Year)%>%\n  mutate(Nationality=as.factor(Nationality))%>%\n  filter(Nationality%in%c(\"Kenya\",\"United Kingdom\",\"United States\"))%>%\n  mutate(Accepted=scale(Accepted,\n                        center = F, scale = TRUE),\n         Raised=scale(Raised,\n                      center = F, scale = TRUE)\n         ) %>%\n  # pivot_longer(cols = c(\"Accepted\",\"Raised\"))%>% #count(Year)\n  ggplot(aes(x=Year)\n             #group=name,\n             #color=name,fill=name)\n         )+\n  geom_point(aes(y=Accepted),\n             shape=21,stroke=0.5,\n             size=2,\n             color=\"white\",\n             fill=\"#910C00\",\n             key_glyph = draw_key_rect)+\n    geom_point(aes(y=Raised),\n             shape=21,stroke=0.5,\n             size=2,\n             fill=\"#00668F\",\n             color=\"white\",\n             key_glyph = draw_key_rect)+\n  geom_line(aes(y=Accepted,color=\"Accepted\"),\n            linewidth=1,\n            key_glyph = draw_key_rect)+\n    geom_line(aes(y=Raised,color=\"Raised\"),\n              linewidth=1,\n            key_glyph = draw_key_rect)+\n  geom_segment(aes(xend=Year,y=Accepted,yend=Raised),\n               color=\"grey80\")+\n  facet_wrap(~Nationality) +\n  labs(title=\"Amount raised for charity based on acceptance\",\n       subtitle=\"scaled by the standard deviations without centering\",\n       caption=\"DataSource: #TidyTuesday Week 17 London Marathon\\n#30DayChartChallenge Day 26 uncertanties: local change | DataViz: Federica Gazzelloni\",\n       color=\"\")+\n  scale_x_continuous(breaks = c(2007,2010,2014,2017))+\n  scale_colour_manual(\"\", \n                      breaks = c(\"Accepted\", \"Raised\"),\n                      values = c(\"#910C00\", \"#00668F\")) +\n  guides(fill=\"none\")+\n  ggthemes::theme_stata(base_family = \"Chelsea Market\",\n                        scheme=\"s1rcolor\")+\n  theme(text=element_text(size=30),\n        strip.background = element_rect(color=\"#910C00\",fill=\"#910C00\"),\n        plot.caption = element_text(hjust = 0.5, size=30, lineheight = 0.5),\n        plot.title = element_text(size=60),\n        plot.subtitle = element_text(size=40),\n        axis.title.y = element_blank())\n\n\nshowtext::showtext_auto(enable = T)\nggsave(\"w17_LM.png\",\n       dpi=320,\n       width = 7,height = 5,\n       bg=\"black\")"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w6_Big_Tech_Stock_Prices/w6_Big_Tech_Stock_Prices.html",
    "href": "tidytuesday/cases2023/posts2023/w6_Big_Tech_Stock_Prices/w6_Big_Tech_Stock_Prices.html",
    "title": "Big Tech Stock Prices",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 06)\n\n\nbig_tech_stock_prices <- tuesdata$big_tech_stock_prices\nbig_tech_companies <- tuesdata$big_tech_companies\n\n\ndf <- big_tech_stock_prices%>%\n  inner_join(big_tech_companies,by=\"stock_symbol\")\n\n\ndf%>%head\n\nHUMAN THEME\n\nlibrary(ggplot2)\n\n# Create example data\nbig_tech_stock_prices <- data.frame(\n  date = seq(as.Date(\"2021-01-01\"), as.Date(\"2021-12-31\"), by = \"day\"),\n  apple = rnorm(365, mean = 140, sd = 10),\n  amazon = rnorm(365, mean = 3200, sd = 100),\n  facebook = rnorm(365, mean = 350, sd = 20),\n  google = rnorm(365, mean = 2500, sd = 50)\n)\n\n# Create ggplot with human theme\nggplot(big_tech_stock_prices, aes(x = date)) +\n  geom_line(aes(y = apple, color = \"Apple\")) +\n  geom_line(aes(y = amazon, color = \"Amazon\")) +\n  geom_line(aes(y = facebook, color = \"Facebook\")) +\n  geom_line(aes(y = google, color = \"Google\")) +\n  scale_color_manual(values = c(\"Apple\" = \"#A9A9A9\", \"Amazon\" = \"#FFA500\", \"Facebook\" = \"#4169E1\", \"Google\" = \"#008000\")) +\n  labs(title = \"Big Tech Stock Prices\", x = \"Date\", y = \"Stock Price\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\", margin = margin(b = 20)),\n    axis.title = element_text(size = 16, face = \"bold\"),\n    axis.text = element_text(size = 14),\n    legend.title = element_blank(),\n    legend.text = element_text(size = 14),\n    legend.position = \"bottom\"\n  )\n\n\nmy_companies<- c(\"Apple Inc.\",\"Microsoft Corporation\",\"Netflix, Inc.\", \"Tesla, Inc.\")\n\nlibrary(scales)\ndf %>% \n  filter(company%in%my_companies)%>%\n  select(date,volume,company)%>%\n  group_by(company)%>%\n  mutate(mean=mean(volume,na.rm = TRUE),\n         sd=sd(volume,na.rm = TRUE))%>%\n  ggplot(aes(x = date)) +\n  geom_hline(aes(yintercept=mean,color=company),linewidth=0.3)+\n  geom_line(aes(y = volume, group=company, color=company),\n            linewidth=0.1,key_glyph=\"timeseries\") +\n  scale_y_log10(expand=c(0,0),\n                labels = label_number(scale_cut = cut_short_scale()))+\n  scale_x_date(expand = c(0,0))+\n  scale_color_manual(values = c(\"Apple Inc.\" = \"#0071bc\",\n                                \"Microsoft Corporation\" = \"#FFA500\", \n                                \"Netflix, Inc.\" = \"#fff1e0\", \n                                \"Tesla, Inc.\" = \"#c15a4f\")) +\n  guides(color=guide_legend(nrow = 2))+\n  labs(title = \"Big Tech Stock Prices\", y = \"Stock Price Volume\",\n       subtitle=\"Humans activity - Best Companies Mean Trend\",\n       caption=\"\\nDataSource: #TidyTuesday 2023 week6 Big Tech Stock Prices\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day8 - humans\\n\") +\n  ggthemes::theme_economist()+\n  theme(text = element_text(family=\"Roboto Condensed\",color=\"#250c5f\"),\n    plot.title = element_text(size = 25, face = \"bold\", margin = margin(b = 20)),\n    plot.background = element_rect(color=\"#89a5b9\",fill=\"#89a5b9\"),\n    panel.background = element_rect(color=\"#89a5b9\",fill=\"#89a5b9\"),\n    axis.title = element_text(size = 16, face = \"bold\"),\n    axis.text = element_text(size = 12),\n    axis.title.x = element_blank(),\n    legend.key.size = unit(15,units = \"pt\"),\n    #legend.key.width = unit(15,units = \"pt\"),\n    legend.title = element_blank(),\n    legend.box.background = element_rect(color=\"#250c5f\",fill=\"#250c5f\"),\n    legend.text = element_text(size = 11,color=\"white\"),\n    legend.position = \"bottom\",\n    panel.grid = element_line(linewidth=0.0),\n    axis.line.y = element_line(),\n    axis.text.y = element_text(hjust=1)\n  )\n\n\nggsave(\"w6_BTSP.png\",\n       width = 7,height = 5)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w24_Studying_African_FarmerLed_Irrigation_Survey/w24_Studying_African_FarmerLed_Irrigation_Survey.html",
    "href": "tidytuesday/cases2023/posts2023/w24_Studying_African_FarmerLed_Irrigation_Survey/w24_Studying_African_FarmerLed_Irrigation_Survey.html",
    "title": "UFSR",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization UFSR\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\ntuesdata <- tidytuesdayR::tt_load(2023, week = 25)\n\n--- Compiling #TidyTuesday Information for 2023-06-20 ----\n--- There are 3 files available ---\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 3: `ufo_sightings.csv`\n    Downloading file 2 of 3: `places.csv`\n    Downloading file 3 of 3: `day_parts_map.csv`\n\n\n--- Download complete ---"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w2_Bird_FeederWatch_data/w2_Bird_FeederWatch_data.html",
    "href": "tidytuesday/cases2023/posts2023/w2_Bird_FeederWatch_data/w2_Bird_FeederWatch_data.html",
    "title": "Bird FeederWatch data",
    "section": "",
    "text": "Resources:\n\nhttps://github.com/rfordatascience/tidytuesday/tree/master/data/2023/2023-01-10\nhttps://feederwatch.org/explore/raw-dataset-requests/\n\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 02)\n\n\ntuesdata$PFW_2021_public%>%head\n\n\ntuesdata$PFW_count_site_data_public_2021%>%head\n\n\nd <- tuesdata$PFW_2021_public %>% janitor::clean_names()\n\n\nd%>% \n  count(year)\n\n\nworld <- map_data(\"world\")\nstates <- map_data(\"state\")\n\nprop_df <- d %>%\n  filter(longitude < -50) %>%\n  group_by(longitude, latitude, year) %>%\n  reframe(prop_many = how_many / sum(how_many) * 100)\n\n\nggplot(data = world, mapping = aes(long, lat, group = group)) +\n  geom_polygon(color = \"grey\", fill = NA) +\n  geom_polygon(data = states,\n               linewidth=0.1,\n               color = \"grey\",\n               fill = NA) +\n  geom_point(\n    data = prop_df,\n    mapping = aes(x = longitude, y = latitude, fill = factor(year)),\n    inherit.aes = FALSE,\n    key_glyph = \"rect\",\n    size=0.5,\n    shape = 21,\n    stroke = 0.3,\n    color = \"black\"\n  ) +\n  scale_fill_manual(values=c(\"#fc1c3c\",\"#9189c1\"))+\n  coord_sf(xlim = c(-157.94932, -50),\n           ylim = c(20 , 65.51989)) +\n  #facet_wrap(vars(year),nrow = 2) +\n  labs(title = \"Maximum number of individuals seen at one time during observation period\",\n       subtitle=\"total proportion (%)\",\n       caption=\"DataSource: #TidyTuesday 2023 week2 - BFW data\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day4 - historical\\n\",\n       fill = \"Year\") +\n  ggthemes::theme_map(base_size = 10, base_family = \"Roboto Condensed\") +\n  theme(plot.background = element_rect(color=\"black\",fill=\"black\"),\n        panel.background = element_rect(color=\"black\",fill=\"black\"),\n        plot.title = element_text(color=\"#9189c1\",size=14),\n        plot.subtitle = element_text(color=\"#9189c1\",size=12),\n        plot.caption = element_text(color=\"#fc1c3c\"),\n        legend.position = c(0.85,0.1))\n\n\nggsave(\"images/map.png\",\n       width = 7,height = 4)\n\n\nd%>%count(species_code,sort=TRUE)\n\n\nlibrary(fpp3)\ndata <- d %>%\n  mutate(date=paste0(month,\"-\",day,\"-\",year),.after =obs_id )%>%\n  mutate(date=as.Date(date,\"%m-%d-%Y\"))%>%\n  select(year,month,day,date,how_many)%>%\n  distinct()%>%\n  group_by(date)%>%\n  reframe(how_many=sum(how_many))\n\nts <- data%>%\n  as_tsibble()\n\nts %>%\n  #autoplot()\n  gg_season(y = how_many,period = \"week\")+\n  scale_colour_steps2() +\n  labs(title=\"Feeder Birds seasonality\",\n       subtitle=\"Exploring Daily Seasonal Patterns of Feeder Bird Sightings\",\n       y=\"number of individuals seen\",x=\"Day of the week (2020-2021)\" )+\n  theme_linedraw(base_size = 12,\n                 base_family = \"Roboto Condensed\")+\n  theme(plot.title = element_text(size=18),\n        plot.subtitle = element_text(size=14))\n\n\nggsave(\"images/daily.png\",width = 7,height = 4)\n\n\nts %>%\n  autoplot()+\n  scale_colour_steps2() +\n  labs(title=\"Feeder Birds seasonality\",\n       subtitle=\"Exploring Monthly Seasonal Patterns of Feeder Bird Sightings\",\n       y=\"number of individuals seen\",x=\"Months (2020-2021)\" )+\n  theme_linedraw(base_size = 12,\n                 base_family = \"Roboto Condensed\")+\n  theme(plot.title = element_text(size=18),\n        plot.subtitle = element_text(size=14))\n\n\nggsave(\"images/monthly.png\",width = 7,height = 4)\n\n\nlibrary(cowplot)\n\nggdraw()+\n  draw_image(\"images/map.png\")+\n  draw_image(\"images/daily.png\",scale = 0.25,x=-0.36,y=-0)+\n  draw_image(\"images/monthly.png\",scale = 0.25,x=-0.36,y=-0.27)+\n  draw_label(\"Map of locations from which Project FeederWatch participants have submitted data\\nbetween 2020 and 2021. The inset plots provides detail of an example of seasonality.\",x=0.02,y=0.07,size=6,color=\"grey\",fontfamily = \"Roboto Condensed\",hjust = 0)\n\n\nggsave(\"w2_BFWd.png\",width = 7,height = 4,dpi=320)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w7_Hollywood_Age_Gaps/w7_Hollywood_Age_Gaps.html",
    "href": "tidytuesday/cases2023/posts2023/w7_Hollywood_Age_Gaps/w7_Hollywood_Age_Gaps.html",
    "title": "Hollywood Age Gaps",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 07)\n\n\nage_gaps <- tuesdata$age_gaps\nage_gaps%>%head\n\n\nage_gaps%>%names\n\n\nage_gaps%>%dim\n\n\nlibrary(geomtextpath)\n\nage_gaps%>%\n  group_by(movie_name)%>%\n  mutate(avg=mean(age_difference))%>%\n  pivot_longer(cols = c(\"character_1_gender\",\"character_2_gender\"),names_to = \"type\",values_to = \"gender\") %>%\n  mutate(type=ifelse(type==\"character_1_gender\",\"First Character Gender\",\"Second Character Gender\")) %>%\n  ggplot(aes(avg,fill=gender))+\n  geom_histogram()+\n  facet_wrap(~type)+\n  tvthemes::scale_fill_brooklyn99(reverse=FALSE)+\n  labs(title=\"Hollywood Age Gaps\",\n       subtitle=\"Age difference - Avg values\",\n       caption=\"\\nDataSource: #TidyTuesday 2023 Week7 Hollywood Age Gaps\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day9 - high/low\\n\",x=\"\",y=\"Count\")+\n  tvthemes::theme_brooklyn99(text.font=\"Roboto Condensed\")+\n  theme(panel.grid = element_line(linetype=\"dashed\",linewidth = 0.2),\n        strip.text = element_text(face=\"bold\"))+\n    annotate(\n    \"textsegment\",\n    x=60,xend=20,y=150,yend=70, \n    label = \"high/low\", arrow = arrow(length = unit(5,units = \"pt\"))\n  )\n\n\nggsave(\"w7_HIAG.png\",\n       width = 7,height = 5)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w8_Bob_Ross_Paintings/w8_Bob_Ross_Paintings.html",
    "href": "tidytuesday/cases2023/posts2023/w8_Bob_Ross_Paintings/w8_Bob_Ross_Paintings.html",
    "title": "Bob Ross Paintings",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 08)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w8_Bob_Ross_Paintings/w8_Bob_Ross_Paintings.html#bob-ross-paintings-hibrid---day-10",
    "href": "tidytuesday/cases2023/posts2023/w8_Bob_Ross_Paintings/w8_Bob_Ross_Paintings.html#bob-ross-paintings-hibrid---day-10",
    "title": "Bob Ross Paintings",
    "section": "Bob Ross Paintings —> HIBRID - DAY 10",
    "text": "Bob Ross Paintings —> HIBRID - DAY 10\n\nbob_ross <- tuesdata$bob_ross\nbob_ross%>% names\n\n\ndf <- bob_ross%>%\n  pivot_longer(cols=10:27,names_to = \"color\",values_to = \"values\")%>%\n  select(color_hex,painting_index,painting_title,num_colors,color,season,episode)%>%\n  distinct()\n\n\nA hybrid boxplot\n\nlibrary(showtext)\n# sysfonts::font_families_google()\nsysfonts::font_add_google(\"Aclonica\",\"Aclonica\")\nsysfonts::font_add_google(\"Alegreya Sans\", \"aleg\")\n\n\n# ?ggpol::geom_boxjitter()\nlibrary(ggpol)\nset.seed(221)\nshowtext_auto()\ndf%>%\n  filter(color%in%c(\"Black_Gesso\",\"Burnt_Umber\",\"Dark_Sienna\"))%>%\n  group_by(color)%>%\n  ggplot(aes(x=painting_index,y=num_colors,group=color))+\n  geom_boxjitter(aes(fill = color),\n                 jitter.shape = 21, jitter.color = NA,\n                 outlier.color = NA, errorbar.draw = TRUE) +\n  scale_fill_manual(values = c(\"#000000\", \"#8A3324\", \"#5F2E1F\")) +\n  labs(title=\"Bob Ross Hybrid Color Paintings Variation\",\n       subtitle=\"\",\n       caption=\"DataSource: #TidyTuesday 2023 Week8 Bob Ross Paintings\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day10 - hybrid\",\n       x=\"Painting index\",y=\"Variety of colors in the Painting\",\n       fill=\"Color\")+\n  theme_minimal()+\n  theme(text = element_text(family = \"aleg\"))"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w16_Neolithic_Founder_Crops/w16_Neolithic_Founder_Crops.html",
    "href": "tidytuesday/cases2023/posts2023/w16_Neolithic_Founder_Crops/w16_Neolithic_Founder_Crops.html",
    "title": "Neolithic Founder Crops",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization Neolithic Founder Crops\n\nThe term “Neolithic Founder Crops” refers to the crops that were first domesticated during the Neolithic period, which began around 10,000 BCE. These crops include wheat, barley, peas, lentils, and chickpeas, among others.\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 16)\nfounder_crops <- tuesdata$founder_crops\nfounder_crops %>%head\n\n\nfounder_crops%>%names\n\nEight founder crops — emmer wheat, einkorn wheat, barley, lentil, pea, chickpea, bitter vetch, and flax.\n\nfounder_crops%>%count(longitude,latitude,category,founder_crop)\n\n\nworld <- map_data(\"world\")\nlong_range <- range(founder_crops$longitude)\nlat_range <- range(founder_crops$latitude)\nlong_range;lat_range\n\n\nfounder_crops%>%\n  ggplot(aes(x=longitude,y=latitude))+\n  geom_polygon(data=world,\n               mapping=aes(long,lat,group=group),\n               inherit.aes = FALSE,\n               fill=NA,color=\"grey70\")+\n  stat_bin2d(aes(fill = after_stat(density)),\n             binwidth = c(1,1))+\n  coord_quickmap(xlim = c(30,50),ylim = c(30,40))\n\n\nfounder_crops %>%\n  filter(!is.na(category)) %>%\n  ggplot(aes(longitude, latitude, color = category)) +\n  geom_polygon(\n    data = world,\n    aes(long, lat, group = group),\n    fill = NA,\n    color = \"grey70\"\n  ) +\n  stat_bin2d(aes(fill = after_stat(density)),\n             alpha = 0.3,\n            # color=\"navy\",\n             binwidth = c(1, 1)) +\n  geom_point(aes(size = n)) +\n  guides(alpha = \"none\", fill = \"none\", size = \"none\") +\n  coord_quickmap(xlim = c(30, 50), ylim = c(30, 40))+\n    tvthemes::scale_fill_avatar(type = \"continuous\")+\n   tvthemes::scale_color_avatar(reverse = TRUE)+\n  tvthemes::theme_avatar()+\n  theme(axis.title = element_text(size=6),\n        axis.title.y = element_text(size=6,hjust = 1))\n\n\ntail_df <- founder_crops%>%\n  count(taxon_source,genus,family,category,founder_crop,age_start,age_end,n,prop)\n\n\nfounder_crops%>%\n  count(founder_crop,age_start,age_end,n,prop)%>%\n  filter(!is.na(founder_crop)) %>%\n  arrange(age_start)%>%\n  group_by(founder_crop,age_start,age_end)%>%\n  reframe(tot=sum(n)) %>%\n  ggplot(mapping=aes(x=age_start, y=age_end)) +\n  stat_bin2d(aes(fill = after_stat(density)),\n             color=\"white\",size=1,\n             binwidth = c(500,1500))+\n  scale_x_reverse()+\n  scale_y_reverse()+\n  coord_cartesian(clip = \"off\")+\n  labs(title=\"\",\n       subtitle=\"\",\n       caption=\"DataSource: #TidyTuesday Week 16 Neolithic Founder Crops\\n#30DayChartChallenge Day23 Tiles | DataViz: Federica Gazzelloni\",\n       x=\"Age Start: oldest date for the record, in years before 1950 CE (years BP)\",\n       y=\"Age End: most recent date, in years before 1950 CE (years BP)\")+\n    annotate(geom = \"text\",\n           family=\"Roboto Condensed\",\n           fontface=\"bold\",\n           label=\"Neolithic\\nFounder Crops\",\n           size=12,\n           color=\"#cf5f26\",\n           hjust=0,\n           x = 15000 ,y =0 )+\n   tvthemes::scale_fill_avatar(type = \"continuous\")+\n  #scale_fill_continuous(labels=scales::percent)\n  tvthemes::theme_avatar()+\n  theme(axis.title = element_text(size=6),\n        axis.title.y = element_text(size=6,hjust = 1),\n        legend.text = element_text(size=4),\n        plot.caption = element_text(hjust=0.5))\n\n\nggsave(\"w16_NFC.png\",\n       width = 7,height = 4)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w9_African_Language_Sentiment/w9_African_Language_Sentiment.html",
    "href": "tidytuesday/cases2023/posts2023/w9_African_Language_Sentiment/w9_African_Language_Sentiment.html",
    "title": "African Language Sentiment",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 09)\n\n\nafrisenti <- tuesdata$afrisenti\nlanguages <- tuesdata$languages\n\n\n\nlanguage_scripts <- tuesdata$language_scripts\nlanguage_countries <- tuesdata$language_countries\ncountry_regions <- tuesdata$country_regions\n\n\nafrisenti%>%count(label)\n\n\nlibrary(showtext)\n#sysfonts::font_families_google()\nsysfonts::font_add_google(\"Explora\",\"Explora\")\nshowtext_auto()\n\n\ndf_plot <- afrisenti%>%\n  inner_join(languages,by=\"language_iso_code\")%>%\n  count(label,intended_use,language) \n\n\n  ggplot(data = df_plot, mapping = aes(label,n,fill=intended_use))+\n  geom_col(width = 0.5) \n    coord_polar(theta = \"y\",\n              start = 0,\n              direction = 1, \n              clip = \"off\") +\n  #scale_x_(clip=\"off\")+\n   #scale_x_reverse(expand=expansion(add=c(10,20))) +\n   scale_y_continuous(expand=expansion(mult=c(0,0),add=c(0,1))) +\n  \n  labs(title=\"African Language Sentiment\",\n       caption=\"DataSource: #TidyTuesday 2023 week9 African Language Sentiment\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day11 - Circular\",\n       fill=\"Inteded use\")+\nscale_fill_manual(values = c(\"#CF3721\", \"#31A9B8\", \"#258039\")) +\n  theme_minimal()+\n  theme(text=element_text(family=\"Explora\",size=90,face=\"bold\"),\n        panel.grid = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.title = element_blank()) +\n  facet_wrap(vars(language))\n\n\nggsave(\"p4.png\",width = 9,height = 10,\n       device = \"png\",dpi=300,bg=\"white\")"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w26_US_Populated_Places/w26_US_Populated_Places.html",
    "href": "tidytuesday/cases2023/posts2023/w26_US_Populated_Places/w26_US_Populated_Places.html",
    "title": "HstM",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization HstM\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\ntuesdata <- tidytuesdayR::tt_load(2023, week = 27)\n\n--- Compiling #TidyTuesday Information for 2023-07-04 ----\n--- There are 2 files available ---\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 2: `historical_markers.csv`\n    Downloading file 2 of 2: `no_markers.csv`\n\n\n--- Download complete ---"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w12_Programming_Languages/w12_Programming_Languages.html",
    "href": "tidytuesday/cases2023/posts2023/w12_Programming_Languages/w12_Programming_Languages.html",
    "title": "Programming Languages",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 12)\n\n\nlanguages <- tuesdata$languages\n\n\nwrite_csv(languages,\"languages.csv\")\n\n\nlanguages%>%head\n\n\nlanguages%>%names\n\n\ndf <- languages%>%\n  arrange(appeared)%>%\n  select(pldb_id,appeared,type,language_rank,number_of_users)\ndf\n\n\nggplot(df,aes(appeared,language_rank))+\n  geom_point()\n\n\ndf %>%\n  filter(appeared>1900)%>%\nggplot(aes(appeared,language_rank))+\n  geom_point()+\n  scale_y_reverse()\n\n\ndf %>%\n  count(type,sort = TRUE)%>%\n  mutate(pct=round(n/sum(n)*100,2))\n\n\ndf %>%\n  arrange(-appeared)%>%\n  filter(between(appeared,2021,2023))%>%#count(type)\n  mutate(appeared=as.factor(appeared))\n\n\ndf %>%\n  arrange(-appeared)%>%\n  filter(between(appeared,2021,2023))%>%#count(type)\n  mutate(appeared=as.factor(appeared))%>%\n  ggplot(aes(appeared,number_of_users,fill=type))+\n  geom_col()+\n  labs(title=\"New Language tools\")\n\n\ndf%>%\n  group_by(appeared)%>%\n  reframe(n_languages=n(),pldb_id,type,avg=mean(number_of_users))%>%\n  filter(between(appeared,2000,2023)) %>%\n  ggplot(aes(appeared,n_languages))+\n  geom_point()+\n  geom_line()+\n  geom_segment(aes(x=appeared,xend=appeared,y=0,yend=n_languages,\n                   color=n_languages),\n               size=6)+\n  geom_text(aes(label=type),check_overlap = TRUE,vjust=-0.5)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w27_Historical_Markers/w27_Historical_Markers.html",
    "href": "tidytuesday/cases2023/posts2023/w27_Historical_Markers/w27_Historical_Markers.html",
    "title": "GIST",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization GIST\n\nSource of original design: https://earthobservatory.nasa.gov/world-of-change/global-temperatures#:~:text=According%20to%20an%20ongoing%20temperature,1.9%C2%B0%20Fahrenheit)%20since%201880.\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 28)\n\n\n    Downloading file 1 of 4: `global_temps.csv`\n    Downloading file 2 of 4: `nh_temps.csv`\n    Downloading file 3 of 4: `sh_temps.csv`\n    Downloading file 4 of 4: `zonann_temps.csv`\n\n\n\ntuesdata$global_temps%>%head\n\n# A tibble: 6 × 19\n   Year   Jan   Feb   Mar   Apr   May   Jun   Jul   Aug   Sep   Oct   Nov   Dec\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1  1880 -0.19 -0.25 -0.09 -0.17 -0.1  -0.21 -0.18 -0.11 -0.15 -0.24 -0.22 -0.18\n2  1881 -0.2  -0.15  0.03  0.05  0.05 -0.19  0    -0.04 -0.16 -0.22 -0.19 -0.08\n3  1882  0.16  0.13  0.04 -0.16 -0.14 -0.22 -0.17 -0.08 -0.15 -0.24 -0.17 -0.36\n4  1883 -0.3  -0.37 -0.13 -0.19 -0.18 -0.08 -0.08 -0.14 -0.23 -0.12 -0.24 -0.11\n5  1884 -0.13 -0.09 -0.37 -0.4  -0.34 -0.35 -0.31 -0.28 -0.28 -0.25 -0.34 -0.31\n6  1885 -0.59 -0.34 -0.27 -0.42 -0.45 -0.44 -0.34 -0.32 -0.29 -0.24 -0.24 -0.11\n# ℹ 6 more variables: `J-D` <dbl>, `D-N` <dbl>, DJF <dbl>, MAM <dbl>,\n#   JJA <dbl>, SON <dbl>\n\n\n\nGlobal Temperature Anomalies\nAnomalies are calculated with respect to the 1951-1980 climatology.\nGlobal Temperatures are in C° degrees, what we see here is the difference in temperature as a result of an application of a model to estimate the mean difference in temperatures with respect to 1951-1980 time-frame.\n\nglobal_temps <- tuesdata$global_temps\nglobal_temps%>%select(1:13)%>%summary()\n\n      Year           Jan                Feb               Mar          \n Min.   :1880   Min.   :-0.81000   Min.   :-0.6300   Min.   :-0.63000  \n 1st Qu.:1916   1st Qu.:-0.24000   1st Qu.:-0.2400   1st Qu.:-0.22250  \n Median :1952   Median :-0.01500   Median :-0.0400   Median : 0.01500  \n Mean   :1952   Mean   : 0.06333   Mean   : 0.0709   Mean   : 0.08889  \n 3rd Qu.:1987   3rd Qu.: 0.31000   3rd Qu.: 0.3825   3rd Qu.: 0.32250  \n Max.   :2023   Max.   : 1.18000   Max.   : 1.3700   Max.   : 1.36000  \n                                                                       \n      Apr                May                Jun                Jul          \n Min.   :-0.58000   Min.   :-0.55000   Min.   :-0.52000   Min.   :-0.51000  \n 1st Qu.:-0.25000   1st Qu.:-0.24000   1st Qu.:-0.25000   1st Qu.:-0.19000  \n Median :-0.02500   Median :-0.04000   Median :-0.05000   Median :-0.03000  \n Mean   : 0.06368   Mean   : 0.05292   Mean   : 0.03315   Mean   : 0.05587  \n 3rd Qu.: 0.28250   3rd Qu.: 0.27250   3rd Qu.: 0.24000   3rd Qu.: 0.23500  \n Max.   : 1.13000   Max.   : 1.02000   Max.   : 0.93000   Max.   : 0.94000  \n                                       NA's   :1          NA's   :1         \n      Aug                Sep                Oct               Nov          \n Min.   :-0.55000   Min.   :-0.58000   Min.   :-0.5800   Min.   :-0.55000  \n 1st Qu.:-0.22000   1st Qu.:-0.19000   1st Qu.:-0.2000   1st Qu.:-0.17500  \n Median :-0.05000   Median :-0.06000   Median : 0.0100   Median : 0.02000  \n Mean   : 0.05441   Mean   : 0.05818   Mean   : 0.0842   Mean   : 0.07776  \n 3rd Qu.: 0.23500   3rd Qu.: 0.24000   3rd Qu.: 0.2450   3rd Qu.: 0.23000  \n Max.   : 1.02000   Max.   : 0.99000   Max.   : 1.0900   Max.   : 1.11000  \n NA's   :1          NA's   :1          NA's   :1         NA's   :1         \n      Dec          \n Min.   :-0.82000  \n 1st Qu.:-0.22000  \n Median :-0.04000  \n Mean   : 0.05182  \n 3rd Qu.: 0.30500  \n Max.   : 1.16000  \n NA's   :1         \n\n\n\nHistorical spatial variations in surface temperature anomalies are derived from historical weather station data and ocean data from ships, buoys, and other sensors. Uncertainties arise from measurement uncertainty, changes in spatial coverage of the station record, and systematic biases due to technology shifts and land cover changes.1\n\nThe differencing applied to the estimated mean values are used to calculate the yearly rate of change in percentage value.\n\\[\\text{rate of change}=\\frac{y_2-y_1}{x_2-x_1}\\]\n\ndiff <- global_temps %>%\n  select(1:13) %>% # count(Year) 1880 - 2023\n  pivot_longer(cols = -Year)%>%\n  mutate(color=ifelse(value>0,\"up\",\"down\"))%>%\n  # grouping by Year, data are reframed to obtain a new vector\n  group_by(Year)%>%\n  # with the average values of the anomalies estimations\n  reframe(avg_val=mean(value))%>%\n  # the yearly rate of change in temperature anomalies\n  mutate(diff=c(0,diff(avg_val))*100)\n\ndiff%>%summary()\n\n      Year         avg_val              diff         \n Min.   :1880   Min.   :-0.48333   Min.   :-25.4167  \n 1st Qu.:1916   1st Qu.:-0.19833   1st Qu.: -7.2917  \n Median :1952   Median :-0.05750   Median :  2.0000  \n Mean   :1952   Mean   : 0.06021   Mean   :  0.7494  \n 3rd Qu.:1987   3rd Qu.: 0.26583   3rd Qu.:  8.6667  \n Max.   :2023   Max.   : 1.02083   Max.   : 27.5000  \n                NA's   :1          NA's   :1         \n\n\n\nsummary(diff$avg_val)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's \n-0.48333 -0.19833 -0.05750  0.06021  0.26583  1.02083        1 \n\n\nHere we see the application:\n\\[\\text{rate ratio}=\\frac{y_{t+1}}{y_{t}}\\]\n\nrates_df <- diff%>%\n  mutate(abs_lag=abs(lag(avg_val)),\n         rate_change=diff/abs_lag,\n         rr= avg_val/lag(avg_val))\n\nrates_df%>%head\n\n# A tibble: 6 × 6\n   Year avg_val   diff abs_lag rate_change     rr\n  <dbl>   <dbl>  <dbl>   <dbl>       <dbl>  <dbl>\n1  1880 -0.174    0    NA             NA   NA    \n2  1881 -0.0917   8.25  0.174         47.4  0.526\n3  1882 -0.113   -2.17  0.0917       -23.6  1.24 \n4  1883 -0.181   -6.75  0.113        -59.6  1.60 \n5  1884 -0.288  -10.7   0.181        -59.0  1.59 \n6  1885 -0.338   -5     0.288        -17.4  1.17 \n\n\n\nrates_df%>%\n  ggplot(aes(x=Year,y=avg_val))+\n  geom_rect(xmin=1938,xmax=1980,ymin=-Inf,ymax=Inf,alpha=0.1,fill=\"grey\")+\n  geom_rect(xmin=1951,xmax=1980,ymin=-Inf,ymax=Inf,alpha=0.1,fill=\"grey60\")+\n  geom_line()+\n  geom_line(aes(y=rr/100),\n            color=\"darkred\",\n            inherit.aes = T)+\n  scale_x_continuous(n.breaks = 10)\n\nWarning: Removed 1 row containing missing values (`geom_line()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_line()`).\n\n\n\n\n\n\nrates_df%>%\n  filter(Year>= 1980)%>%\n  select(rr)%>%\n  map_dbl(\\(rr) mean(rr,na.rm = T))\n\n      rr \n1.093974 \n\n\nConsidering all temperatures anomalies from 1978 to 2023, on average the steady increase is about 1.6% percent rate.\n\ndiff%>%\n  drop_na()%>%\n  filter(Year> 1977)%>%\n  select(diff)%>%\n  map_dbl(\\(diff) mean(diff))\n\ndiff \n 1.6 \n\n\nThe line plot shows yearly temperature anomalies from 1880 to 2023.\nEstimate of temperature change that could be compared with predictions of global climate change in response to atmospheric carbon dioxide, aerosols, and changes in solar activity.\nThese in situ measurements are analyzed using an algorithm that considers the varied spacing of temperature stations around the globe and urban heat island effects.\n\nglobal_temps %>%\n  select(1:13) %>% # count(Year) 1880 - 2023\n  pivot_longer(cols = -Year) %>%\n  mutate(color=ifelse(value>0,\"up\",\"down\")) %>%\n  # group_by(Year)%>%\n  # reframe(avg_val=mean(value))%>%\n  ggplot(aes(x=Year,y=value,group=name,color=name))+\n  geom_line(linewidth=0.3)+\n  geom_smooth(se=F,linewidth=0.1)+\n  scale_x_continuous(n.breaks = 10)+\n  scale_color_manual(values = RColorBrewer::brewer.pal(12,\"Paired\"))+\n  labs(color=\"Time(Month)\")+\n  ggthemes::theme_fivethirtyeight()\n\n\n\n\n\ndiff %>%\nggplot(aes(x=Year,y=diff))+\n  geom_line(color=\"darkred\",\n            linewidth=0.5)+\n  geom_hline(yintercept = 0)\n\nWarning: Removed 1 row containing missing values (`geom_line()`).\n\n\n\n\n\n\nglobal_temps2 <- global_temps %>%\n  select(1:13) %>% # count(Year) 1880 - 2023\n  pivot_longer(cols = -Year) %>%\n  mutate(color=ifelse(value>0,\"up\",\"down\")) \n\nglobal_temps2 %>% head\n\n# A tibble: 6 × 4\n   Year name  value color\n  <dbl> <chr> <dbl> <chr>\n1  1880 Jan   -0.19 down \n2  1880 Feb   -0.25 down \n3  1880 Mar   -0.09 down \n4  1880 Apr   -0.17 down \n5  1880 May   -0.1  down \n6  1880 Jun   -0.21 down \n\n\nAn approximate explanation:\n\nset.seed(1234)\ntrain_id <-  sample_frac(tibble(id=row_number(global_temps2)),0.8)\ntraining <- global_temps2[pull(train_id),]\ntesting <-  global_temps2%>%anti_join(training)\n\nJoining with `by = join_by(Year, name, value, color)`\n\nfit<- lm(value ~ Year, data=training)\nsummary(fit, show.intercept= FALSE)\n\n\nCall:\nlm(formula = value ~ Year, data = training)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.51002 -0.14967 -0.01338  0.14390  0.79641 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -1.544e+01  2.623e-01  -58.86   <2e-16 ***\nYear         7.942e-03  1.344e-04   59.09   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2062 on 1374 degrees of freedom\n  (6 observations deleted due to missingness)\nMultiple R-squared:  0.7176,    Adjusted R-squared:  0.7174 \nF-statistic:  3492 on 1 and 1374 DF,  p-value: < 2.2e-16\n\n\n\nbroom::augment(fit)%>%head\n\n# A tibble: 6 × 9\n  .rownames value  Year .fitted  .resid     .hat .sigma    .cooksd .std.resid\n  <chr>     <dbl> <dbl>   <dbl>   <dbl>    <dbl>  <dbl>      <dbl>      <dbl>\n1 1          0.52  1988  0.351   0.169  0.00130   0.206 0.000438        0.819\n2 2         -0.21  1964  0.161  -0.371  0.000797  0.206 0.00129        -1.80 \n3 3         -0.07  1973  0.232  -0.302  0.000930  0.206 0.00100        -1.47 \n4 4          0.18  1963  0.153   0.0273 0.000787  0.206 0.00000693      0.133\n5 5          0.05  1931 -0.101   0.151  0.000899  0.206 0.000243        0.735\n6 6         -0.11  1955  0.0891 -0.199  0.000733  0.206 0.000342       -0.966\n\n\n\nbroom::augment(fit)%>%\n  left_join(global_temps2,by=c(\"Year\",\"value\"))%>%\n  ggplot(aes(x=Year,value,group=name))+\n  geom_line(color=\"steelblue\",linewidth=0.5)+\n  geom_line(aes(y=.fitted),inherit.aes = T)\n\nWarning in left_join(., global_temps2, by = c(\"Year\", \"value\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 2 of `x` matches multiple rows in `y`.\nℹ Row 1534 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\npredict(fit,newdata = tibble(Year=c(2024,2025,2026)))\n\n        1         2         3 \n0.6371218 0.6450638 0.6530059 \n\n\n\nprediction<- tibble(Year=c(2024,2025,2026),\n                    pred=predict(fit,\n                                 newdata = tibble(Year=c(2024,2025,2026))))\n\nbroom::augment(fit)%>%\n  left_join(global_temps2,by=c(\"Year\",\"value\"))%>%\n  ggplot(aes(x=Year,value))+\n  geom_line(aes(group=name),color=\"steelblue\",linewidth=0.5)+\n  geom_line(aes(y=.fitted),inherit.aes = T)+\n  geom_line(data=prediction, mapping=aes(x=Year,y=pred),color=\"darkred\")\n\nWarning in left_join(., global_temps2, by = c(\"Year\", \"value\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 2 of `x` matches multiple rows in `y`.\nℹ Row 1534 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\ntag<-tibble(tag_history= c(\"The basic GISS temperature analysis scheme was defined in the late 1970s by James Hansen when a method of estimating global temperature change was needed for comparison with one-dimensional global climate models.\"),\n            tag_stats = c(\"According to an ongoing temperature analysis led by scientists at NASA's Goddard Institute for Space Studies (GISS), the average global temperature on Earth has increased by at least 1.1° Celsius (1.9° Fahrenheit) since 1880.\"),\n            tag_reading =c(\"How to read this graph: The dashed-line depicts the average Global temperature with a one-year lag. The bars represent temperature anomalies estimated with respect to the 1951-1980 climatology.\"))\n\n\nlibrary(grid)\n\nglobal_temps2 %>%\n  ggplot(aes(x=Year,y=value))+\n  geom_line(data=diff,\n            mapping=aes(x=Year,y=diff),\n            inherit.aes = F,\n            linetype=\"dashed\",\n            color=\"red\",\n            linewidth=0.05)+\n  geom_rect(xmin=1951,xmax=1980,\n                ymin=-4,ymax=4,\n            #fill=\"grey70\",\n            alpha=0.8)+\n  geom_col(aes(fill=color))+\n  ggthemes::theme_fivethirtyeight()\n\n\n\n\n\nglobal_temps2 %>%\n  ggplot(aes(x=Year,y=value))+\n  geom_line(data=diff,\n            mapping=aes(x=Year,y=diff),\n            inherit.aes = F,\n            linetype=\"dashed\",\n            color=\"grey80\",\n            linewidth=0.1)+\n  geom_rect(xmin=1951,xmax=1980,\n                ymin=-4,ymax=4,\n            alpha=0.8)+\n  geom_col(aes(fill=color))+\n  geom_segment(aes(x=min(Year)-1,xend=min(Year)-1,\n                   y=0,yend=-10),\n               color=\"grey70\",\n               linewidth=1.5,\n               lineend=\"butt\",\n               arrow=arrow(length = unit(0.1, \"inches\")))+\n  geom_segment(aes(x=max(Year)+1,xend=max(Year)+1,\n                   y=0,yend=10),\n               color=\"grey70\",\n               linewidth=1.5,\n               lineend=\"butt\",\n               arrow=arrow(length = unit(0.1, \"inches\")))+\n  geom_segment(aes(x=1940,xend=1940,\n                 y=0,yend=10),\n               color=\"grey70\",\n               linewidth=0.5,\n               lineend=\"butt\",\n               arrow=arrow(length = unit(0.1, \"inches\")))+\n  geom_segment(aes(x=1957,xend=1957,\n               y=0,yend=10),\n             color=\"grey70\",\n             linewidth=0.5,\n             lineend=\"butt\",\n             arrow=arrow(length = unit(0.1, \"inches\")))+\n   geom_segment(aes(x=1979,xend=1979,\n              y=0,yend=-10),\n             color=\"grey70\",\n             linewidth=0.5,\n             lineend=\"butt\")+\n  ggtext::geom_textbox(data = tag,aes(x=1979,y=-15,label = tag_stats),\n                     size = 3, \n                     family=\"Roboto Condensed\",\n                     width = unit(20, \"line\"), \n                     alpha = 0.9,\n                     color=\"grey70\",\n                     fill=\"grey4\",\n                     box.colour = \"grey70\") +\n  ggtext::geom_textbox(data = tag,aes(x=1920,y=-25,label = tag_reading),\n                     size = 3, \n                     family=\"Roboto Condensed\",\n                     width = unit(20, \"line\"), \n                     alpha = 0.9,\n                     color=\"grey70\",\n                     fill=\"grey4\",\n                     box.colour = \"grey4\") +\n  geom_hline(yintercept = 0,linewidth=2,color=\"grey70\")+\n  geom_vline(xintercept = 1951,color=\"red\",alpha=0.2)+\n  geom_vline(xintercept = 1980,color=\"red\",alpha=0.2)+\n  scale_x_continuous(n.breaks = 10)+\n  scale_y_continuous()+\n  annotate(geom = \"text\",\n         family=\"Roboto Condensed\",\n         fontface=\"bold\",\n         label=\"Global Surface\\nTemperatures Anomalies\\n1880 - 2023\",\n         size=12,\n         color=\"grey70\",\n         hjust=0,\n         x = 1880 ,y =c(21) )+\n  annotate(geom = \"text\",\n         family=\"Roboto Condensed\",\n         fontface=\"bold\",\n         label=\"First rise\\nto previous year in 1940 \",\n         size=3,\n         color=\"grey70\",\n         hjust=0,\n         x = 1941 ,y =c(13) )+\n  annotate(geom = \"text\",\n        family=\"Roboto Condensed\",\n        fontface=\"bold\",\n        label=\"Second big rise\\nto previous year in 1957\",\n        size=3,\n        color=\"grey70\",\n        hjust=0,\n        x = 1959 ,y =c(7) )+\n  annotate(geom = \"text\",\n      family=\"Roboto Condensed\",\n      fontface=\"bold\",\n      label=\"Steady average rise of 1.09°C\\nsince 1979\",\n      size=3,\n      color=\"grey70\",\n      hjust=0,\n      x = 1980 ,y =c(-7) )+\n  annotation_custom(grob = grid::circleGrob(x=0,y=0.1,gp=gpar(col=\"grey70\",fill=NA)),\n                    xmin = 1940,\n                    xmax = 1950,\n                    ymin = 0,ymax = 10)+\n  ggthemes::scale_fill_fivethirtyeight()+\n  labs(title=\"\",\n       caption = \"\\nDataSource: NASA GISS Surface Temperature Analysis (GISTEMP v4)\\nDataViz: #TidyTuesday 2023 - week 28 by Federica Gazzelloni\\n\",\n       fill=\"Temperature\",\n       y=\"Monthly Means\")+\n  theme_void()+\n  theme(text=element_text(color=\"grey70\",family=\"Roboto Condensed\"),\n        plot.caption = element_text(hjust = 0.5,lineheight = 1),\n        axis.text.x = element_text(color=\"grey70\"),\n        plot.background = element_rect(color=\"grey4\",\n                                       fill=\"grey4\"),\n        legend.position = \"bottom\",\n        legend.title = element_text(color=\"black\"),\n        legend.text = element_text(color=\"black\"),\n        legend.background = element_rect(color=\"grey70\",fill=\"grey70\"))\n\n\n\n\n\nggsave(\"w28_GIST.png\")\n\nSaving 7 x 5 in image\n\n\nWarning: Removed 7 rows containing missing values (`position_stack()`).\n\n\nWarning: Removed 1 row containing missing values (`geom_line()`).\n\n\n\n\n\n\n\nFootnotes\n\n\nSource: https://pubs.giss.nasa.gov/abs/le05800h.html↩︎"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w1_Bring_your_own_data_to_start_2023/w1_Bring_your_own_data_to_start_2023.html",
    "href": "tidytuesday/cases2023/posts2023/w1_Bring_your_own_data_to_start_2023/w1_Bring_your_own_data_to_start_2023.html",
    "title": "Bring your own data to start 2023!",
    "section": "",
    "text": "#TidyTuesday - Edition 2023\nThis time I’ll use the {oregonfrogs} package.\nRana Pretiosa, a rare species of frog, is found on various locations around Crane Prairie Reservoir lake in Oregon. Such as: pond, river, North, North East, South East, and West part of the Reservoir.\n\nlibrary(tidyverse)\nlibrary(oregonfrogs)\ndata(\"oregonfrogs\")\noregonfrogs::oregonfrogs %>% count(subsite)\n\nScientists monitoring the frogs have found interesting patterns in the density distribution between male and female frogs. Through the use of radio frequencies, they are able to track the movements of the frogs and study their behaviors. However, as their habitat is threatened, the scientists must race against time to protect the unique Rana Pretiosa population.\n\noregonfrogs::oregonfrogs %>% head\n\n\noregonfrogs %>%\n  mutate(sex = as.factor(sex)) %>%\n  ggplot(aes(doy, detection, group = sex, color = sex)) +\n  geom_point() +\n  facet_wrap( ~ subsite)+\n  hrbrthemes::scale_color_ipsum()+\n  hrbrthemes::theme_tinyhand()\n\n\noregonfrogs%>%\n  mutate(sex=as.factor(sex),\n         subsite=case_when(subsite==\"Cow Camp Pond\"~\"Pond\",\n                           subsite==\"Cow Camp Pond\"~\"Pond\",\n                           TRUE~subsite))%>%\n  ggplot(aes(frequency,group=sex,color=sex))+\n  geom_density()+\n  facet_wrap(~subsite)\n\nLet’s have a look at the ggplot2 extensions: https://exts.ggplot2.tidyverse.org/\n\nlibrary(hrbrthemes)\nhrbrthemes.loadfonts=TRUE\nhrbrthemes::import_tinyhand()\nhrbrthemes::import_roboto_condensed()\nextrafont::loadfonts()\n\n\noregonfrogs %>%\n  mutate(sex = as.factor(sex),\n         sex=ifelse(sex==0,\"Female\",\"Male\"),\n         frequency=round(frequency,2)) %>%\n  ggplot(aes(frequency, group = sex, color = sex)) +\n  geom_density(linewidth=1,key_glyph = \"point\") +\n  facet_wrap( ~ subsite) +\n  coord_cartesian(clip = 'off')+\n  labs(title = \"Oregonfrogs: Rana Pretiosa\",\n       subtitle = \"Located frogs by sex density distributions\",\n       caption = \"DataSource: #TidyTuesday 2023 week1 - BYO data: Oregonfrogs\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day3 - fauna/flora\\n\") +\n  hrbrthemes::scale_color_ipsum() +\n  hrbrthemes::theme_tinyhand(strip_text_size = 9,\n                             plot_title_size = 13,\n                             subtitle_size = 7,\n                             subtitle_margin = 5,\n                             caption_margin = 7,\n                             caption_family = \"Roboto Condensed\",\n                             axis_title_size = 9,\n                             axis_text_size = 7,\n                             plot_margin = margin(10, 10, 10, 10))\n\n\nggsave(\"w1_byo.png\")\n\ndate: ‘2023-01-03’ image-alt: ’’ description: ‘Networks’ output: html_document execute: eval: false\n\n#TidyTuesday - Edition 2023\nThis time I’ll use the {oregonfrogs} package.\nRana Pretiosa, a rare species of frog, is found on various locations around Crane Prairie Reservoir lake in Oregon. Such as: pond, river, North, North East, South East, and West part of the Reservoir. ::: {.cell}\nlibrary(tidyverse)\nlibrary(oregonfrogs)\ndata(\"oregonfrogs\")\noregonfrogs::oregonfrogs %>% count(subsite)\n:::\nScientists monitoring the frogs have found interesting patterns in the density distribution between male and female frogs. Through the use of radio frequencies, they are able to track the movements of the frogs and study their behaviors. However, as their habitat is threatened, the scientists must race against time to protect the unique Rana Pretiosa population.\n\noregonfrogs::oregonfrogs %>% head\n\n\noregonfrogs %>%\n  mutate(sex = as.factor(sex)) %>%\n  ggplot(aes(doy, detection, group = sex, color = sex)) +\n  geom_point() +\n  facet_wrap( ~ subsite)+\n  hrbrthemes::scale_color_ipsum()+\n  hrbrthemes::theme_tinyhand()\n\n\noregonfrogs%>%\n  mutate(sex=as.factor(sex),\n         subsite=case_when(subsite==\"Cow Camp Pond\"~\"Pond\",\n                           subsite==\"Cow Camp Pond\"~\"Pond\",\n                           TRUE~subsite))%>%\n  ggplot(aes(frequency,group=sex,color=sex))+\n  geom_density()+\n  facet_wrap(~subsite)\n\nLet’s have a look at the ggplot2 extensions: https://exts.ggplot2.tidyverse.org/\n\nlibrary(hrbrthemes)\nhrbrthemes.loadfonts=TRUE\nhrbrthemes::import_tinyhand()\nhrbrthemes::import_roboto_condensed()\nextrafont::loadfonts()\n\n\noregonfrogs %>%\n  mutate(sex = as.factor(sex),\n         sex=ifelse(sex==0,\"Female\",\"Male\"),\n         frequency=round(frequency,2)) %>%\n  ggplot(aes(frequency, group = sex, color = sex)) +\n  geom_density(linewidth=1,key_glyph = \"point\") +\n  facet_wrap( ~ subsite) +\n  coord_cartesian(clip = 'off')+\n  labs(title = \"Oregonfrogs: Rana Pretiosa\",\n       subtitle = \"Located frogs by sex density distributions\",\n       caption = \"DataSource: #TidyTuesday 2023 week1 - BYO data: Oregonfrogs\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day3 - fauna/flora\\n\") +\n  hrbrthemes::scale_color_ipsum() +\n  hrbrthemes::theme_tinyhand(strip_text_size = 9,\n                             plot_title_size = 13,\n                             subtitle_size = 7,\n                             subtitle_margin = 5,\n                             caption_margin = 7,\n                             caption_family = \"Roboto Condensed\",\n                             axis_title_size = 9,\n                             axis_text_size = 7,\n                             plot_margin = margin(10, 10, 10, 10))\n\n\nggsave(\"w1_byo.png\")"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w20_Tornados/w20_Tornados.html",
    "href": "tidytuesday/cases2023/posts2023/w20_Tornados/w20_Tornados.html",
    "title": "Tornados",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization Tornados\n\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 20)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w5_Pet_Cats_UK/w5_Pet_Cats_UK.html",
    "href": "tidytuesday/cases2023/posts2023/w5_Pet_Cats_UK/w5_Pet_Cats_UK.html",
    "title": "Pet Cats UK",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 05)\n\n\ncats_uk <- tuesdata$cats_uk\ncats_uk_reference <- tuesdata$cats_uk_reference\n\n\ndf <- cats_uk%>%\n  inner_join(cats_uk_reference,by=\"tag_id\")\n\n\ndf%>%\n  slice()%>%\n  glimpse()\n\n\nlibrary(survival)\nlibrary(\"survminer\")\n\nsurv_df <- df%>%\n  select(timestamp,hunt,animal_sex)%>%#DataExplorer::profile_missing()\n  filter(!is.na(hunt))%>%#count(hunt)\n  mutate(animal_sex=ifelse(animal_sex==\"m\",1,2),\n         hunt=ifelse(hunt==\"FALSE\",0,1),\n         timestamp=as.POSIXct(timestamp, format = \"%Y-%m-%d %H:%M:%S\"),\n         day=as.Date(timestamp,\"%Y-%m-%d %H:%M:%S\",tz=\"GMT\"))\n\nrange(surv_df$day)\nstart_date <- as.Date(\"2017-06-03\")\nend_date <- as.Date(\"2017-11-30\")\ndate_seq <- seq(start_date, end_date, by = \"day\")\n\ncat_hz <- surv_df %>%\n  group_by(day)%>%\n  mutate(time=as.numeric(day - start_date) + 1)%>%\n  arrange(time)\n\n\nfit <- survfit(Surv(time, hunt) ~ animal_sex, data = cat_hz)\n\n\nggsurv <- ggsurvplot(fit,\n                data = cat_hz,\n                censor.shape = \"|\",\n                censor.size = 4,\n                risk.table = TRUE,\n                submain = \"Hazards Distribution and Sex Differences in Hunting Risk\",\n                caption = \"Based on Kaplan-Meier estimates\\nDataSource: #TidyTuesday 2023 Week5 Pet Cats UK\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day7 - hazards\\n\") \n\nggsurv$plot %+%\n  ggthemes::scale_colour_fivethirtyeight(labels=c(\"Male\",\"Female\")) %+%\n  labs(title=\"Survival of UK Cats\") %+%\n  theme_survminer(base_family = \"Roboto Condensed\",\n                  font.main = c(18, \"bold\"),\n                  font.submain = c(14, \"bold.italic\"),\n                  font.caption = c(11, \"plain\"),\n                  font.x = c(12, \"bold.italic\"),\n                  font.y = c(12, \"bold.italic\"),\n                  font.tickslab = c(12, \"plain\")) %+%\n  theme(plot.background = element_rect(fill=\"grey90\",color=\"grey90\"),\n        panel.background = element_rect(fill=\"grey90\",color=\"grey90\"),\n        legend.background = element_blank())\n\n\nshowtext.auto(enable = FALSE)\nggsave(\"w5_PCUK.png\",\n       width = 7,height = 5)"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w23_Energy/w23_Energy.html",
    "href": "tidytuesday/cases2023/posts2023/w23_Energy/w23_Energy.html",
    "title": "SAFIS",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization SAFIS\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\ntuesdata <- tidytuesdayR::tt_load(2023, week = 22)\n\n--- Compiling #TidyTuesday Information for 2023-05-30 ----\n--- There is 1 file available ---\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 1: `centenarians.csv`\n\n\n--- Download complete ---"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w18_The_Portal_Project/w18_The_Portal_Project.html",
    "href": "tidytuesday/cases2023/posts2023/w18_The_Portal_Project/w18_The_Portal_Project.html",
    "title": "The Portal Project",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization The Portal Project\n\nTitle: “Dynamics of desert rodents in Arizona”\nThe Portal Project is a long-term ecological study that has been conducted near Portal, AZ since 1977. The study focuses on the interactions among rodents, ants, and plants and their respective responses to climate. The study manipulates access to 24 study plots to experimentally study the interactions among rodents and other organisms. The study has produced over 100 scientific papers and is one of the longest running ecological studies in the U.S.\nIn particular, here we look at data relative to rodents made openly available on zenodo.\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 18)\nplots <- tuesdata$plots\nspecies <- tuesdata$species\nsurveys <- tuesdata$surveys\n\n\nplots%>%head\n\n\nspecies%>%names\n\n\nsurveys%>%names\n\n\nsurveys %>% # dim 28364    22\n  left_join(species,by=\"species\") %>% # dim 28364    36\n  glimpse()\n\n\nmy_df <- surveys %>% # dim 28364    22\n  left_join(species,by=\"species\") %>%\n  select(-taxa,-rodent,-unidentified,-note2,-note3,\n         -testes,-vagina,-nipples) %>% \n  filter(!is.na(sex),!is.na(species),!is.na(hfl),!is.na(wgt))%>%\n  count(plot,year,commonname,species,sex,hfl,wgt,treatment,sort = T)\n\nmy_df%>%head\n\n\n# my_df <- surveys %>% # dim 28364    22\n#   left_join(species,by=\"species\") %>%\n#   select(-taxa,-rodent,-unidentified,-note2,-note3,\n#          -testes,-vagina,-nipples) %>% \n#   filter(!is.na(sex)) %>%\n#   mutate(age=ifelse(is.na(age),\"Adult\",\"Juvenile\"),\n#          lactation=ifelse(is.na(lactation),\"lactation\",\"no-lactation\"),\n#          pregnant=ifelse(is.na(pregnant),\"pregnant\",\"no-pregnant\"))%>%\n#   # count(age)  \n#   count(plot,species,granivore,sex,reprod,age,pregnant,lactation)\n# \n# my_df%>%head\n\n\ncoords <- read.csv(\"https://raw.githubusercontent.com/weecology/PortalData/main/SiteandMethods/Portal_UTMCoords.csv\")\ncoords1 <- coords%>%\n  rename(utm_east=east,utm_north=north) %>% # count(plot)\n  filter(!plot==\"weatherstation\")%>%\n  mutate(plot=as.numeric(plot))\n\n\ncoords1%>%head\n\n\nggplot(coords1)+\n  geom_point(aes(utm_east,utm_north,fill=elev),\n             shape=21,stroke=0.5)+\n  scale_fill_viridis_c()\n\n\nwhat-utm-zone-am-i-in\nhttps://mangomap.com/robertyoung/maps/69585/what-utm-zone-am-i-in-#\n\nlibrary(oregonfrogs)\n\nnew_df <- oregonfrogs::utm_to_longlat(coords1,\n                            utm_crs = \"+proj=utm +zone=12\", \n                            longlat_crs =\"+proj=longlat +datum=WGS84\" )\n\nnew_df1 <- new_df%>%\n  left_join(my_df,by=\"plot\")%>%\n  filter(type==\"quadrat\")\n\nnew_df1%>%head\n\n\nrange(new_df$X);\nrange(new_df$Y)\n\nThe study site is located approximately 6.5 km north and 2 km east of the town of Portal, AZ (31°56’20.29”N 109° 4’47.44”W).\n\nspecies <- new_df1%>%\n  drop_na()%>%#count(year)\n  filter(year==2021,\n         commonname==\"Desert pocket mouse\") \n\n\nstates=map_data(\"state\")\nggplot(states)+\n  geom_point(data=new_df,mapping=aes(X,Y),\n             fill=NA,shape=21,stroke=0.1,color=\"grey\")+\n  geom_jitter(data=species,\n             mapping=aes(X,Y,alpha=n,fill=wgt,color=treatment),\n             shape=21,stroke=0.3)+\n  scale_fill_viridis_c()+\n  scale_color_viridis_d()+\n  coord_sf(xlim = c(-109.0831, -109.0775),ylim = c(31.93611, 31.93928))+\n  facet_wrap(~sex)+\n  labs(title=\"Desert pocket mouse in 2021\")+\n  theme(legend.position = \"bottom\")\n\n\nstates=map_data(\"state\")\nggplot(states)+\n  geom_polygon(aes(long,lat,group=group),fill=NA,color=\"navy\")+\n   geom_point(data=new_df,mapping=aes(X,Y),\n             fill=NA,shape=21,stroke=0.1,\n             size=20,\n             color=\"red\")+\n  coord_sf()+\n  ggthemes::theme_map()\n\n\nlibrary(showtext)\nshowtext_auto()\nsysfonts::font_add_google(name=\"Pangolin\",\n                          family=\"Pangolin\")\n\n\nggplot(coords1)+\n  geom_point(data=new_df,mapping=aes(X,Y,fill=elev),alpha=0.4,\n  shape=21,stroke=0.1,color=\"grey\")+\n  scale_fill_viridis_c()+\n  geom_point(data = new_df1 %>%\n               drop_na() %>%\n               filter(year == 2021, \n                      commonname == \"Desert pocket mouse\"),\n             mapping=aes(X,Y,\n                         color=factor(sex),\n                         alpha=elev,\n                         size=n,\n                         shape=treatment))+\n  coord_sf(xlim = c(-109.0831, -109.0775),ylim = c(31.93611, 31.93928))+\n  scale_color_viridis_d()+\n  guides(alpha=\"none\",\n         size=\"none\",\n         fill=guide_colorbar(order=3),\n         color=guide_legend(title=\"Sex\",order=2),\n         shape=guide_legend(title=\"Treatment\",order=1))+\n  ggthemes::theme_few()+\n  theme(text=element_text(family=\"Pangolin\",size=50),\n        legend.position = \"bottom\",\n        legend.box = \"vertical\",\n        legend.background = element_blank(),\n        legend.margin = margin(0,0,0,0,unit = \"pt\"),\n        legend.key.size = unit(5,units=\"pt\"),\n        legend.key = element_rect(fill = \"white\", colour = \"black\"),\n        legend.text = element_text(size=24),\n        plot.background = element_rect(color=\"#2c3035\",fill=\"#2c3035\"),\n        panel.background = element_rect(color=\"#2c3035\",fill=\"#2c3035\"),\n        axis.text = element_blank(),\n        axis.title = element_blank(),\n        axis.ticks = element_blank(),\n        plot.title = element_text(color=\"gold\"),\n        plot.subtitle = element_text(color=\"gold\"),\n        plot.caption = element_text(color=\"grey\"))+\n  labs(title=\"The Portal Project\",\n       subtitle=\"Desert pocket mouse: treatment types by site in 2021\",\n       caption = \"The plot shows the sites of the research project in Arizona, elevation is lower on the left side of the sites than on the right side.\\nDataSource: #TidyTuesday 2023 week18 The Portal Project\\nDataViz: Federica Gazzelloni\")\n\n\n#showtext.auto(enable = FALSE)\nggsave(\"~/Documents/R/R_general_resources/EDA_and_maps/TidyTuesday/data/2023/w18_TPP/p.png\")"
  },
  {
    "objectID": "tidytuesday/cases2023/posts2023/w21_Central_Park_Squirrels/w21_Central_Park_Squirrels.html",
    "href": "tidytuesday/cases2023/posts2023/w21_Central_Park_Squirrels/w21_Central_Park_Squirrels.html",
    "title": "Central Park Squirrels",
    "section": "",
    "text": "To cite Federica’s work, please use: Gazzelloni F., 2023 Data Visualization\n\n\nlibrary(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2023, week = 21)"
  },
  {
    "objectID": "tidytuesday/cases2022/index.html",
    "href": "tidytuesday/cases2022/index.html",
    "title": "TidyTuesday 2022",
    "section": "",
    "text": "Star Trek Timelines\n\n\nNetworks\n\n\n\n\n\n\nDec 27, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeather Forecast Accuracy\n\n\nNetworks\n\n\n\n\n\n\nDec 20, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonthly State Retail Sales\n\n\nNetworks\n\n\n\n\n\n\nDec 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nElevators\n\n\nNetworks\n\n\n\n\n\n\nDec 6, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFIFA World Cup\n\n\nNetworks\n\n\n\n\n\n\nNov 29, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUK Museums\n\n\nNetworks\n\n\n\n\n\n\nNov 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeb page metrics\n\n\nNetworks\n\n\n\n\n\n\nNov 15, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRadio Stations\n\n\nNetworks\n\n\n\n\n\n\nNov 8, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHorror Movies\n\n\nNetworks\n\n\n\n\n\n\nNov 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat British Bakeoff\n\n\nNetworks\n\n\n\n\n\n\nOct 25, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStranger things dialogue\n\n\nNetworks\n\n\n\n\n\n\nOct 18, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRavelry data\n\n\nNetworks\n\n\n\n\n\n\nOct 11, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct Hunt products\n\n\nNetworks\n\n\n\n\n\n\nOct 4, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArtists in the USA\n\n\nNetworks\n\n\n\n\n\n\nSep 27, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHydro Wastewater plants\n\n\nNetworks\n\n\n\n\n\n\nSep 20, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBigfoot\n\n\nNetworks\n\n\n\n\n\n\nSep 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLEGO database\n\n\nNetworks\n\n\n\n\n\n\nSep 6, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPell Grants\n\n\nNetworks\n\n\n\n\n\n\nAug 30, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCHIP dataset\n\n\nNetworks\n\n\n\n\n\n\nAug 23, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Source Psychometrics\n\n\nNetworks\n\n\n\n\n\n\nAug 16, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFerris Wheels\n\n\nNetworks\n\n\n\n\n\n\nAug 9, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOregon Spotted Frog\n\n\nNetworks\n\n\n\n\n\n\nAug 2, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBring your own data\n\n\nNetworks\n\n\n\n\n\n\nJul 26, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTechnology Adoption\n\n\nNetworks\n\n\n\n\n\n\nJul 19, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEuropean flights\n\n\nNetworks\n\n\n\n\n\n\nJul 12, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco Rentals\n\n\nNetworks\n\n\n\n\n\n\nJul 5, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUK Gender pay gap\n\n\nNetworks\n\n\n\n\n\n\nJun 28, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJuneteenth\n\n\nNetworks\n\n\n\n\n\n\nJun 21, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUS Drought\n\n\nNetworks\n\n\n\n\n\n\nJun 14, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPride Corporate Accountability Project\n\n\nNetworks\n\n\n\n\n\n\nJun 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompany reputation poll\n\n\nNetworks\n\n\n\n\n\n\nMay 31, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWomens Rugby\n\n\nNetworks\n\n\n\n\n\n\nMay 24, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEurovision\n\n\nNetworks\n\n\n\n\n\n\nMay 17, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNYTimes best sellers\n\n\nNetworks\n\n\n\n\n\n\nMay 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolarWind utilities\n\n\nNetworks\n\n\n\n\n\n\nMay 3, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKaggle Hidden Gems\n\n\nNetworks\n\n\n\n\n\n\nApr 26, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCrossword Puzzles and Clues\n\n\nNetworks\n\n\n\n\n\n\nApr 19, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndoor Air Pollution\n\n\nNetworks\n\n\n\n\n\n\nApr 12, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDigital Publications\n\n\nNetworks\n\n\n\n\n\n\nApr 5, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCollegiate Sports Budgets\n\n\nNetworks\n\n\n\n\n\n\nMar 29, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBaby names\n\n\nNetworks\n\n\n\n\n\n\nMar 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCRANBIOC Vignettes\n\n\nNetworks\n\n\n\n\n\n\nMar 15, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nErasmus student mobility\n\n\nNetworks\n\n\n\n\n\n\nMar 8, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlternative Fuel Stations\n\n\nNetworks\n\n\n\n\n\n\nMar 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorld Freedom index\n\n\nNetworks\n\n\n\n\n\n\nFeb 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDuBoisChallenge2022\n\n\nNetworks\n\n\n\n\n\n\nFeb 15, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTuskegee Airmen\n\n\nNetworks\n\n\n\n\n\n\nFeb 8, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDog breeds\n\n\nNetworks\n\n\n\n\n\n\nFeb 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoard games\n\n\nNetworks\n\n\n\n\n\n\nJan 25, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChocolate Bar ratings\n\n\nNetworks\n\n\n\n\n\n\nJan 18, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBee Colony losses\n\n\nNetworks\n\n\n\n\n\n\nJan 11, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBring your own data from 2022\n\n\nNetworks\n\n\n\n\n\n\nJan 4, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w45_Radio_Stations/w45_Radio_Stations.html",
    "href": "tidytuesday/cases2022/posts2022/w45_Radio_Stations/w45_Radio_Stations.html",
    "title": "Radio Stations",
    "section": "",
    "text": "library(tidyverse)\n# unzip(\"data/FM_service_contour_current.zip\")\n\nSource of data: https://www.fcc.gov/media/radio/fm-service-contour-data-points\nthis contour data is only generated once for each application ID number use https://www.fcc.gov/media/radio/fm-query to associate specific service contour records with the proper station or application data, match the application ID number or LMS application ID the record with the corresponding data in the LMS database.\n\nraw_contour <- read_delim(\n  \"data/FM_service_contour_current.txt\",\n  delim = \"|\"\n)\n# save(raw_contour,file=\"data/raw_contour.RData\")\n# load(\"data/raw_contour.RData\")\n\nraw_contour%>%names\n#  [1] \"application_id\"     \"service\"           \n#  [3] \"lms_application_id\" \"dts_site_number\"   \n#  [5] \"transmitter_site\" \n\n\nconv_contour <- raw_contour |>\n  select(-last_col()) |>\n  set_names(nm = c(\n    \"application_id\", \"service\", \"lms_application_id\", \"dts_site_number\", \"transmitter_site\",\n    glue::glue(\"deg_{0:360}\")\n  ))\n\n# save(conv_contour,file= \"data/conv_contour.RData\")\n\nlng_lat <- conv_contour |>\n  separate(\n    transmitter_site, \n    into = c(\"site_lat\", \"site_long\"), \n    sep = \" ,\")\n\n# save(lng_lat,file= \"data/lng_lat.RData\")\nload(\"data/lng_lat.RData\")\n\n\nlng_lat%>%count(site_lat,site_long,sort=T)\n\n\ndf_coords <- lng_lat%>%\n  select(-dts_site_number) %>%\n  distinct() %>%\n  drop_na() %>%\n  mutate_all(trimws)%>%\n  mutate(application_id=as.numeric(application_id),\n         site_lat=as.numeric(site_lat),\n         site_long=as.numeric(site_long))\n\ndf_coords %>%count(service)\n\n\ndf_coords1 <- df_coords %>%\n  as.data.frame() %>%\n  #slice(1:30) %>%\n  arrange(service) %>%\n  filter(service==\"FM\") \n\ndf_coords1%>%head()\n\n\nlibrary(sf) # spatiotemporal\nworld <- sf::st_as_sf(maps::map(\"world\", plot = FALSE, fill = TRUE))\nstates <- sf::st_as_sf(maps::map(\"state\", plot = FALSE, fill = TRUE))\nstates\n\n\ndf_coords1 %>%\n  st_as_sf(coords=c(4,3),crs=4326)%>%\n  st_bbox()\n\n\nggplot(world) +\n  geom_sf(fill=NA) +\n  geom_point(data = df_coords1,\n             mapping = aes(site_long,site_lat),\n             shape=\".\",color=\"red\",\n             inherit.aes = F) +\n  coord_sf(xlim = c(-171.73031,-25),ylim = c(10,71.29194))+\n  theme_classic() +\n  theme(axis.line = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank())\n\n\ndf_coords <- lng_lat%>%\n  select(-dts_site_number) %>%\n  distinct() %>%\n  drop_na() %>%\n  mutate_all(trimws)%>%\n  mutate(application_id=as.numeric(application_id),\n         site_lat=as.numeric(site_lat),\n         site_long=as.numeric(site_long))\n\n\ndf_coords %>% count(service)\n  \ndf_coords1 <- df_coords %>%\n  as.data.frame() %>%\n  #slice(1:30) %>%\n  arrange(service) %>%\n  filter(service==\"FM\") \n\ndf_coords2 <- df_coords1 %>%\n  pivot_longer(cols = deg_0:deg_360,\n    names_to = \"angle\",\n    values_to = \"values\") \n\ndf_coords3 <- df_coords2 %>%\n  mutate(angle = str_remove(angle, \"deg_\"),\n         angle = as.integer(angle))\n\n# lms_application_id\ndf_coords3[361,]\ndf_coords3%>%\n  filter(angle==360)%>%head\n\n\n\ndf_coords4 <- df_coords3 %>%\n  separate(values,\n    into = c(\"deg_lat\", \"deg_lng\"),\n    sep = \" ,\")\n\n\ndf_coords5 <- df_coords4 %>%\n  mutate(deg_lat= ifelse(is.na(deg_lng),site_lat,deg_lat),\n         deg_lng= ifelse(is.na(deg_lng),site_long,deg_lng))\n  \n# save(df_coords5,file=\"rdata/df_coords5.RData\")\n\ndf_coords5%>%\n  DataExplorer::profile_missing()\n\n\ndf_coords5%>%dim # 4550766\ndf_coords5%>%head\n\n\ndf_coords5%>%count(application_id)\n\n\ndf_coords_750_2037197 <- df_coords5%>%\n  filter(application_id%in%c(750,2037197)) # dim # 361\n  \n\ndf_coords_750_2037197%>%count(application_id)\ndf_coords_750_2037197%>%\n  filter(application_id==750)\nst_bbox(world)\n\n  ggplot() +\n  #geom_sf(fill=NA) +\n  geom_point(data = df_coords_750_2037197,\n             mapping = aes(deg_lng,deg_lat),\n             #shape=\".\",\n             color=\"red\",\n             inherit.aes = F) \n    coord_sf(xlim = c(-180.00000,190.27084),ylim = c(-85.19218,83.59961))+\n  #coord_sf(xlim = c(-171.73031,-25),ylim = c(10,71.29194))+\n  theme_classic() \n  theme(axis.line = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank())\n\n\ndf_coords_selected_id <- df_coords5%>% \n  arrange(application_id) %>% \n  count(application_id) %>% \n  slice(1:10) %>%\n  select(-n) %>% \n  unlist()\n\ndf_coords5_selection <- df_coords5 %>%\n  filter(application_id%in%df_coords_selected_id) %>%\n  distinct() # dim # 361\ndf_coords5%>%dim  \ndf_coords5_selection%>%names\n\ndf_coords5_selection_sf<- df_coords5_selection%>%\n  st_as_sf(coords=c(8,7),crs=4326) \n\ndf_coords51 <- df_coords5%>%\n  st_as_sf(coords=c(8,7),crs=4326) \n\n  ggplot(world) +\n    geom_sf(fill=NA) +\n    geom_sf(data = df_coords51, \n            aes(color=application_id),\n            shape=21,stroke=0.01,\n            #shape=\".\",\n            alpha=0.2,\n            inherit.aes = F) +\n    coord_sf(xlim = c(-171.73031,-25),ylim = c(10,71.29194))+\n      theme_classic() +\n  theme(axis.line = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank())\n\n\ndf_coords5%>%count(application_id)\n\n\ndf_coords5_all_sf <- df_coords5 %>%\n   st_as_sf(coords=c(7,6),crs=4326) \n\nggplot(world) +\n    geom_sf(fill=NA) +\n    geom_sf(data = df_coords5_all_sf, \n            #aes(color=application_id),\n            shape=21,stroke=0.01,\n            #shape=\".\",\n            alpha=0.2,\n            inherit.aes = F) +\n    coord_sf(xlim = c(-171.73031,-25),ylim = c(10,71.29194))+\n      theme_classic() +\n  theme(axis.line = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank())\n\nmap\n\n\nstate_stations <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-08/state_stations.csv')\n\n\nstate_stations%>%names\n\n\nstate_stations1 <- state_stations%>%\n  select(call_sign,frequency,state,city,format)\n\nstate_stations1%>%head\n\n\nstate_stations%>%DataExplorer::profile_missing()\n\n\nstate_stations%>%dim\n\n\ntuesdata <- tidytuesdayR::tt_load(2022, week = 45)\nstation_info <- tuesdata$station_info\n\n\nstation_info%>%dim\nstation_info%>%DataExplorer::profile_missing()\n\n\nstation_info%>%count(service)\n\n\nstation_info1 <- station_info%>%\n  select(call_sign,facility_id) \nstation_info1%>%head\n\n\nstation_info1%>%DataExplorer::profile_missing()\n\n\ndf_coords2 <- df_coords1 %>%\n  mutate(application_id=as.numeric(application_id))# 12604\n\nstation_info1 %>% distinct() %>%dim # 2065\n\n\njoin <- state_stations1 %>% # 17186\n  inner_join(station_info1,by=\"call_sign\")\n\n\nstate_stations1 %>% # 17186\n  inner_join(station_info1,by=\"call_sign\") %>% head # left 17186 # right 2065 # inner 2037 # full 17214\n  right_join(df_coords5,by=c(\"facility_id\"=\"application_id\")) %>%DataExplorer::profile_missing()\n\n  df_coords5%>%distinct()%>%dim # 4551127\n  join %>%distinct()%>%dim # 2037\nsetdiff(df_coords5$application_id,join$facility_id)  %>%length() # 12551\nsetdiff(join$facility_id,df_coords5$application_id)  %>%length() # 2049 # 2021\n\n\nfull_join<-join %>%\n  inner_join(df_coords5,by=c(\"facility_id\"=\"application_id\"))\n  \n\nfull_join%>% # dim # 5776\n  relocate(call_sign,facility_id,lms_application_id)%>%\n  distinct()%>%dim # 5776\n  # DataExplorer::profile_missing()\n  \n  \nfull_join %>%head\n\n\nfull_join%>%names\n\n\nfull_join%>%head\n\n\nfull_join1<- full_join%>%\n  mutate(format=str_to_title(format)) # %>%\n    #filter(format==\"Alternative Rock\")\n  # count(format,sort=T)\nfull_join1%>%dim\n\n\nfull_join1%>%\n  group_by(state) %>%\n  mutate()\n\n\nfull_join_sf <- full_join1 %>%\n   st_as_sf(coords=c(13,12),crs=4326) \n\n\nfull_join_sf_centr <- full_join1 %>%\n  group_by(city,format)%>%\n  summarize(site_lat=mean(range(site_lat)),site_long=mean(range(site_long)),.groups=\"drop\")%>% \n  ungroup() %>%\n   st_as_sf(coords=c(4,3),crs=4326) \n\n\nggplot(world) +\n    geom_sf(fill=NA) +\n  geom_sf_text(data = full_join_sf_centr,\n            aes(label=format),\n            #label.padding = unit(0.01, \"lines\"),\n            size=2,\n            inherit.aes = F) +\n    geom_sf(data = full_join_sf, \n            aes(color=factor(format)),\n            shape=21,stroke=0.01,\n            #shape=\".\",\n            alpha=0.2,\n            inherit.aes = F) +\n    coord_sf(xlim = c(-171.73031,-25),ylim = c(10,71.29194))+\n      theme_classic() +\n  theme(axis.line = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank())\n\n\nggsave(\"test.png\")"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w19_NYTimes_best_sellers/w19_NYTimes_best_sellers.html",
    "href": "tidytuesday/cases2022/posts2022/w19_NYTimes_best_sellers/w19_NYTimes_best_sellers.html",
    "title": "NYTimes best sellers",
    "section": "",
    "text": "Housekeeping: clean the space before to start and set the working dorectory to your .R file source\nrm(list=ls()) setwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\n# load the libraries\nlibrary(tidyverse)\nlibrary(forcats)\nlibrary(ggridges)\nlibrary(showtext)\nlibrary(cowplot)\n\n# set the font\nshowtext_auto(enable = T)\nsysfonts::font_families_google()\nsysfonts::font_add_google(\"Abril Fatface\", \"Abril Fatface\")\n\n\n# load data\nnyt_titles <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_titles.tsv')\nnyt_full <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_full.tsv')\n\n# look at the data\nnyt_titles%>%head\nnyt_full%>%head\n\n# a bit of wrangling\ndf <- nyt_titles %>%\n  full_join(nyt_full,by=c(\"year\",\"title\",\"author\"))\n\ndf2 <- df %>%\n  mutate(year_fct = fct_rev(as.factor(year))) %>% # \n  filter(!str_detect(author,\"Edited|edited|created|compiled|Completed|NO AUTHOR| and |Illustrated| with |translated\"))%>%\n  mutate(author=gsub(\"! by |? by |?by |\\\\?|\\\"|, Jr| Jr|\\\\.$| writing as.*\",\"\",author)) %>%\n  group_by(author) %>%\n  summarise(year_fct,\n            avg_rank=mean(rank),\n            scale=scale(rank,center = F),\n            scale_pct=scale/sum(scale),\n            avg_rank_pct=avg_rank/sum(avg_rank),\n            id=n()) %>%\n  ungroup()\n\n# set the dataset for the geom_text labels\nside_labels <- df2 %>%\n  group_by(year_fct,author)%>%\n  summarize(top=max(scale),scale_pct=mean(scale_pct))%>%\n  distinct()%>%\n  filter(top==max(top))%>%\n  mutate(lab=paste(author,\"in\",year_fct),\n         lab2=paste(author,\"ranked\",round(top),\"on avg in\",year_fct))%>%\n  ungroup() %>%\n  select(year_fct,lab,scale_pct)%>%\n  arrange(desc(year_fct))\n\n\n\n# make the plot\ndf2 %>% \n  # reorder different authors within the same year along with the percentages values\n  # this will reorder the density courves for each year \n  mutate(author=fct_reorder(author,scale_pct)) %>%\n  ggplot(aes(x=scale_pct, y=year_fct)) +\n  geom_density_ridges(aes(fill=author),\n                      show.legend = F,\n                      size=0.3,\n                      scale=1,\n                      alpha = .8, \n                      color = \"grey25\", \n                      from = 0, to = 1) +\n  geom_label(data=side_labels,\n             aes(x=0.5,y=year_fct,label=lab),\n             label.padding = unit(0.05, \"lines\"),\n             label.r = unit(0.5, \"lines\"),\n             label.size = 0,\n             family=\"Abril Fatface\",size=10,\n             inherit.aes = F,hjust=0,vjust=0)+\n  scale_y_discrete(expand = c(0, 0)) +\n  scale_x_continuous(expand = expansion(mult=c(0,-0.35),\n                                        add=c(0, -0.02))) +\n  scale_fill_grey(\n    start = 0.2,\n    end = 0.9,\n    na.value = \"red\",\n    aesthetics = \"fill\") +\n  labs(title=\"The New York Times\",\n       subtitle=\"Solo author ranks from 1931 to 2020\",\n       caption=\"DataSource: Post45 Data Collective NYT HARDCOVER FICTION BESTSELLERS\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n       x=\"Rank density\",y=\"Year\") +\n  coord_cartesian(clip = \"off\") +\n  theme_ridges(grid = FALSE)+\n  theme(text = element_text(family=\"Abril Fatface\",size=45),\n        plot.title = element_text(size=90),\n        plot.caption = element_text(hjust=1),\n        axis.text.y = element_text(size=30,hjust=0),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        plot.background = element_rect(color=\"grey90\",fill=\"grey90\"),\n        panel.background = element_rect(color=\"grey90\",fill=\"grey90\"))\n\n# save first partial version\nggsave(\"partial.png\",\n       dpi=320,\n       height = 14,\n       width =  10)\n\n# frame the graphics and add a notation with {cowplot}\n# it helps reducing time when setting the text position.\nggdraw()+\n  draw_image(\"partial.png\") +\n  draw_label(\"How to read it: \nOn average, authors rank 7.6 based on weekly frequencies on NYT, \nwhich corresponds to 3.4% of the total scaled avg-ranks.\nEach year shown in the graph represents the density curve of the \nranks for the NYT's solo authors in that year.\nThe density curves are ordered by total percentage of scaled ranks.\nOn the right is the author with the avg-weekly highest rank for the year.\",\n             lineheight = 0.25,hjust=0,\n              x=0.04,y=0.05,fontfamily=\"Abril Fatface\",size=25)\n\n# save the final version\nggsave(\"w19_nyt.png\",\n       dpi=320,\n       height = 12,\n       width =  9)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w18_SolarWind_utilities/w18_SolarWind_utilities.html",
    "href": "tidytuesday/cases2022/posts2022/w18_SolarWind_utilities/w18_SolarWind_utilities.html",
    "title": "SolarWind utilities",
    "section": "",
    "text": "library(tidyverse)\n\n\nwind <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-03/wind.csv')\nsolar <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-03/solar.csv')\n\n\n\ncum_solar <- solar%>% # DataExplorer::profile_missing()\n  group_by(date)%>%\n  summarize(tot_solar_mwh=sum(solar_mwh),\n            tot_solar_capacity=sum(solar_capacity),.groups=\"drop\")%>%\n  ungroup() %>%\n  mutate(cum_solar_mwh=cumsum(tot_solar_mwh)) \n\n\ncum_wind <- wind%>% # DataExplorer::profile_missing()\n  group_by(date)%>%\n  summarize(tot_wind_mwh=sum(wind_mwh),\n            tot_wind_capacity=sum(wind_capacity),.groups=\"drop\")%>%\n  ungroup() %>%\n  mutate(cum_wind_mwh=cumsum(tot_wind_mwh)) \n\n\ncum_solar%>%#summary()\n  ggplot(aes(x=date,y=tot_solar_mwh))+\n  geomtextpath::geom_textline(aes(y=cum_solar_mwh),col=\"red\",label=\"Solar\",hjust=1,size=6,family = \"sans\") +\n  geomtextpath::geom_textline(data=cum_wind, aes(y=cum_wind_mwh),inherit.aes = T,label=\"Wind\",hjust=1,size=6,family = \"sans\")+\n  labs(title=\"Projected cumulative price\",y=\"Price ($/MWh)\",x=\"\",\n       caption=\"#TidyTuesday w18 Solar/Wind | DataSource: Berkeley Lab\\nPrices are in $/MWh from 2009 to 2021 | DataViz: Federica Gazzelloni (@fgazzelloni)\") +\n  ggthemes::theme_wsj()+\n  theme(panel.grid = element_line(size=0.3),\n        plot.caption = element_text(size=8,hjust=0))\n\nggsave(\"w18_solar_wind.png\",\n       dpi=320,\n       width = 8,\n       height = 5)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w6_Tuskegee_Airmen/w6_Tuskegee_Airmen.html",
    "href": "tidytuesday/cases2022/posts2022/w6_Tuskegee_Airmen/w6_Tuskegee_Airmen.html",
    "title": "Tuskegee Airmen",
    "section": "",
    "text": "TidyTuesday week 6 2022\n\n\noriginal Dubois collection:\n\n\nhttps://www.loc.gov/collections/african-american-photographs-1900-paris-exposition/?sb=shelf-id_desc&sp=1&st=grid\n\n# load data------------\nlibrary(tidyverse)\nairmen <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-08/airmen.csv')\n\n\n# data wrangling--------\ndf <-airmen%>%\n  select(name,graduation_date,graduated_from,\n         pilot_type,\n         military_hometown_of_record,state,\n         number_of_aerial_victory_credits)%>%\n  mutate(pilot_type=str_replace_all(pilot_type,\"Liaison\",\"Liason\"))%>%\n  filter(!is.na(graduation_date),!is.na(state))%>%\n  arrange(desc(graduation_date))%>%\n  mutate(id=row_number())%>%\n  relocate(id)\n\n# 48 states abbr to be chacked\ndf%>%count(state)\n\ndf%>%mutate(year=lubridate::year(graduation_date))%>%count(year)\n\n# map data -----\nus_states_df <-\n  df%>%\n  mutate(state_name=usdata::abbr2state(state),\n         .after=state)%>% \n  filter(!is.na(state_name)) %>%   # 41 us states selected\n  mutate(state_name = tolower(state_name)) \n\nmy_states<-\n  us_states_df%>%\n  count(state_name)%>%\n  select(-n)%>%unlist()\n\n# US states coordinates \nstates<- map_data(\"state\")\n\nmy_states_coords<- \n  states%>%\n  filter(region%in%my_states)%>%\n  left_join(us_states_df,by=c(\"region\"=\"state_name\"))%>%\n  mutate(number_of_aerial_victory_credits=ifelse(number_of_aerial_victory_credits==1.5,\n                                                 2,number_of_aerial_victory_credits))\n\n# World coordinates\nworld<-map_data(map = \"world\") %>%\n  filter(!region==\"Antarctica\")\n\n\n# alabama $ french morocco\nal_frmo<-data.frame(region=c(\"french morocco\",\"alabama\"),\n                    lat=c(30.427755,32.318230),\n                    long=c(-9.598107,-86.902298))\n\n\n\n# dubois colors -------\nstates_palette<-colorRampPalette(c(\"#654321\",\"#d2b48c\",\"#ffd700\",\"#ffc0cb\",\"#dc143c\",\"#00aa00\",\"#4682b4\"))(5)\n\n# fonts---------\nlibrary(extrafont)\nlibrary(showtext)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nlibrary(sysfonts)\n#font_families_google()\nfont_add_google(name=\"Barlow Condensed\",family=\"dubois\")\n\n\n# make the map plots ---------------------\n\nworld_west <-\n  ggplot() +\n  geom_polygon(data=world,aes(x=long,y=lat,group=group),\n               fill=\"wheat2\",color=\"#654321\") +\n  geom_polygon(data = states,\n               aes(x = long, y = lat, group = group),\n               fill=\"wheat2\",color=\"#654321\",size=0.1) +\n    \n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==1),\n                 aes(x = long, y = lat, group = group,\n                     fill=factor(number_of_aerial_victory_credits)),\n                 color=\"#654321\",size=0.05) +\n   \n   geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==2),\n                 aes(x = long, y = lat, group = group,\n                     fill=factor(number_of_aerial_victory_credits)),\n                 color=\"#654321\",size=0.05) +\n    \n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==3),\n                 aes(x = long, y = lat, group = group,\n                     fill=factor(number_of_aerial_victory_credits)),\n                 color=\"#654321\",size=0.05)+  \n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==4),\n                 aes(x = long, y = lat, group = group,\n                     fill=factor(number_of_aerial_victory_credits)),\n                 color=\"#654321\",size=0.05)+\n  \n  geom_point(data=al_frmo,aes(x=long,y=lat),color=\"red\")+\n  \n  scale_fill_manual(values=states_palette)+\n  coord_map(\"ortho\", orientation = c(3.849945, -103.525750, 0)) +\n\n  labs(title=\" \\n \\n \",\n       subtile=\" \\n \\n \",\n       x=\"\",y=\"\",fill=\"Aerial victories\") +\n  theme_void() +\n  theme(legend.position = c(0.5,1.2),\n        legend.direction = \"horizontal\")\n\n\nworld_est <-  \n  ggplot() +\n  geom_polygon(data=world,aes(x=long,y=lat,group=group),\n               fill=\"wheat2\",color=\"#654321\") +\n  geom_polygon(data = states,\n               aes(x = long, y = lat, group = group),\n               fill=\"wheat2\",color=\"#654321\",size=0.1) +\n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==1),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05)+\n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==2),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05)+\n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==3),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05)+  \n  geom_polygon(data = subset(my_states_coords,number_of_aerial_victory_credits==4),\n               aes(x = long, y = lat, group = group,\n                   fill=factor(number_of_aerial_victory_credits)),\n               color=\"#654321\",size=0.05) + \n\n  geom_point(data=al_frmo,aes(x=long,y=lat),color=\"red\")+\n  \n  scale_fill_manual(values=states_palette)+\n  coord_map(\"ortho\", orientation = c(10.050474, 55.740732,0)) + #9.982182, 49.595135, 0)) + \n  labs(title=\" \\n \\n \",subtile=\" \\n \\n \",x=\"\",y=\"\",color=\"\") +\n  theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n# draw curved text-----------------------\nt<-2*pi\n\ndf_text_left <- \n  data.frame(x = cos(t),\n             y = sin(t),\n             xend = cos(t + 1.8),\n             yend = sin(t + 1.8))\n\np <-ggplot(df_text_left) +\n  geomtextpath::geom_textcurve(aes(x, y, xend = xend, yend = yend),\n                               label = c(\"Afican-American pilots victory\"),\n                               curvature = 0.2, vjust = 1) +\n  coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.2))\n\n\nq <-ggplot(df_text_left) +\n  geomtextpath::geom_textcurve(aes(-x, y, xend =- xend, yend = yend),\n                               label = c(\"Army Air Force during WWII\"),\n                               curvature = -0.2, vjust = -0) +\n  coord_equal(xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.2))\n\nlibrary(patchwork)\ntext_curved <-(p+q)\ntext_curved <- text_curved & theme_void()\n\n# draw circle and a curve-----------\ng <- grid::circleGrob(gp = grid::gpar(fill = \"#baa388\",color=\"#654321\",size=0.5))\n\n\n# final touches----------\nlibrary(cowplot)\nfinal_plot<-ggdraw()+\n  draw_image(\"data/2022/w6_airforce/duboisbg.jpeg\",\n            scale = 1.6)+\n  draw_grob(g, scale=0.542,x=-0.223,y=-0.1) +\n  draw_grob(g, scale=0.542,x=0.229,y=-0.1) +\n  draw_plot(world_west,scale=0.6,x=-0.229,y=-0.07)+\n  draw_plot(world_est,scale=0.6,x=0.229,y=-0.07) +\n  draw_image(\"https://tile.loc.gov/storage-services/service/pnp/ppmsca/33800/33863r.jpg\",\n             scale=0.3,x=0.4,y=0.35) +\n  draw_label(\"Tuskegee Airmen: Aerial Victories\\nAir Force Historical Research Agency\\nGraduation 1942 - 1948\", \n             fontfamily=\"dubois\",color=\"#291c10\",\n             x=0.5,y=0.9,size=25,fontface = \"bold\")+\n  draw_label(\"DataSource: Tuskegee Airmen | Viz @fgazzelloni \\n #DuBoisChallenge | #TidyTuesday 2022/06\", \n             fontfamily=\"dubois\",color=\"#291c10\",\n             x=0.5,y=0.12,size=14,fontface = \"bold\")+\n  draw_plot(text_curved,x=0,y=0.05,scale = 0.5)+\n  draw_label(\"This paper focus on their aerial victory credits. \n             The most famous of the 332d Fighter Group commanders was Col.Benjamin O. Davis,Jr.\n             The 99th Fighter Squadron deployed from Tuskegee, Alabama, to French Morocco in April 1943.\",\n             fontfamily=\"dubois\",color=\"#291c10\",\n             x=0.5,y=0.04,size=14,fontface = \"bold\")\n  \n\n# save the plot--------\nragg::agg_png(\"data/2022/w6_airforce/w6_airforce6.png\",\n              res = 320, width = 12, height = 10, units = \"in\")\nfinal_plot\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w25_Juneteenth/w25_Juneteenth.html",
    "href": "tidytuesday/cases2022/posts2022/w25_Juneteenth/w25_Juneteenth.html",
    "title": "Juneteenth",
    "section": "",
    "text": "library(tidyverse)\nlibrary(showtext)\nfont_add(family = \"Public Sans Thin\",\n         regular = \"PublicSans-Thin.ttf\")\n  \nfont_add(family=\"PublicSans-Medium\",\n         regular=\"PublicSans-Medium.ttf\")\n  \nshowtext_auto()\n  #showtext::showtext_opts(dpi=320)\n\n\n colors<- c(\"#dbcab9\", #warm-gre,\n   \"#cf2e49\", #red\n   \"#E97E7E\", #pale-red\n   \"#efb441\", #orange\n   \"#5f6faa\", #blue\n   \"#5f705d\", #dark-green\n   \"#d4c0a1\", #light-brown\n   \"#6c452f\", #dark-brown\n   \"black\")\n\n\ncensus <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-16/census.csv')\n\n\ndf_census<-census %>% #count(year)\n  filter(!region==\"USA Total\") %>%\n  mutate(division=ifelse(is.na(division),\"Other\",division)) %>%\n  pivot_longer(cols = c(-region,-division,-year),names_to=\"names\",values_to=\"values\") %>%\n  mutate(names = str_to_title(names),\n         names = gsub(\"_\",\" \",names)) %>%\n  filter(!values==0) %>%arrange(values) %>% \n  group_by(year)%>%\n  mutate(avg_values=mean(values)) %>%\n  ungroup() %>% \n  mutate(division=reorder(factor(division),values),\n         region=reorder(factor(region),values))  \n  \ndf_census\n\n\nblack_free<- df_census %>% \n  filter(names==\"Black free\") %>%\n  group_by(year)%>%\n  summarize(tot=sum(values)) %>%\n  ungroup() %>%\nmutate(pct=round(tot/sum(tot)*100,2),\n       year=as.factor(year)) \n\nblack_slaves<- df_census %>% #count(names)\n  filter(names==\"Black slaves\") %>%\n  group_by(year)%>%\n  summarize(tot=sum(values)) %>%\n  ungroup() %>%\nmutate(pct=round(tot/sum(tot)*100,2),\n       year=as.factor(year)) \n\nblack<- df_census %>% #count(names)\n  filter(names==\"Black\") %>%\n  group_by(year)%>%\n  summarize(tot=sum(values)) %>%\n  ungroup() %>%\nmutate(pct=round(tot/sum(tot)*100,2),\n       year=as.factor(year))\n\n\nbar_plot <- ggplot()+\n  aes(x=desc(year), y=pct, fill=pct) +\n  geom_bar(data=black_free,width = 4, stat = \"identity\",color=\"black\",fill=\"#5f705d\",position=\"identity\") +\n  geom_bar(data=black_slaves,width = 0.5, stat = \"identity\",color=\"black\",fill=\"#E97E7E\",position=\"identity\") +\n  geom_bar(data=black,width = 0.2, stat = \"identity\",color=\"black\",fill=\"#efb441\",position=\"identity\") +\n  scale_y_continuous(expand = expansion(mult=c(0,1),add=c(0,0)))+\n  #scale_x_discrete(expand = expansion(mult=c(5,0),add=c(0,0)))\n  coord_polar(\"y\", start=-89.55, clip = 'off') +\n  theme_void()+\n  theme(plot.title = element_text(hjust=0.5),\n        plot.subtitle = element_text(hjust=0.5),\n        plot.background = element_rect(fill=\"#d4c0a1\",color=\"#d4c0a1\"),\n        panel.background = element_rect(fill=\"#d4c0a1\",color=\"#d4c0a1\"))\n\nbar_plot\n\n\nlibrary(cowplot)\n ggdraw()+\n   #draw_plot(bar_plot)+\n   draw_image(\"bar_plot.png\",scale=2,x=0.1,y=-0.2)+\n   draw_label(label = \"1790 1800 1810 1820 1830 1840 1850 1860 1870\",\n              x=0.35,y=0.25,size=12)+\n   draw_label(\"NEGROE status transition\",x=0.5,y=0.9,fontfamily = \"PublicSans-Medium\")+\n   draw_label(\"ABRAHAM LINCOLN: “ON THE 1ST DAY OF JANUARY, A.D. 1863, ALL PERSONS HELD AS SLAVES WITHIN ANY STATE...\n              IN REBELLION AGAINST THE U.S. SHALL BE THEN, THENCEFORWARD AND FOREVER FREE”\",\n              x=0.1,y=0.8,hjust=0,\n              size=8)+\n   draw_label(\"How to read it:\\nInspired by #DuboisChallenge style.\\nEach bar represent a year. Each color represent a class: black slaves (dark green), black free (light red), and black (orange)\\nThe last bar (1870) clearly shows the highest percentage of free slaves, from that day on.\", x=0.1,y=0.1,hjust=0,size=7.5,fontfamily = \"Public Sans Thin\")+\n   draw_label(\"DataSource: #TidyTuesday 2022 week25 Juneteenth | US Census's Archives | DataViz: Federica Gazzelloni (@fgazzelloni)\\n\",x=0.5,y=0.01,size=7)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w34_CHIP_dataset/w34_CHIP_dataset.html",
    "href": "tidytuesday/cases2022/posts2022/w34_CHIP_dataset/w34_CHIP_dataset.html",
    "title": "CHIP dataset",
    "section": "",
    "text": "# Load packages\nlibrary(tidyverse)\nlibrary(cowplot)\nlibrary(showtext)\nshowtext_auto()\n\n# Add fonts from Google.\nfont_add_google(\"Roboto Mono\", \"Roboto Mono\")\nfont_add_google(\"Open Sans\", \"Open Sans\")\nfont_add_google(\"Special Elite\", \"Special Elite\")\n\n# Set ggplot theme\ntheme_set(theme_minimal(base_family = \"Roboto Mono\"))\ntheme_update(text=element_text(size=14),\n  plot.background = element_rect(fill = \"#fafaf5\", color = \"#fafaf5\"),\n  panel.background = element_rect(fill = NA, color = NA),\n  panel.border = element_rect(fill = NA, color = NA),\n  panel.grid.major.x = element_blank(),\n  panel.grid.minor = element_blank(),\n  axis.text.x = element_blank(),\n  axis.text.y = element_text(size = 10),\n  axis.ticks = element_blank(),\n  axis.title.y = element_text(size = 13, margin = margin(r = 10)),\n  legend.title = element_text(size = 9),\n  plot.caption = element_text(\n    family = \"Special Elite\",\n    size = 13,\n    color = \"grey60\",\n    face = \"bold\",\n    hjust = .5,\n    margin = margin(5, 0, 20, 0)\n  ),\n  plot.margin = margin(10, 25, 10, 25)\n)\n\n# Turn on showtext\nshowtext_auto()\n\nsetwd(\"~/Documents/R/R_general_resources/TidyTuesday/data/2022/w34_chips\")\ndata_raw <- read_csv(\"data_raw/chip_dataset.csv\")\n\nlibrary(slider)\n\ndata_raw_1 <- data_raw%>%\n  janitor::clean_names()%>%\n  mutate(release_date=as.Date(release_date,\"%Y-%m-%d\"),\n         year=lubridate::year(release_date),.after=release_date) %>%\n  filter(!is.na(year),\n         vendor%in%c(\"AMD\",\"Intel\")) %>%\n  select(release_date,year,type,vendor,product,transistors_million,freq_m_hz) %>%\n  group_by(year) %>%\n  mutate(transistors_million=ifelse(is.na(transistors_million),\n                                    mean(transistors_million,na.rm = T),\n                                    transistors_million)) %>%\n  ungroup() %>%\n  arrange(release_date)\n\n\nmean_transistors_million <- function(df) {\n  summarize(df, \n            date = min(release_date), \n            mean_transistors_million = mean(transistors_million), \n            n = n())\n}\n\n\ndata_cpu <- data_raw_1 %>%\n  filter(type==\"CPU\")\ndata_gpu <- data_raw_1 %>%\n  filter(type==\"GPU\")\n\n\nnew_cpu<- slide_period_dfr(data_cpu, \n                           data_cpu$release_date, \n                           .period=\"year\", \n                           .every = 3, \n                           mean_transistors_million) %>%\n  mutate(type=\"CPU\")\nnew_gpu<- slide_period_dfr(data_gpu, \n                           data_gpu$release_date, \n                           \"year\", \n                           .every = 2, \n                           mean_transistors_million) %>%\n  mutate(type=\"GPU\")\n\n\nnew_df <- rbind(new_cpu,new_gpu)\n\n\nlogo <- png::readPNG(\"logo.png\")\n\n\ntitle=\"Twenty years observation of CPU and GPU transistors\"\nsubtitle = \"Tendency to increase as stated by the Moore's law confirmed the number of transistors doubles about every two years.\nCPU is considered every 3 years while GPU every 2 years. Comparisons between vendors restrict to AMD and Intel.\"\n\n\n\np <- new_df %>%\n  mutate(year=lubridate::year(date),\n         type=ifelse(type==\"CPU\",\"CPU every 3 Years\",\"GPU every 2 Years\")) %>%\n  arrange(date) %>%\n  group_by(year) %>%\n  mutate(max= max(mean_transistors_million)) %>%\n  ggplot(aes(x = year, y = mean_transistors_million,\n             color=type)) +\n  geom_line(size = 1.5, alpha = 0.8)+\n  geom_point(aes(size=n)) +\n  scale_color_manual(\n  values = c(\"#486090\", \"#D7BFA6\"))+\n  labs(y=\"Average n.Transistors (in millions)\",\n       x=\"Year\",\n       color=\"Type\",\n       size=\"Frequency by product\",\n       title=title,\n       subtitle=subtitle,\n       caption=\"DataSource: #TidyTuesday 2022 week 34 Chips | DavaViz: Federica Gazzelloni (@fgazzelloni)\")+\n  theme(axis.text.x.bottom = element_text(),\n        plot.subtitle = element_text(),\n        plot.title = element_text(size = 25,face=\"bold\"))\n\n\nggdraw(p) +\ndraw_image(logo, x = -.35, y = -.25, scale = .12)\n\nggsave(\"w34_chips.png\",\nwidth = 15, height = 9, device = png)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w43_Great_British_Bakeoff/w43_Great_British_Bakeoff.html",
    "href": "tidytuesday/cases2022/posts2022/w43_Great_British_Bakeoff/w43_Great_British_Bakeoff.html",
    "title": "Great British Bakeoff",
    "section": "",
    "text": "library(tidyverse)\nbakers <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-10-25/bakers.csv')\nbakers%>%names\n\n\nbakers%>%View\n\n\n# install.packages(\"bakeoff\")\nlibrary(bakeoff)\nbakeoff::bakeoff_palette_names()\n\n\ngbb <- bakers%>%\n  select(hometown,age,occupation,percent_episodes_appeared)%>%\n  group_by(hometown,occupation)%>%\n  summarise_all(.funs=mean)%>%\n  ungroup()\ngbb\n\n\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\n\n# set the fonts\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name = \"Sen\",family=\"Sen\")\n\n\ngbb %>% #pull(age)%>%summary()\n   #filter(str_detect(occupation,\"student|Student\")) # %>% #count(occupation)\n  mutate(occupation=case_when(str_detect(occupation,\"Retired|retired\") ~ \"Retired\",\n                              str_detect(occupation,\"Fashion designer|Fashion Designer\") ~ \"Fashion Designer\",\n                              str_detect(occupation,\"IT Manager|IT programme manager\") ~ \"IT Manager\",\n                              str_detect(occupation,\"student|Student\") ~ \"Student\",\n                              TRUE ~ occupation)) %>% # count(occupation) %>%View\n  #filter(occupation==\"Student\") %>%\n  ggplot(aes(x=fct_reorder(occupation,age),y=age))+\n  #geom_col()+\n  geom_boxplot(aes(fill=occupation),show.legend = F)+\n  scale_y_continuous(expand = c(0,0))+\n  scale_x_discrete(expand = c(0,0)) +\n  coord_flip(ylim=c(15,75))+\n  scale_color_manual(values = bakeoff_colors())+\n  #viridis::scale_fill_viridis(discrete = T)+\n  labs(title=\"Great British Bakeoff Occupations\",\n       subtitle=\"mean age variation\",\n       caption=\"DataSource from the bakeoff package from Alison Hill, Chester Ismay, and Richard Iannone.\\n\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n       y=\"Age\",x=\"Occupation\")+\n  theme(text=element_text(family=\"Sen\",face=\"bold\",color=\"#1a1917\"),\n        plot.title.position = \"plot\",\n        plot.title = element_text(hjust = 0.5),\n        plot.subtitle = element_text(size=8,hjust = 0.2),\n        plot.caption = element_text(size=6),\n        axis.text.y = element_text(size=3),\n        panel.grid.major.x = element_line(color=\"#fa7268\"),\n        panel.grid.major.y = element_line(color=\"#fa7268\",size=0.1),\n        axis.ticks.x = element_line(color=\"#fa7268\"),\n        axis.ticks.y = element_line(color=\"#fa7268\"),\n        axis.line.x = element_line(color=\"#fa7268\"))\n\n\nggsave(\"w43_gbb.png\",dpi=200)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w1_Bring_your_own_data_from_2022/w1_Bring_your_own_data_from_2022.html",
    "href": "tidytuesday/cases2022/posts2022/w1_Bring_your_own_data_from_2022/w1_Bring_your_own_data_from_2022.html",
    "title": "Bring your own data from 2022",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\neu_data <- read_csv(\"/Users/federica/Documents/R/GBD/Comunicable_diseases/Covid19/variants/data.csv\")\neu_data2 <- read_csv(\"/Users/federica/Documents/R/GBD/Comunicable_diseases/Covid19/variants/data2.csv\")\n\n\neu_data%>%\n  select(country,variant)%>%\n  filter(str_detect(variant,\"B.1.1.\"))%>% #variant B.1.1.529\n  count(variant)\n\n\ncountrySubmissionCount <- read_csv(\"/Users/federica/Documents/R/GBD/Comunicable_diseases/Covid19/variants/countrySubmissionCount.csv\")\ncountrySubmissionCount2 <- read_csv(\"/Users/federica/Documents/R/GBD/Comunicable_diseases/Covid19/variants/countrySubmissionCount2.csv\")\n\n# map data\nlibrary(sf)\nworld <- rnaturalearth::ne_countries(scale=110,returnclass = \"sf\")\nworld<-filter(world,!continent==\"Antarctica\")\n\n\n# December 2021 data\nnew_data<- countrySubmissionCount%>%\n  mutate(variant=\"B.1.1.529\")%>%\n  rename(percent_variant=\"%GR/484A (B.1.1.529) in past 4 weeks\",\n         number_detections_variant=\"Total #GR/484A (B.1.1.529)\")%>%\n  mutate(year_week=\"2021-46\")%>%\n  janitor::clean_names()%>%\n  select(country,variant,percent_variant,year_week,number_detections_variant)\n\nfull_data <- eu_data%>%#count(country)%>%View()\n  full_join(new_data,by=c(\"country\",\"variant\",\"percent_variant\",\"year_week\",\"number_detections_variant\"))%>%\n  filter(str_detect(variant,\"B.1.1.5\"))%>%\n  filter(number_detections_variant>0)\n\nfull_data_geo<- full_data%>%\n  inner_join(world,by=c(\"country\"=\"name\"))\n\n# January 2022 data\nnew_data2<- countrySubmissionCount2%>%\n  mutate(variant=\"B.1.1.529\")%>%\n  rename(percent_variant=\"%Omicron GRA (B.1.1.529+BA.*) in past 4 weeks\",\n         number_detections_variant= \"Total #Omicron GRA (B.1.1.529+BA.*)\")%>%\n  mutate(percent_variant=gsub(\"%\",\"\",percent_variant),\n         percent_variant=as.double(percent_variant))%>%\n  mutate(year_week=\"2022-01\")%>%\n  janitor::clean_names()%>%\n  select(country,variant,percent_variant,year_week,number_detections_variant)\n\nfull_data2 <- eu_data2%>%#names()\n  select(country,year_week,new_cases,variant,percent_variant,number_detections_variant)%>%\n  full_join(new_data2,by=c(\"country\",\"variant\",\"percent_variant\",\"year_week\",\"number_detections_variant\"))%>%\n  filter(str_detect(variant,\"B.1.1.5\"))%>%\n  filter(number_detections_variant>0)\n\nfull_data_geo2<- full_data2%>%\n  inner_join(world,by=c(\"country\"=\"name\"))\n\n\n\ndec<-new_data%>%group_by(country)%>%summarise(median_dec=median(percent_variant))\n\njan<-new_data2%>%group_by(country)%>%summarise(median_jan=median(percent_variant))\n\nmerged<-dec%>%\n  merge(jan,by=\"country\")\n\ncountries<-merged%>%count(country)%>%select(-n)\n\n# libraries for fonts\nlibrary(ggCyberPunk)\nggCyberPunk::import_aldrich()\n\nlibrary(extrafont)\nlibrary(showtext)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=110)\nlibrary(sysfonts)\nsysfonts::font_families_google()\nfont_add_google(name =\"Texturina\" ,family = \"my_font\")\nfont_add_google(name =\"Suravaram\" ,family = \"my_font2\")\n\nfamily<-\"my_font\"\nfamily2<-\"my_font2\"\n\nlibrary(ggh4x)\nbarplot<-merged%>%\n  pivot_longer(cols = 2:3,names_to=\"names\",values_to=\"values\")%>%\n  ggplot()+\n  geom_col(aes(x=fct_reorder(country,-values),values,fill=names),\n           width = 0.5)+\n  scale_fill_cyberpunk(palette= \"laser sword\",reverse=F,\n                       labels=c(\"December\",\"January\"),\n                       name=\"\")+\n  scale_x_discrete(expand = expansion(mult = c(0,0)))+\n  # from: https://cran.r-project.org/web/packages/ggh4x/vignettes/PositionGuides.html\n  guides(y = guide_axis_manual( label_size = c(12, 9),label_hjust=1))+\n  coord_flip()+\n  theme_void()+\n  theme(text = element_text(family=family,size=14,color = \"#FFE1FF\"),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_text(family=family2,\n                                   size=8,color = \"#FFE1FF\",hjust = 0),\n        panel.grid = element_blank(),\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        legend.position = c(0.7,0.5),\n        legend.key.size = unit(0.5, 'cm'), #change legend key size\n        legend.key.height = unit(0.5, 'cm'), #change legend key height\n        legend.key.width = unit(0.5, 'cm'), #change legend key width\n        legend.text = element_text(size=10))\n\n\n\nplot <- ggplot(world)+\n  geom_sf(aes(geometry=geometry),fill=\"white\",size=0.01)+\n  geom_sf(data=full_data_geo,\n          mapping=aes(geometry=geometry,\n                      fill=percent_variant,\n                      color=percent_variant),\n          size=0.01)+\n  scale_fill_cyberpunk(palette = \"laser sword\",\n                       reverse=F,discrete=F,\n                       name=\"Percent Variant\",\n                       labels=c(\"<10%\",\"20%\",\"40%\",\"60%\"))+\n  coord_sf()+\n  labs(title=\"How fast is the New OMICRON variant spreading in the World?\")+\n  guides(color=\"none\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family=family,size=14,color = \"#FFE1FF\"),\n        plot.title = element_text(vjust=-1.5,size=12),\n        plot.title.position = \"panel\", \n        plot.caption = element_text(vjust=8),\n        legend.background = element_blank(),\n        legend.position = \"none\")\n\n\nplot2 <- ggplot(world)+\n  geom_sf(aes(geometry=geometry),fill=\"white\",size=0.01)+\n  geom_sf(data=full_data_geo2,\n          mapping=aes(geometry=geometry,\n          color=percent_variant,fill=percent_variant),size=0.1)+ \n  scale_fill_cyberpunk(palette= \"laser sword\",\n                       discrete = F,reverse = F,\n                       labels=c(\">0\",\"25%\",\"50%\",\"75%\",\"100%\"),\n                       name=\"\")+\n  coord_sf()+\n  guides(color=\"none\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(family=family,size=14,color=\"#FFE1FF\"),\n        legend.direction = \"horizontal\",\n        legend.background = element_blank(),\n        legend.position =c(-0.35,0.5),\n        legend.justification = \"center\",\n        legend.text.align = 0.5,\n        legend.title = element_text(face = \"bold\",size=14),\n        legend.key.size = unit(0.5, 'cm'), #change legend key size\n        legend.key.height = unit(0.5, 'cm'), #change legend key height\n        legend.key.width = unit(0.5, 'cm'), #change legend key width\n        legend.text = element_text(size=10))\n\n\n\nlibrary(cowplot)\n\nfile<-\"data/2022/w1_your_own_data/your_own_data.png\"\nragg::agg_png(file,\n              res = 320, \n              width = 1200, \n              height = 675, \n              units = \"px\",\n              background = \"#5e3e4e\",#\"#4287f5\",\n              scaling = 0.5)\n\nggdraw()+\n  draw_label(\"Omicron genome sequences with unprecedented speed - one month of infection\",\n             x=0.5,y=0.97,fontfamily = family,size=20,\n             color=\"#eb3471\")+\n  draw_label(\"Omicron genome sequences with unprecedented speed - one month of infection\",\n             x=0.5,y=0.975,fontfamily = family,size=21,\n             color=\"#FFE1FF\")+\n  draw_plot(plot,x=0.18,y=0.2,scale=0.65)+\n  draw_plot(plot2,x=0.18,y=-0.25,scale=0.65)+\n  draw_label(\"Percent Variant (median values)\",\n             x=0.15,y=0.88,fontfamily = family,size=12,\n             color=\"#FFE1FF\")+\n  draw_plot(barplot,x=-0.28,y=0.15,scale=0.4)+\n  draw_label(\"Datasource: ECDC & GISAID | Map: Federica Gazzelloni\",\n             x=0.5,y=0.025,fontfamily = family,size=11.5,\n             color=\"#FFE1FF\")+\n  draw_label(\"Date: December 1st 2021\",x=0.98,y=0.73,size=10,angle=-90,\n             color=\"#FFE1FF\",fontfamily = family)+\n  draw_label(\"Date: January 7th 2022\",x=0.98,y=0.3,size=10,angle=-90,\n             color=\"#FFE1FF\",fontfamily = family)+\n  draw_label(\"Percent Variant\",x=0.15,y=0.33,size=12,color=\"#FFE1FF\",fontfamily = family)+\n  draw_label(\"Percent Variant values are calculated\\nconsidering the increase in\\nCovid19 new cases due\\nto the Omicron variant\",\n             x=0.15,y=0.1,size=10,color=\"#FFE1FF\",fontfamily = family) +\n  draw_image(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\",x=0.25,y=-0.45,scale=0.09)+\n  draw_image(\"data/2022/w1_your_own_data/omicron.png\",x=0.35,y=-0.45,scale=0.09)\n\ninvisible(dev.off())"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w39_Artists_in_the_USA/w39_Artists_in_the_USA.html",
    "href": "tidytuesday/cases2022/posts2022/w39_Artists_in_the_USA/w39_Artists_in_the_USA.html",
    "title": "Artists in the USA",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w39_Artists_in_the_USA/w39_Artists_in_the_USA.html#make-a-tree-map",
    "href": "tidytuesday/cases2022/posts2022/w39_Artists_in_the_USA/w39_Artists_in_the_USA.html#make-a-tree-map",
    "title": "Artists in the USA",
    "section": "Make a tree map",
    "text": "Make a tree map\n\ndf <- artists%>%\n  group_by(state)%>%\n  summarise(tot=sum(artists_n,na.rm = TRUE))\n\n# Create data\ngroup <- df$state\nvalue <- df$tot\ndata <- data.frame(group,value)\n\n\n# install.packages(\"Polychrome\")\nlibrary(Polychrome)\n# https://colorbrewer2.org/#type=sequential&scheme=Greens&n=9\n# build-in color palette\nvalues <- createPalette(52,  c(\"#f7fcfd\", \"#9ebcda\", \"#f7fcfd\"))\n\n\n# library\nlibrary(treemap)\npng(filename=\"w39_us_artists.png\",width=1400, height=1700)\ntreemap(dtf = data,index = \"group\",vSize=\"value\",type=\"index\",\n        title = \"STATE ARTISTS\",\n        border.col = \"grey70\",\n        border.lwds = 2,\n        title.legend = \"US States\",\n        fontsize.title=80,\n        fontfamily.labels = \"Roboto Condensed\",\n        fontfamily.title = \"Roboto Condensed\",\n        force.print.labels = TRUE,\n        fontface.labels = 2,\n        fontsize.labels = data$value,\n        palette = values\n            )\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w10_Erasmus_student_mobility/w10_Erasmus_student_mobility.html",
    "href": "tidytuesday/cases2022/posts2022/w10_Erasmus_student_mobility/w10_Erasmus_student_mobility.html",
    "title": "Erasmus student mobility",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggbump)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\n\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\n\nfont_add_google(name=\"Noto Sans\",family=\"notosans\")\n\n\nlibrary(ggthemes)\n\n\nerasmus <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-08/erasmus.csv')\n\ndf <- erasmus %>%\n  group_by(academic_year) %>%\n  filter(between(x = participant_age,17,28),\n         mobility_duration>3) %>%\n  summarise(m_participants=mean(participants),\n            sending_country_code,receiving_country_code,\n            .groups=\"drop\") %>%\n  ungroup() %>%\n  distinct()%>%\n  filter(sending_country_code %in% c(\"DE\",\"ES\",\"IT\",\"RO\",\"UK\")) %>%\n  mutate(sending_country_name=case_when(sending_country_code==\"DE\" ~ \"Germany\",\n                                        sending_country_code==\"ES\" ~ \"Spain\",\n                                        sending_country_code==\"IT\" ~ \"Italy\",\n                                        sending_country_code==\"RO\" ~ \"Romania\",\n                                        TRUE~\"UK\")) %>%\n  mutate(year_id=case_when(academic_year==\"2014-2015\"~1,\n                           academic_year==\"2015-2016\"~2,\n                           academic_year==\"2016-2017\"~3,\n                           academic_year==\"2017-2018\"~4,\n                           academic_year==\"2018-2019\"~5,\n                           academic_year==\"2019-2020\"~6))%>%\n  count(year_id,academic_year,sending_country_name) %>%\n  group_by(academic_year)%>%\n  mutate(rank=rank(x=n,ties.method = \"random\"))%>%\n  ungroup()\n\n\n\ndf %>%\nggplot(mapping=aes(academic_year,rank,\n                   group=factor(sending_country_name),\n                   color=factor(sending_country_name))) +\n  geom_point(size = 7) +\n  geom_text(data = df %>% filter(year_id == min(year_id)),\n            aes(x = year_id - .1, label = sending_country_name), \n            size = 4, hjust = 1) +\n  geom_text(data = df %>% filter(year_id == max(year_id)),\n            aes(x = year_id + .1, label = sending_country_name), \n            size = 4, hjust = 0,check_overlap = T) +\n  geom_bump(size = 2, smooth = 8) +\n  labs(y = \"RANK\",\n       x = \"Academic Year\",\n       title=\"Erasmus Top 5 student exchange countries\",\n       subtitle=\"Ranks of the highest sending frequency\",\n       caption=\"DataSource: Erasmus student mobility | Data.Europa.eu | Wimdu.co\\nDataViz: Federica Gazzelloni | #TidyTuesday Week 10 Erasmus\") +\n  scale_y_reverse() +\n  scale_color_manual(values = wesanderson::wes_palette(5, name = \"Royal2\"))+\n  cowplot::theme_minimal_grid(font_size = 14, line_size = 0) +\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank(),\n        plot.title = element_text(color=\"#ffc7ba\"),\n        plot.subtitle = element_text(color=\"#ffc7ba\"),\n        plot.caption = element_text(color=\"#ffc7ba\",size=8),\n        axis.text = element_text(color=\"#ffc7ba\"),\n        axis.title = element_text(color=\"#ffc7ba\"),\n        plot.background = element_rect(color=\"black\",fill=\"black\"),\n        panel.background = element_rect(color=\"black\",fill=\"black\"))\n \n\nggsave(\"er-network_a.png\",height =6,width = 10 )"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w42_Stranger_things_dialogue/w42_Stranger_things_dialogue.html",
    "href": "tidytuesday/cases2022/posts2022/w42_Stranger_things_dialogue/w42_Stranger_things_dialogue.html",
    "title": "Stranger things dialogue",
    "section": "",
    "text": "library(tidyverse)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nlibrary(ggridges)\nlibrary(cowplot)\n\n\n# set the fonts\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont.add(family = \"Benguiat\",regular=\"Benguiat Normal.ttf\")\n\n\n\n\n\nepisodes_raw <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-10-18/stranger_things_all_dialogue.csv')\n\ndf <-\n  episodes_raw %>%\n  filter(!is.na(dialogue)) %>%\n  mutate(season = paste(\"Season\", season)) %>%\n  select(season,episode,start_time,end_time,dialogue) %>%\n  mutate(time = end_time-start_time,\n         time = as.numeric(time),\n         trims = trimws(dialogue),\n         space = sapply(strsplit(trims, \" \"), length)) %>% #pull(time)%>%summary()\n  filter(time > 1) %>%\n  mutate(velocity = space/(time/60)) %>%\n  mutate(time_s=time,\n         time = time/60)\n  \n  \n\np <- df %>%\n  group_by(season,episode)%>%\n  mutate(velocity=mean(velocity))%>%\n  ungroup()%>%\n  ggplot(aes(x = velocity,y = fct_reorder(factor(episode),desc(episode)),\n             fill = 0.5 - abs(0.5 - stat(ecdf)))) +\n  ggridges::stat_density_ridges(geom = \"density_ridges_gradient\", calc_ecdf = TRUE, alpha=0.5) +\n  scale_fill_viridis_c(name = \"Speed wpm\", option = \"A\",labels = scales::percent) +\n  scale_x_continuous(expand = c(0,0)) +\n  labs(title=\"All seasons episodes\",\n       caption=\"DataSource: #TidyTuesday 2022 week 42 by Stranger things dialogue | DataViz: Federica Gazzelloni (@fgazzelloni)\",\n       x=\"Dialogue speech speed (wpm)\",y=\"Episode\")+\n  ggridges::theme_ridges()+\n  theme(text=element_text(color=\"grey90\",family=\"Benguiat\"),\n        axis.text.x = element_text(color=\"grey90\",size=9),\n        axis.text.y = element_text(color=\"grey90\",size=9),\n        plot.margin = margin(10,10,10,10,unit = \"pt\"),\n        plot.title = element_text(size=12,hjust = 0.03),\n        plot.title.position = \"panel\",\n        plot.subtitle = element_text(color=\"grey90\"),\n        plot.caption = element_text(size=10),\n        plot.caption.position = \"plot\",\n        plot.background = element_rect(color=\"grey10\",fill=\"grey10\"),\n        panel.background = element_rect(color=\"grey10\",fill=\"grey10\"),\n        strip.background = element_blank(),\n        legend.text = element_text(size=9),\n        legend.title = element_text(size=8))\n\nggsave(\"p.png\",dpi=400,width = 8,height = 4)\n\np1 <- ggplot(df, \n             aes(x = time, y = velocity,group=space)) +\n  geom_jitter(aes(color=factor(season)),\n              size=0.2,\n              alpha=0.3)+\n  geom_line(aes(color=factor(season)),\n            size=0.2,\n            alpha=0.5) +\n  scale_y_continuous(expand = c(0,0)) +\n  scale_color_viridis_d(option = \"A\")+\n  labs(title = \"Talking fast slows down as time increases\\n\",\n       y = \"Speed (wpm)\", x = \"Time in minutes\")+\n  ggridges::theme_ridges()+\n  theme(text=element_text(color=\"grey90\",size=14,family=\"Benguiat\"),\n        axis.text.x = element_text(color=\"grey90\"),\n        axis.text.y = element_text(color=\"grey90\"),\n        axis.line = element_line(color=\"grey90\",\n                                 arrow = arrow(type='closed', \n                                               length = unit(10,'pt'))),\n        panel.grid.major = element_line(color=\"grey60\",size=0.1,linetype = \"dashed\"),\n        plot.margin = margin(10,10,10,10,unit = \"pt\"),\n        plot.subtitle = element_text(color=\"grey90\"),\n        plot.caption = element_text(size=11),\n        plot.background = element_rect(color=\"grey10\",fill=\"grey10\"),\n        panel.background = element_rect(color=\"grey10\",fill=\"grey10\"),\n        strip.background = element_blank(),\n        legend.position = \"none\")\n\n\n\nggsave(\"p1.png\",dpi=300,width = 9,height = 4)\n\n\ncowplot::ggdraw()+\n  draw_image(\"p.png\",scale=0.93,x=-0.02,y=-0.22)+\n  draw_image(\"p1.png\",scale=0.7, y=0.22,x=-0.13)+\n  draw_image(\"logo.png\",scale = 0.2,y=0,x=0.4)+\n  draw_label(\"Stranger things...on dialogue's speed\", \n             fontfamily = \"Benguiat\",\n             x=0.4,y=0.95,\n             size=25,\n             color=\"grey90\")+\n  draw_label(\"wpm = word/per minutes\\n\\nWord Speed:\\nnumber of words\\ndivided by time difference\\nfrom end to start\\n\\nAvg 2.5 words per second\\n\\n\\nSlow: less than 110 wpm\\nConversational: 120 - 150 wpm\\nFast: more than 160 wpm\",\n             x=0.96,y=0.74,color=\"grey90\",\n             hjust = 1,\n             size=9,\n             lineheight = 1.5,\n             fontfamily = \"Benguiat\")+\n  theme(plot.background = element_rect(fill=\"grey10\", color = \"grey10\"))\n\n\n\nggsave(\"w42_stranger_things_dialogue.png\",\n       dpi=200,\n       width = 14,\n       height = 12)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w15_Indoor_Air_Pollution/w15_Indoor_Air_Pollution.html",
    "href": "tidytuesday/cases2022/posts2022/w15_Indoor_Air_Pollution/w15_Indoor_Air_Pollution.html",
    "title": "Indoor Air Pollution",
    "section": "",
    "text": "rm(list=ls())\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\n# load libraries and options\noptions(scipen = 999) # this is to avoid number truncation\nlibrary(countrycode)\nlibrary(tidyverse)\n\n# set the colors\nmycolors <- colorRampPalette(RColorBrewer::brewer.pal(n=9, name=\"Set1\"))(5)\n\n# load data\ndeath_timeseries<-read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-12/death_timeseries.csv\")\n\n# data wrangling\ndeath_timeseries1<-death_timeseries%>%\n  rename(Deaths=`Deaths...Cause..All.causes...Risk..Household.air.pollution.from.solid.fuels...Sex..Both...Age..All.Ages..Number.`,\n         Deaths1=`Deaths...Cause..All.causes...Risk..Household.air.pollution.from.solid.fuels...Sex..Both...Age..All.Ages..Number..1`)\n\n\ndeath_timeseries2 <- death_timeseries1%>%\n  filter(Year==1990,Year.1==2019) %>%\n  filter(!str_detect(Entity,\"World|Region|Central|Countries|European\"),\n         !str_detect(Entity,\"Western|Southern|Eastern|Northen\"),\n         !str_detect(Entity,\"North|South|Southeast\"),\n         !str_detect(Entity,\"income|High|Low\"),\n         !str_detect(Entity,\"Commonwealth\"),\n         !str_detect(Entity,\"G20|SDI\"),\n         !str_detect(Entity,\"Europe|Asia|Africa|America|Oceania\")\n         ) \n\n# add missing continents' names with countrycode() function -----------\ndeath_timeseries2$continent <- countrycode(sourcevar = death_timeseries2[, \"Entity\"],\n                                           origin = \"country.name\",\n                                           destination = \"continent\")\n\n\ndeath_timeseries3 <- death_timeseries2%>%\n  # check for some values that were not matched unambiguously ---------\n  # filter(Entity%in%c(\"Australasia\", \"Caribbean\", \n  #                    \"England\", \"Micronesia (country)\", \n  #                    \"Scotland\", \"Timor\", \"Wales\")) %>%\n  mutate(Entity=as.character(Entity), # mutate Entity back as a character to use case_when() function\n         continent=case_when(Entity%in%c(\"England\",\"Scotland\",\"Wales\")~\"Europe\", \n                          Entity==\"Australasia\"~\"Oceania\", \n                          Entity==\"Caribbean\"~\"Americas\", \n                          Entity==\"Micronesia (country)\"~\"Asia\", \n                          Entity==\"Timor\"~\"Asia\",\n                          TRUE ~ continent),\n         Entity=as.factor(Entity)) %>%\n  filter(Deaths1>=1,Deaths>=1) \n\n# make the plot\ndeath_timeseries3 %>%\n  ggplot(aes(x=Deaths1,y=Deaths))+\n  geom_jitter(size=1.7,aes(fill=continent),shape=21,alpha=0.7,color=\"grey45\")+\n  geom_smooth(method = \"lm\",se=F,color=\"grey60\",\n              linetype=\"dashed\",size=0.5)+\n  geom_text(aes(label=Entity,color=continent),\n            hjust = \"left\",\n            show.legend = F,\n            vjust=\"top\",\n            check_overlap = T,\n            size=3)+\n  scale_x_log10(breaks=c(1,10,100,1000,10000,100000),\n                expand=expansion(add=c(0,0.05)),\n                label=scales::comma_format(accuracy = NULL))+\n  scale_y_log10(breaks=c(1,10,100,1000,10000,100000),\n                expand=expansion(add=c(0,0.8)),\n                label=scales::comma_format(accuracy = NULL))+ \n  scale_fill_manual(guide=guide_legend(nrow = 1),\n                    values=mycolors)+\n  scale_color_manual(values=mycolors)+\n  labs(title=\"Deaths due to Household air pollution\\nfrom solid fuels\",\n       subtitle=\"1990 vs 2019 All Ages and Gender\",\n       caption=\"\\n#30DayChartChallenge 2022 day12 - theme day: The Economist\\nDataSource: Our World in Data | #TidyTuesday week15 - Indoor Air Pollution\\nDataViz: Federica Gazzelloni\",\n       x=\"Deaths from indoor air pollution in 2019\",\n       y=\"Deaths from indoor air pollution in 1990\",fill=\"\") +\n  ggthemes::theme_economist() +\n  theme(legend.text = element_text(size=10),\n        plot.title = element_text(size=23),\n        axis.title.x = element_text(vjust = -0.8),\n        axis.title.y = element_text(vjust = 0.8),\n        plot.caption = element_text(vjust = -1,size=9),\n        legend.position = c(0.4,0.85))\n\n#save the plot\nggsave(\"day12_the_economist.png\",\n       dpi=320,\n       width = 8,\n       height = 6)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w48_FIFA_World_Cup/w48_FIFA_World_Cup.html",
    "href": "tidytuesday/cases2022/posts2022/w48_FIFA_World_Cup/w48_FIFA_World_Cup.html",
    "title": "FIFA World Cup",
    "section": "",
    "text": "library(tidyverse)\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Roboto Condensed\",\n                family=\"Roboto Condensed\")  \nfont_add_google(name=\"Nerko One\",\n                family=\"Nerko One\")\n\n\ntuesdata <- tidytuesdayR::tt_load(2022, week = 48)\n# wcmatches <- tuesdata$wcmatches\nworldcups <- tuesdata$worldcups\n\n\nworldcups%>%names\n\n\nworldcups%>%DataExplorer::profile_missing()\n\n\nworldcups%>%head\n\n\nworldcups%>%pull(year)%>%summary()\n\n\ncountries <- worldcups%>%\n  pivot_longer(cols = 2:6,names_to = \"position\",values_to = \"countries\") %>%\n  count(countries)%>%\n  pull(countries)\n\ncountries\n\n\nworld <- rnaturalearth::ne_countries(returnclass = \"sf\")\n\na <- world%>%\n  filter(name%in%countries) %>%\n  data.frame() %>%\n  pull(name)\n\nsetdiff(countries,a)\n\n\nworld%>%\n  data.frame() %>%\n  arrange(name) %>%\n  pull(name) \n\n\nworldcups %>%\n    pivot_longer(cols = 2:6,names_to = \"position\",values_to = \"countries\")%>%\n  distinct() %>%\n  filter(countries==\"Yugoslavia\")\n\n\nworldcups_long <- worldcups %>%\n  pivot_longer(cols = 2:6,names_to = \"position\",values_to = \"countries\")%>%\n  distinct() %>%\n  mutate(countries=case_when(countries==\"Czechoslovakia\"~\"Czech Rep.\",\n                             countries==\"England\"~\"United Kingdom\",\n                             countries==\"Japan, South Korea\"~\"Japan\",\n                             countries==\"South Korea\"~\"Korea\",\n                             countries==\"Soviet Union\"~\"Russia\",\n                             countries==\"USA\"~\"United States\",\n                             countries==\"West Germany\"~\"Germany\",\n                             TRUE~countries))\n\n\nworldcups_long\n\n\nworldcups_long%>%count(year)\n\n\nlibrary(sf)\nfull_sf <- worldcups_long %>%\n  left_join(world,by=c(\"countries\"=\"name\")) %>%\n  st_as_sf() \n\nfull_sf\n\n\nggplot(world) +\n  geom_sf() +\n  geom_sf(data = full_sf,aes(fill=position))\n\n\nggplot(world) +\n  geom_sf() +\n  geom_sf(data = full_sf,aes(fill=attendance))\n\nContinuous:\n\nscale_fill_gsea\nscale_fill_material\n\n\nggplot(world%>%filter(!name==\"Antarctica\")) +\n  geom_sf(color=\"grey80\",\n          alpha=0.8,\n          linewidth=0.05,\n          fill=\"grey40\") +\n  geom_sf(data = full_sf,\n          aes(fill=goals_scored),\n          color=\"grey70\",\n          linewidth=0.2) +\n  coord_sf() +\n  ggsci::scale_fill_material(palette = c(\"cyan\"), \n                             alpha = 0.8, reverse = FALSE) +\n  guides(color=\"none\") +\n  labs(title=\"FIFA World Cup\\ntotal Goals scored since 1930\",\n       subtitle=\"\",\n       caption=\"#TidyTuesday week48 FIFA WORLD CUP\\nDataSource: FIFA World Cup | DataViz: Federica Gazzelloni\",\n       fill=\"Goals Scored\\n\\n1930-2018\") +\n  ggthemes::theme_map() +\n  theme(text=element_text(color=\"cyan\",family = \"Roboto Condensed\"),\n        plot.caption = element_text(hjust = 0.5,lineheight = 1.5),\n        legend.position = c(0,0),\n        legend.background = element_blank(),\n        plot.title = element_text(family=\"Nerko One\",size=16,hjust = 0.5),\n        plot.background = element_rect(color=\"black\",fill=\"black\"),\n        panel.background = element_rect(color=\"black\",fill=\"black\"))\n\n\nggsave(\"w48_fifa_world_cup.png\",\n       dpi=220,\n       width = 9,\n       height = 6)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w20_Eurovision/w20_Eurovision.html",
    "href": "tidytuesday/cases2022/posts2022/w20_Eurovision/w20_Eurovision.html",
    "title": "Eurovision",
    "section": "",
    "text": "# Remove everything (houskeeping)\nrm(list=ls())\n# Set the working directory (useful if you are in a .R script)\nsetwd(dirname(rstudioapi::getActiveDocumentContext()$path))\n\n# Load the libraries\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(countrycode)\nlibrary(ggpattern)\nlibrary(cowplot)\n\n# Set the font\nshowtext_auto(enable = T)\n# sysfonts::font_families_google()\nsysfonts::font_add_google(\"Oregano\", \"Oregano\")\n\n# Read the data\neurovision <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-17/eurovision.csv')\n\n# Manipulate the data as needed\ndf <- eurovision %>%\n  group_by(host_country) %>% \n  count(year,artist,song,artist_country,running_order,total_points,rank,qualified,winner) %>%\n  ungroup() %>%   \n  filter(!is.na(song),\n         year>=1971,\n         rank<=15) %>% \n  arrange(year)%>%\n  mutate(rank_dsc=factor(desc(rank)))%>%\n  filter(!host_country%in%c(\"Serbia & Montenegro\", \"Yugoslavia\")) %>%\n  mutate(host_country=case_when(host_country==\"United Kingdom\"~\"UK\",\n                                host_country==\"Bosnia & Herzegovina\"~\"Bosnia and Herzegovina\",\n                                TRUE~host_country)) %>%\n  mutate(country_code_h = countrycode(host_country, \n                                      origin = 'country.name', \n                                      destination = 'iso2c'),\n         country_code_h=tolower(country_code_h))%>%\n  group_by(rank) %>%\n  mutate(tot=sum(total_points))%>%\n  arrange(tot)%>%\n  ungroup() %>%\n  filter(rank==1) %>%\n  group_by(host_country,country_code_h) %>%\n  summarize(tot=sum(total_points),.groups=\"drop\")%>%\n  arrange(tot) %>%\n  ungroup() \n\n# Add the flags' image\n# Source for flags' image https://github.com/lipis/flag-icons\n\n# Take the vector with the countries for setting the flags' image vector\nmy_codes<-df$country_code_h\n# Set the vector with flags' image\nflags <- paste0(\"https://raw.githubusercontent.com/lipis/flag-icons/main/flags/1x1/\",my_codes,\".svg\")\n\n# Add the image vector to the df\nmydf <- cbind(df,image=flags)\n\n# Adjust the order of the host country total points and create an id vector for the angles\nmydf1 <- mydf%>%\n  mutate(host_country=fct_reorder(host_country,-tot))%>%\n  mutate(id=seq(1, nrow(mydf)))%>%\n  relocate(id) \n\n# Set the angles\nangle <- 90 - 360*(mydf2$id - 0.5)/nrow(mydf2)\n\n# Add a vector with angles  \nmydf1$angle <- ifelse(angle< -90, angle + 180, angle)\n\n# Make the circular plot\nmydf1 %>%\n  ggplot(aes(x=host_country,y=tot)) +\n  ggpattern::geom_col_pattern(aes(pattern_filename= rev(host_country)),\n                   inherit.aes = T,\n                   pattern         = 'image',\n                   width                = 1, \n                   pattern_type    = 'none',\n                   fill            = '#1e88f7', \n                   colour          = 'white',\n                   pattern_scale        = -1,\n                   pattern_aspect_ratio = 1,\n                   pattern_key_scale_factor = 1,\n                   pattern_filter  = 'box',\n                   pattern_gravity = mydf2$angle) +\n  ylim(-800,2418)+\n  coord_polar(start = 0,theta = \"x\",direction = 1) +\n  ggpattern::scale_pattern_filename_discrete(choices = flags) +\n  theme_void()+\n  theme(legend.position = \"none\",\n        plot.background = element_rect(fill=NA,color=NA),\n        panel.background = element_rect(fill=NA,color=NA))\n\n# Save the circular plot\nggsave(\"circular.png\",\n       dpi=320,\n       bg = \"black\",\n       width = 6,\n       height = 6)\n\n# Frame the plot and add annotations\nggdraw() +\n  draw_image(\"circular.png\")+\n  # add the eurovision logo\n  draw_image(\"Logo-ESC-Generico.jpeg\",scale=0.1) +\n  draw_label(\"Eurovision\",\n             color=\"white\",fontfamily = \"Oregano\",\n             x=0.25,y=0.92,size=180) +\n  draw_label(\"Host Countries\",\n             color=\"white\",fontfamily = \"Oregano\",\n             x=0.3,y=0.8,size=94) +\n  draw_label(\"The highest total points first from 1971 to 2020\\nDataSource: #TidyTueday Week20 - Eurovision TV\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n             x=0.5,y=0.1,size=41,lineheight = 0.3,\n             color=\"white\",fontfamily = \"Oregano\")\n\n# Save the final version\nggsave(\"w20_eurovision.png\",\n       dpi=320,\n       bg = \"black\",\n       width = 6,\n       height = 6)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w26_UK_Gender_pay_gap/w26_UK_Gender_pay_gap.html",
    "href": "tidytuesday/cases2022/posts2022/w26_UK_Gender_pay_gap/w26_UK_Gender_pay_gap.html",
    "title": "UK Gender pay gap",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w26_UK_Gender_pay_gap/w26_UK_Gender_pay_gap.html#df_bonus",
    "href": "tidytuesday/cases2022/posts2022/w26_UK_Gender_pay_gap/w26_UK_Gender_pay_gap.html#df_bonus",
    "title": "UK Gender pay gap",
    "section": "df_bonus",
    "text": "df_bonus\n\ndf_bonus <- df%>% #DataExplorer::profile_missing()\n  select(employer_id,employer_size,contains(\"bonus\")) %>%\n  filter(!employer_size==\"Not Provided\") %>%\n  mutate(id=case_when(employer_size==\"Less than 250\"~1,\n                      employer_size==\"250 to 499\"~2,\n                      employer_size==\"500 to 999\"~3,\n                      employer_size==\"1000 to 4999\"~4,\n                      employer_size==\"5000 to 19,999\"~5,\n                      employer_size==\"20,000 or more\"~6)) %>%\n  relocate(id) %>%\n  arrange(id)\n\ndf_bonus %>% DataExplorer::profile_missing()\n\n\ndf_bonus %>%\n  #group_by(employer_size) %>%\n  #summarize(across(is.numeric,.fns = median)) %>%\n  #ungroup() %>%\n  ggplot(aes(x=male_bonus_percent,y=female_bonus_percent))+\n  geom_boxplot(aes(group=employer_size),size=0.2)+ \n  geom_point(size=0.1,aes(color=employer_id))+\n  geom_abline(intercept = max(df_bonus$male_bonus_percent),slope=-1,size=0.1,linetype=\"dashed\")+\n  geom_abline(intercept = 0,slope=1,size=0.5,linetype=\"dashed\",color=\"red\")+\n  geom_smooth(method=\"lm\")\n\n\ndf_bonus%>%\n  filter(male_bonus_percent>50,female_bonus_percent<50) %>%\n    ggplot(aes(x=male_bonus_percent,y=female_bonus_percent))+\n # geom_boxplot(aes(group=employer_size),size=0.2)+ \n  geom_point(size=0.1,aes(color=employer_id))+\n  geom_abline(intercept = max(df_bonus$male_bonus_percent),slope=-1,size=0.5,linetype=\"dashed\")+\n  geom_abline(intercept = 0,slope=1,size=0.5,linetype=\"dashed\",color=\"red\")+\n  geom_text(aes(label=employer_id),check_overlap = T,size=2)+\n  geom_smooth(method=\"lm\")\n\n\nlibrary(tidymodels)\n\n\npay_bonus_pca<- df_bonus %>%\n  select(-employer_size) %>%\n  drop_na() %>%\n  prcomp(scale = TRUE)\n\ntidy(pay_bonus_pca, matrix = \"scores\") %>%\n  filter(PC%in%c(1,2)) %>%\n  pivot_wider(names_from=PC,values_from=value)%>%\n  janitor::clean_names() %>%\n  ggplot(aes(x=x1,y=x2))+\n    geom_point()\n\n\ndf%>%count(employer_size)\n\n\ndf %>%\n  mutate(id=case_when(employer_size==\"Less than 250\"~1,\n                      employer_size==\"250 to 499\"~2,\n                      employer_size==\"500 to 999\"~3,\n                      employer_size==\"1000 to 4999\"~4,\n                      employer_size==\"5000 to 19,999\"~5,\n                      employer_size==\"20,000 or more\"~6)) %>%\n  relocate(id) %>%\n  arrange(id) \n  #DataExplorer::profile_missing()\n\nSampling\n\ndf1<-df %>%\n  mutate(id=case_when(employer_size==\"Less than 250\"~1,\n                      employer_size==\"250 to 499\"~2,\n                      employer_size==\"500 to 999\"~3,\n                      employer_size==\"1000 to 4999\"~4,\n                      employer_size==\"5000 to 19,999\"~5,\n                      employer_size==\"20,000 or more\"~6)) %>%\n  relocate(id) %>%\n  arrange(id)\ndf1\n# library(sampling)\n# strata(df1,size=300)\n\n\ndf2<-df %>% #DataExplorer::profile_missing()\n  filter(!is.na(female_lower_quartile),!employer_size==\"Not Provided\") %>%\n  select(!contains(\"bonus\")) %>%\n  mutate(id=case_when(employer_size==\"Less than 250\"~1,\n                      employer_size==\"250 to 499\"~2,\n                      employer_size==\"500 to 999\"~3,\n                      employer_size==\"1000 to 4999\"~4,\n                      employer_size==\"5000 to 19,999\"~5,\n                      employer_size==\"20,000 or more\"~6)) %>%\n  relocate(id) %>%\n  arrange(id) %>%\n  group_by(id,employer_size)%>%\n  mutate(n=n()) %>%\n  ungroup() %>%\n  mutate(pct=round(n/sqrt(sum(n))*100,5))%>%#count(pct,n) %>%\n  relocate(n,pct)%>%\n  group_by(id,employer_size)%>%\n  summarise(across(.cols = everything(),.fns = mean)) %>%\n  ungroup() %>%\n # select(-diff_mean_bonus_percent) %>%\n  #mutate(diff_mean_bonus=round(male_bonus_percent-female_bonus_percent,2)) %>%\n  mutate_if(is.numeric, round, 2)\ndf2\n\n\ndf2 %>%\n  arrange(id)%>%names\n\n\ndf2 %>%\n  arrange(id)%>%\n  ggplot(aes(x=25,y=fct_reorder(employer_size,id),label=employer_size))+\n  geom_point(color=\"grey80\",shape=\".\")+\n  geom_text(hjust=1)+\n  geom_text(aes(x=30,label=paste0(diff_mean_hourly_percent,\"%\"))) +\n  # lower\n  geomtextpath::geom_textsegment(label=\"Lower\",size=4,\n                                 aes(x=female_lower_quartile,xend=male_lower_quartile,yend=employer_size),\n               position = position_nudge(y = 0.25),\n               color=\"grey50\",size=0.5)+\n  geom_point(aes(x=female_lower_quartile,y=employer_size),\n             position = position_nudge(y = 0.25),\n             color=\"violet\",size=5)+\n  geom_point(aes(x=male_lower_quartile,y=employer_size),\n             position = position_nudge(y = 0.25),\n             color=\"navy\",size=5)+\n  # upper\n    geomtextpath::geom_textsegment(label=\"Upper\",size=4,\n                            aes(x=female_top_quartile,xend=male_top_quartile,yend=employer_size),\n                            color=\"grey50\",size=0.5)+\n  geom_point(aes(x=female_top_quartile,y=employer_size),color=\"violet\",size=5)+\n  geom_point(aes(x=male_top_quartile,y=employer_size),color=\"navy\",size=5)+\n  geom_vline(xintercept = 50,size=0.3,linetype=\"dashed\")+\n\n  #scale_x_continuous(limits = c(0,65),breaks = c(40,50,60))+\n  labs(y=\"\")+\n  ggthemes::theme_fivethirtyeight()+\n  theme(axis.text.y = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.major.x = element_blank())\n\n\ndf2 %>%\n  arrange(id)%>%\n  ggplot(aes(x=25,y=fct_reorder(employer_size,id),label=employer_size))+\n  geom_text(hjust=1,fontface=\"bold\",color=\"#003d59\",size=6)+\n  geom_text(aes(x=30,label=paste0(diff_median_hourly_percent,\"%\")),\n            fontface=\"bold\",size=4,\n            color=\"#003d59\") +\n  # lower\n  geom_segment(size=3.5,\n               aes(x=female_lower_quartile,xend=female_top_quartile,yend=employer_size),\n               position = position_nudge(y = 0.2),\n               color=\"#a8bd3a\",size=0.5)+\n  geom_point(aes(x=female_lower_quartile,y=employer_size),\n             position = position_nudge(y = 0.2),\n             shape=21,stroke=1,fill=\"violet\",\n             color=\"#a8bd3a\",size=5)+\n  geom_point(aes(x=female_top_quartile,y=employer_size),\n             position = position_nudge(y = 0.2),\n             shape=21,stroke=1,fill=\"violet\",\n             color=\"#a8bd3a\",size=5)+\n  # upper\n  geom_segment(size=3.5,\n               aes(x=male_lower_quartile,xend=male_top_quartile,yend=employer_size),\n               position = position_nudge(y = -0.2),\n               color=\"#a8bd3a\",size=0.5)+\n  geom_point(aes(x=male_lower_quartile,y=employer_size),\n             position = position_nudge(y = -0.2),\n             shape=21,stroke=1,fill=\"navy\",\n             color=\"#a8bd3a\",size=5)+\n  geom_point(aes(x=male_top_quartile,y=employer_size),\n             position = position_nudge(y = -0.2),\n             shape=21,stroke=1,fill=\"navy\",\n             color=\"#a8bd3a\",size=5)+\n  # vertical line\n  geom_vline(xintercept = c(40,50,60),size=(c(40,100,40)/100),linetype=\"dashed\",color=\"grey40\")+\n  scale_x_continuous(limits = c(10,65),breaks = c(40,50,60),labels = paste0(c(40,50,60),\"K\"))+\n  coord_cartesian(clip = \"off\",ylim = c(1,6))+\n  labs(title=\"Difference in gender PayGap by size of Employers\\n\\n\",\n       caption=\"\\nDataSource: #TidyTuesday 2022 week26 ons.gov.uk | DataViz: Federica Gazzelloni (@fgazzelloni)\")+\n   annotate(\"text\",\n            x= c(18,30,50),\n            y = c(6.8,6.8,6.8),\n           label = c(\"Employer size\", \"PayGap\", \"Gender upper/lower values \"),\n           family = \"\", fontface = 3, size=5,color=\"#a8bd3a\") +\n    ggthemes::theme_fivethirtyeight()+\n  theme(text = element_text(color=\"#a8bd3a\"),\n        plot.title = element_text(size=18),\n        plot.caption = element_text(size=8.5,family=\"\",face=3),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size=12,face=\"bold\"),\n        panel.grid.major.y = element_line(size=14),\n        panel.grid.major.x = element_blank(),\n        plot.background = element_rect(color=\"#003d59\",fill=\"#003d59\"),\n        panel.background = element_rect(color=\"#003d59\",fill=\"#003d59\"))+\n     annotate(\"text\",\n            x= 20.8,\n            y = 0.2,\n           label = \"PayGap are median values calculated on unique employer id\\nfrom hourly pay(%) mean difference\\nPink = Female | Blue = Male\",\n           family = \"\", fontface = 3, size=2.8,color=\"white\") \n\n\nggsave(\"w26_paygap.png\",dpi=320)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w14_Digital_Publications/w14_Digital_Publications.html",
    "href": "tidytuesday/cases2022/posts2022/w14_Digital_Publications/w14_Digital_Publications.html",
    "title": "Digital Publications",
    "section": "",
    "text": "library(tidyverse)\n\n#load data\nnews_orgs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-05/news_orgs.csv')\n\n#news_orgs %>% head(50)%>% View\n\n#news_orgs%>% count(year_founded)\n\nlibrary(extrafont)\nloadfonts()\nlibrary(showtext)\n#sysfonts::font_add_google(\"Public Sans\",\"publicsans\")\n\n  \ndf <- news_orgs %>%\n  select(publication_name,year_founded,budget_percent_editorial,budget_percent_revenue_generation) %>% \n  drop_na() %>%\n  arrange(budget_percent_editorial) %>% #count(year_founded) %>% View\n  filter(!budget_percent_editorial==budget_percent_revenue_generation,\n         year_founded==2010) \n\n\n\ndf2 <- df %>%\n  arrange(desc(budget_percent_editorial)) %>%\n  mutate(photo=gsub(\" \",\"\",publication_name),.after=publication_name,\n         photo=tolower(photo),\n         photo=paste0(\"data/2022/w14_digital_pub/\",photo,\".png\"))\n\nlibrary(hrbrthemes)\nlibrary(ggbump)\nlibrary(ggh4x)\nlibrary(ggimage)\n\n\ndf2 %>%\n  ggplot(aes(x=0,xend=1,\n             y=budget_percent_editorial,yend=budget_percent_revenue_generation,\n             group=factor(publication_name))) +\n ggrepel::geom_text_repel(aes(x=0,label=publication_name),\n                          color=\"grey80\",\n                          \n                           direction = \"y\", hjust = \"left\",\n                           min.segment.length = 0,\n                           nudge_x = 1.1,\n                           box.padding = 0.5,\n                           nudge_y = 0,\n                          segment.color=\"grey32\",\n                           segment.curvature = -0.1,\n                           segment.ncp = 3,\n                           segment.angle = 20,\n                           segment.size = 0.2)+\n  geom_image(aes(x=rev(seq(0,1.2,0.08571429)),\n                 y=seq(1,10,0.6785714),\n                 image=rev(photo)),\n             alpha=0.6,size=0.04,\n             nudge_y = 0.1,by=\"height\")+\n  geom_segment(size=1) +\n  geom_point(size=8,shape=21,stroke=3)+\n  geom_point(aes(x=1,y=budget_percent_revenue_generation),size=8,shape=21,stroke=3) +\n  labs(title=\"Publications funded in 2010: Editorial vs Revenue generation budget\",\n       subtitle=\"Report from PROJECT OASIS - Hussman School of Journalism and Media\",\n       caption=\"#TidyTuesday week14 & #30DayChartChallenge 2022 day5 - Slope\n       DataSource: Digital Publications|Project Oasis - DataViz: Federica Gazzelloni\",\n       x=\"Revenue generation budget (%)\",\n       y=\"Editorial budget (%)\") +\n  guides(y.sec = guide_axis_manual(labels = c(\"0-10\",\"11-20\",\"21-30\",\"31-40\",\"41-50\",\"51-60\",\"\",\"\",\"\",\"\")))+\n  scale_x_continuous(expand = c(0,0),limits=c(-0.1,1.3))+\n  hrbrthemes::theme_ft_rc()+\n  theme(text = element_text(),\n        axis.text.x = element_blank(),\n        plot.title = element_text(size=28),\n        plot.caption = element_text(size=11),\n        axis.title.x = element_text(size=10),\n        axis.title.y = element_text(size=10))\n\n\nggsave(\"w14_digital_publications.png\",\n       width = 12, height = 8,\n       dpi=320)\n\ndev.off()\n\n# Second version:\n\nlibrary(sigmoid)\n\nz <- rev(seq(0,1.2,0.08571429))\n\ndf2 %>%\n  ggplot(aes(x=0,xend=1,\n             y=budget_percent_editorial,yend=budget_percent_revenue_generation,\n             group=factor(publication_name))) +\n  ggrepel::geom_text_repel(aes(x=0,label=publication_name),\n                           color=\"grey80\",\n                           direction = \"y\", hjust = \"left\",\n                           min.segment.length = 0,\n                           nudge_x = 1.11,\n                           box.padding = 0.5,\n                           nudge_y = 0,\n                           segment.color=\"grey32\",\n                           segment.curvature = -0.1,\n                           segment.ncp = 3,\n                           segment.angle = 20,\n                           segment.size = 0.2)+\n  geom_image(aes(x=sigmoid(z, k=sd(z), x0=mean(z),\n                           method=\"tanh\",\n                           SoftMax = F\n                           ),\n                 y=seq(5.5,10.5,0.3571429),\n                 image=rev(photo)),\n             size=0.04,nudge_y = 0.1,by=\"height\")+\n  geom_segment(size=1,lineend = \"round\",color=\"grey32\") +\n  geom_segment(size=2,lineend = \"round\",linetype=\"dashed\") +\n  geom_point(size=8,shape=21,stroke=3,fill=\"grey80\",alpha=0.7)+\n  geom_point(aes(x=1,y=budget_percent_revenue_generation),\n             size=8,shape=21,stroke=3,fill=\"grey80\",alpha=0.7) +\n  labs(title=\"Publications funded in 2010: Editorial vs Revenue generation budget\",\n       subtitle=\"Report from PROJECT OASIS - Hussman School of Journalism and Media\",\n       caption=\"#TidyTuesday week14 & #30DayChartChallenge 2022 day5 - Slope\n       DataSource: Digital Publications|Project Oasis - DataViz: Federica Gazzelloni\",\n       x=\"Revenue generation budget (%)\",\n       y=\"Editorial budget (%)\") +\n  guides(y.sec = guide_axis_manual(labels = c(\"0-10\",\"11-20\",\"21-30\",\"31-40\",\"41-50\",\"51-60\",\"\",\"\",\"\",\"\")))+\n  scale_x_continuous(expand = c(0,0),limits=c(-0.1,1.3))+\n  hrbrthemes::theme_ft_rc()+\n  theme(text = element_text(color=\"grey40\",family=\"Impact\"),\n        axis.text.x = element_blank(),\n        axis.text.y = element_text(color=\"grey60\"),\n        plot.title = element_text(size=28),\n        plot.caption = element_text(size=11),\n        axis.title.x = element_text(size=10,color=\"grey60\"),\n        axis.title.y = element_text(size=10,color=\"grey60\"))"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w36_LEGO_database/w36_LEGO_database.html",
    "href": "tidytuesday/cases2022/posts2022/w36_LEGO_database/w36_LEGO_database.html",
    "title": "LEGO database",
    "section": "",
    "text": "library(tidyverse)\n\n\ninventories <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-06/inventories.csv.gz')\ninventory_sets <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-06/inventory_sets.csv.gz')\nsets <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-06/sets.csv.gz')\n\nall_df <- left_join(inventories, inventory_sets, by = \"set_num\") %>%\n  left_join(sets, by = \"set_num\") \n\n\nall_df %>%\n  ggplot(aes(x = num_parts)) +\n  geom_density() +\n  scale_x_log10()\n\n\nall_df %>%\n  DataExplorer::profile_missing()\n\n\ndf <- all_df%>%\n  arrange(year) %>%\n  count(num_parts,year,version) %>%\n  mutate(version=as.factor(version)) %>% # year=as.factor(year),\n  group_by(year,version) %>%\n  summarise(pct_parts=sum(num_parts),.groups=\"drop\") %>%\n  ungroup() \n\n\n# library(systemfonts)\n# fonts <- system_fonts()\n# fonts%>%\n#   arrange(family)%>%\n#   filter(family==\"Legothick\")\n\n\nlegofont <- systemfonts::register_font(name=\"LEGothicType\",\n                                       plain=\"/Library/Fonts/Legothick.ttf\")\n\n\n\ndf %>%\n  ggplot(aes(year,factor(pct_parts),fill=version,color=version))+\n  geom_bin2d(size=0.5,bins=20,show.legend = F)+ \n  labs(title=\"\\nLEGO\")+\n  theme_void() +\n  theme(text=element_text(family=\"LEGothicType\"),\n        plot.title = element_text(size=40,hjust=0.5),\n        plot.subtitle = element_text(family=\"Roboto Condensed\"),\n        axis.text.x = element_text(color=\"grey40\",vjust=0),\n        #axis.text.y = element_text(color=\"orange\"),\n        legend.position = c(0.5,0.5),\n        legend.direction = \"horizontal\",\n        legend.text = element_text(family=\"Roboto Condensed\"),\n        legend.title = element_text(family=\"Roboto Condensed\"),\n        plot.margin = margin(5,5,5,5,unit = \"pt\"),\n        plot.background = element_rect(fill = \"red\",color = \"red\")) \n\n  \nggsave(\"w36_lego.png\",\n       dpi=320,\n       width = 8,\n       height = 6)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w11_CRANBIOC_Vignettes/w11_CRANBIOC_Vignettes.html",
    "href": "tidytuesday/cases2022/posts2022/w11_CRANBIOC_Vignettes/w11_CRANBIOC_Vignettes.html",
    "title": "CRANBIOC Vignettes",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggridges)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\n\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\n\nfont_families_google()\n\nfont_add_google(name=\"Overpass\",family=\"overpass\")\n\nbioc <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-15/bioc.csv')\ncran <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-15/cran.csv')\n\n\nhead(bioc)\nhead(cran)\n\nbioc2 <-bioc%>%mutate(date=as.Date(date,\"%Y-%m-%d\"))\n\ncran_a <-cran%>%\n  mutate(date=format(as.Date(date,\"%a %b %d %H:%M:%S %Y\"), format=\"%Y-%m-%d\"),\n         date=as.Date(date,\"%Y-%m-%d\")) %>%\n  drop_na()\n\ncran_b <-cran%>%\n  mutate(date=as.Date(date,\"%Y-%m-%d\")) %>%\n  drop_na()\n\n\nclass(cran_a$date)\nclass(cran_b$date)\n\ncran2 <- rbind(cran_a,cran_b) %>%\n  select(-version)\n\ncran2%>%DataExplorer::profile_missing()\n\nhead(cran2)\nhead(bioc2)\n\ncran2 <- cran2 %>% \n  mutate(source = \"Cran\\n\") %>%\n  relocate(date,rnw,rmd,package,source)\n\nbioc2 <- bioc2 %>%\n  mutate(source = \"Bioconductor\\n\")\n\ndim(cran2);dim(bioc2)\n\n\ndf <- rbind(cran2,bioc2) %>%\n  distinct()\n\n\ndf %>%\n  mutate(year=lubridate::year(date)) %>%\n  distinct() %>%\n  count(year,source,sort=T) %>%\n  arrange(year) %>%\n  ggplot(aes(x=n, y=factor(year),# height = ..density..,\n             fill=factor(year))) +\n  geom_density_ridges(scale = 0.8, alpha=0.6, \n                      #rel_min_height = 0.1,\n                      stat=\"binline\", bins=30) +\n  facet_wrap(~source,scales = \"free\")+\n  labs(caption=\"DataSource: CRAN/BIOC Vignettes | Robert Flight GitHub | #TidyTuesday week 11 2022 | DataViz: Federica Gazzelloni\") +\n  theme_ridges() +\n  theme(text = element_text(family=\"overpass\",size=15),\n        plot.caption = element_text(size=8,hjust = 0.3),\n        legend.position=\"none\",\n        panel.spacing = unit(0.1, \"lines\"),\n        strip.text.x = element_text(size = 28),\n        strip.background = element_rect(fill=\"grey86\"),\n        plot.background = element_rect(color=\"grey86\",fill=\"grey86\"),\n        panel.background = element_rect(color=\"grey86\",fill=\"grey86\")) +\n  xlab(\"CRAN/BIOC Vignettes: number of releases per Year\") +\n  ylab(\"Assigned Probability (%)\")\n\n\nggsave(\"w11_vignettes.png\",width = 9.79 , height =  9.46)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w38_Hydro_Wastewater_plants/w38_Hydro_Wastewater_plants.html",
    "href": "tidytuesday/cases2022/posts2022/w38_Hydro_Wastewater_plants/w38_Hydro_Wastewater_plants.html",
    "title": "Hydro Wastewater plants",
    "section": "",
    "text": "library(tidyverse)\n\n\nHydroWASTE_v10 <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-20/HydroWASTE_v10.csv')\n\nHydroWASTE_v10%>%names\n\n\nHydroWASTE_v10%>%DataExplorer::profile_missing()\n\n\n# HydroWASTE_v10%>%View()\n\n\ndf <- HydroWASTE_v10%>%\n  janitor::clean_names()%>%\n  count(country,lat_wwtp,lon_wwtp,source,\n        qual_loc,qual_pop,qual_waste,qual_level,qual_cap)\n\n\n# source: https://stackoverflow.com/questions/68278789/how-to-rotate-world-map-using-mollweide-projection-with-sf-rnaturalearth-ggplot\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\nlibrary(sf)\n\ntarget_crs <- st_crs(\"+proj=moll +x_0=0 +y_0=0 +lat_0=0 +lon_0=133\")\n\nworldrn <- ne_countries(scale = \"medium\", returnclass = \"sf\") %>%\n  st_make_valid()\n\n\n# define a long & slim polygon that overlaps the meridian line & set its CRS \n# Centered in lon 133\noffset <- 180 - 133\n\n# build a polygon\npolygon <- st_polygon(x = list(rbind(\n  c(-0.0001 - offset, 90),\n  c(0 - offset, 90),\n  c(0 - offset, -90),\n  c(-0.0001 - offset, -90),\n  c(-0.0001 - offset, 90)))) %>%\n  st_sfc() %>%\n  st_set_crs(4326)\n\n\n# set the polygons\nworld2 <- worldrn %>% \n  st_difference(polygon) %>% \n  st_transform(crs = target_crs)\n\nSet the values for hydro waste to the new target crs.\n\ncoords <- df %>% \n  rename(lat=lat_wwtp,lon=lon_wwtp) %>%\n  sf::st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326) %>% \n  sf::st_transform(crs = target_crs) \n\nSet the colors.\n\nlibrary(RColorBrewer)\nmy_palette <- RColorBrewer::brewer.pal(12,\"Set3\")\n\nmy_values <- c(\"1\"=\"#8DD3C7\", \n               \"2\"=\"#FFFFB3\",\n               \"3\"=\"#BEBADA\", \n               \"4\"=\"#FB8072\",\n               \"5\"=\"#80B1D3\", \n               \"6\"=\"#FDB462\",\n               \"7\"=\"#B3DE69\",   \n               \"8\"=\"#FCCDE5\",\n               \"9\"=\"#D9D9D9\",\n               \"10\"=\"#BC80BD\",\n               \"11\"=\"#CCEBC5\", \n               \"12\"=\"#FFED6F\")\n\nmy_labels<-c(\"Europe\", \"United States\",\n             \"Brazil\", \"Mexico\",\n             \"China\", \"Canada\",\n             \"Australia\",   \"South Africa\",\n             \"India\", \"New Zealand\",\n             \"Peru\", \"Remaining Countries\")\n\nMake the mollweide, more info on how to set the projections here: https://epsg.io/54009\n\nggplot() + \n  geom_sf(data = world3, aes(group = admin), \n          fill = \"#f5f5f5\") + \n  geom_sf(data = coords,\n          mapping = aes(color=factor(source)),\n          key_glyph = draw_key_rect,\n          size=0.1) + \n  scale_color_manual(labels=my_labels,values=my_values)+\n  labs(title=\"Wastewater Plants\",\n       subtitle=\"Concentrated point sources of residual contaminant loads into surface waters\",\n       caption=\"DataSource: #TidyTuesday 2022 week38 Hydro Wastewater | DataViz: Federica Gazzelloni @fgazzelloni\",\n       color=\"Source of\\nwaterwaste\")+\n  coord_sf()+\n  ggthemes::theme_map() +\n  theme(plot.title = element_text(size=14,face=\"bold\"),\n        plot.subtitle = element_text(size=12,face=\"bold\"),\n        text=element_text(family=\"Roboto Condensed\",color=\"#89a5b9\"),\n        panel.grid = element_line(color=\"#bfd0dd\"),\n        plot.background = element_rect(fill=\"#275477\",color=\"#275477\"),\n        panel.background = element_rect(fill=\"#275477\",color=\"#275477\"),\n        legend.background = element_blank(),\n        legend.position = c(-0.05,0.05),\n        legend.key = element_rect(size=4))\n\nSave it.\n\nggsave(\"w38_hydro_waterwaste.png\",\n       dpi=320,\n       width = 10,\n       height = 5)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w13_Collegiate_Sports_Budgets/w13_Collegiate_Sports_Budgets.html",
    "href": "tidytuesday/cases2022/posts2022/w13_Collegiate_Sports_Budgets/w13_Collegiate_Sports_Budgets.html",
    "title": "Collegiate Sports Budgets",
    "section": "",
    "text": "library(tidyverse)\noptions(scipen = 999)\n\nlibrary(hrbrthemes)\nlibrary(viridis)\n\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\n\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\n\nfont_add_google(name=\"Noto Sans\",family=\"notosans\")\n\nsports <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-29/sports.csv')\n\ndf <-sports%>%\n  select(year,ef_total_count,total_exp_menwomen,total_rev_menwomen,sports)%>%\n  drop_na() \n\n\nggplot(data = df,\n       aes(x=(total_exp_menwomen), y=(total_rev_menwomen), \n           size=ef_total_count, fill=sports)) +\n  geom_point(alpha=0.5, shape=21, color=\"black\") +\n  scale_size(range = c(.1, 9), name=\"Students total count\",\n             labels = scales::comma_format(scale = 1/100)) +\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"B\") +\n  scale_x_log10(expand = c(0,0.2),labels = scales::dollar_format(scale = 1/100))+\n  scale_y_log10(expand = c(0,0.2),labels = scales::dollar_format(scale = 1/100))+\n  theme_ipsum() +\n  theme(text=element_text(family=\"notosans\"),\n        legend.position=\"bottom\") +\n  labs(title=\"How profitable can college sports be? - USA Facts\",\n       subtitle = \"data from 2015 to 2019 - in thousands of $\",\n       caption=\"DataSource: Equity in Athletics Data Analysis | USA Facts | DataViz: Federica Gazzelloni\")+\n  ylab(\"Total Revenue\") +\n  xlab(\"Total expenditure\") +\n  theme(legend.position = c(0.2,0.7),\n        plot.title = element_text(size=24),\n        plot.title.position = \"plot\",\n        plot.background = element_rect(color=\"grey86\",fill=\"grey86\"),\n        panel.background = element_rect(color=\"grey86\",fill=\"grey86\"))\n\n\nggsave(\"w13_sports.png\",width = 10, height = 8)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w17_Kaggle_Hidden_Gems/w17_Kaggle_Hidden_Gems.html",
    "href": "tidytuesday/cases2022/posts2022/w17_Kaggle_Hidden_Gems/w17_Kaggle_Hidden_Gems.html",
    "title": "Kaggle Hidden Gems",
    "section": "",
    "text": "library(tidyverse)\n\n\nhidden_gems <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-26/hidden_gems.csv')\n\n\ndf <- hidden_gems%>%\n  count(vol,date,title,review,author_kaggle,author_name)\n\n\ndf1 <- df %>%  #pull(date)%>%summary\n  mutate(ym=zoo::as.yearmon(date),\n         year=lubridate::year(date))%>%\n  unnest_tokens(word,review) %>%\n  anti_join(get_stopwords()) %>%\n  filter(!str_detect(word,\"kaggle|c|https|2020|2021|also|end|r\")) %>%\n  count(author_name,word,sort=T) %>%\n\n inner_join(bing) %>%\n  mutate(sentiment2=sentiment)%>%\n  spread(sentiment, n, fill = 0) %>%\n  mutate(sentiment = positive - negative) %>%\n  mutate(index=row_number())%>%\n  relocate(index) %>% #count(word,sort=T)\n  mutate(word=reorder(word,-index)) \n\n\nmy_words<-df1 %>%\n  count(word,sort=T)%>%\n  filter(n>1) %>%\n  select(-n) %>%\n  unlist()\n  \n  \ndf2 <- df1 %>%\n   filter(word %in% my_words) \n\nNotches are used to compare groups; if the notches of two boxes do not overlap, this suggests that the medians are significantly different.\n\ndf2 %>%\n  mutate(word=toupper(word))%>%\n  mutate(word=as.factor(word),\n         word=reorder(word,-index))%>% #count(index,sort=T)\n  ggplot(aes(x=index,y=fct_reorder(word,sentiment),fill=sentiment2))+ # \n  geom_boxplot(size=0.5,\n               outlier.size = 0.3,outlier.shape = 21,\n               notch = T) +\n  geom_jitter(size=0.3,shape=21,stroke=0.5)+\n  coord_cartesian(xlim = c(-1,260),ylim=c(0,35),clip=\"off\")+\n  labs(title=\"How vary are words in the Hidden Gems Reviews?\",\n       subtitle=\"Some words repeated themselves more frequently than others,\\nwith significantly different medians.\",\n       caption=\"#30DayChartChallenge 2022 #Day28 - Deviations\\nDataSource: #TidyTuesday Week17 - Hidden Gems\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n       x=\"\",y=\"\",fill=\"Sentiment\")+\n  tvthemes::scale_fill_rickAndMorty()+\n  tvthemes::theme_rickAndMorty()+\n  theme(plot.background = element_rect(fill=\"grey80\"),\n        legend.background = element_rect(fill=NA),\n        legend.position = c(0.9,0.9),\n        plot.title = element_text(face=\"bold\",size=22),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_text(size=12),\n        axis.text.x = element_blank())+\n  annotate(\"text\",x=-70,y=-2.5,label=\"How to read this graph:\\n- the notches represent the median of the frequency of words\\nfound in the Hidden Gems reviews by Author\\n- the sidebars represent their deviations\",\n           hjust=0,size=3)\n\n\nggsave(\"day28_deviations.png\",\n       dpi=320,\n       width = 8,\n       height = 10)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w28_European_flights/w28_European_flights.html",
    "href": "tidytuesday/cases2022/posts2022/w28_European_flights/w28_European_flights.html",
    "title": "European flights",
    "section": "",
    "text": "This #TidyTuesday week 28 is all about European flights. I was looking for a visualization that would represent the differences among countries in terms of the number of airports versus number of flights. I looked on the internet for getting some inspiration and then landed on Pintarest, where I found exactly what I was hoping for: a Sankey! First of all, What is a Sankey? The answer is clearer after you make one of your own. In short, it is a network graph connecting diffent groups with a ribbon. A few things that made me think about a lot were the requirenment for the type of data to combine, the consequent label results, and the grouping.\nSo, let’s have a go in making a Sankey.\nHave a quick look at the data for European flights:\nLoad the {tidyverse} and the data from: #TidyTuesday GitHub repo\n\nflights <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-07-12/flights.csv')\n\nJus a little cleaning for this type of data with janitor::clean_names() function, and it’s ready to use.\n\nflights <- flights%>%\n  janitor::clean_names()\n\nThe best way is to select a subgroup among the list of the European countries in the data set, and represent the diversity in aerial traffic.\nAs an example I choose Ukraine airports, and found that there is only one airoprt for Ukraine in the dataset. But, the interesting thing is that it covers on average almost the same aerial traffic of other European countries such as Italy which is provided with a far larger number of airports, in this dataset.\n\nflights %>%\n  filter(state_name == \"Ukraine\") %>%\n  count(state_name,apt_name)\n\nCompare Italy median of the total number of flights by airports with the only available airport aerial traffic in Ukraine:\n\nflights %>%\n  filter(state_name %in% c(\"Ukraine\",\"Italy\")) %>%\n  count(state_name,pivot_label,flt_tot_1) %>%\n  group_by(state_name) %>%\n  summarize(total_median = median(flt_tot_1)) \n\nThe results of this preliminary data exploration arise a question:"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w28_European_flights/w28_European_flights.html#does-the-number-of-airports-influence-countries-aerial-traffic",
    "href": "tidytuesday/cases2022/posts2022/w28_European_flights/w28_European_flights.html#does-the-number-of-airports-influence-countries-aerial-traffic",
    "title": "European flights",
    "section": "Does the number of airports influence countries’ aerial traffic?",
    "text": "Does the number of airports influence countries’ aerial traffic?\n\n\nWaffle\nMake the first part of the visualization as a series of waffle, one for each selected country to show the diferences in number of airports.\nSelected are 6 countries with a varied number of airports and flights, this is done to give the idea of the differences.\n\ndf <- flights%>%\n  filter(state_name %in% c(\"Ukraine\",\"Belgium\",\"France\",\"Italy\",\"Spain\",\"United Kingdom\")) %>%\n  group_by(state_name) %>%\n  count(apt_name,sort=T) %>%\n  mutate(apt_id = seq(1,length(state_name),1)) %>%\n  summarise(tot = max(apt_id)) %>%\n  arrange(-tot)\n\ndf\n\nLoad both libraries {waffle} and {ggsankey} to use a feature in the waffle which is provided by the ggsankey package.\n\nlibrary(waffle)\nlibrary(ggsankey)\n\nThe waffles shows the number of airports for the selected countries on a total of 100. To make the waffle we can safetly use the geom_waffle() layer\n\nwaffle <- df %>%\n  mutate(rr = 100 - tot) %>% # this is the remaining part of the 100 set of cubes in the waffle\n  pivot_longer(cols = c(tot,rr),names_to = \"values_name\",values_to = \"values\") %>% \n  arrange(state_name) %>%\n  ggplot(aes(fill = values_name, values = values)) +\n  geom_waffle(n_rows = 10, \n              size = 0.33, \n              make_proportional = F,\n              colour = \"white\", \n              flip = TRUE,\n              show.legend = F) +\n  facet_wrap(~ state_name,nrow = 1)+\n  coord_equal() +\n  scale_fill_manual(values=c(\"grey60\",\"#8E0152\"))+\n  theme_sankey(base_size = 16) +\n  theme_enhance_waffle() +\n  theme(strip.text = element_blank(),\n        plot.background = element_blank(),\n        panel.background = element_blank())\n\nwaffle\n\n\nSankey\nThe purpose of this sankey is to show the differences among selected countries on number of airports and number of flights, from 2016 to 2022 for 6 selected countries.\nThe {ggsankey} package uses an interesting function make_long() which transform provided object into a longer data frame, with vectors named as:\n\nx, next_x, node, and next_node\n\nready to be used inside the geom_sankey.\n\nsankey <- df %>%\n  left_join(flights %>% select(state_name,flt_tot_1), by = \"state_name\") %>%\n  group_by(state_name,tot) %>%\n  summarize(total_med = median(flt_tot_1),.groups = \"drop\") %>%\n  ungroup() %>%\n  mutate(class = cut(tot,\n                     breaks = c(0,1,5,50,65)), #) %>% pull(tot) %>% summary()\n         tot_class = cut(total_med,\n                         breaks = c(0,10,30,65,120,700))) %>% #count(tot_class)\n  mutate(class_id = case_when(class == \"(0,1]\" ~ \"one\",\n                              class == \"(1,5]\" ~ \"up to 5\",\n                              class == \"(5,50]\" ~ \"up to 50\",\n                              TRUE ~ \"up to 65\"),\n         tot_class_id = case_when(tot_class == \"(0,10]\" ~ \"one\",\n                              tot_class == \"(10,30]\" ~ \"up to 30\",\n                              tot_class == \"(30,65]\" ~ \"up to 65\",\n                              tot_class == \"(65,120]\" ~ \"up to 120\",\n                              TRUE ~ \"up to 700\")) %>%\n  mutate(state_name= ifelse(state_name==\"United Kingdom\",\"UK\",state_name)) %>%\n  # function to make the object ready to be used in the geom_sankey\n  make_long(tot_class_id,class_id,state_name) %>% \n  ggplot(aes(x = x, \n             label= node,\n             next_x = next_x, \n             node = node, \n             next_node = (next_node),\n             fill = factor(node))) +\n  geom_sankey(flow.alpha = 0.8, \n              node.color = 1,\n              show.legend = FALSE) +\n  geom_sankey_text(angle=0,family = \"Roboto Condensed\", size = 3)+\n  scale_fill_manual(values = colorRampPalette(RColorBrewer::brewer.pal(11, \"PiYG\"))(13))+\n  theme_sankey(base_size = 16) +\n  coord_flip(expand = F) +\n  theme(axis.text = element_blank(),\n        axis.title = element_blank(),\n        plot.background = element_blank(),\n        panel.background = element_blank())\n  \nsankey\n\n\n\nEuropean Map\nThe map has been saved as map.png and sourced in the main visualization. The code can be found in a separate file named “eu_coords.R”.\n\n\n\n\nUse {cowplot} for assembling the plots, adding notes, the map and the logo as images.\n\nlibrary(cowplot)\n\n\n combo <- ggdraw() +\n  draw_image(\"map.png\",\n             scale=0.5,\n             x=0.3,y=0.4)+\n  draw_plot(waffle,\n            scale=1,\n            x=0,y=0.2) +\n  draw_plot(sankey, \n            scale=0.7,\n            width = 1.4,\n            height = 0.85,\n            x=-0.2, y=-0.093) +\n  draw_label(\"Countries such as France and Spain have the highest number of airports while this\\nseems reasonable, other countries such as Ukraine with just one airport record\\namong the countries with the highest total number of flights. Data are released\\nwithin a range of 7 years from 2016 to 2022.\",\n             x=0.02,y=0.90,size=9,hjust=0, \n             fontfamily=\"Roboto Condensed\") +\n  draw_label(\"N. of airports\", x=0.1,y=0.4,\n             fontfamily=\"Roboto Condensed\") +\n  draw_label(\"N. of flights\\n(median values)\", x=0.1,y=0.16,\n             fontfamily=\"Roboto Condensed\") +\n  draw_image(\"eurocontrol_logo.png\",\n             scale=0.1,\n             x=-0.45,y=-0.52) +\n  draw_label(\"Eurocontrol aviation intelligence\\n(ansperformance.eu)\",\n             x=0.22,y=-0.02,size=9,fontfamily=\"Roboto Condensed\")\n\n\ncombo\n\nUse {ggpubr} for arranging the grid of the main visualization, so it can be annotate with annotate_figure() to making it a bit more standing out with spaces around the plot and top and bottmo annotations already at the right distance/position.\n\nlibrary(ggpubr)\n\nggpubr::annotate_figure() provides a framework for annotating the plot on the four sides top, bottom, left and right. It comes a handy function when you’d like to position notes or even rich text at specified positions. To use it, it requires an object from ggpubr::ggarrange().\n\nplot <- ggpubr::ggarrange(combo) \n\n  ggpubr::annotate_figure(plot,\n               top = text_grob(\"Does the number of airports influence countries' aerial traffic?\", \n                               color = c(\"#8E0152\"), face = \"bold\", family = \"Roboto Condensed\", \n                               size = 18, vjust = 1.4),\n               bottom = text_grob(\"DataSource:TidyTuesday 2022 week28 European flights\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n                                  color = \"#8E0152\",\n                                  hjust = 1, x = 1, face = \"italic\",  family = \"Roboto Condensed\", \n                                  size = 10),\n               left = text_grob(\"\", color = c(\"#7FBC41\"), rot = 90, size=10),\n               right = text_grob(bquote(\"\"), color=c(\"#DE77AE\"), rot = 90, size=10),\n                fig.lab = \"European flights\", fig.lab.face = \"bold\")\n\nThen finally, save it as .png file with ggsave() function. I specified a height a little bit more than the default values provided as I needed more space.\nThe other arguments, dpi and bg are to set the pixels and the background color.\n\nggsave(\"waffle_sankey.png\",\n       dpi=320,\n       bg = \"grey95\",\n       height = 7.2)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w31_Oregon_Spotted_Frog/w31_Oregon_Spotted_Frog.html",
    "href": "tidytuesday/cases2022/posts2022/w31_Oregon_Spotted_Frog/w31_Oregon_Spotted_Frog.html",
    "title": "Oregon Spotted Frog",
    "section": "",
    "text": "This is the final code for assembling all plots saved in the container images folder using {cowplot} package. In addition, some annotations and grobs are included.\nAll separate scripts are selfcontainers.\n\ng <- grid::circleGrob(gp = grid::gpar(fill = NA,color=\"gray\"))\n\n\nlibrary(cowplot)\nggdraw() +\n  draw_label(\"Oregon Spotted a Frog!\", \n             x=0.227,y=0.95,size=34,\n             fontface = \"bold\",\n             fontfamily = \"Roboto Condensed\") +\n  draw_label(label=\"Captured\",x=0.7,y=0.9,fontfamily = \"Roboto Condensed\") +\n  draw_label(label=\"Visual\",x=0.6,y=0.9,fontfamily = \"Roboto Condensed\") +\n  draw_label(label=\"Frequency\",x=0.5,y=0.9,fontfamily = \"Roboto Condensed\") +\n  draw_label(label=\"Radio-telemetry is used to study frogs (Rana pretiosa)\\nat Crane Prairie Reservoir in Oregon.\\nIndividual frog location tracking occurred roughly\\nweekly between September and late November of 2018.\",\n             fontfamily = \"Roboto Condensed\",\n             x=0.015,y=0.85,hjust=0) +\n  draw_label(label=\"On average more males are caught on radio-telemetry\\nfrequencies than females. In the map the grey circles\\nindicate the tracking location ranges based on mean\\nrange difference among frequencies in same subsite. \\n\\nDataSource: #TidyTuesday 2022 week31\\n@USGS data & @fgazzelloni | DataViz: Federica Gazzelloni\",\n             fontfamily = \"Roboto Condensed\",\n             x=0.015,y=0.08,hjust=0,size=11) +\n    draw_label(label=\"On the left is the network\\nof subsite and water type,\\nit shows more frogs are\\ncaptured in specific locations.\\n\\nOn the right is the models\\nranking among many models.\\nRandom Forest is the best\\nperforming. Results shows on\\naverage male are twice more\\nlikely to get caught than\\nfemales. More info:\\nfedericagazzelloni.netlify.app\",\n             fontfamily = \"Roboto Condensed\",\n             x=0.668,y=0.13,hjust=0,size=8) +\n  draw_image(\"container/images/globe.png\",\n             scale=0.18,\n             x=0.4,y=0.38)+\n  draw_image(\"container/images/network_plot.png\",\n             scale=0.29,\n             x=0.022,y=-0.38)+\n  draw_image(\"container/images/roc_plot.png\",\n             scale=0.245,\n             x=0.4,y=-0.38)+\n  draw_image(\"container/images/lake_map.png\",\n             scale=0.7,\n             x=0.14,y=0.01) +\n  draw_image(\"container/images/vip_plot.png\",\n             scale=0.62,\n             x=-0.3,y=-0.03)+\n  draw_image(\"container/images/frog_logo_visual.png\", \n              scale=0.2,\n             x=0.1, y=0.32) +\n  draw_image(\"container/images/frog_logo_captured.png\",\n              scale=0.2,\n             x=0.2, y=0.32) +\n  draw_grob(g, scale = 0.05,x = 0,y = 0.33)+\n  draw_grob(g, scale = 0.025,x = 0,y = 0.33)+\n  draw_grob(g, scale = 0.01,x = 0,y = 0.33)\n\n\n# ggsave(\"w31_frogs.png\",\n#        width=10,\n#        height = 8,\n#        dpi=320,\n#        bg = \"white\")"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w16_Crossword_Puzzles_and_Clues/w16_Crossword_Puzzles_and_Clues.html",
    "href": "tidytuesday/cases2022/posts2022/w16_Crossword_Puzzles_and_Clues/w16_Crossword_Puzzles_and_Clues.html",
    "title": "Crossword Puzzles and Clues",
    "section": "",
    "text": "library(tidyverse)\n\n\nbig_dave <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-19/big_dave.csv')\ntimes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-04-19/times.csv')\n\n\nbig_dave%>%glimpse\nbig_dave%>%arrange(-rowid)%>%head\n\n\nbig_dave1 <- big_dave%>% # DataExplorer::profile_missing()\n  select(answer,puzzle_date,puzzle_name) %>%\n  filter(!is.na(answer)) %>%\n  mutate(puzzle_bigdave=gsub(\"[[:punct:][:blank:]]\\\\d*\",\"\",puzzle_name))\n\n\nbig_dave1%>%count(answer)\n\n\ntimes%>%glimpse\ntimes%>%head\n\n\ntimes1 <- times%>%\n  select(answer,puzzle_date,puzzle_name) %>% #DataExplorer::profile_missing()\n  filter(!is.na(answer))%>%\n  mutate(puzzle_times=gsub(\"[[:punct:][:blank:]]\\\\d*\",\"\",puzzle_name))\n\n\ntimes1 %>%count(answer)\n\n\ndf <- big_dave1 %>%\n  inner_join(times1,by=c(\"answer\",\"puzzle_date\")) %>%\n  arrange(puzzle_date) %>% # \n  mutate(answer=as.factor(answer)) %>% #DataExplorer::profile_missing()\n  select(-puzzle_name.x,-puzzle_name.y) %>%\n  mutate(year=lubridate::year(puzzle_date),.after=answer,\n         year=as.integer(year))\n \ndf \n\n\ndf%>%\n  ggplot(aes(x=year,y=puzzle_bigdave))+\n  geom_col()\n\n\nlibrary(gganimate)\ncolors<- colorRampPalette(RColorBrewer::brewer.pal(12, \"Paired\"))(161)\nlibrary(extrafont)\nloadfonts()\n\n\nlibrary(showtext)\n# \nfont_add_google(\"Gentium Book Basic\",\"gbb\")\nfont_add_google(\"Nanum Gothic\",\"ng\")\nshowtext_auto()\n\n\np <- df %>%\n    pivot_longer(cols=c(\"puzzle_bigdave\",\"puzzle_times\"),\n               names_to=\"names\",values_to=\"values\")%>%\n  #count(year)\n  ggplot(aes(puzzle_date, fct_reorder(values,puzzle_date), color = values)) +\n  geom_jitter(show.legend = F,shape=\".\",color=\"white\")+\n  geom_text(aes(label=answer),\n            size=9,\n            check_overlap = T,family=\"gbb\")+\n  scale_color_manual(values=colors)+\n  labs(title = \"\\nSame Answers! Year: {closest_state}\\nBigDave & Times puzzles\\n\",  \n       subtitle=\"\\nwords are randomized\",\n       caption=\"#30DayChartChallenge 2022 #Day22\\n DataSource: #TidyTuesday week16 - Crossword \\n DataViz: Federica Gazzelloni\\n\\n\")+\n  theme_void() +\n  theme(text = element_text(family = \"ng\", face=\"bold\",color=\"#F0F8FF\"),\n        plot.title = element_text(size=28),\n        plot.subtitle = element_text(size=18),\n        plot.caption = element_text(size=14,vjust=2,hjust=0.5),\n        plot.background = element_rect(fill=\"grey10\",color=\"grey20\"),\n        panel.background = element_rect(fill=\"grey10\",color=\"grey20\"),\n    legend.position = \"none\")+\n   coord_polar(theta = \"x\") +\n  transition_states(year, \n                    transition_length = 2,\n                    state_length = 1,\n                    wrap = F) +\n  shadow_wake(wake_length = 0.5,wrap=F)\n\n\nanim_save(animate(p,res=100,\n                  renderer = gifski_renderer(\"animation3.gif\"),\n                  height = 710, width = 610))\n\n\ndf %>%\n  pivot_longer(cols=c(\"puzzle_bigdave\",\"puzzle_times\"),\n               names_to=\"names\",values_to=\"values\")%>%\nggplot(aes(year, fct_reorder(values,year), fill = values)) +\n  geom_col() +\n  scale_fill_viridis_d() +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n    panel.grid = element_blank(),\n    panel.grid.major.y = element_line(color = \"white\"),\n    panel.ontop = TRUE\n  )+\n  coord_polar()+\n  facet_wrap(vars(names))+\n  transition_states(year, wrap = FALSE) +\n  shadow_mark()+\n  enter_grow() +\n  enter_fade()\n\n\ndf%>%\n  group_by(puzzle_times)%>%\n  count(year,sort=T)\n\n\nbd_id <- df%>%\n  arrange(puzzle_date)%>%\n  count(puzzle_bigdave)%>%\n  mutate(bd_id=row_number())#%>%\n  #select(-n)\n\ntm_id <- df%>%\n  arrange(puzzle_date)%>%\n  count(puzzle_times)%>%\n  mutate(tm_id=row_number())#%>%\n  #select(-n)\n\ndf1 <- df %>%\n  left_join(bd_id,by=c(\"puzzle_bigdave\"))%>%\n  left_join(tm_id,by=\"puzzle_times\")\ndf1\n\n\nlibrary(tidyverse)\nlibrary(viridis)\nlibrary(patchwork)\nlibrary(hrbrthemes)\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(colormap)\n\n\nlinks <-df1%>%\n  mutate(label=paste0(puzzle_bigdave,\"-\",puzzle_times))%>%\n  rename(source=bd_id,target=tm_id)\n\n\nlibrary(ggbump)\n\n\nggplot(links,aes(x=source-2,xend=source+5 ,y=target,yend=target+5,\n                 group=label)) +\n  ggbump::geom_sigmoid(aes(color=puzzle_bigdave),show.legend = F)+\n  geom_text(aes(x=source-2,label=puzzle_bigdave),size=3,\n            vjust=\"bottom\",hjust=\"right\",check_overlap = T,show.legend = F)+\n  geom_text(aes(x=source+5,y=target+5,label=puzzle_times),size=3,\n            vjust=\"bottom\",hjust=\"left\",check_overlap = T,show.legend = F)+\n  geom_text(aes(label=answer,color=answer),size=3,\n            vjust=\"bottom\",hjust=\"left\",check_overlap = T,show.legend = F)\n    coord_flip()\n\n\nlot(df, aes(x=year, y= fct_reorder(puzzle_bigdave,year)))+\n  geom_col()+\n  #scale_x_continuous(breaks=seq(2014,2021,1))\n  labs(title=\"Big Dave\")\n\nggplot(df, aes(x=puzzle_date, y= puzzle_times))+\n  geom_col()+\n  labs(title=\"Times\")"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w8_World_Freedom_index/w8_World_Freedom_index.html",
    "href": "tidytuesday/cases2022/posts2022/w8_World_Freedom_index/w8_World_Freedom_index.html",
    "title": "World Freedom index",
    "section": "",
    "text": "library(tidyverse)\nfreedom <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-22/freedom.csv')\nhead(freedom);names(freedom)\n\n\nfreedom1 <- freedom %>% \n  mutate(country=case_when(country==\"Bolivia (Plurinational State of)\"~\"Bolivia\",\n                           country==\"CÃƒÂ´te dÃ¢â‚¬â„¢Ivoire\"~\"Ivory Coast\",\n                           country==\"United Kingdom of Great Britain and Northern Ireland\"~\"United Kingdom\",\n                           country==\"Congo\"~\"Republic of Congo\",\n                           country==\"Russian Federation\"~\"Russia\",\n                           country==\"Brunei Darussalam\"~\"Brunei\",\n                           country==\"Venezuela (Bolivarian Republic of)\"~\"Venezuela\",\n                           country==\"Lao People's Democratic Republic\"~\"Laos\",\n                           country==\"Viet Nam\"~\"Vietnam\",\n                           country==\"Bahamas\"~\"The Bahamas\",\n                           country==\"Guinea-Bissau\"~\"Guinea Bissau\",\n                           country==\"Serbia\"~\"Republic of Serbia\",\n                           country==\"North Macedonia\"~\"Macedonia\",\n                           country==\"Czechia\"~\"Czech Republic\",\n                           country==\"Timor-Leste\"~\"East Timor\",\n                           country==\"Syrian Arab Republic\"~\"Syria\",\n                           country==\"Iran (Islamic Republic of)\"~\"Iran\",\n                           country==\"Republic of Moldova\"~\"Moldova\",\n                           country==\"Democratic People's Republic of Korea\"~\"North Korea\",\n                           country==\"Republic of Korea\"~\"South Korea\",\n                           TRUE ~ country))\n\n\nworld <- rnaturalearth::ne_countries(type=\"countries\")\n\n\nw_countries <- world%>%\n  as.data.frame()%>%\n  count(sovereignt)%>%\n  select(-n)%>%\n  unlist()\n\nmy_countries <- freedom1%>%\n  count(country)%>%\n  select(-n)%>%\n  unlist()\n\n\nsetdiff(w_countries,my_countries)\n\n\nlibrary(rnaturalearth)\nlibrary(sf)\nworld1 <- ne_countries(scale=110,type=\"countries\",\n            returnclass=\"sf\")\n\nworld12 <- world1%>%\n  as.data.frame()%>%\n  select(country=sovereignt,geometry)%>%\n  filter(!country==\"Antarctica\")\n\nfreedom12 <- freedom1%>%\n  left_join(world12,by=\"country\")\n\n\nlibrary(showtext)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nlibrary(sysfonts)\nsysfonts::font_families_google()\nsysfonts::font_add_google(\"Junge\",\"Junge\")\n\n\nlast_plot <- ggplot()+\n  geom_sf(data = world12,mapping=aes(geometry=geometry),size=0.05)+\n  geom_sf(data=freedom12,mapping=aes(geometry=geometry,fill=factor(Status)),size=0.1)+\n  scale_fill_viridis_d(labels=c(\"Free\",\"Not Free\",\"Partially Free\")) +\n  labs(fill=\"Status\",title=\"Freedom in the World 1995-2020\",\n       caption=\"Freedom House and the United Nations by way of Arthur Cheib | Viz: Federica Gazzelloni\\n #TidyTuesday 2022/08\")+\n  coord_sf()+\n  facet_wrap(vars(year))+\n  ggthemes::theme_map()+\n  theme(text = element_text(family=\"Junge\"),\n        plot.title.position = \"panel\",\n        plot.title = element_text(size=14),\n        plot.caption = element_text(size=4),\n        plot.background = element_rect(fill=\"beige\",color=\"beige\"),\n        panel.background = element_rect(fill=\"beige\",color=\"beige\"),\n        legend.position = c(0.05,-0.1),\n        legend.direction = \"horizontal\",\n        legend.box.background = element_rect(fill=\"beige\",color=\"beige\"),\n        legend.background = element_rect(fill=\"beige\",color=\"beige\"),\n        legend.key.size = unit(0.2, 'cm'), #change legend key size\n        legend.key.height = unit(0.2, 'cm'), #change legend key height\n        legend.key.width = unit(0.2, 'cm'), #change legend key width\n        legend.title = element_text(size=4), #change legend title font size\n        legend.text = element_text(size=4),\n        strip.background = element_blank(),\n        strip.text = element_text(size=4))\n\n\nlibrary(cowplot)\nggdraw()+\n  draw_plot(last_plot)+\n  draw_label(\"Political rights and civil liberties around the world deteriorated to their\\n lowest point in more than a decade in 2017, extending a period characterized by emboldened\\n autocrats, beleaguered democracies, and the United States’ withdrawal from its leadership\\n role in the global struggle for human freedom. #FreedomHouse\",\n             x=0.66,y=0.225,fontfamily=\"Junge\",size=4)\n\n\nggsave(\"freedom.png\",limitsize = FALSE,\n       height = 1000,  width = 1350, \n       units = \"px\", dpi = 320)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w37_Bigfoot/w37_Bigfoot.html",
    "href": "tidytuesday/cases2022/posts2022/w37_Bigfoot/w37_Bigfoot.html",
    "title": "Bigfoot",
    "section": "",
    "text": "setwd(\"~/Documents/R/R_general_resources/TidyTuesday/data/2022/w37_bigfoot\")\nlibrary(tidyverse)\n# bigfoot colors: https://icolorpalette.com/color/bigfoot\n\n# load data\nbigfoot <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-13/bigfoot.csv')\ndf <- bigfoot%>%\n  select(county,\n         state,\n         latitude,\n         longitude,\n         date,\n         number,\n         precip_type,\n         visibility,\n         classification) %>%\n  filter(!is.na(latitude)) %>%\n  mutate(precip_type=ifelse(is.na(precip_type),\"unknown\",precip_type),\n         date=as.Date(date,\"%Y-%m-%d\")) %>%\n  mutate(year=lubridate::year(date),.after=\"date\",\n         visibility=ifelse(is.na(visibility),mean(visibility,na.rm = T),visibility)) %>%\n  filter(year>=1963) %>%\n  filter(longitude>-130) %>%\n  mutate(state=tolower(state),\n         classification=case_when(classification==\"Class A\"~\"clear sightings\",\n                                  classification==\"Class B\"~\"not clear view\",\n                                  classification==\"Class C\"~\"second-hand reports\")) %>%\n  rename(ID=state)\ndf%>%names\n\n\n\nlabels <- df%>%\n  group_by(ID) %>%\n  mutate(pct_view=number/sum(number)*100,.after=number)%>%\n  mutate(cent_long=mean(range(longitude)),cent_lat=mean(range(latitude)),.after=longitude)%>%\n  ungroup() %>%\n  count(ID,cent_long,cent_lat,pct_view)%>%\n  group_by(ID) %>%\n  summarize(avg_pct_view=round(mean(pct_view),2),cent_long,cent_lat,.groups=\"drop\")%>%\n  ungroup() %>%\n  distinct()\n\nlabels\n\n\nstates <- map_data(\"state\")\nworld <- map_data(\"world\") %>%\n  # set a restricted view to long = c(-122,-66) and lat = c(25,50)\n  filter(long> -125,long< -66,\n         lat> 25, lat< 60)\n\n# load BigFoot fonts\n# library(systemfonts)\n# fonts <- system_fonts()\n# fonts%>%\n#  arrange(family)%>%\n#  filter(str_detect(family,\"Big\"))%>%select(family)\n\n\nlibrary(randomcoloR)\nn <- 48\npalette <- distinctColorPalette(n)\n\nset.seed(1)\np <- ggplot() +\n  geom_polygon(data = world, mapping = aes(long, lat,\n                                           group=group),\n               fill=\"#f4d6b5\",color=\"#446471\",\n               size=0.2) +\n  geom_polygon(data = states, mapping = aes(long, lat,\n                                            group=group),\n               fill=\"#ebe2df\",color=\"#446471\",\n               size=0.2) +\n  geom_point(df, mapping = aes(x=longitude,y=latitude,\n                               color=ID),\n             alpha=0.3,\n             size=0.5,show.legend = F) +\n  ggrepel::geom_label_repel(labels, \n            mapping = aes(x=cent_long,y=cent_lat,\n                          label=avg_pct_view),\n            label.padding = unit(0.05,\"pt\"),\n            color=\"#1a2f38\",\n            family=\"Monaco\",\n            size=3,\n            max.overlaps = Inf,\n            label.size = unit(0.05,\"pt\"), \n            fill = \"grey90\"\n            )+\n  coord_map() +\n  scale_color_manual(values = palette) +\n  ggthemes::theme_map() +\n  labs(title=\"Bigfoot\",\n       subtitle = \"Avg(%) views by county from 1963\",\n       color=\"\",\n       caption=\"\\nDataSource: #TidyTuesday2022 week37 BigFoot\\nDataViz: Federica Gazzelloni\\n\") +\n  theme_void()+\n  theme(text=element_text(family=\"Monaco\",color=\"grey30\"),\n        plot.title = element_text(size=55,hjust=0.1,vjust=0.5,\n                                  family=\"Big Bloke BB\"),\n        plot.subtitle = element_text(size=9,hjust=0.1),\n        plot.caption = element_text(vjust = 0.5,hjust=0),\n        plot.title.position = \"plot\",\n        legend.key.size = unit(1,units = \"pt\"),\n        legend.background = element_rect(fill=\"white\"),\n        legend.key = element_blank(),\n        legend.box.background = element_blank(),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.3,0.05),\n        plot.background = element_rect(fill=\"#fff0c6\",\n                                       color=\"#fff0c6\"))\n  \nlibrary(cowplot)\nggdraw(p)+\n  draw_image(\"bigfoot.png\",scale=0.2,\n             y=0.144,x=-0.15) +\n  draw_image(\"bigfoot.png\",scale=0.15,\n             y=0.12,x=0)+\n  draw_image(\"bigfoot.png\",scale=0.1,\n             y=0.08,x=0.1)\n\n\n\nggsave(\"w37_bigfoot.png\",\n       bg=\"#fff0c6\",\n       dpi=320,\n       width = 5.81,\n       height = 6)\n\ndev.off()"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w29_Technology_Adoption/w29_Technology_Adoption.html",
    "href": "tidytuesday/cases2022/posts2022/w29_Technology_Adoption/w29_Technology_Adoption.html",
    "title": "Technology Adoption",
    "section": "",
    "text": "Data contains information on the adoption of over 100 technologies in more than 150 countries since 1800. Described is technology usage primarily based on per capita measures and divide technologies into the two broad categories of production and consumption.\n\nlibrary(tidyverse)\nlibrary(knitr)\nknitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE, \n                      comment = \"\",\n                      echo = TRUE, dpi = 300, cache.lazy = FALSE,\n                      tidy = \"styler\", fig.width = 8, fig.height = 5)\n\n\n# technology <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-07-19/technology.csv')\n\n\n# saveRDS(technology,\"technology.rds\")\ntechnology <- readRDS(\"technology.rds\")\n\ntechnology_df<-technology%>%select(-variable,-label)\n\ntechnology_df %>% count(group)\n\n\nlibrary(ggtext)\n\n\ntechnology_df %>%\n  filter(group%in%c(\"Consumption\",\"Production\")) %>%\n  filter(iso3c==\"ITA\") %>%\n  group_by(iso3c,year,group) %>%\n  summarize(Average=round(mean(value)),\n            Median=round(median(value)),.groups=\"drop\")%>%\n  ungroup() %>%\n  pivot_longer(cols = c(\"Average\",\"Median\"),names_to=\"metric\",values_to=\"values_metrics\") %>%\n  filter(values_metrics>0) %>% \n  ggplot(aes(x=factor(year), y= values_metrics)) +\n  geom_line(size=0.2,color=\"gray\")+\n  geom_line(aes(group=factor(group),\n                color=factor(group)),\n            size=0.8)+\n  geom_point(aes(color=factor(group)),shape=21,stroke=0.6,size=2)+\n  scale_y_log10(labels=scales::comma_format())+\n  scale_x_discrete(breaks=seq(1839,2020,10))+\n  ggthemes::scale_color_fivethirtyeight() +\n  ggthemes::theme_fivethirtyeight() +\n  labs(title=\"Cross-country Historical Adoption of Technology (CHAT)\",\n       subtitle=\"<span style='color:#0072B2;font-size:14pt'>Production vs Consuption</span><br><br>Data contains information on the adoption of over 100 technologies in more than 150 countries since 1800.<br>Described is technology usage primarily based on per capita measures and divide technologies into the two broad categories<br>of production and consumption. Evidences of average and median values differences explain distribution skewness and outliers.<br>The median is less affected by outliers and skewed data than the mean, and is usually the preferred measure of central tendency<br>when the distribution is not symmetrical.<br>Values are obtained grouping data by country, year and between production and consuption. \",\n       caption=\"DataSource: #TidyTuesday 2022 week29 | Technology Adoption |    data.nber.org   | www.cgdev.org\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n       color=\"\")+\n  facet_wrap(~metric,scales=\"free_y\",nrow = 2) +\n  theme(plot.title = element_text(face = \"bold\",size=18),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_markdown(lineheight = 1),\n        axis.line.x = element_line(color=\"gray\",size=1),\n        axis.ticks.x = element_line(size=2))\n\n\nggsave(\"w29_technology.png\",\n       dpi=320,\n       width = 10,\n       height = 8)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w4_Board_games/w4_Board_games.html",
    "href": "tidytuesday/cases2022/posts2022/w4_Board_games/w4_Board_games.html",
    "title": "Board games",
    "section": "",
    "text": "I’ve chosen this graphic for my blog because it turned out to be very interesting. As you can see reading through the article, the shape of the network changes along with the change of the parameters.\nThe dataset I’ve used for making this network comes from #TidyTuesday 2022 week 4 Board games.\nThe picture below is the result of the network visualization.\n\nThe first step is to load the library needed for making the manupulations. I usually load {tidyverse} package because it contains a series of sub packages and functions that are all that is neede for thsi first part of the data wrangling. Also, it provides the pipe %>% operator, which is useful for linking different functions through subsetting the dataset.\n\nlibrary(tidyverse)\n\nThe data sets provided can be loaded from the source like this:\n\nratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-25/ratings.csv')\ndetails <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-25/details.csv')\n\nI’ve also added few line of code for backing the original datasets by saving them as .RDS files, a light file format to store information in.\n\nsaveRDS(ratings,\"ratings.rds\")\nsaveRDS(details,\"details.rds\")\n\nAnd assigned them to new variables:\n\nrat <- readRDS(\"ratings.rds\")\ndet <- readRDS(\"details.rds\")\n\n\n\n\n\nLet’s see the variable’s names inside the sets.\n\n\nnames(rat)\n\n\nnames(det)\n\n\nBased on the variables in the data sets, I’ve started googling for some information nad/or visualizations about Board games, to see if I could find any inspiration from past submissions, and in fact found this source of inspiration: https://www.thewayir.com/blog/boardgames/. Looking through the article found the code and the type of visualization I had in mind, so started replicating the code from the article. My surprise was that data updating and my manipulation slightly changed the output of the plot.\nLet’s go a bit more in deep about that. I’ll go through the steps for replicatiing the network but then sligtly change the output to what you can see in the picture.\nAmong the required libraries found {widyr} package which was very new to me.\n\nEncapsulates the pattern of untidying data into a wide matrix, performing some processing, then turning it back into a tidy form. This is useful for several operations such as co-occurrence counts, correlations, or clustering that are mathematically convenient.\n\nAnd then the other packages such as {igraph}, {ggraph}, and {ggforce}, all packages for making networks of data, and for making extra features.\n\nrequire(widyr)\nrequire(igraph)\nrequire(ggraph)\nrequire(ggforce)\n\n\n\n\n\n\n\nWhat’s the best manipulation for making a graph?\n\nHere is the first part of the data-wrangling\n\nboard_games <- rat %>%\n  select(id,name) %>%\n  left_join(select(det,id,boardgamemechanic),by=\"id\") %>%\n  rename(mechanic=boardgamemechanic) %>%\n  tidyr::separate_rows(mechanic, sep = \",\") %>% \n  mutate(mechanic = str_remove_all(mechanic, \"[[:punct:]]\"),\n         mechanic = str_trim(mechanic),\n         mechanic = gsub(\"^and \",\"\",mechanic)) %>% \n  filter(!is.na(mechanic))\n\n\nkableExtra::kable(head(board_games))\n\nHere is the second part of the wrangling\n\nmechanic <- board_games %>% \n  count(mechanic,sort=T) %>%\n  mutate(mechanic_pct=round(n/sum(n)*100,2))%>%\n  left_join(select(board_games,name,mechanic),by=\"mechanic\") %>%\n  mutate(name=as.factor(name),mechanic=as.factor(mechanic)) %>% \n   distinct() \n\nThis part is for setting the fonts\n\nlibrary(extrafont)\nlibrary(showtext)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nlibrary(sysfonts)\n#font_families_google()\nfont_add_google(name=\"Piedra\",family=\"games\")\n\nfamily = \"games\"\n\n\nSelect the first 50 games\n\nboard_games50 <-board_games%>%\n  select(name,mechanic)%>%\n  count(name,sort=T) %>%\n  slice(1:50)\n\n\n\n\nThe interesting part is here: if we change the filtering level of the mechanic_pct and/or the widyr::pairwise_cor() from the {widyr} package we can see the graph changing along with it. More changes if the level of correlation changes to a lower value more than if set to a higher value.\n\ndf <- board_games50%>%\n  left_join(mechanic,by=\"name\") %>%\n  filter(mechanic_pct > 1) %>%\n  pairwise_cor(mechanic, name, sort = T) %>% \n  filter(correlation > .1)\n\nThe function igraph::graph_from_data_frame() transform data frames into igraph graphs. In addition the funtion igraph::tkplot() can be useful for looking at the graph under different perspectives.\nThis is the final version of the plot:\n\nplot <- df %>% \n  igraph::graph_from_data_frame() %>% \n  ggraph() +\n  geom_edge_link(linejoin = \"round\",\n                 color=\"grey5\",\n                 edge_colour=\"red\",\n                 edge_width=0.5,\n                 edge_linetype=\"solid\") +\n  geom_node_point(color=\"midnightblue\",size=40,alpha=0.4) +\n  geom_node_text(aes(label = name), \n                 repel = T,\n                 size=5,\n                 nudge_y = 0,\n                 color=\"orange\",\n                 family=family) + \n  theme_void() +\n   theme(text = element_text(family=family),\n         plot.background = element_rect(color=\"beige\",fill=\"beige\"))\n\n\n\n\n\n\n\nAdding some features and save\n\n\nlibrary(cowplot)\n\nfinal <-ggdraw()+\n  draw_plot(plot) +\n  draw_label(\"Network of game \\nmechanics\",x=0.5,y=0.85,size=55,fontfamily=family)+\n  draw_label(\"Sliced by the first 50 games by frequency, \n             filtered mechanics greater than 2% proportion of total,\n             then finally taken just the most highly correlated ones\",\n             x=0.8,y=0.12,size=11,fontfamily=family) +\n  draw_label(\"DataSource: Kaggle & Board Games Geek | Viz: Federica Gazzelloni\",\n             x=0.8,y=0.03,angle=0,size=11,alpha=0.5,fontfamily=family) +\n   draw_image(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/plot_logo.png\",x=0.09,y=-0.47,scale=0.05)\n\n\nggsave(\"w4_board_games.png\",\n        plot =final,\n        bg=\"white\",\n        dpi = 320,\n        width = 11,\n        height = 6\n       )\n\n\n\n\n\n\ntidygraph\nigraph\nggnet"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w30_Bring_your_own_data/w30_Bring_your_own_data.html",
    "href": "tidytuesday/cases2022/posts2022/w30_Bring_your_own_data/w30_Bring_your_own_data.html",
    "title": "Bring your own data",
    "section": "",
    "text": "library(tidyverse)\n\ninvestment <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-08-10/investment.csv')\n\n\ninvestment1 <- investment %>%\n  mutate(meta_cat = case_when(meta_cat==\"Total basic infrastructure\" ~ \"Basic\",\n                              TRUE~meta_cat )) %>%\n  mutate(category = case_when(\n    category==\"Private communications equipment in NAICS 515, 517, 518, and 519\"~\"Private communications equipment\",\n    category==\"Private computers in NAICS 515, 517, 518, and 519\"~\"Private computers\",\n    category==\"Office buildings, NAICS 518 and 519\"~\"Office buildings\",\n    category==\"Private software in NAICS 515, 517, 518, and 519\"~\"Private software\",\n    TRUE~category)) %>%\n  filter(gross_inv>=500) %>%\n  group_by(category) %>%\n  summarize(tot_gross_inv=round(sum(gross_inv)))%>%\n  ungroup() %>%\n  arrange(-tot_gross_inv) \n  \ninvestment1 %>%\n  ggplot(aes(x=fct_reorder(category,tot_gross_inv),y=(tot_gross_inv),group=category)) +\n  geom_histogram(aes(fill=category),stat = \"identity\", position=position_dodge(width=0.8),size=0.8,alpha=0.5,bins = 50)+ \n  geom_text(aes(label=scales::dollar(tot_gross_inv)),size=1.5,hjust=0) +\n  guides(color=\"none\",fill=\"none\") +\n  labs(title=\"US Investment categories based on total gross investments\", \n       subtitle=\"70-year period from 1947 to 2017\\n\",\n       caption=\"\\nBEA: measurement of infrastructure in the U.S. National Economic Accounts (NEAs)\\n \\nInfographic: @fgazzelloni\\n DataSource: TidyTuesday Week33: BEA Infrastructure Investment\",\n       x=\"Investment Categories\",y=\"Total Gross Investment (log10 tranformation)\") +\n  coord_flip() +\n  scale_y_log10(labels=scales::dollar,expand = expansion(mult = c(0, .3))) +\n  ggthemes::theme_economist() +\n  theme(axis.text.x = element_text(angle=0,size=8,hjust=0),\n        axis.text.y = element_text(size=5,hjust=1),\n        axis.title.y = element_text(vjust=4),\n        axis.title.x = element_text(vjust=-2),\n        axis.ticks.x = element_line(size=1,color=\"darkred\"),\n        axis.ticks.y = element_line(size=0.2,color=\"darkred\"),\n        axis.ticks.length=unit(.5, \"cm\"),\n        plot.title.position = \"plot\",\n        plot.caption = element_text(vjust=-5,size=6),\n        plot.caption.position = \"plot\",\n        plot.subtitle = element_text(vjust=-2,hjust=0),\n        panel.grid = element_blank(),\n        panel.background = element_blank(), \n        plot.margin = margin(0.5, 1, 0.5, 1, \"cm\"),\n        plot.background = element_rect(fill = \"grey90\",colour = \"grey\",size = 2)\n  ) +\n  annotate(\"text\",label=\"The Private sector\\nshows the highest level of \\nincrease in investments \\nwithin the last 70 years.\\n Private total gross investments is \\nfollowed by S&L pensions,\\n investments in basic, \\nand social infrastructures. \\nDigital infrastructure and transports \\nare before Power, Health , \\nHighways and finally Education \\nwith about 2 000 000 millions $ total investment.\",x=25,y=100000000,size=2)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w46_Web_page_metrics/w46_Web_page_metrics.html",
    "href": "tidytuesday/cases2022/posts2022/w46_Web_page_metrics/w46_Web_page_metrics.html",
    "title": "Web page metrics",
    "section": "",
    "text": "library(tidyverse)\n# install.packages(\"ggsci\")\nlibrary(ggsci)\nlibrary(ggnewscale)\n# ggnewscale::new_scale_fill()\nlibrary(ggtext)\nlibrary(lubridate)\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Roboto Condensed\",\n                family=\"Roboto Condensed\")  \nfont_add_google(name=\"Zen Dots\",\n                family=\"Zen Dots\") \n\n\ntheme_set(theme_void(base_family = \"Roboto Condensed\", base_size = 9))\ntheme_update(\n  axis.text.x = element_text(color = \"grey60\", margin = margin(t = 4)),\n  axis.ticks.x = element_line(color = \"grey60\"),\n  axis.ticks.length.x = unit(.4, \"lines\"),\n  panel.spacing = unit(1.5, \"cm\"),\n  legend.position = \"none\",\n  panel.grid = element_blank(),\n  # t,r,b,l\n  plot.margin = margin(5, 70, 5, 20),\n  plot.background = element_rect(fill = \"grey98\", color = \"grey98\"),\n  plot.title = element_text(family = \"Zen Dots\",size=14),\n  plot.caption = element_text(family = \"Roboto Condensed\", color = \"grey60\", \n                              size = 8, margin = margin(t = 30, r = 50)),\n  strip.text = element_text(family = \"Zen Dots\")\n)\n\n\n# image_alt <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-15/image_alt.csv')\n# color_contrast <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-15/color_contrast.csv')\n# ally_scores <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-15/ally_scores.csv')\nbytes_total <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-15/bytes_total.csv')\n\nspeed_index <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-15/speed_index.csv')\n\n\nbytes_total%>%head\n\n\nspeed_index%>%head\n\n\ncenter <- function(x) {\n  (x-min(x))/(max(x)-min(x))\n}\n\n\ndf <- speed_index %>%\n  inner_join(bytes_total,by=c(\"client\",\"date\",\"timestamp\")) %>%\n  select(-timestamp,-measure.x,-measure.y) %>%\n  mutate(date= ymd(date),\n         ym=zoo::as.yearmon(date),.after=date) %>%\n  group_by(client) %>%\n  arrange(client,date) %>%\n  ungroup() %>%\n  group_by(ym) %>%\n  mutate(speed_ym=sum(p50.x),\n         bytes_ym=sum(p50.y),.after=ym) %>%\n  ungroup() %>%\n  pivot_longer(cols = c(\"p10.x\",\"p25.x\",\"p50.x\",\"p75.x\",\"p90.x\"),names_to=\"sp_quantiles\",values_to = \"speed\") %>%\n  pivot_longer(cols = c(\"p10.y\",\"p25.y\",\"p50.y\",\"p75.y\",\"p90.y\"),names_to=\"by_quantiles\",values_to = \"bytes\") %>%\n  mutate(sp_quantiles=gsub(\".x\",\"\",sp_quantiles),\n         by_quantiles=gsub(\".y\",\"\",by_quantiles)) %>%\n  distinct() %>%\n  mutate(speed_ctr=center(speed),\n         bytes_ctr=center(bytes),\n         alpha= center(speed_ym),\n         bytes_seconds=bytes/speed)\n\n\ndf\n\n\nlabels <- df %>% \n  filter(date==max(date)) %>%\n  select(client,date,by_quantiles,bytes, bytes_ctr,speed,speed_ctr) %>%\n  group_by(by_quantiles,date,client) %>%\n  summarize(avg_bytes=mean(bytes),\n         avg_speed=mean(speed),\n         avg_bytes_ctr=mean(bytes_ctr),\n         avg_speed_ctr=mean(speed_ctr),.groups = \"drop\") %>%\n  ungroup() %>%\n  distinct() %>%\n  mutate(bts_sec=round(avg_bytes/avg_speed,2),\n         by_quantiles=paste0(gsub(\"p\",\"\",by_quantiles),\"%\"))\n\nlabels\n\n\nsummary(df$alpha)\n\n\ndf %>%\n  ggplot(aes(x = date)) +\n  geom_area(aes(y = bytes_ctr,\n                group=by_quantiles,\n                alpha=speed_ctr,\n                color=by_quantiles,\n                fill=by_quantiles)) +\n  ggsci::scale_fill_futurama() +\n  ggsci::scale_color_futurama() +\n  geom_richtext(data = labels,\n                aes(x = date, y = avg_bytes_ctr, group = by_quantiles,\n                    label = glue::glue(\"<b style='font-size:7.5pt;'>{by_quantiles}</b><b style='font-size:6pt;'> {round(bts_sec, 2)} Bps<br>\"),\n                    color = by_quantiles,# nudge_x = 1,\n                    hjust = 0.05,\n                    vjust = 0.7),\n                inherit.aes = FALSE,\n                position = \"stack\",\n                family = \"Roboto Condensed\",\n                size = 2.3,\n                label.colour = NA,\n                fill = NA) +\n  facet_wrap(vars(client),\n             labeller = labeller(client=c(\"desktop\"=\"Desktop\",\"mobile\"=\"Mobile\"))) +\n  scale_alpha(range = c(.5, 0.8)) +\n  scale_x_date(date_labels = \"%Y\",\n               date_breaks = \"1 year\",\n               expand = c(0,0)) +\n  scale_y_continuous(expand = c(0,0)) +\n  coord_cartesian(clip = \"off\") +\n  guides(alpha=\"none\",color=\"none\",fill=\"none\") +\n  labs(title=\"Speed Index\\n\\n\",\n       #subtitle=\"Desktop vs Mobile Bps\",\n       caption=\"Data provides informations about median values of bytes loaded per second by type of device used\\n#TidyTuesday 2022 week 46 | Data: Web Page metrics by httparchive.org | Viz: Federica Gazzelloni\") \n\n\nggsave(\"w46_web_page_metrics.png\",\n       dpi=300,\n       width = 9,height = 6)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w41_Ravelry_data/w41_Ravelry_data.html",
    "href": "tidytuesday/cases2022/posts2022/w41_Ravelry_data/w41_Ravelry_data.html",
    "title": "Ravelry data",
    "section": "",
    "text": "# load the libraries\nlibrary(tidyverse)\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(RColorBrewer)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\n\n\n# set the fonts\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Pangolin\",family=\"pangolin\")\n\n# read the data\nyarn <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-10-11/yarn.csv')\n\n# tidy textures\ndf <- yarn%>%\n  mutate(texture_clean=case_when(str_detect(texture_clean,\"merino\")~\"merino\",\n                                 str_detect(texture_clean,\"ply|plied|play|plies\")~\"ply\",\n                                 str_detect(texture_clean,\"acrylique|acrylic|polyacryl|acrilyc|acryt\")~\"acrylic\",#TRUE~texture_clean))%>%count(texture_clean)%>%filter(str_detect(texture_clean,\"acr|ply\"))\n                                 str_detect(texture_clean,\"nylon\")~\"nylon\",\n                                 str_detect(texture_clean,\"cotton\")~\"cotton\",\n                                 str_detect(texture_clean,\"wool\")~\"wool\",\n                                 str_detect(texture_clean,\"polyamide|polyamid\")~\"polyamid\",\n                                 str_detect(texture_clean,\"angora\")~\"angora\",\n                                 str_detect(texture_clean,\"cashmere\")~\"cashmere\",\n                                 str_detect(texture_clean,\"aran\")~\"aran\",\n                                 str_detect(texture_clean,\"silk\")~\"silk\",\n                                 str_detect(texture_clean,\"jersey\")~\"jersey\",\n                                 TRUE~texture_clean))%>%#count(texture_clean)\n  filter(str_detect(texture_clean,\n                    c(\"merino|ply|acrylic|nylon|cotton|wool|angora|cashmere|aran|silk|jersey\")))%>%\n  count(texture_clean,yarn_weight_name,yardage,grams) %>%\n  mutate(yarn_weight_name=case_when(yarn_weight_name==\"Aran / Worsted\"~\"Aran\",\n                                    yarn_weight_name==\"DK / Sport\"~\"DK\",\n                                    yarn_weight_name==\"Light Fingering\"~\"Fingering\",\n                                    yarn_weight_name==\"Super Bulky\"~\"Bulky\",\n                                    TRUE~yarn_weight_name))%>%\n  filter(!yarn_weight_name==\"No weight specified\",!is.na(yarn_weight_name))%>%\n  filter(!is.na(yardage),!is.na(grams))%>%\n  select(-n)%>%\n  group_by(yarn_weight_name,texture_clean)%>%\n  summarise_all(.funs=mean)%>%\n  select(yarn_weight_name,texture_clean,yardage)\n\n\n# build the data ready for the graph\nd1<- df%>%\n  mutate(from=\"YARN\")%>%\n  relocate(from)%>%\n  rename(to=yarn_weight_name)%>%\n  select(-texture_clean,-yardage)%>%distinct()\nd2 <- df%>%\n  rename(from=yarn_weight_name, \n         to=texture_clean)%>%\n  select(-yardage)%>%distinct()\n\nhierarchy <- rbind(d1, d2)\nvertices <- data.frame(name = unique(c(as.character(hierarchy$from), \n                                       as.character(hierarchy$to))) ) \n\n\n# make the graph_from_data_frame\nmygraph <- graph_from_data_frame(hierarchy, vertices=vertices )\n\n# see the elements of the graph\ndf1 <- create_layout(mygraph, layout = 'dendrogram')\n\n\n# make a function for node angle adj\n# node_angle(df1$x,df1$y,degrees = T)\nnode_ang_adj <- function(x,y) {\n  ifelse(node_angle(x,y) > 90 & node_angle(x,y) < 270 , \n         node_angle(x,y) + 180, node_angle(x,y))\n  }\n\n# make a function for hjust\nnode_hjust_adj <- function(x,y) {\n  ifelse(node_angle(x,y) > 90 & node_angle(x,y) < 270 , 1,0)\n}\n\n# make the graph\nggraph(mygraph, layout = 'dendrogram', circular = TRUE) + \n  geom_edge_diagonal(aes(color=factor(x)),\n                     alpha=0.9,\n                     show.legend = F) +\n  geom_node_point(aes(color=factor(x)),\n                  size=10,\n                  show.legend = F)+\n  geom_node_point(aes(color=factor(x)),\n                  size=10,\n                  shape=8,\n                  show.legend = F)+\n  geom_node_label(aes(filter=!leaf,label=name,color=factor(x)),\n                  label.padding = unit(0.1, \"lines\"),\n                  label.r = unit(0.1, \"lines\"),\n                  label.size = 0.1,\n                  family = \"pangolin\",\n                  fontface=\"bold\",\n                  show.legend = F,\n                  size=4, \n                  alpha=1)+\n  geom_node_text(aes(x = x*1.1, \n                     y=y*1.1, \n                     hjust = node_hjust_adj(x,y),\n                     angle=node_ang_adj(x,y),\n                     filter = leaf, \n                     label=name,\n                     color=factor(x)),\n                 family = \"pangolin\",\n                 fontface=\"bold\",\n                 show.legend = F,\n                 size=4, \n                 alpha=1)+\n  scale_color_manual(values = rep(RColorBrewer::brewer.pal(10,\"Paired\"),10))+\n  scale_x_discrete(expand = c(0,0.3))+\n  scale_y_discrete(expand = c(0,0.3))+\n  coord_fixed()+\n  labs(caption=\"What's inside your YARN?\\ntextures for each type\\n\\nDataSource: #TidyTuesday 2022 week41 Ravelry data\\nDataViz: Federica Gazzelloni (FG) Twitter: @fgazzelloni\\n\",\n       alt=\"Infographics\") +\n  theme_graph()+\n  theme(plot.margin = margin(5,5,5,5,unit = \"pt\"),\n        plot.caption = element_text(face=\"bold\",family=\"pangolin\"))\n\n\n\n#  ggsave(\"w41_yarn.png\",\n#        dpi=280,\n#        bg=\"white\",\n#        width = 9,height = 9)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w27_San_Francisco_Rentals/w27_San_Francisco_Rentals.html",
    "href": "tidytuesday/cases2022/posts2022/w27_San_Francisco_Rentals/w27_San_Francisco_Rentals.html",
    "title": "San Francisco Rentals",
    "section": "",
    "text": "library(tidyverse)\nrent<-readRDS(\"rent.rds\")\nrent\n\n\nmax<-rent%>%\n  mutate(city=str_to_title(city))%>%\n  filter(year>2000)%>%\n  group_by(year,city)%>%\n  mutate(avg=median(price))%>%\n  ungroup()%>%\n  count(year,city,avg) %>%\n    arrange(year,-avg) %>%\n  slice_max(order_by=c(avg),n=10) %>%\n  count(city) %>%\n  select(-n) %>%\n  unlist()\n\nmax\n\n\navg_df<- rent%>%\n  mutate(city=str_to_title(city))%>%\n  filter(year>2000)%>%\n  group_by(year,city)%>%\n  mutate(avg=median(price))%>%\n  ungroup() %>%\n  count(year,city,avg) %>%\n  mutate(pct=round(n/sum(n)*100,2)) %>%\n  arrange(year,-avg)\n\n\navg_group<-avg_df%>%\n  filter(!city%in%max) %>%\n  group_by(year)%>%\n  summarise(avg_group=median(avg)) %>%\n  ungroup()\n\n\nsummary(avg_df$avg)\n\n\ntext prices\n\ntext_max<-rent%>%\n  mutate(city=str_to_title(city))%>%\n  filter(year>2000)%>%\n  group_by(year,city)%>%\n  mutate(avg=median(price))%>%\n  ungroup()%>%\n  count(year,city,avg) %>%\n    arrange(year,-avg) %>%\n  slice_max(order_by=c(avg),n=5) %>%\n  mutate(avg_comma=formatC(avg, format=\"d\", big.mark=\",\"))%>%\n  mutate(avg_text=paste0(\"$\",avg_comma,\" \",city))\n\ntext_max\n\n\n main<- avg_df %>%\n    ggplot(aes(x=factor(year),y=avg,group=factor(city),color=city))+\n    geom_line(size=0.2,show.legend = F,color=\"grey80\",alpha=0.2) +\n    geom_line(data= subset(avg_df, city%in%max),\n              inherit.aes = T,key_glyph = \"timeseries\")+\n    geom_line(data=avg_group,\n            aes(x=factor(year),y=avg_group,group=1),\n              inherit.aes = F,size=1)+\n  geom_text(data= text_max, aes(x=factor(year),y=avg,label=avg_text),\n            inherit.aes = F,family=\"Roboto Condensed\",face=\"bold\",\n            vjust=1,hjust=1)+\n  scale_color_viridis_d()+\n  guides(color=guide_legend(nrow = 2))+\n  scale_x_discrete(expand = c(0,0.09),breaks=seq(2000,2018,2))+\n  scale_y_log10(expand = c(0,0),breaks=5)+\n  labs(title=\"San Francisco Bay Area Craigslist rental prices\",\n       subtitle=\"top 10 high-rent cities & expected global trend (2001-2018)\",\n       caption=\"DataSource: #TidyTuesday2022 week27 San Francisco Rentals on Craigslist\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n       color=\"City\",\n       x=\"Year\",y=\"Median values - log transf ($525 to $11,140)\")+\n    ggdark::dark_theme_classic()+\n  theme(text=element_text(family=\"Roboto Condensed\",color=\"grey90\"),\n        axis.text = element_text(20),\n        legend.position = c(0.75,-0.1),\n        legend.background = element_blank(),\n        legend.text = element_text(size=6),\n        legend.margin = margin(5,5,5,5,\"pt\"),\n        legend.direction = \"horizontal\",\n        panel.grid.major.x = element_line(size=0.2),\n        plot.margin = margin(10,10,10,10,\"pt\"),\n        plot.title = element_text(size=22),\n        plot.caption = element_text(hjust=0),\n        axis.line.y = element_line(size=0.2),\n        axis.line.x = element_line(size=1),\n        axis.ticks = element_line(size=2))\nmain\n\n\nlibrary(showtext)\nshowtext.auto()\nshowtext.opts(dpi=320)\nlibrary(extrafont)\n#loadfonts()\n\n\ninsect<-rent%>%\n  group_by(year)%>%\n  summarize(avg=median(price))%>%\n  ungroup()%>%\n  ggplot(aes(x=factor(year),y=avg,group=1))+\n  geom_point()+\n  geom_line()+\n  scale_x_discrete(expand = c(0,0.09),breaks=seq(2000,2018,4))+\n  labs(title=\"Global SFB rental prices from 2000 to 2018\",\n       subtitle=\"Median values\",\n        x=\"\",y=\"\")+\n   ggdark::dark_theme_classic()+\n  theme(text=element_text(family=\"Roboto Condensed\",color=\"grey90\",size = 18),\n        panel.grid.major.x = element_line(size=0.2),\n        axis.text = element_text(size=20),\n        plot.title = element_text(size=25),\n        plot.title.position = \"plot\",\n        plot.margin = margin(10,10,10,10,\"pt\"),\n        plot.caption = element_text(hjust=0),\n        axis.line.y = element_line(size=0.2),\n        axis.line.x = element_line(size=1),\n        axis.ticks = element_line(size=2))\ninsect\n\n\nggsave(\"insect.png\",\n       dpi=300,\n       width = 8,\n       height = 6)\n\n\nlibrary(cowplot)\n\nggdraw(main)+\n  draw_image(\"insect.png\",scale=0.25,\n             x=-0.35,y=0.25)\n\n\nggsave(\"w27_rentals.png\",\n       dpi=320,\n       width = 9,\n       height = 6)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w40_Product_Hunt_products/w40_Product_Hunt_products.html",
    "href": "tidytuesday/cases2022/posts2022/w40_Product_Hunt_products/w40_Product_Hunt_products.html",
    "title": "Product Hunt products",
    "section": "",
    "text": "library(tidyverse)\nproduct_hunt <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-10-04/product_hunt.csv')\n\nproduct_hunt %>% head()\n\n\nproduct_hunt %>%\n  mutate(month=zoo::as.yearmon(as.Date(release_date)))%>%  # \"%Y-%m-%d\"\n  count(month) %>%\n  ggplot(aes(month,n)) +\n  geom_point() \n\n\nproduct_hunt %>%\n  mutate(month=zoo::as.yearmon(as.Date(release_date))) %>%  # \"%Y-%m-%d\"\n  count(month) %>%\n  ggplot(aes(month,n)) +\n  geom_point() +\n  geom_smooth()\n\n\nproduct_hunt%>%\n   mutate(month=zoo::as.yearmon(as.Date(release_date)))%>%\n   count(name, month,product_ranking,upvotes) %>%\n   drop_na() %>%\n   arrange(-product_ranking,-upvotes)%>%\n   group_by(product_ranking) %>%\n  count(name)\n   filter(upvotes==max(upvotes))\n  \n\n#column_to_rownames(name)\n\n\ndf <- product_hunt%>%\n   mutate(month=zoo::as.yearmon(as.Date(release_date)))%>%\n   count(name, month,product_ranking,upvotes) %>%\n   drop_na() %>%\n   arrange(-product_ranking,-upvotes)%>%\n   group_by(product_ranking) %>%\n   filter(upvotes==max(upvotes))\n\ndf\n\n\nproduct_hunt%>%\n   #mutate(month=zoo::as.yearmon(as.Date(release_date)))%>%\n  mutate(year=lubridate::year(as.Date(release_date)))%>%\n   count(year,product_ranking,upvotes) %>%\n   drop_na() %>%\n   arrange(-product_ranking,-upvotes) %>%\n  group_by(year,product_ranking)%>%\n  summarise(avg_votes=sum(upvotes)) %>%\n  ungroup() %>%\n  mutate(year=factor(year)) \n\n\nproduct_hunt%>%\n   #mutate(month=zoo::as.yearmon(as.Date(release_date)))%>%\n  mutate(year=lubridate::year(as.Date(release_date)))%>%\n   count(year,product_ranking,upvotes) %>%\n   drop_na() %>%\n   arrange(-product_ranking,-upvotes) %>%\n  group_by(year,product_ranking)%>%\n  summarise(avg_votes=sum(upvotes)) %>%\n  ungroup() %>%\n  mutate(year=factor(year)) %>%\n  ggplot(aes(x = product_ranking, y = avg_votes,color=year,fill=year)) +\n  geom_col() \n\n\ndf <- product_hunt %>% \n  arrange(release_date) %>%\n  select(release_date,upvotes,product_ranking) %>%\n  group_by(release_date,product_ranking) %>%\n  summarise(year = year(release_date),\n            month = month(release_date, label=TRUE),\n            day = day(release_date),\n            tot_votes=scale(upvotes)) %>%\n  ungroup() %>% \n  select(release_date,day,month,year,tot_votes,product_ranking)%>%\n        fill(tot_votes,product_ranking) %>%\n  distinct() %>%\n  drop_na() \n\ndf\n\n\nggplot(df,aes(month,product_ranking,fill=tot_votes))+\n # geom_hex() +\n  geom_tile(color=\"grey40\",size=0.5) +\n  scale_fill_viridis(name=\"Votes\",option =\"E\",begin = 0.1,end = 1,direction = -1)+\n  facet_grid(vars(year)) +\n  scale_y_continuous(trans = \"reverse\", breaks = unique(df$day)) +\n  scale_x_discrete(expand = c(0,0)) +\n  labs(x=\"Month\",y=\"Product ranking\",\n       title=\"Heatmap of the products upvotes by ranking in time\",\n       subtitle=\"darker areas show a higher number of votes (scaled values)\",\n       caption=\"DataSource: #TidyTuesday week40 Product Hunt | DataViz: Federica Gazzelloni\") +\n  theme_minimal(base_size = 9,base_family = \"Roboto Condensed\")+\n  theme(text=element_text(color=\"grey90\",face=\"bold\"),\n        axis.line = element_blank(),\n        strip.switch.pad.grid = unit(2,units = \"pt\"),\n        plot.background = element_rect(color=\"grey60\",fill=\"grey60\"),\n        plot.title = element_text(size=18))\n\n\nggsave(\"w40_product_hunt.png\",\n       dpi=600,\n       width = 10,\n       height = 7)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w23_Pride_Corporate_Accountability_Project/w23_Pride_Corporate_Accountability_Project.html",
    "href": "tidytuesday/cases2022/posts2022/w23_Pride_Corporate_Accountability_Project/w23_Pride_Corporate_Accountability_Project.html",
    "title": "Pride Corporate Accountability Project",
    "section": "",
    "text": "library(tidyverse)\n\n\n\n\n# pride_aggregates <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-07/pride_aggregates.csv')\nfortune_aggregates <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-07/fortune_aggregates.csv')\n#static_list <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-07/static_list.csv')\n#pride_sponsors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-07/pride_sponsors.csv')\n#corp_by_politicians <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-07/corp_by_politicians.csv')\n#donors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-07/donors.csv')\n\n\nfortune_aggregates %>% names\n\n\nnames(fortune_aggregates)<-c(\"company\",\"tot_contr\",\"n_politicians\",\"n_states\")\n\n\nfortune_aggregates%>%head\n\n\nlibrary(extrafont)\n# loadfonts()\n\n\nlibrary(ggtext)\nid=c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\")\nplot <- fortune_aggregates%>%\n  arrange(-tot_contr) %>%\n  filter(!company==\"Grand Total\" # tot_contr>=50000\n         ) %>%\n  slice_max(tot_contr,n=7)%>%\n  mutate(company=reorder(as.factor(company),tot_contr))  %>%\n  ggplot(aes(x=company, y=tot_contr)) +\n  geomtextpath::geom_textsegment(aes(xend=company,y=1,yend=tot_contr,\n                                     label=company),\n                                 family=\"Public Sans Medium\",\n                                 textcolour=rainbow(7),\n                                 size=7,linewidth=7,\n                                 lineend = \"butt\",linecolour=rainbow(7)) +\n  geom_point( color=rainbow(7), size=7) +\n  geom_point( color=rainbow(7), size=12,shape=21,stroke=2) +\n  geom_point(shape=id,color=\"black\", size=7) +\n  coord_flip()+\n  labs(title=\"Top 7 <span style='color:gold'>Anti-LGBTQ</span>\",\n       subtitle=\"contributors by Fortune500\",\n       caption=\"Viz:@fgazzelloni | DataSource: #TidyTuesday 2022 week23 -<span style='color:#4b2d8f'>Data for Progress’ Pride Corporate Accountability</span>\")+\n  xlab(\"\") +\n  ylab(\"\")+\n  theme_light() +\n  theme(text = element_text(color=\"grey80\",size=25,family=\"Public Sans Medium\"),\n        plot.title = element_markdown(size=45),\n        plot.caption = element_markdown(size=12,hjust=0),\n        plot.subtitle = element_text(hjust=0),\n    panel.grid.major.x = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.text.x = element_blank(),\n    axis.title = element_blank(),\n    panel.grid = element_blank(),\n    plot.background = element_rect(fill=\"black\",color=\"black\"),\n    panel.background = element_rect(fill=\"black\",color=\"black\")\n  ) \n\n\nlibrary(cowplot)\n\nggdraw()+\n  draw_plot(plot)+\n  draw_label(\"Data for Progress\",\n             x=0.7,\n             y=0.35,\n             size=60,\n             alpha = 0.2,\n             fontfamily = \"Public Sans Medium\",\n             color = \"white\")+\n  draw_label(\"F500\",\n             x=0.5,\n             y=0.45,\n             size=350,\n             alpha = 0.2,\n             fontfamily = \"Public Sans Medium\",\n             color = \"white\")+\n    draw_label(\"Data for Progress has compiled a set of resources for\\nactivists, employees, community leaders, and lawmakers\\nto push back on these policies and the prejudice powering them.\",\n             x=0.7,\n             y=0.25,\n             size=15,\n             fontfamily = \"Public Sans Medium\",\n             color = \"grey90\")\n  \n\nggsave(\"w23_pride.png\",\n       dpi=320,\n       width = 12,\n       height = 7)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w44_Horror_Movies/w44_Horror_Movies.html",
    "href": "tidytuesday/cases2022/posts2022/w44_Horror_Movies/w44_Horror_Movies.html",
    "title": "Horror Movies",
    "section": "",
    "text": "library(tidyverse)\n\n\nhorror_movies <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-01/horror_movies.csv')\nhorror_movies%>%head\n\n\nhorror_movies%>%names\n\n\nhorror_movies%>%DataExplorer::profile_missing()\n\n\n# Library\nlibrary(tidyverse)\nlibrary(streamgraph)\n\n# set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Creepster\",family=\"Creepster\")\n\n\nhorror_movies<-readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-01/horror_movies.csv')\n\nhorror_movies%>%\n  pull(revenue)%>%summary()\nhorror_movies%>%\nfilter(revenue==701842551)%>%View\n\n# Create data:\nhorror_movies%>%\n  arrange(release_date) %>%\n  filter(str_detect(genre_names,\"horror|Horror\"),\n         status==\"Released\",\n         revenue> 0) %>%\n  select(id,title,original_language,\n         release_date,\n         genre_names,\n         popularity,vote_average,\n         budget,revenue) %>% \n  mutate(title=trimws(title),\n         ymonth=zoo::as.yearmon(release_date),\n         year=lubridate::year(release_date)) %>%\n  group_by(original_language,year) %>%\n  summarize(avg_budget=round(mean(budget),2),\n            avg_revenue=round(mean(revenue),2))%>%\n  ungroup() %>%\n  arrange(-avg_budget,-avg_revenue) %>%\n  mutate(name=original_language,\n         value=avg_revenue) -> data\n\n\n\n\n# remotes::install_github(\"davidsjoberg/ggstream\")\nlibrary(ggstream)\n\nlabel<-data %>%\n  group_by(original_language)%>%\n  summarize(year=round(mean(year)),\n            value=max(value))%>%\n  ungroup()\n\ndata %>% #pull(value)%>%summary()\n  ggplot(\n    aes(\n      year, value, \n      color = original_language, \n      fill = original_language\n    )\n  ) +\n  geom_stream(\n    geom = \"polygon\",\n    bw = .45,\n    size = 0,\n    show.legend = F\n  ) +\n  geom_stream(\n    geom = \"contour\",\n    color = \"grey20\",\n    size = 0.05,\n    bw = .45, # Controls smoothness\n    show.legend = F\n  ) +\n  scale_y_log10()+\n  geom_text(data=label,\n            aes(x=year,value,\n                label=original_language),\n            family=\"Creepster\",\n            show.legend = FALSE,\n            check_overlap = FALSE)+\n  labs(title=\"Horror Movies\",\n       subtitle=\"revenue by original language\",\n       caption=\"Your fears are unleashed - IT (2017) reached the highest revenue with $701 842 551\\nDataSource: #TidyTuesday 2022 week 44: Horror Movies by The Movie Database\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n       x=\"Year\",y=\"Revenue\") +\n  theme_minimal()+\n  theme(text=element_text(color=\"white\",\n                          family=\"Creepster\"),\n        plot.title = element_text(size=25),\n        axis.text.x = element_text(color=\"grey80\"),\n        plot.background = element_rect(color=\"grey5\",fill=\"grey5\"))\n\n# 7.53 x 6.03\nggsave(\"w44_horror_movies.png\",\n       dpi=300,\n       width = 7.53,\n       height = 6.03)\n# geom_stream_label(aes(label = original_language),)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w2_Bee_Colony_losses/w2_Bee_Colony_losses.html",
    "href": "tidytuesday/cases2022/posts2022/w2_Bee_Colony_losses/w2_Bee_Colony_losses.html",
    "title": "Bee Colony losses",
    "section": "",
    "text": "library(tidyverse)\n\n\ncolony <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/colony.csv')\nstressor <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv')\n\n\ndf <- colony %>%\n  full_join(stressor,by=c(\"year\",\"months\",\"state\"))\n\ndf<-df%>%filter(!is.na(colony_n))\n\n\nmap <- ggplot2::map_data(\"state\")\nmap\n\nlibrary(maps)\ndata(state.fips)\nabb<-state.fips%>%select(polyname,abb)\n\nmap <-map%>%left_join(abb,by=c(\"region\"=\"polyname\"))%>%\n  mutate(abb=case_when(region==\"massachusetts\"~\"MA\",\n                       region==\"michigan\"~\"MI\",\n                       region==\"new york\"~\"NY\",\n                       region==\"north carolina\"~\"NC\",\n                       region==\"virginia\"~\"VA\",\n                       region==\"washington\"~\"WA\",\n                       TRUE ~ abb))\n\n\nlibrary(extrafont)\nlibrary(showtext)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nlibrary(sysfonts)\nfont_families_google()\nfont_add_google(name=\"Baskervville\",family=\"bees1\")\n\n\n#font_add_google(name =\"Black Han Sans\" ,family = \"my_font\")\n#font_add_google(name =\"Odibee Sans\" ,family = \"my_font1\")\n\nfamily = \"bees1\"\n\n\ntidy_df <- df%>% \n  count(state,year,colony_lost_pct,stressor,stress_pct)%>%\n  filter(year==c(2015,2020))%>%\n  mutate(state=tolower(state))%>%\n  filter(!state%in%c(\"hawaii\",\"other states\",\"united states\"))%>%\n  filter(!is.na(stress_pct))%>%\n  select(-n) %>% # \n  pivot_wider(names_from = year,values_from=stress_pct,\n              values_fill = 0.00001, values_fn={mean}) %>%\n  mutate(stress_pct_diff=round(((`2020`/`2015`) *100)-100))\n  \ntidy_df_geo <- tidy_df%>% left_join(map,by=c(\"state\"=\"region\"))\n\n\nbees_map_df <- tidy_df_geo%>%\n  group_by(state)%>%\n  mutate(lat2=median(range(lat)),\n         long2=median(range(long)))%>% # this is to positioning the numbers \n  ungroup()%>%\n  count(state,abb,long2,lat2,group,stress_pct_diff)%>%\n  group_by(state) %>%\n  mutate(m_stress_pct_diff=round(mean(stress_pct_diff)/10000000,2))%>%\n  ungroup()\n \nbees_map <-ggplot()+\n  geom_polygon(data=tidy_df_geo,\n               mapping=aes(x=long, y=lat, group = group),\n               alpha=0.2,fill=\"gold\",show.legend = F)+\n    \n  stat_summary_hex(data=tidy_df_geo,aes(x=long,y=lat,z=group),\n                   fill=\"orange\",color=\"gold\") +\n  geom_point(data=bees_map_df,mapping = aes(x=long2, y=lat2, group = group,\n                           size=m_stress_pct_diff),\n             shape=21,stroke=0.1,color=\"#299E50\") +\n  geom_text(data=bees_map_df,\n            mapping = aes(x=long2, y=lat2, group = group,\n                           label=abb),size=3,color=\"grey25\") +\n  scale_size_identity(guide=\"legend\")+\n  guides(size = guide_legend(override.aes = list(color = \"grey25\",stroke=1)))+\n  labs(title=\"US Bees colony lost and stressor\",\n       subtitle=\"(%) difference 2015 - 2020\",\n       size=\"AVG Stressor (%)\") +\n  ggthemes::theme_map()+\n  theme(text = element_text(family=family,face=\"bold\"),\n        legend.background = element_blank(),\n        legend.box.background = element_blank(),\n        legend.position = c(0.1,-0.15),\n        legend.key = element_rect(fill=\"orange\",color=\"gold\",size=2),\n        legend.text = element_blank(),\n        plot.background = element_blank(),\n        plot.title = element_text(size=25,face=\"bold\"),\n        plot.subtitle =  element_text(size=15),\n        panel.background = element_blank())\n\n# bees_map\n\n\nlibrary(ggimage)\n\nbees_fly <-df%>%\n  filter(year%in%c(2015,2020))%>%\n  select(state,stressor,stress_pct,colony_lost,year) %>% \n  mutate(stress_pct=ifelse(is.na(stress_pct),0,stress_pct)) %>% \n  #group_by(state)%>%summarize(mean=mean(stress_pct))\n  pivot_wider(names_from = year,values_from=colony_lost,\n              values_fn={mean},values_fill=0) %>%\n  mutate(diff_colony_lost=round(`2020`-`2015`)) %>%\n  #select(-`2015`,-`2020`)%>%\n  mutate(stressor=case_when(stressor==\"Other pests/parasites\"~\"Other\",\n                            stressor==\"Unknown\"~\"Other\",\n                            TRUE~stressor)) %>%\n  group_by(stressor) %>%\n  mutate(m_colony_lost=mean(diff_colony_lost))%>%\n  ungroup()%>%\n  #mutate(img = \"<img src='w2_bees/bees.png' width='12'/>\") %>%\n  mutate(img = \"bees.png\",\n         img=as.factor(img)) %>%as.data.frame()\n\n\npct_decr_lost<- bees_fly %>%\n  count(stressor,m_colony_lost=round(m_colony_lost))%>%\n  mutate(tot_loss=round(m_colony_lost*n),\n         pct=paste0(round(tot_loss/sum(tot_loss)*100),\"%\"))\n\n\nrange(bees_fly$m_colony_lost)\n\n\nbees_fly_plot<-bees_fly%>%\n  left_join(select(pct_decr_lost,stressor,pct),by=\"stressor\")%>%\n  ggplot(aes(x=fct_reorder(stressor,m_colony_lost),y=m_colony_lost))+\n  geom_line(orientation = \"x\",aes(group=1))+\n  ggimage::geom_image(aes(image=img), size=.1) +\n  geom_vline(aes(xintercept=fct_reorder(stressor,-m_colony_lost)),alpha=0.2,color=\"gold\")+\n  geom_text(aes(label=stressor),vjust=-2.5,hjust=0.65)+\n  geom_text(aes(label=pct),vjust=2.5)+\n  expand_limits(x=0,y=c(-1300 , -900))+\n  scale_y_reverse()+ #limits=rev)+\n  scale_x_discrete(limits=rev)+ #limits=rev)+\n  labs(caption=\"Datasource: USDA | DataViz: Federica Gazzelloni\")+\n  theme_void()+\n  theme(text = element_text(family=family,face=\"bold\"),\n        plot.caption=element_text(size=11,face=\"bold\"))\n\n\n# bees_fly_plot\n\n\nlibrary(cowplot)\n\nfinal <- ggdraw()+\n  draw_plot(bees_fly_plot,scale = 0.6,x=0.19,y=-0.13)+\n  draw_plot(bees_map,scale = 0.8,x=-0.1,y=0.1)+\n  draw_image(\"https://d3l4q0oih2c6yv.cloudfront.net/assets/esmis/cornell_seal_simple_b31b1b-54caf4668562db6b35fe259a44a4f9dc5db28a966230652ae2b175edcb9d56f0.svg\",\n             scale=0.1,x=0.45,y=0.43)+\n  draw_image(\"usda_logo.png\",\n             scale = 0.1, x=0.35,y=0.43)+\n  draw_image(\"bee_informed.png\",scale = 0.09,x=-0.37,y=-0.315)+\n  draw_image(\"bee_informed.png\",scale = 0.055,x=-0.37,y=-0.12)+\n  draw_label(\"The Stressors are the causes for bees colony loss\\n the (%) difference 2015-2020 shows some states are more affected then othes by\\n stressors.\",\n             x=0.38,y=0.07,fontfamily = family,size=11)+\n  draw_label(\"Low\",x=0.2,y=0.3,fontfamily = family)+\n  draw_label(\"High\",x=0.2,y=0.2,fontfamily = family)+\n  draw_label(\"Includes unknwon and parasites\",x=0.77,y=0.5,\n             fontfamily = family,size=11)+\n  draw_line(x=c(0.78,0.8),y=c(0.44,0.49),color=\"orange\")+\n  draw_label(\"Percentange of the stressor affecting the colonies\",x=0.8,y=0.2,fontfamily = family,size=10)+\n  draw_line(x=c(0.8,0.78),y=c(0.21,0.31),color=\"orange\")+\n  draw_label(\"The least contributing to bees loss\",x=0.85,y=0.66,\n             size=11,fontfamily = family)+\n  draw_line(x=c(0.89,0.9),y=c(0.56,0.65),color=\"orange\")+\n  draw_label(\"Leading parasite affecting \\nbees colony\\n named Varroa destructor\",x=0.38,y=0.2,size=11,fontfamily = family)+\n  draw_line(x=c(0.42,0.5),y=c(0.18,0.2),color=\"orange\")+\n  draw_image(\"bee_flying.png\",scale = 0.55,x=0.2,y=0.3)\n    \n    \n#final\n\n\nggsave(\n  paste0(\"bees_\", format(Sys.time(), \"%d%m%Y\"), \".png\"),\n   plot =final,\n  bg=\"white\",\n  dpi = 320,\n  width = 11,\n  height = 6\n)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w33_Open_Source_Psychometrics/w33_Open_Source_Psychometrics.html",
    "href": "tidytuesday/cases2022/posts2022/w33_Open_Source_Psychometrics/w33_Open_Source_Psychometrics.html",
    "title": "Open Source Psychometrics",
    "section": "",
    "text": "psych_stats <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-16/psych_stats.csv\")\n\n\npsych_stats%>%head\n\n\nmy_df <- psych_stats%>%\n  arrange(rank)%>%\n  select(char_name,uni_name,personality,avg_rating,rank,rating_sd) %>%\n  filter(uni_name==\"Friends\")\nmy_df\n\nUse {tidytext} to select the personality variables to be used in the visualization. In this case a list of encoded variables, such as /U000.. were filtered out, to leave just words in the vector.\n\nlibrary(tidytext)\nmy_df1 <- my_df %>% \n  mutate(personality=gsub(\"[^A-z]\",\"unknown\",personality))%>%\n  filter(!personality==\"unknown\") %>%\n  #count(personality) %>%\n  unnest_tokens(word, personality) %>%\n  inner_join(get_sentiments(\"bing\")) %>%\n  distinct(char_name,word,sentiment,avg_rating) \n\nFurther wrangling activity on the dataset is done to select only the personality words which are in common and with highest avg rating values for all of the protagonists in Friends TV show.\n\nby_names <- my_df1%>%\n  group_by(word)%>%\n  summarize(char_name,avg_rating=mean(avg_rating),.groups=\"drop\")%>%\n  ungroup()%>%\n  pivot_wider(names_from=char_name,values_from=word)%>%\n  drop_na()%>%\n  pivot_longer(cols=2:7,names_to=\"names\",values_to=\"values\")%>%\n  unnest(values)%>%\n  arrange(values) %>%\n  count(values) %>%\n  group_by(values) %>%\n  filter(!n<6 & !n>6) %>%\n  ungroup() %>%\n  left_join(my_df3,by=c(\"values\"=\"word\"))%>%\n  select(-n) %>%\n  pivot_wider(names_from=char_name,values_from=values) %>%\n  pivot_longer(cols=3:8,names_to=\"names\",values_to=\"word\")%>%\n  distinct()%>%\n  drop_na()%>%\n  mutate(word=str_to_title(word)) %>%\n  mutate(id_sentiment=ifelse(sentiment==\"positive\",1,0))\n\n\nlibrary(extrafont)\n# loadfonts()\n\n\np <-by_names%>%\n  ggplot(aes(x=avg_rating,y=fct_reorder(word,-avg_rating)))+\n  geom_col(aes(fill=names), position = position_fill(),color=\"black\")+\n  ggthemes::scale_fill_tableau()+\n  guides(fill=guide_legend(nrow = 1,reverse = T,keywidth = 0))+\n  labs(fill=\"\",\n       subtitle=\"\\nordered by common high-rating personality\",\n       caption=\"DataSource: Open Source Psychometrics | #TidyTuesday 2022 week33\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n       title=\"Friends: positive and negative personality ratings\")+\n  ggthemes::theme_fivethirtyeight()+\n  theme(text=element_text(color=\"grey90\",family=\"Public Sans Medium\"),\n        plot.title = element_text(size=22),\n        legend.position = \"top\",\n        legend.background = element_rect(fill=\"black\",color=\"black\"),\n        legend.text = element_text(size=12),\n        strip.background = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_text(size=12),\n        panel.grid = element_line(size=3),\n        plot.background = element_rect(fill=\"black\",color=\"black\"),\n        panel.background = element_rect(fill=\"black\",color=\"black\"))\n\n\nlibrary(cowplot)\nggdraw(p)+\n  draw_image(\"logo.png\",scale=0.25,\n             x=-0.35,\n             y=0.45)\nggsave(\"w33_psychometrics.png\",\n       dpi=320,\n       height = 7,\n       width = 9)\n\nOther visualization not to be used.\n\nby_names %>%\n  ggplot(aes(fct_reorder(word,avg_rating),avg_rating,\n             fill=sentiment,color=sentiment))+\n  geom_point()+\n  geom_text(aes(label=word),size=3)+\n  # ggimage::geom_image(x=0.2,y=0.2,image=image)+\n  geom_line(aes(group=sentiment))+\n  #geom_col()+\n  facet_wrap(~fct_reorder(names,-avg_rating),scale=\"free\")+\n  ggthemes::scale_color_tableau()"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w47_UK_Museums/w47_UK_Museums.html",
    "href": "tidytuesday/cases2022/posts2022/w47_UK_Museums/w47_UK_Museums.html",
    "title": "UK Museums",
    "section": "",
    "text": "library(tidyverse)\ntuesdata <- tidytuesdayR::tt_load(2022, week = 47)\nmuseums <- tuesdata$museums\nmuseums %>% head\n\n\nmuseums %>%\n  DataExplorer::profile_missing()\n\n\n# https://stackoverflow.com/questions/54560369/png-of-static-map-using-r-and-mapdeck\nlibrary(tidyverse)\ndf = read.csv(\"https://git.io/geocompr-mapdeck\")\n\ndf\n\n\nlibrary(mapdeck)\n\nset_token(\"MAPBOX_TOKEN\")\nms = mapdeck_style(\"dark\")\n\ndf <- df[!is.na(df$lat), ]\n\nmapdeck(style = ms, pitch = 45) %>%\n  add_grid(data = df, lat = \"lat\", lon = \"lng\", \n           cell_size = 1000,\n           elevation_scale = 50, \n           layer_id = \"grid_layer\",\n           colour_range = colourvalues::colour_values(1:6, palette = \"plasma\")) \n\n\nmapdeck(style = mapdeck_style('dark'),zoom = 1) %>% \n    add_grid(data = df, \n             lat = \"lat\", \n             lon = \"lng\", \n             cell_size = 1000,\n             elevation_scale = 50, \n             layer_id = \"grid_layer\",\n             colour_range = colourvalues::colour_values(1:6, palette = \"plasma\")) %>%\n  add_scatterplot(data = museums,\n                  lat = \"Latitude\",\n                  lon = \"Longitude\",\n                  radius = 0.5,\n                  legend = TRUE,\n                  fill_colour = \"Accreditation\",\n                  layer_id = \"scatter_layer\",\n                  palette = \"viridis\") \n\n\ntable <- museums %>%\nselect(museum_id,`Village,_Town_or_City`,Accreditation,Size,Subject_Matter) %>%\n  janitor::clean_names() %>%\n  group_by(accreditation) %>%\n  count(size) %>%\n  mutate(pct=round(n/sum(n)*100,2)) %>%\n   ungroup() %>%\n  pivot_wider(names_from = size,values_from = pct) %>%\n  select(-n) %>%\n  pivot_longer(cols = 2:6,names_to = \"Type\",values_to = \"pct\")%>%\n  na.omit() %>%\n  pivot_wider(names_from = accreditation,values_from = pct) %>%\n  gt::gt()\n\ntable\n\n\nlibrary(cowplot)\n\nggdraw() +\n  draw_image(\"base_map.png\") +\n  draw_image(\"table.png\",\n             scale=0.25,\n             x=-0.3,y=0)\n\n\nggplot2::ggsave(\"test.png\",\n       dpi=320)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w52_Star_Trek_Timelines/w52_Star_Trek_Timelines.html",
    "href": "tidytuesday/cases2022/posts2022/w52_Star_Trek_Timelines/w52_Star_Trek_Timelines.html",
    "title": "Star Trek Timelines",
    "section": "",
    "text": "Load the libraries\nJoin the two sets by footnote\nThe new dataset combines, year, title, … with the footnote of the Star Trek Timelines. The data comes from the {rtrek} package by Georgios Karamanis."
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w52_Star_Trek_Timelines/w52_Star_Trek_Timelines.html#how-to-make-a-waffle",
    "href": "tidytuesday/cases2022/posts2022/w52_Star_Trek_Timelines/w52_Star_Trek_Timelines.html#how-to-make-a-waffle",
    "title": "Star Trek Timelines",
    "section": "How to make a Waffle",
    "text": "How to make a Waffle\nThis is a little example from: https://r-charts.com/part-whole/waffle-chart-ggplot2/\n\n# install.packages(\"waffle\", repos = \"https://cinc.rud.is\")\nlibrary(waffle)\n\n# Vector\nx <- c(30, 25, 20, 5)\n\n# Waffle chart\nwaffle(x, rows = 8)\n\nIn this dataset there are three formats: book, episode and story\n\ndf%>%\n  count(format)%>%\n  waffle(rows=20)\n\n\nUsing ggplot2\nThis Waffle is made of 12 different colors for identifying the SSeries. Here are used many colors from the trekcolors package for coloring the series of different colors.\n\n# install.packages(\"trekcolors\")\nlibrary(trekcolors)\n# trekcolors::lcars_colors()\n\nThe fonts are from the trekfont package.\n\n# install.packages(\"trekfont\")\nlibrary(trekfont)\n# trekfont::show_trekfonts()\nlibrary(showtext)\nfont <- c(\"Khan\", \"StarNext\", \"FederationDS9Title\", \"Federation\", \"Klingon\", \"ModernVulcan\", \"TNGcast\", \"FederationStarfleet\")\npath <- system.file(paste0(\"fonts/\", font, \".ttf\"), package = \"trekfont\")\nfor(i in seq_along(font)) font_add(font[i], path[i])\nfont_families()\nshowtext_auto(enable = TRUE)\n\n\nlibrary(waffle)\ndf%>%\n  count(series)%>%\n  drop_na()%>%\n  waffle(rows = 20, size = 0.5)+\n  scale_fill_manual(values =as.character(lcars_colors())) +\n  # Waffle plot\n  #ggplot(aes(fill = series, values = n)) +\n  #geom_waffle(n_rows = 20, size = 0.5, colour = \"white\") +\n  #scale_fill_manual(values =as.character(lcars_colors())) +\n  coord_equal() +\n  scale_x_continuous(expand = c(0, 0))+\n  labs(title=\"Star Trek Timelines Series\",\n       subtitle = \"\",\n       caption=\"DataSource: #TidyTuesday 2022 week52 - Star Trek Timelines\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day2 - Waffle\\n\")+\n  theme_void()+\n  theme(text = element_text(family= \"StarNext\",size=14),\n        #legend.position = \"bottom\",\n        plot.title = element_text(size=50,hjust = 0.3,vjust = 0),\n        plot.caption = element_text(size=20,hjust = 0.4,family=\"FederationDS9Title\"),\n        panel.background = element_rect(fill=\"#9977AA\",color=\"#9977AA\"),\n        plot.background = element_rect(fill=\"#9977AA\",color=\"#9977AA\"))\n\n\nggsave(\"ss.png\",\n       width = 6,height = 5.5,\n       bg=\"#9977AA\",\n       dpi=200)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w3_Chocolate_Bar_ratings/w3_Chocolate_Bar_ratings.html",
    "href": "tidytuesday/cases2022/posts2022/w3_Chocolate_Bar_ratings/w3_Chocolate_Bar_ratings.html",
    "title": "Chocolate Bar ratings",
    "section": "",
    "text": "Here is a short tutorial for making a flow map: https://github.com/rafapereirabr/flow-map-in-r-ggplot\n\nlibrary(tidyverse)\n\n\nchocolate <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-18/chocolate.csv')\n#DataExplorer::profile_missing(chocolate)\n\n\nlibrary(maps)\nlibrary(geosphere)\n#library(rworldmap)\nlibrary(ggthemes)\n\n\n# Get World map\nworldMap <- rworldmap::getMap()\nmapworld_df <- ggplot2::fortify( worldMap )\n\nMismatching values in company_location\nMartinique would not be added in this flow map\n\nchocolate1<-chocolate%>%\n  select(company_location,country_of_bean_origin,cocoa_percent,rating)%>%\n  mutate(company_location=case_when(company_location==\"Amsterdam\"~\"Netherlands\",\n                                    company_location==\"Sao Tome\"~\"Sao Tome and Principe\",\n                                    company_location==\"Sao Tome & Principe\"~\"Sao Tome and Principe\",\n                                    company_location==\"Scotland\"~\"United Kingdom\",\n                                    company_location==\"St. Lucia\"~\"Saint Lucia\",\n                                    company_location==\"St.Vincent-Grenadines\"~\"Saint Vincent and the Grenadines\",\n                                    company_location==\"U.A.E.\"~\"United Arab Emirates\",\n                                    company_location==\"U.K.\"~\"United Kingdom\",\n                                    company_location==\"U.S.A.\"~\"United States of America\",\n                                    company_location==\"Wales\"~\"United Kingdom\",\n                                    TRUE~company_location)\n                                    )\n\nMismatching values in country_of_bean_origin - missing martinique\nMartinique and ** ** would not be added in this flow map\n\nchocolate1<- chocolate1 %>%\n  mutate(country_of_bean_origin=case_when(country_of_bean_origin==\"Blend\"~\"Indonesia\",\n                                          country_of_bean_origin==\"Burma\"~\"Myanmar\",\n                                          country_of_bean_origin==\"Congo\"~\"Republic of the Congo\",\n                                          country_of_bean_origin==\"DR Congo\"~\"Republic of the Congo\",\n                                          country_of_bean_origin==\"Principe\"~\"Sao Tome and Principe\",\n                                          country_of_bean_origin==\"Sao Tome\"~\"Sao Tome and Principe\",\n                                          country_of_bean_origin==\"Sao Tome & Principe\"~\"Sao Tome and Principe\",\n                                          country_of_bean_origin==\"St. Lucia\"~\"Saint Lucia\",\n                                          country_of_bean_origin==\"St.Vincent-Grenadines\"~\"Saint Vincent and the Grenadines\",\n                                          country_of_bean_origin==\"Sulawesi\"~\"Indonesia\",\n                                          country_of_bean_origin==\"Sumatra\"~\"Indonesia\",\n                                          country_of_bean_origin==\"Tanzania\"~\"United Republic of Tanzania\",\n                                          country_of_bean_origin==\"Tobago\"~\"Trinidad and Tobago\",\n                                          country_of_bean_origin==\"Trinidad\"~\"Trinidad and Tobago\",\n                                          country_of_bean_origin==\"U.S.A.\"~\"United States of America\",\n                                          TRUE~country_of_bean_origin)\n  )\n\n\nchocolate2<-chocolate1%>%count(company_location,country_of_bean_origin)\n\n\ncentroids_map<- mapworld_df%>%\n  group_by(id)%>%\n  mutate(long=mean(range(long)),lat=mean(range(lat)))%>%\n  ungroup()%>%\n  count(id,long,lat)\n\nDataExplorer::profile_missing(centroids_map)\n\n\nchocolate3<-chocolate2%>%\n  filter(!company_location==\"Martinique\",\n         !country_of_bean_origin==\"Martinique\",\n         !country_of_bean_origin==\"Samoa\")%>%\n  left_join(centroids_map,by=c(\"company_location\"=\"id\"))%>%\n  rename(long_loc=long,lat_loc=lat)%>%\n  left_join(centroids_map,by=c(\"country_of_bean_origin\"=\"id\"))%>%\n  rename(long_orig=long,lat_orig=lat)\n\n\ntext<-chocolate3%>%\n  pivot_longer(cols = c(company_location,country_of_bean_origin),names_to=\"names\",values_to=\"country\")%>%\n  count(country)%>%\n  left_join(centroids_map,by=c(\"country\"=\"id\"))\n\nChocolate palette: https://www.color-name.com/bitter-chocolate.color#color-palettes\n\nlibrary(extrafont)\nlibrary(showtext)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nlibrary(sysfonts)\n#font_families_google()\nfont_add_google(name=\"Felipa\",family=\"choco\")\n\nfamily = \"choco\"\n\n\ncircle_legend<-ggplot() +\n  ggforce::geom_circle(aes(x0 = -0.5, y0 = 0, r = 0.05),\n                       color=\"#dfc27d\",fill=\"#dfc27d\") +\n  ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = 0.05),\n                       color=\"#dfc27d\",fill=\"#dfc27d\") +\n  ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = 0.015),\n                       color=\"blue\",fill=\"blue\") +\n  ggforce::geom_circle(aes(x0 = 0.5, y0 = 0, r = 0.025),\n                       color=\"blue\",fill=\"blue\") +\n  coord_fixed(xlim=c(-0.5,1),ylim = c(-0.5,1))+\n  theme_void()+\n  theme(plot.background = element_blank(),\n        panel.background = element_blank())\n\n\nmap_plot<-ggplot() + \n    geom_polygon(data= mapworld_df%>%\n                   filter(!id==\"Antarctica\"), \n                 aes(long,lat, group=group), fill=\"#2B1A15\",color= \"#BFBAB9\",size=0.2) +\n    geom_point(data = chocolate3, \n                 aes(x = long_orig, y = lat_orig),\n                 color=\"#dfc27d\",size=3,alpha=0.3) +\n   geom_point(data = chocolate3, \n                 aes(x = long_loc, y = lat_loc),\n                 color=\"blue\",size=0.5) +\n  geom_segment(data = chocolate3, \n               aes(x = long_orig, y = lat_orig, \n                   xend = long_loc, yend = lat_loc, alpha=n.y,color=n.y),\n               size=0.05)+ # ,arrow = arrow(length = unit(0.01, \"npc\"))\n   geom_text(data=text,family=family,\n            aes(x=long,y=lat,label=country),color=\"#F07518\", #d2691e\n            vjust=\"top\",hjust=\"right\",size=3,check_overlap = T)+\n  \n  scale_colour_distiller(palette=\"BrBG\", name=\"Frequency\", guide = \"colorbar\") +\n  scale_alpha(range=c(0.8,1))+\n  guides(alpha=\"none\")+\n  labs(title=\"Cocoa's Countries of Origins and Production map\",\n       caption=\"DataSource: Flavors of Cacao | DataViz: Federica Gazzelloni\")+\n  ggthemes::theme_map()+\n  theme(text = element_text(color=\"#d2691e\",family=family),\n        plot.background = element_rect(color=\"#54504d\",fill=\"#54504d\"),# BFBAB9 #282625\n        panel.background = element_rect(color=\"#54504d\",fill=\"#54504d\"),\n        legend.background = element_blank(),\n        plot.title = element_text(hjust = 0.5,size=28),\n        plot.caption = element_text(size=10))\n\nlibrary(cowplot)\n\n\nfinal<-ggdraw()+\n  draw_plot(map_plot)+\n  draw_plot(circle_legend,scale=0.5,x=0.1,y=-0.3)+\n  draw_image(here::here(\"R_general_resources/TidyTuesday/data/2022/w3_chocolate/image1.png\"),\n             x=-0.3,y=-0.41,scale=0.23,clip = \"inherit\")+\n  draw_image(here::here(\"R_general_resources/TidyTuesday/data/2022/w3_chocolate/image2.png\"),\n             x=0.35,y=0.42,scale=0.2,clip = \"inherit\")+\n  draw_image(here::here(\"R_general_resources/TidyTuesday/data/2022/w3_chocolate/image2.png\"),\n             x=-0.35,y=0,scale=0.2,clip = \"inherit\")+\n  draw_label(\"Origin\",x=0.48,y=0.08,fontfamily = family,color=\"#F07518\",size=8)+\n  draw_label(\"Production\",x=0.65,y=0.08,fontfamily = family,color=\"#F07518\",size=8)+\n  draw_label(\"Origin & Production\",x=0.56,y=0.08,fontfamily = family,color=\"#F07518\",size=8)+\n  draw_label(\"data contains values for Martinique and Samoa not mentioned in this map\",x=0.56,y=0.05,color=\"#F07518\",size=8,fontfamily = family)\n\nggsave(\n   \"w3_chocolate.png\",\n   plot =final,\n  bg=\"white\",\n  dpi = 320,\n  width = 11,\n  height = 6\n)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w5_Dog_breeds/w5_Dog_breeds.html",
    "href": "tidytuesday/cases2022/posts2022/w5_Dog_breeds/w5_Dog_breeds.html",
    "title": "Dog breeds",
    "section": "",
    "text": "library(tidyverse)\n\nDog breeds datasets, load the data\n\nbreed_traits <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-01/breed_traits.csv')\ntrait_description <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-01/trait_description.csv')\nbreed_rank_all <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-01/breed_rank.csv')\n\nMake a rank dataset to see which breed is favourite in 2020\n\nrank<-breed_rank_all%>%\n  count(Breed,`2020 Rank`,Image)%>%\n  arrange(`2020 Rank`)%>%\n  slice(1:10)%>%\n  relocate(`2020 Rank`)%>%\n  select(-n)\n\nrank\n\nSelect favourite breeds, and set the images\n\ndogs<-c(\"Bulldogs\",\"Poodles\",\"Beagles\",\"Rottweilers\",\"Dachshunds\")\n\nimages <-rank%>%filter(Breed%in%dogs)%>%select(Breed,Image)\n\nmy_df <-breed_traits%>%\n  select(-\"Coat Type\",-\"Coat Length\")%>%\n  filter(Breed%in%dogs)%>%\n  mutate(id=row_number())%>%\n  relocate(id)%>%\n  pivot_longer(cols=3:16,names_to=\"factor\",values_to=\"value\")%>%\n  inner_join(images,by=\"Breed\")\n\n\nlibrary(extrafont)\nlibrary(showtext)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nlibrary(sysfonts)\n#font_families_google()\nfont_add_google(name=\"Barlow Condensed\",family=\"dogs\")\n\nfamily = \"dogs\"\n\nTo make the plot, use:\n\nggforce::geom_ellipse to make the paws\nggimage::geom_image to add the images\n\n\ndog_prints_plot <-\n  \n  ggplot(my_df,aes(id,value,group=Breed))+\n  \n  # this is the largest part of the paw\n  ggforce::geom_ellipse(aes(x0=id,y0=value-0.2,a=0.2,b=0.25,\n                            angle=50,color=Breed),fill=\"#393d36\",size=0.5,alpha=0.7)+\n  # the following four ellipses are small extrems of the paw\n  ggforce::geom_ellipse(aes(x0=id+0.22,y0=value+0.2,a=0.1,b=0.12, \n                            angle=50,color=Breed),fill=\"#393d36\",size=0.5,alpha=0.7)+\n  ggforce::geom_ellipse(aes(x0=id-0.2,y0=value+0.15,a=0.1,b=0.12,\n                            angle=50,color=Breed),fill=\"#393d36\",size=0.5,alpha=0.7)+\n  ggforce::geom_ellipse(aes(x0=id+0.01,y0=value+0.25,a=0.1,b=0.1,\n                            angle=50,color=Breed),fill=\"#393d36\",size=0.5,alpha=0.7)+\n  ggforce::geom_ellipse(aes(x0=id-0.32,y0=value-0.15,a=0.1,b=0.1,\n                            angle=50,color=Breed),fill=\"#393d36\",size=0.5,alpha=0.7)+\n  # this is the grey part of the paw  \n  ggforce::geom_ellipse(aes(x0=id,y0=value-0.3,a=0.08,b=0.08,\n                            angle=50),color=\"grey65\",size=0.02,fill=\"grey65\",alpha=0.1) +\n  # The segment is to make the arrow up\n  geom_segment(x=0.43,xend=0.43,y=0,yend=6, size=3,color=\"grey65\",\n               arrow = arrow(length = unit(c(0, 0, 0.4, 0.4), 'cm')))+\n  \n  # description of the factors\n  geom_text(aes(label=factor),check_overlap = T, vjust=5.5, hjust=0.5, size=2.5, color=\"midnightblue\",family=family)+\n  \n  # The breed's names\n  geom_text(aes(x=id,y=6.5,label=Breed),color=\"black\",size=5.5,family=family,face=\"bold\")+\n  \n  # Images of the breeds\n  ggimage::geom_image(aes(x=id,y=-1.4,image=Image),size=0.2)+\n  \n  # expand the canvas to make the paws standing out\n  scale_y_continuous(expand = c(0,1))+\n  ylim(-1.5,7)+\n  coord_cartesian()+\n  labs(title=\"Top 5 selected Breeds: Was Goofy a dog?\", \n       caption=\"Datasource: American Kennel Club | #TidyTuesday 2022-w5 | Viz: Federica Gazzelloni\")+\n  ggthemes::theme_fivethirtyeight()+\n  theme(text = element_text(family = family,size=14),\n        plot.title = element_text(size=18,hjust=0.1),\n        plot.caption = element_text(face = \"bold\",vjust=0.5),\n        panel.grid.major.x = element_line(size=38),\n        panel.grid.major.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_line(size=4),\n        plot.background = element_rect(color=\"white\",fill=\"white\"),\n        panel.background = element_rect(color=\"white\",fill=\"white\"),\n        legend.position = \"none\")\n\nAdd extra images and save it\n\nlibrary(cowplot)\n\nfinal <- ggdraw()+\n  draw_plot(dog_prints_plot)+\n  draw_image(\"print.png\",x=0.3,y=0.43,scale=0.16)+\n  draw_image(\"print.png\",x=0.4,y=0.43,scale=0.16)\n\nggsave(\"dog_prints_plot.png\",final)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w22_Company_reputation_poll/w22_Company_reputation_poll.html",
    "href": "tidytuesday/cases2022/posts2022/w22_Company_reputation_poll/w22_Company_reputation_poll.html",
    "title": "Company reputation poll",
    "section": "",
    "text": "Axios and Harris Poll to gauge the reputation of the most visible brands in America, based on 20 years of Harris Poll research. Based on a survey of 33,096 Americans in a nationally representative sample conducted March 11-April 3, 2022.\nEach company received approximately 325 ratings. An RQ score is calculated by: [ (Sum of ratings of each of the 9 attributes)/(the total number of attributes answered x 7) ] x 100.\nScore ranges: 80 & above: Excellent | 75-79: Very Good | 70-74: Good | 65-69: Fair | 55-64: Poor | 50-54: Very Poor | Below 50: Critical\n\nlibrary(tidyverse)\n\n\npoll <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-31/poll.csv')\nreputation <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-31/reputation.csv')\n\n\npoll%>%head\n\n\nreputation%>%head\n\n\nlibrary(extrafont)\n# loadfonts()\n\n\np<-reputation%>%\n  arrange(rank) %>%\n  filter(!industry==\"Other\")%>%\n  mutate(name=reorder(name,score),\n         industry=factor(industry),\n         industry=reorder(industry,-score))%>%\n  ggplot(aes(x=score,y=rank,color=name))+\n  geom_point(size=1,shape=21,stroke=0.5)+\n  geom_line(linetype=\"dashed\")+\n  scale_y_reverse(limits=c(100,1))+\n  facet_wrap(~industry, ncol = 6)+\n  ggthemes::scale_color_colorblind()+\n  guides(color=guide_legend(nrow=1,byrow=TRUE,title.position = \"left\"))+\n  coord_polar(theta = \"y\",start = 1000, direction = 1, clip = \"off\")+\nlabs(title=\"Corporate Reputation Rankings - 2022\",\n     subtitle=\"100 most visible companies grouped by 18 industries are scored in 7 categories\",\n     caption=\"\\nDataSource: #TidyTuesday 2022 week22 - Axios and Harris Poll\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n     x=\"\",\n     y=\"Rank vs Score polarized dotted lines shows Citizenship is the dominant reputation category for all industries, followed by Ethics and Trust,\\nCulture, P&S(Product and Service), Growth, and Vision, in this order for most of the industries.\\nIndustries are ordered by the highest score received by each reputation category.\\nRetail shows a full score trend contrasting Insurance with just one rank/score for each category.\",\n     color=\"Reputation category\")+\n  theme_linedraw()+\n  theme(text=element_text(family=\"Roboto Condensed\"),\n        axis.title = element_text(size=10,hjust=0),\n        plot.title = element_text(size=30),\n        plot.subtitle = element_text(size=14),\n        legend.position = \"top\",\n        panel.grid = element_blank(),\n        axis.text = element_blank(),\n        axis.title.y = element_blank(),\n        axis.ticks = element_blank(),\n        strip.background = element_rect(color=\"grey20\",fill=\"grey20\"),\n        plot.background = element_rect(color=\"grey30\"))\n\n\nggsave(\"w22_reputation2.png\",\n       dpi=320,\n       width = 9,\n       height = 7)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w9_Alternative_Fuel_Stations/w9_Alternative_Fuel_Stations.html",
    "href": "tidytuesday/cases2022/posts2022/w9_Alternative_Fuel_Stations/w9_Alternative_Fuel_Stations.html",
    "title": "Alternative Fuel Stations",
    "section": "",
    "text": "Alternative fueling stations data-set is from the Bureau of transportation statistics updated at January 3, 2022. The U.S. Department of Energy collects this data in partnership with Clean Cities coalitions and their stakeholders to help fleets and consumers find alternative fueling stations.1\n\nlibrary(tidyverse)\n# library(tidytuesdayR)\n# tuesdata <- tidytuesdayR::tt_load(2022, week = 9)\n# stations <- tuesdata$stations\nstations <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-01/stations.csv')\n\nStations dataset is made of 70 variables and about 60000 observations.\nWe are interested in:\n\nOpen date\nStates and cities\nGeo codes\nFuel type code:\n\nBiodiesel (BD),\nCompressed Natural Gas (CNG),\nElectric (ELEC),\nEthanol (ethanol-gasoline blends, E85),\nHydrogen (HY),\nLiquefied Natural Gas (LNG),\nPropane (Liquefied Petroleum Gas, LPG)\n\nStatus code:\n\nAvailable (E)\nPlanned (P)\nTemporarily Unavailable (T)\n\nAccess code:\n\nPublic\nPrivate\n\n\nEach point on the map is counted as one station in the station count\n\nstations <- stations%>%\n  janitor::clean_names()\n\nstations%>%head\n\n\nstations%>%select(contains(\"ev\"))\n\n\nstations%>%names%>%sort\n\n\nstations%>%count(bd_blends,bd_blends_french)\nstations%>%count(e85_blender_pump,e85_blender_pump,e85_other_ethanol_blends)\nstations%>%count(ev_network,ev_on_site_renewable_source)\nstations%>%count(hydrogen_is_retail,hydrogen_pressures,hydrogen_standards,hydrogen_status_link)\nstations%>%count(lng_on_site_renewable_source)\nstations%>%count(cng_on_site_renewable_source)\n\nstations%>%count(facility_type)\nstations%>%count(fuel_type_code)\nstations%>%count(lpg_primary)\n\n\ndf <- stations%>%\n  #filter(between(longitude,-126,-50),latitude>23)%>%\n  mutate(fuel_type=case_when(fuel_type_code==\"BD\"~\"Biodiesel (B20 and above)\",\n                             fuel_type_code==\"CNG\"~\"Compressed Natural Gas (CNG)\",\n                             fuel_type_code==\"E85\"~\"Ethanol (E85)\",\n                             fuel_type_code==\"ELEC\"~\"Electric\",\n                             fuel_type_code==\"HY\"~\"Hydrogen\",\n                             fuel_type_code==\"LNG\"~\"Liquefied Natural Gas (LNG)\",\n                             fuel_type_code==\"LPG\"~\"Propane (LPG)\",\n                             TRUE~fuel_type_code))%>%\n  select(open_date,city,state,zip,latitude,longitude,\n         access_code,\n         facility_type,\n         fuel_type_code,\n         fuel_type,\n         cng_on_site_renewable_source,\n         lng_on_site_renewable_source,\n         ev_on_site_renewable_source)\n\n\nworld <- map_data(\"world\")%>%\n  filter(!region==\"Antarctica\")\nusa <-map_data(\"state\")\n\n\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\n\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\n\nfont_add_google(name=\"Noto Sans\",family=\"notosans\")\n\n\nplot <- ggplot() +\n  geom_polygon(data=world,aes(x=long,y=lat,group=group),\n               fill=\"grey85\",color=\"#654321\",size=0.1) +\n  geom_polygon(data = usa,\n               aes(x = long, y = lat, group = group),\n               fill=\"grey85\",color=\"#654321\",size=0.1,linetype=\"dashed\") +\n  geom_point(data=df,aes(x=longitude,y=latitude,group=state,color=fuel_type_code),\n             show.legend = T,size=0.1,#shape=\".\",\n             key_glyph = rectangle_key_glyph(fill=color)) + \n  \n  geom_point(data=subset(df,fuel_type_code==\"CNG\"),\n             aes(x=longitude,y=latitude,group=state,color=fuel_type_code),\n             show.legend = T,shape=21,stroke=0.1,\n             key_glyph = rectangle_key_glyph(fill=color)) + \n  guides(colour=guide_legend(title.position=\"top\", nrow = 1,\n                                     title.hjust =0.5))+\n  ggthemes::scale_color_tableau(name = \"Fuel type code\",\n    breaks=c(\"ELEC\", \"E85\", \"LPG\",\"CNG\",\"BD\",\"LNG\",\"HY\"))+\n  coord_map(\"ortho\", orientation = c(41.071548, -102.211644, 0)) +\n  labs(title=\"\",\n       subtile=\"\",\n       x=\"\",y=\"\") +\n  theme_void() +\n  theme(text = element_text(family=\"notosans\"),\n        legend.position =  c(0.54,0.61),\n        legend.box.spacing = unit(0,\"pt\"),\n        legend.direction = \"horizontal\",\n        legend.key.size = unit(10,\"pt\"),\n        legend.justification = \"center\",\n        plot.margin = margin(0,0,0,0,unit=\"pt\"),\n        panel.background = element_rect(fill=\"#d8ebff\",color=\"#d8ebff\"),\n        plot.background = element_rect(fill=\"#d8ebff\",color=\"#d8ebff\"))\n\nplot\n\n\nlibrary(gt)\nlibrary(gtExtras)\ntable <- df%>%\n  count(fuel_type,fuel_type_code)%>%\n  mutate(pct=round(n/sum(n)*100,2))%>%\n  arrange(-pct)%>%\n  select(-n)%>%\n  gt::gt(\n    caption=\"Bureau of Transportation Statistics\")%>%\n  gt_plt_bar(column = pct, keep_column = T)%>%\n  tab_header(\n    title = \"Fuel Alternatives\") %>%\n  cols_label(fuel_type_code=\"\",fuel_type = \"Fuel Type\",pct=\"% \")%>%\n  gt_theme_guardian()\n\ntable\n\n#class(table)\n# table %>%\n#   gtsave(filename = \"table.png\")\n\n\nfuel_font <- df%>%\n  select(contains(\"fuel\"),longitude,latitude,city) %>%\n  group_by(city)%>%\n  summarise(fuel_type_code,avg_lng=mean(range(longitude)),avg_lat=mean(range(latitude)),.groups=\"drop\")%>%\n  ungroup()%>%\n  distinct()\n\n \n\nbarplot <- df%>%\n  count(fuel_type_code,fuel_type,cng_on_site_renewable_source,lng_on_site_renewable_source,ev_on_site_renewable_source) %>%\n  pivot_longer(cols=c(\"cng_on_site_renewable_source\",\"lng_on_site_renewable_source\",\"ev_on_site_renewable_source\"),\n               names_to=\"source_name\",values_to=\"source\")%>%\n  filter(!fuel_type==\"NA\",!source==\"NONE\")%>%\n  select(-source_name)%>%\n  drop_na() %>%\n  \n  ggplot(aes(x=fuel_type,y=source))+\n  geom_col(position=\"dodge\",aes(fill=source),show.legend = F)+\n  geom_text(aes(label=source),position=position_dodge(width = 1),\n            angle=0,hjust=1,vjust=0.5,size=5)+\n  #coord_polar(theta = \"x\")+\n  coord_flip()+\n  #facet_wrap(vars(fuel_type))+\n  ggthemes::scale_fill_tableau()+\n  theme_void()+\n  theme(text = element_text(family=\"notosans\",size=12),\n        strip.placement = \"inside\",\n        axis.text.y = element_blank(),\n        plot.background = element_blank(),\n        panel.background = element_blank())\n\nbarplot\n\n\nggsave(\"barplot.png\")\n\n\nlibrary(cowplot)\nggdraw()+\n  draw_plot(plot,scale=1.6)+\n  draw_image(\"barplot.png\",scale=0.5,x=-0.3,y=0.1)+\n  draw_image(\"table.png\",scale=0.3,x=-0.32,y=-0.28)+\n  draw_image(\"NTAD_Logo_32.png\",scale=0.3,x=0.32,y=0.28)+\n  draw_image(\"eia.png\",scale = 0.2,x=0.35,y=-0.3)+\n  draw_line(x = c(0.05, 0.65),y = c(0.88, 0.88),color = \"gold\", size = 4)+\n  draw_label(\"Electric\",x=0.018,y=0.75,size=12,fontfamily = \"notosans\",fontface = \"bold\",angle=90)+\n  draw_label(\"Compr.nat.Gas\",x=0.018,y=0.49,size=12,fontfamily = \"notosans\",fontface = \"bold\",angle=90)+\n  draw_label(\"Fuel type by sources | US DOT | EIA\",x=0.12,y=0.37,size=8,\n             fontfamily = \"notosans\",angle=0)+\n  draw_label(\"US Alternative Fuel Stations\",x=0.35,y=0.9,size=30,\n             fontfamily = \"notosans\",fontface = \"bold\")+\n  draw_label(\"Although gasoline remains by far the dominant \\ntransportation fuel, a variety of alternative fuels \\nare currently in use,primarily by government \\nand private fleets.\\nThese fuels include electricity, propane,\\nhigher ethanol-gasoline blends (E85),\\nhydrogen, and natural gas.\\nIn aggregate, there are currently about 10,000\\n alternative fuel stations in the United States,\\ncompared to approximately 160,000\\n gasoline stations in the country.(EIA)\",size=8,fontfamily = \"notosans\",\n             x=0.86,y=0.47)+\n  draw_label(\"DataSource: #TidyTuesday 2022/w9 | Alternative Fuel Stations | US DOT | EIA\\nInfographics: Federica Gazzelloni\",x=0.35,y=0.05,size=10,fontfamily = \"notosans\")\n\n\nggsave(\"w9_stations.png\",width = 10)\n\n\n\n\n\nFootnotes\n\n\ndatasource↩︎"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w12_Baby_names/w12_Baby_names.html",
    "href": "tidytuesday/cases2022/posts2022/w12_Baby_names/w12_Baby_names.html",
    "title": "Baby names",
    "section": "",
    "text": "Source: https://r-graph-gallery.com/wordcloud\n\nlibrary(tidyverse)\n\nbabynames <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-22/babynames.csv')\n\ndf <- babynames %>%\n  arrange(-n) %>%\n  select(name,n,prop) %>%\n  group_by(name) %>%\n  summarise(n=sum(n),prop=sum(prop))%>%\n  ungroup() %>%\n  arrange(-n) %>%\n  slice(1:200)\n\nlibrary(wordcloud)\nset.seed(123)\n\npar(bg=\"black\") \nwordcloud(df2$word ,size= df2$freq, \n          col=terrain.colors(length(df2$word),alpha=0.9), \n          rot.per=0.3)\n\n\n\nlibrary(wordcloud2) \n\n# install webshot\nlibrary(webshot)\nwebshot::install_phantomjs()\n\n\ndf2 <- df %>%\n  rename(word=name,freq=n)\n\n\n\n# Make the graph\nmy_graph <- wordcloud2(df2, size=1.5,\n                       backgroundColor = \"black\")\n\n\n# save it in html\nlibrary(\"htmlwidgets\")\nsaveWidget(my_graph,\"data/2022/w12_babynames/tmp.html\",selfcontained = F)\n\n# and in png or pdf\nwebshot(\"data/2022/w12_babynames/tmp.html\",\n        \"data/2022/w12_babynames/fig_1.png\", \n        delay =5, vwidth = 980, vheight=950)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w51_Weather_Forecast_Accuracy/w51_Weather_Forecast_Accuracy.html",
    "href": "tidytuesday/cases2022/posts2022/w51_Weather_Forecast_Accuracy/w51_Weather_Forecast_Accuracy.html",
    "title": "Weather Forecast Accuracy",
    "section": "",
    "text": "The amount of annual precipitation is closely related to the monthly temperature patterns throughout the year. This is because temperature can significantly affect precipitation, which in turn can impact the environment and the ecosystem.\nThroughout the year, different regions experience different temperature changes during each month. Generally, in areas with a cold winter season, monthly temperatures tend to be lower, while areas with a warm tropical climate can have higher temperatures year-round. As temperatures increase, the evaporation rate also increases, leading to more moisture in the atmosphere. This increased moisture can result in higher precipitation levels.\nIn summary, the relationship between annual precipitation and monthly temperatures is a part-to-whole connection because it involves the overall amount of precipitation throughout the year being impacted by the individual temperature conditions of each month. Monthly temperature patterns are a crucial component in understanding and predicting the amount of precipitation and the ecological systems that depend on it.\n\ntuesdata <- tidytuesdayR::tt_load(2022, week = 51)\n\n\nlibrary(tidyverse)\nlibrary(maps)\nlibrary(mapdata)\n\n\nweather_forecasts <- tuesdata$weather_forecasts\ncities <- tuesdata$cities\noutlook_meanings<- tuesdata$outlook_meanings\n\n\nweather_forecasts%>%names\n\n\nweather_forecasts%>%head\n\n\ndf <- weather_forecasts%>%\n  inner_join(cities,by=c(\"city\",\"state\"))\n\n\n# save(df,file=\"df.RData\")\nload(\"data/df.RData\")\n\ndf%>%names\n\n\ndf_mean <- df%>%\n  mutate(ymon=zoo::as.yearmon(date),.after=date)%>% # DataExplorer::profile_missing()\n  group_by(ymon,state)%>%\n  summarize(observed_temp=ifelse(is.na(observed_temp),mean(observed_temp,na.rm = TRUE),observed_temp),\n          forecast_temp=ifelse(is.na(forecast_temp),mean(forecast_temp,na.rm = TRUE),forecast_temp),\n          observed_precip=ifelse(is.na(observed_precip),mean(observed_precip,na.rm = TRUE),observed_precip),\n          avg_annual_precip=ifelse(is.na(avg_annual_precip),mean(avg_annual_precip,na.rm = TRUE),avg_annual_precip),\n          lon,lat,state)%>%\n  distinct() %>%\n  mutate(observed_temp=mean(observed_temp),\n         forecast_temp=mean(forecast_temp),\n         observed_precip=mean(observed_precip),\n         avg_annual_precip=mean(avg_annual_precip))%>%\n  distinct() \n\ndf_mean <- df_mean%>%\n  mutate(year=year(ymon),.after = ymon)\n\n\nstate<- map_data(\"state\")\n\nst <- state%>%\n  mutate(state_name=str_to_title(region))\nstate_name <- unique(st$state_name)\nabbr <- state.abb[match(state_name,state.name)]\n\nst_name_abb <- cbind(state_name,abbr)%>%\n  as.data.frame()%>%\n  mutate(abbr=ifelse(state_name==\"District Of Columbia\",\"DC\",abbr))\n\n\nstates_full <- st%>%\n  inner_join(st_name_abb,by=c(\"state_name\"))\n\n\ndf_mean_full <- states_full%>%\n  inner_join(df_mean,by=c(\"abbr\"=\"state\"))%>%\n  distinct()\n\n\nmap <- df_mean_full%>%\n  filter(year==2021)%>%\n  ggplot(aes(x=long,y=lat.x,group=group))+\n  geom_polygon(aes(fill=avg_annual_precip))+\n    geom_point(\n    data = df %>% count(city, lon, lat),\n    mapping = aes(lon, lat, group = city),\n    color = \"red\",\n    shape = 21,\n    stroke = 0.2,\n    inherit.aes = FALSE\n  ) +\n  geom_text(\n    data = df %>% count(city, lon, lat),\n    mapping = aes(lon, lat, label = city),\n    show.legend = FALSE,\n    color = \"black\",\n    size = 1.5,\n    check_overlap = TRUE,\n    family=\"Roboto Condensed\",\n    inherit.aes = FALSE\n  ) +\n  coord_quickmap()+\n   labs(title = \"#30DayChartChallenge 2023 Day1 - Part to whole\",\n       subtitle = \"Comparing Weather Forecasting Accuracy in the United States\",\n       caption=\"DataSource: #TidyTuesday 2022 week51|Weather Forecast Accuracy\\nDataViz: Federica Gazzelloni #30DayChartChallenge 2023 Day1\",\n       fill=\"AVG Annual Precip\") +\n  theme(panel.background = element_rect(color = \"black\", fill = \"#dedede\"),\n        axis.title = element_blank(),\n        text = element_text(color=\"navy\",family=\"Roboto Condensed\"),\n        panel.grid = element_line(linewidth=0.02,color=\"grey40\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank())\n\nmap\n\n\nshowtext.auto(enable = FALSE)\nggsave(\"map.png\",\n       width = 7,height = 5)\n\n\ndf_mean%>%\n  filter(year==2021)%>%\n  mutate(month=month(ymon,label = TRUE ),.after = year)%>%\n  mutate(max_mean_temp=mean(observed_temp))%>%\n  arrange(-max_mean_temp)\n\n\ndf_mean%>%\n  filter(state%in%c(\"VI\",\"PR\",\"HI\",\"FL\",\"LA\"),\n         ymon==\"Jan 2021\")%>%\n  arrange(-observed_temp)\n\n\np <- df_mean%>%\n  filter(year==2021)%>%\n  mutate(month=month(ymon,label = TRUE ),.after = year)%>%\n  mutate(max_temp=max(observed_temp))%>%\n  ggplot(aes(factor(month),observed_temp,group=state))+\n  geom_line(aes(color=observed_temp))+\n  geom_text(data=data.frame(month=rep(\"Jan\",5),\n                            observed_temp=c(80,77.6,75.4,66.7,60.8),\n                           label=c(\"VI\",\"PR\",\"HI\",\"FL\",\"LA\")),\n            aes(factor(month),observed_temp,label=label),\n            inherit.aes = FALSE)+\n  labs(color=\"2021 Monthly Observed Temperature by States\")+\n  ggthemes::theme_economist_white()+\n  theme(axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_text(size=9),\n        plot.background = element_blank())\n\np\n\n\nggsave(\"p.png\",\n       width = 7,height = 5)\n\n\nlibrary(cowplot)\n\nggdraw()+\n  draw_image(\"map.png\")+\n  draw_image(\"images/p.png\",\n             scale=0.35,\n            x=0.3,y=0.3)+\n  draw_label(label=\"Annual precipitation and monthly \\ntemperature are parts of the climate system. Higher annual \\nprecipitation tends to result in lower monthly temperatures \\nas more water in the air can lead to increased cloud cover \\nand less sunlight reaching the ground. Conversely, lower \\nannual precipitation usually means higher monthly \\ntemperatures as there is less water in the air to absorb and \\nreflect sunlight.\",x=0.15,y=.55,size=5,fontfamily = \"Roboto Condensed\")\n\n\nggsave(\"full.png\",width = 7,height = 5)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w49_Elevators/w49_Elevators.html",
    "href": "tidytuesday/cases2022/posts2022/w49_Elevators/w49_Elevators.html",
    "title": "Elevators",
    "section": "",
    "text": "library(tidyverse)\n\n\ntuesdata <- tidytuesdayR::tt_load('2022-12-06')\nelevators <- tuesdata$elevators\nelevators%>%names\n\n\nelevators%>%DataExplorer::profile_missing()%>%\n  mutate(pct_missing=round(pct_missing,2))%>%\n  arrange(pct_missing)\n\n\nelevators1%>%head\n\n\nelevators1 <- elevators%>%\n  janitor::clean_names()%>%\n  mutate(date=as.Date(as.character(dv_status_date), format='%Y%m%d',tz=\"UTC\")) %>%\n  select(zip_code,borough,device_type,latitude,longitude,\n         date)%>% # dim 76088     8\n  na.omit() %>% # dim 66789     8\n  mutate(zip_code=as.numeric(sub(\"\\\\D*(\\\\d{5}).*\", \"\\\\1\", zip_code)))%>%\n  arrange(date)%>%\n  filter(!zip_code==0 & !zip_code== 99999,\n         longitude> -75)\n\n\nelevators1 %>%\n  ggplot(aes(longitude,latitude)) +\n  geom_point(aes(color=factor(device_type)))+\n  coord_equal()\n\n\nlibrary(ggnewscale)\nggnewscale::new_scale_color()\n\n\nusdata::county_complete%>%names\nlibrary(zipcodeR)\nzipcodeR::zip_code_db%>%head\nelevators1%>%count(zip_code)%>%dim # 185\nzipcodeR::zip_code_db%>%\n  filter(zipcode%in%elevators1$zip_code)\nzipcodeR::geocode_zip(elevators1$zip_code) # 183\n\n\nus_county_map <- map_data(\"county\")\n\nggplot()+\n  geom_polygon(data=us_county_map,aes(x=long,y=lat,group = group),\n               fill=NA,color = \"lightblue\")\n\n\nus_county_map%>%head\n\n\nus_county_map_centroids <- us_county_map%>%\n  group_by(subregion) %>%\n  mutate(long=mean(range(long)),lat=mean(range(lat)))%>%\n  ungroup()%>%\n  select(-order,-region)%>%\n  distinct()\nus_county_map_centroids\n\n\nelevators1_centroids <- elevators1%>%\n  group_by(borough) %>%\n  mutate(long=mean(range(longitude)),lat=mean(range(latitude)))%>%\n  ungroup()%>%\n  select(borough,zip_code,long,lat)%>%\n  distinct()\n\n\nelevators1 %>%\n  ggplot(aes(longitude,latitude)) +\n   geom_polygon(data = us_county_map,\n                aes(x=long,y=lat,group = group,fill=subregion),\n                color = \"lightblue\",alpha=0.1)+\n  geom_point(aes(color=factor(borough)),\n             shape=21,stroke=0.1,size=0.5)+\n  scale_color_discrete()+\n  guides(color=guide_legend(title=\"Borough\"),fill=\"none\")+\n  ggnewscale::new_scale_color()+\n  geom_point(aes(color=zip_code),shape=\".\",alpha=0.2) +\n  scale_color_continuous(type = \"viridis\")+\n  geom_text(data = elevators1_centroids,\n             aes(x=long,y=lat,label=borough)) +\n  coord_map(xlim = range(elevators1$longitude),ylim = range(elevators1$latitude))+\n  labs(title = \"\",\n       subtitle = \"\",\n       color=c(\"zip code\",\"Borough\"))+\n  ggthemes::theme_map()+\n  theme(legend.position = c(-0.2,0),\n        legend.background = element_blank())+\n  facet_wrap(vars(device_type))\n\n\nelevators1 %>% # count(device_type)\n  filter(device_type==\"Passenger Elevator (P)\") %>%\n  ggplot(aes(longitude,latitude)) +\n   geom_polygon(data = us_county_map,\n                aes(x=long,y=lat,group = group,fill=subregion),\n                color = \"lightblue\",alpha=0.1)+\n  geom_point(aes(color=factor(borough)),\n             shape=21,stroke=0.1,size=0.5)+\n  scale_color_discrete()+\n  guides(color=guide_legend(title=\"Borough\"),fill=\"none\")+\n  ggnewscale::new_scale_color()+\n  geom_point(aes(color=zip_code),shape=\".\",alpha=0.2) +\n  scale_color_continuous(type = \"viridis\")+\n  geom_point(data = elevators1 %>% filter(device_type==\"Handicap Lift (H)\"),\n             aes(longitude,latitude),color=\"red\",size=0.3)+\n  geom_text(data = elevators1_centroids,\n             aes(x=long,y=lat,label=borough),\n            color=\"white\",family=\"Roboto Condensed\") +\n  coord_map(xlim = range(elevators1$longitude),ylim = range(elevators1$latitude))+\n  labs(title = \"New York City Handicap Lifts availability\",\n       subtitle = \"Registered Passenger Elevator devices from the Department of Buildings 2015\",\n       caption=\"DataSource: #TidyTuesday 2022 week49 Elevators by @emilhvitfeldt | Graphics: Federica Gazzelloni\",\n       color=c(\"zip code\",\"Borough\"))+\n  ggthemes::theme_map()+\n  theme(text = element_text(color=\"white\",family=\"Roboto Condensed\"),\n        plot.title = element_text(size=14),\n        plot.caption = element_text(size=10.5),\n        legend.position = \"none\", # c(-0.2,0),\n        legend.background = element_blank()) +\n  annotate(\"text\", \n           x = -74, y = 40.52, \n           label = \"How to read it:\\nPassenger Elevators are colored by borough and zip code,\\nwhile red dots indicate the presence of Handicap Lifts\",color=\"white\",size=3,family=\"Roboto Condensed\")\n\n\nggsave(\"w49_elevators.png\",bg=\"black\")"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w32_Ferris_Wheels/w32_Ferris_Wheels.html",
    "href": "tidytuesday/cases2022/posts2022/w32_Ferris_Wheels/w32_Ferris_Wheels.html",
    "title": "Ferris Wheels",
    "section": "",
    "text": "Data this #TidyTuesday 2022 week32 is from EmilHvitfeldt.\n\nlibrary(tidyverse)\nwheels <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-09/wheels.csv')\n\nThis dataset contains information about ferris wheels around the world. The objective of this visualization is to provide a visualization of the differences among ferris wheels in terms of diameter and number of cabins. There is a 48% and 15% missing values in the diameter, and number of cabins vectors, respectively. So, what we need to do is find a way to impute these missing values. There are several techniques used for imputing missing values, such as trees, KNN, SVM, mean/median, linear, and polynomial imputations. We could use {tidymodels} and provided step_functions() in order to do that, passing through the use of the recipe() function, or workout a custom way to imputation. This is when you look at the data and impute missing values based on the overall meaning. I’ll call it custom sintetic imputation.\n\n\n\nBefore to start tidying our dataset, we exclude the Nippon wheel as it is the only one without height and it is still on development, searching on the internet, it is difficult to find information about it, so we exclude it. The, a second ferris wheel which requires some attention is the Big O, it has a height which is lower than its diameter, and if you Google it: Big O you’ll find that both height and diameter are 60 mt (197 feet), so I decided to swap the values, considering the higher value as the height and the other as the diameter.\nMoscow-850 is expressed in mt so it needs to be in ft, about 240 ft. Chicago Wheel is in mt as well, so considering it in ft, it would be\n\nwheels1 <- wheels%>% \n  filter(!str_detect(name,\"Nippon\"))%>% # excluded\n  mutate(location=ifelse(is.na(location),\"Dubai\",location),\n         diameter=case_when(name==\"Moscow-850\"~240,\n                            name==\"Chicago Wheel\"~height,\n                            TRUE~diameter),\n         temp=ifelse(name==\"Big O\",height,diameter),\n         height=ifelse(name==\"Big O\",diameter,height),\n         diameter=ifelse(name==\"Big O\",temp,diameter)) \nwheels1%>%\n  select(name,country,height,diameter)%>%\n  filter(name%in%c(\"Big O\",\"Moscow-850\",\"Chicago Wheel\"))\n\nThen, another cleaning step involves the cost and tickets variables (renamed from construction_cost and ticket_cost_to_ride), these two vectors are important to be just numeric, because we are going to use them inside a model to predict suitable missing values for the number of cabins; in addition, when multiple values are provided for tickets, such as adult and children, we include just the adults ticket prices. In order to do that, we make some text customization, named regex, text regular expressions with the help of stringr::str_extract() function, as shown below. We have some missing values among those two vectors, 55% and 43% for costs and tickets, respectively. Also, these two vector will be imputed to be used in our model.\n\nwheels1%>% \n  mutate(costs=stringr::str_extract(construction_cost, \"\\\\d+\\\\.*\\\\d*\"),\n         costs=as.numeric(costs),\n         tickets=stringr::str_extract(ticket_cost_to_ride, \"\\\\d+\\\\.*\\\\d*\"),\n         tickets=as.numeric(tickets)) %>%\n  filter(!is.na(costs))%>%\n  select(name, country,costs,tickets)%>%head\n\nAs said, we suppose that height is always higher than diameter. A Ferris wheel is generally, lifted on a wheel support and the height is the height of the wheel plus its support. So that, the diameter is just the diameter of the wheel in itself. We do not have missing values on the height vector, the only missing value (Nippon wheel) has been excluded. To replace the missing values in the diameter vector, we have a look at the relationship between diameter versus height. It is about linear.\n\n\n\nMore considerations are about the ferris wheel support height, the height of the rim steel structure of the ferris wheel, this is given by the difference between the overall height and radius of the ferris wheel. Here is considered just the distance from the end of the wheel and the ground base of the support. We consider the median difference of the height minus the diameter of the all ferris wheel in the dataset, and build a sintetic_diameter vector filling missing values with the difference between height and the median difference of 33ft.\n\nmed_bs_hg=median(height-diameter,na.rm = T)\nsintetic_diameter=ifelse(is.na(diameter),height-med_bs_hg,diameter)\n\n\n\n\n\n\n\nTo adopt the median difference is quite superficial, but for now consider that as a base structure for all ferris wheel to start with. 33 ft will be the median distance of the ferris wheels from the ground, in our model.\nThen, the number of cabins vector contains 15% of missing values, and here these values are covered with some extra manipulations.\nConsider some geometry, how to calculate the circumference, the arc length, or the distance among cabins, and the angles such as theta. This apparently a redundant procedure, can lead to reduced bias, as theta is of determined range from 0 to 360 degree or \\(2\\pi\\) radiant. The number of cabins can also be of a certain range, as not more than a well specified number of cabins are allowed depending on diameter of the ferris wheel, but this is unknown and potentially be of any unspecified length. For this reason \\(\\theta\\) could be a good estimator.\nThe number of cabins are points on a circle, and for those values in the dataset which are not missing, an arc length can be calculated, as long as the central angle \\(\\theta\\). Once these values are set, the missing values can be calculated with a backwards procedure.\n\\[L=\\text{Length of an arc}\\] \\[r=\\text{Radius}\\] \\[L=\\theta\\frac{\\pi}{180}r\\] A sintetic number of cabins (sintetic_n_cab) vector is set to be filled with imputed missing values. To find these values, some other parameters are needed. The sintetic_diameter vector can be used to find the circumference, as well as the radius, the arc length among points (the arc_distance) and finally \\(\\theta\\). All these values are now filled with missing values, as are derived from the number of cabins vector.\n\ncircumference = pi*sintetic_diameter\narc_distance = circumference/number_of_cabins\ntheta = (arc_distance*180)/(pi*sintetic_diameter/2)\nsintetic_n_cab = circumference/arc_distance\n\nFinal data manipulation below shows how new features are made ready to be used in the model. For further reference Feature Engineering and Selection - Engineering Numeric Predictors, pg.122 is about expanding individual predictors into many predictors.\n\nmy_df <- wheels1%>%\n  select(-temp,-`...1`) %>%\n  mutate(med_bs_hg=median(height-diameter,na.rm = T),\n         sintetic_diameter=ifelse(is.na(diameter),height-med_bs_hg,diameter),\n         #sintetic_height=sintetic_diameter+med_bs_hg,\n         circumference=pi*sintetic_diameter,\n         arc_distance=circumference/number_of_cabins,\n         theta=(arc_distance*180)/(pi*sintetic_diameter/2),\n         sintetic_n_cab=circumference/arc_distance)%>%\n  \n  select(-construction_cost,-ticket_cost_to_ride)%>%\n  arrange(country)\n\nSo, we are left with some missing values in the number of cabins. Before going to modeling, some missing values can be filled considering the mean of the arc_distance for the group of heights, this values will be used to fill some of the missing number of cabins for those values with a common height.\n\n\n\nLooking at the distribution of \\(\\theta\\), it is clear a right skewness of the distribution. As said, the angle \\(\\theta\\), which is between (0,360), might be a good estimator to use for estimating missing number of cabins, passing through the arch length, the distance among cabins on the wheel.\n\nmy_df1%>%\n  ggplot(aes(theta))+\n  geom_histogram(bins=10,color=\"white\")+\n  ggthemes::theme_fivethirtyeight()+\n  labs(title=expression(paste(\"Distribution:\\t\",theta)))\n\nA trees based model would be the best choice for guessing these values (ct. Feature Engineering and Selection - Engineering Numeric Predictors, pg.121).\nOne more consideration is due to the dimension of the dataset:\n\nwheels%>%dim\n\nCross validation could be a solution, as it shuffles data on specified number of folds. In this case the group_vfold_cv() function is used to make the cross validation folds grouped by height while predicting theta.\nMore about how to extrapolate vfold_cv() assessment/analysis datasets here: article\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nset.seed(1234)\nfolds <- group_vfold_cv(my_df1, group = height,v = 10)\n\n\nrec <- my_df1%>%\n  recipe(theta~circumference+height+sintetic_diameter+sintetic_n_cab) %>%\n  step_corr(all_numeric()) %>% \n  step_impute_bag(theta,sintetic_n_cab)\n\nrec%>%prep()%>%bake(new_data=NULL)%>%DataExplorer::profile_missing()\n\nSet a Random forest engine randomForest with tuning parameters. mtry is for feature subset strategy, in this case just three predictors are used. min_n is the min node size, and then there is the number of trees.\n\nshow_engines(\"rand_forest\")\n\n\nshow_model_info(\"rand_forest\")\n\n\nrf_spec <-\n  rand_forest(mtry = tune(), \n              trees = tune(),\n              min_n = tune()) %>%\n  set_engine('randomForest') %>%\n  set_mode('regression')\n\nrf_wfl <- workflow() %>%\n  add_model(rf_spec) %>%\n  add_recipe(rec)\n\ndoParallel::registerDoParallel()\nset.seed(123)\nrf_res <- tune_grid(object = rf_wfl,\n                    resamples = folds,\n                    grid = 20,\n                    control = control_grid(save_pred = T,\n                                           save_workflow = T,\n                                           verbose = T,\n                                           parallel_over = \"everything\"))\n\nrf_res %>% \n  collect_metrics()%>%\n  filter(.metric==\"rmse\")%>%\n  arrange(mean)%>%\n  select(mtry,trees,min_n,mean)%>%\n  pivot_longer(cols=mtry:min_n,names_to=\"parameters\",values_to=\"values\")%>%\n  ggplot(aes(values,mean, color=parameters))+\n  geom_point(show.legend = F)+\n  facet_wrap(~parameters,scale=\"free\")\n\n\nrf_grid <- grid_regular(\n  trees(range = c(500,1000)),\n  min_n(range = c(0,5)),\n  mtry(range=c(2,2)),\n  levels = 5\n)\nrf_grid\n\nSecond tuning with a specified range of parameters.\n\nset.seed(456)\nrf_res2 <- tune_grid(object = rf_wfl,\n                    resamples = folds,\n                    grid = rf_grid,\n                    control = control_grid(save_pred = T,\n                                           save_workflow = T,\n                                           verbose = T,\n                                           parallel_over = \"everything\"))\n\n\nrf_res2 %>%\n  collect_metrics()%>%\n  filter(.metric==\"rmse\")%>%\n  arrange(mean)%>%\n  select(mtry,trees,min_n,mean) %>%\n  mutate(min_n=as.factor(min_n))%>%\n  ggplot(aes(trees,mean, color=min_n))+\n  geom_line()+\n  geom_point(show.legend = F)\n\n\nselect_best(rf_res2,\"rsq\")\n\n\nmy_df2<-my_df1%>%\n  filter(!is.na(theta))\n\ntest<- my_df1%>%\n  filter(is.na(theta))\n\n\npred_theta <- workflow()%>%\n  add_model(rf_spec)%>%\n  add_formula(formula=theta~sintetic_diameter)%>%\n  finalize_workflow(select_best(rf_res2)) %>%\n  fit(data = my_df2) %>%\n  augment(new_data=test) %>%\n  select(sintetic_n_cab,arc_distance,theta,.pred)\n\npred_theta  \n\n\n  my_df1$theta[is.na(my_df1$theta)]  <-  pred_theta$.pred\n  \n  my_imputed_df <- my_df1%>%\n    mutate(sintetic_distance=ifelse(is.na(arc_distance),\n                                    (theta*pi*sintetic_diameter)/360,arc_distance),\n           sintetic_n_cab=ifelse(is.na(number_of_cabins),\n                                 (circumference/sintetic_distance),sintetic_n_cab))%>%\n    select(name,country,height,sintetic_diameter,diameter,sintetic_n_cab)\n  \n  my_imputed_df%>%head\n\n\nmy_imputed_df1 <- my_imputed_df %>%\n  mutate(y = height-sintetic_diameter/2,\n         r = sintetic_diameter / 2) %>%\n  group_by(country) %>%\n  mutate(country_id=1,\n         name=paste0(name,\"\\n\",country),\n         tot_wheels=sum(country_id),.after=country)%>%\n  ungroup() %>%\n  mutate(country=as.character(country)) %>%\n   mutate(name=case_when(name==\"Diamond and Flower Ferris Wheel\\nJapan\"~\"Diamond and Flower\\nFerris Wheel\\nJapan\",TRUE~name))\nmy_imputed_df1%>%head\n\nThis code is from EmilHvitfeldt, who has provided the data for this #TidyTuesday 2022 week32.\n\n cabin <- my_imputed_df1 %>% \n    group_by(name) %>% # summarise(number_of_cabins)\n    summarise(cabin = seq_len(sintetic_n_cab),\n              # Get x and y for the carts\n              cabin_x = cos(cabin / sintetic_n_cab * 2 * pi),\n              cabin_y = sin(cabin / sintetic_n_cab * 2 * pi),\n              # Size them to be the right distance from the center\n              cabin_x = cabin_x * (sintetic_diameter / 2),\n              cabin_y = cabin_y * (sintetic_diameter / 2),\n              # Make sure the carts are raised enough\n              cabin_y = cabin_y + height - sintetic_diameter / 2,\n              # Lower the carts just a bit so it appears they are hanging\n              cabin_y = cabin_y - 12.5,\n              cabin_color = as.character(cabin %% 3),\n              sintetic_diameter,sintetic_n_cab,\n              .groups = \"drop\"\n    )\n\n\nmy_imputed_df1 %>%\n # filter(str_detect(name,\"Flower\"))%>%select(name)\nggplot() +\n    geom_abline(slope = 0, intercept = 0, color = \"darkgreen\") +\n    ylim(0, NA) +\n    ggforce::geom_circle(aes(x0 = 0, y0 = y, r = r),\n                         color=\"midnightblue\") +\n    # # Left leg\n    geom_segment(aes(x = -(height - sintetic_diameter / 2)/2, \n                     xend = 0,\n                     yend = height - sintetic_diameter / 2, \n                     y = 0)) +\n    # right leg\n    geom_segment(aes(x = (height - sintetic_diameter / 2)/2, \n                     xend = 0,\n                     yend = height - sintetic_diameter / 2, \n                     y = 0)) +\n    geom_point(data = cabin,\n               mapping=aes(cabin_x, cabin_y, \n                           color = cabin_color,\n                           fill = cabin_color),\n               size=0.01,\n               shape = 24) +\n    labs(title=\"Ferris Wheels: overview by dimensions\",\n         subtitle = \"Diameters and number of cabins are imputed. Ferris wheels are ordered by number of cabins.\\nOn average: distance from base ground is 33ft, sintetic diameters are 271ft and number of cabins are 42.\\n\",\n         caption = \"Data are from #TidyTuesday 2022 week 32 {ferriswheels} by @Emil_Hvitfeldt\\nDataViz: Federica Gazzelloni @fgazzelloni\")+\n    theme_void()+\n    theme(text = element_text(family=\"Roboto Condensed\", size=14),\n          plot.title = element_text(size=45),\n          plot.subtitle = element_text(size=20),\n          plot.caption = element_text(size=20,hjust = 0.5,vjust=0.5),\n          plot.background = element_rect(fill=\"gray80\",color=\"gray80\"),\n          panel.background = element_rect(fill=\"gray80\",color=\"gray80\"),\n          legend.position = \"none\")+\n    facet_wrap(~fct_reorder(name,sintetic_n_cab))\n\n\n  ggsave(\"w32_ferriswheels.png\",\n         dpi=320,\n         width = 15,\n         height = 18)\n\nJust a little check for some of the ferris wheels with out of the mean overall height.\n\nmy_imputed_df1 %>%filter(str_detect(name,\"Roue|HEP\"))%>%select(name,diameter,height,sintetic_diameter)\n\n\nmy_imputed_df1%>%select(sintetic_diameter,sintetic_n_cab)%>%map_dfr(mean)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w50_Monthly_State_Retail_Sales/w50_Monthly_State_Retail_Sales.html",
    "href": "tidytuesday/cases2022/posts2022/w50_Monthly_State_Retail_Sales/w50_Monthly_State_Retail_Sales.html",
    "title": "Monthly State Retail Sales",
    "section": "",
    "text": "Load libraries\n\nlibrary(tidyverse)\nlibrary(fuzzyjoin)\nlibrary(ggstream)\nlibrary(colorspace)\n\nSet the theme\n\ntheme_set(theme_minimal(base_family = \"Roboto Condensed\",\n                        base_size = 12))\n\n\ntheme_update(\n  plot.title = element_text(\n    size = 20,\n    face = \"bold\",\n    hjust = .5,\n    margin = margin(10, 0, 30, 0)\n  ),\n  plot.caption = element_text(\n    size = 9,\n    color = \"grey40\",\n    hjust = .5,\n    margin = margin(20, 0, 5, 0)\n  ),\n  axis.text.y = element_blank(),\n  axis.title = element_blank(),\n  plot.background = element_rect(fill = \"grey88\", color = NA),\n  panel.background = element_rect(fill = NA, color = NA),\n  panel.grid = element_blank(),\n  panel.spacing.y = unit(0, \"lines\"),\n  strip.text.y = element_text(angle = 0),\n  legend.position = \"bottom\",\n  legend.text = element_text(size = 9, color = \"grey40\"),\n  legend.box.margin = margin(t = 30),\n  legend.background = element_rect(\n    color = \"grey40\",\n    linewidth = .3,\n    fill = \"grey95\"\n  ),\n  legend.key.height = unit(.25, \"lines\"),\n  legend.key.width = unit(2.5, \"lines\"),\n  plot.margin = margin(rep(20, 4))\n)\n\nAnd the color palette\n\npal <- c(\"#FFB400\",\n         \"#C20008\",\n         \"#13AFEF\",\n         \"#8E038E\")\n\nLoad the data\n\ntuesdata <- tidytuesdayR::tt_load(2022, week = 50)\ncoverage_codes <- tuesdata$coverage_codes\nstate_retail <- tuesdata$state_retail\n\nAdd the states’ names\n\nfipcodes <- tigris::fips_codes %>%\n  select(state, state_name)\n\nJoin all sets\n\nmy_df <- state_retail %>%\n  left_join(fipcodes, by = c(\"state_abbr\" = \"state\")) %>%\n  mutate(state_name = ifelse(state_abbr == \"USA\", \"USA\", state_name)) %>%\n  distinct() %>%\n  merge(coverage_codes, by = \"coverage_code\") %>%\n  arrange()\n\nmy_df %>% head\n\nData wrangling\n\nmy_df1 <- my_df %>%\n  select(-naics) %>%\n  mutate(\n    coverage = case_when(\n      coverage == \"non-imputed coverage is greater than or equal to 10% and less than 25% of the state/NAICS total\" ~\n        \"greater than or equal 10% and less than 25% of the state/NAICS total\",\n      coverage == \"non-imputed coverage is greater than or equal to 25% and less than 50% of the state/NAICS total\" ~\n        \"greater than or equal to 25% and less than 50% of the state/NAICS total\",\n      coverage == \"non-imputed coverage is greater than or equal to 50% of the state/NAICS total.\" ~\n        \"greater than or equal to 50% of the state/NAICS total\",\n      coverage == \"non-imputed coverage is less than 10% of the state/NAICS total.\" ~\n        \"less than 10% of the state/NAICS total\",\n      TRUE ~ coverage\n    ),\n    month = as.character(month),\n    year = zoo::as.yearmon(paste0(year, \"-\", month)),\n    change_yoy = ifelse(change_yoy == \"S\", 0, change_yoy),\n    change_yoy_se = ifelse(change_yoy_se == \"S\", 0, change_yoy_se),\n    change_yoy = as.numeric(change_yoy),\n    change_yoy_se = as.numeric(change_yoy_se),\n    coverage = as.factor(coverage),\n    coverage = paste(coverage_code, \"-\", coverage)\n  ) %>%\n  filter(state_abbr %in% c(\"USA\", \"PA\", \"MD\", \"MT\")) %>%\n  filter(!coverage_code == \"S\") %>%\n  group_by(state_name, coverage, year) %>%\n  summarise_if(is.numeric, sum, na.rm = TRUE) %>%\n  mutate(change_yoy = scale(change_yoy, center = FALSE)) %>%\n  ungroup() %>%\n  mutate(year = as.POSIXct(year),\n         year = as.Date(year))\n\nMake the plot\n\nmy_df1 %>%\n  ggplot(aes(\n    x = year,\n    y = change_yoy,\n    color = coverage,\n    fill = coverage\n  )) +\n  geom_stream(\n    geom = \"contour\",\n    color = \"white\",\n    linewidth = 1.25,\n    bw = .45 # Controls smoothness\n  ) +\n  geom_stream(geom = \"polygon\",\n              bw = .45,\n              linewidth = 0.2) +\n  facet_grid(state_name ~ .,\n             scales = \"free_y\",\n             space = \"free\") +\n  scale_y_continuous(trans = scales::modulus_trans(0.1, 1)) +\n  scale_x_date(date_breaks = \"6 months\",\n               date_labels = \"%b-%Y\",\n               expand = c(0, 0)) +\n  scale_color_manual(expand = c(0, 0),\n                     values = pal,\n                     guide = \"none\") +\n  scale_fill_manual(values = pal,\n                    name = NULL) +\n  labs(title = \"Total Year-Over-Year percent change\\nin monthly retail sales value\",\n       subtitle = \"North American Industry Classification System (NAICS) top YoY states\",\n       caption = \"DataSource: #TidyTuesday 2022 Week50 | Monthly State Retail Sales | DataViz: Fgazzelloni\") +\n  theme(legend.direction = \"vertical\")\n\n\nggsave(\"w50_retail_sales.png\")"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w21_Womens_Rugby/w21_Womens_Rugby.html",
    "href": "tidytuesday/cases2022/posts2022/w21_Womens_Rugby/w21_Womens_Rugby.html",
    "title": "Womens Rugby",
    "section": "",
    "text": "library(tidyverse)\n\n\nsevens <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-24/sevens.csv')\nfifteens <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-24/fifteens.csv')\n\n\nmy_df <- sevens%>%\n  mutate(year_month=zoo::as.yearmon(date),.after=date) %>%\n  filter(score_1==\"L\" | score_1==\"W\") %>%\n  #select(-winner,-loser) %>%\n  pivot_longer(cols = c(\"team_1\",\"team_2\"),names_to=\"teams\",values_to=\"t_country\")%>%\n  relocate(teams,t_country,winner,loser) %>%\n  distinct()%>%\n  mutate(final=ifelse(t_country==winner,\"Winner\",\"Loser\"))%>%\n  relocate(final) \n\n\nmy_df%>% # count(t_country)\n  count(t_country,teams,final)%>%\n  group_by(t_country)%>%\n  summarize(final,teams,pct=round(n/sum(n)*100))%>%\n  filter(!pct==100)\n\n\nmy_df%>% # count(t_country)\n  count(t_country,teams,final)%>%\n  group_by(t_country)%>%\n  summarize(final,teams,pct=round(n/sum(n)*100))%>%\n  filter(!pct==100)%>%\n  ungroup()%>%\npivot_wider(names_from=teams,values_from=pct)\n\n\nlibrary(extrafont)\nloadfonts()\n\n\nlibrary(ggbump)\n\n\nmy_df %>%\n  select(row_id,date,year_month,teams,t_country,final) %>%\n  mutate(t_country=case_when(t_country==\"Arabian Gulf\"~\"* Arabian Gulf\",\n                             t_country==\"Burkina Faso\"~\"* Burkina Faso\",\n                             t_country==\"Cote d'Ivorie\"~\"* Cote d'Ivorie\",\n                             t_country==\"Ghana\"~\"* Ghana\",\n                             t_country==\"Hong Kong\"~\"* Hong Kong\",\n                             t_country==\"Kazakhstan\"~\"* Kazakhstan\",\n                             TRUE~t_country))%>%\n  ggplot(aes(x=1,y=t_country,color=teams)) +\n  ggbump::geom_sigmoid(aes(x=1,y=t_country,\n                           xend=year_month+1, yend=final),\n                       key_glyph = draw_key_rect)+\n  geom_text(aes(label=t_country,x=0),\n            hjust=1,family=\"Comic Sans MS\")+\n  geom_text(aes(label=final,x=2000,y=final),family=\"Comic Sans MS\",\n            size=6,hjust=0) +#c(\"Winner\",\"Loser\")\n  xlim(-300,2200)+\n  labs(title=\"Women's Rugby - Countries without scores\",\n       subtitle = \"from December 2000 to May 2010\",\n       caption=\"\\n* 6 countries out of 21 shared a winner/loser position while being either in team 1 or team 2\\nBurkina Faso is the only one who won being in Team 2 with 67% pct, most wins are from Team 1\\nCote d'Ivorie won and lost 50%/50% pct in both teams\\n\\nDataSource: #TidyTuesday 2022 week21 - Women's Rugby - ScrumQueens\\nDataViz: Federica Gazzelloni (@fgazzelloni)\",\n       color=\"\")+\n  viridis::scale_color_viridis(discrete=T,option=\"inferno\",\n                                alpha = 1,begin = 0.5,end = 0.8,\n                               labels = c(\"Team 1\", \"Team 2\"), breaks = c(\"team_1\", \"team_2\"))+\n  theme_void()+\n  theme(text = element_text(family=\"Comic Sans MS\",size=23,color=\"darkorange\"),\n    legend.position = c(0.8,0.2),\n    plot.title = element_text(hjust = 0.1),\n    plot.subtitle = element_text(hjust = 0.1,size=20),\n    plot.caption = element_text(size=10,hjust=0,color=\"darkorange\"),\n    plot.background = element_rect(fill=\"beige\",color=\"beige\"),\n    panel.background = element_rect(fill=\"beige\",color=\"beige\"),\n    plot.margin = margin(5,5,5,5,unit = \"pt\"))\n\n\nggsave(\"w21_women_rugby.png\",\n       width = 8.5,\n       height = 7,\n       dpi=320)\n\n\nfifteens%>%head"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w35_Pell_Grants/w35_Pell_Grants.html",
    "href": "tidytuesday/cases2022/posts2022/w35_Pell_Grants/w35_Pell_Grants.html",
    "title": "Pell Grants",
    "section": "",
    "text": "library(tidyverse)\n\n\npell <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-30/pell.csv')\n\n\nhead(pell)\n\n\nusdata::state_stats%>%names\n\n51 abbr\n\nabbr <- usdata::state_stats%>%\n  count(abbr) %>%\n  select(-n)\n\n59 STATES\n\npell_abbr <- pell%>%\n  count(abbr=STATE) %>%\n  select(-n)\n\n\nmissing <- setdiff(pell_abbr,abbr)%>%\n  unlist()\n\n\nyear_id <- pell%>%\n  count(YEAR) %>%\n  select(-n)%>%\n  mutate(year_id=seq(1,length(YEAR),1))\n\n\ndf <- pell%>%\n  arrange(YEAR) %>%\n  filter(STATE%in%missing)%>%\n  arrange(STATE) %>%\n  mutate(NAME=case_when(NAME==\"American Samoa Cmnty College\"~\"American Samoa Community College\",\n         TRUE~NAME)) %>%\n  mutate(NAME_long=case_when(STATE==\"PR\"~\"Puerto Rico\",\n                             STATE==\"AS\"~\"American Samoa\",\n                             STATE==\"GU\"~\"Guam\",\n                             STATE==\"MH\"~\"Marshall Islands\",\n                             STATE==\"PW\"~\"Palau\",\n                             STATE==\"VI\"~\"Virgin Islands\",\n                             STATE==\"MP\"~\"Marianas Islands\",\n                             STATE==\"FM\"~\"Micronesia\",\n                             TRUE~STATE)) %>%\n  count(STATE,NAME_long,AWARD,RECIPIENT,YEAR) %>%\n  group_by(STATE) %>%\n  mutate(n=n(),avg_single_aw=AWARD/RECIPIENT) %>%\n  ungroup() %>%\n  left_join(year_id,by=\"YEAR\")\n\ndf\n\n\np <- df %>%\n  ggplot(aes(YEAR,avg_single_aw,group=YEAR))+\n  geom_boxplot()\n\n\np\nplotly::ggplotly(p)\n\n\nlibrary(giscoR)\nworld <- gisco_get_countries()\n\n\nstates <- df %>%\n  count(STATE) %>%\n  select(-n)\n\n\nsmall_countries <-world%>%\n  filter(CNTR_ID%in%states$STATE)%>%\n  left_join(df,by=c(\"CNTR_ID\"=\"STATE\"))\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(sf)\n\n\ncropped_world<- st_crop(world, \n        xmin = 120, xmax = 172,\n        ymin = -14, ymax = 40)\n\n\n\n\n\nsmall_countries_feat <- small_countries %>%\n  st_drop_geometry() %>%\n  #filter(CNTR_ID==\"PR\")%>%\n  group_by(YEAR,CNTR_ID,NAME_ENGL)%>%\n  summarise(avg_single_aw,\n            mean_val=mean(avg_single_aw),.groups=\"drop\")%>%\n  ungroup() %>%\n  count(YEAR,CNTR_ID,NAME_ENGL,mean_val) %>%\n  group_by(CNTR_ID)%>%\n  mutate(diff=c(0,diff(mean_val)),\n         diff_prop=paste0(round(diff/mean_val*100,2),\"%\"),\n        # diff_w=round(c(0,diff(mean_val))*1/n,2),\n         avg=round(mean(round(diff/mean_val*100,2)),2))%>%\n  ungroup()\n  \nsmall_countries_feat  \n\n\nnames <- small_countries%>%\n  count(CNTR_ID,NAME_ENGL,avg_single_aw)\n\n\nsubworld <- small_countries %>% \n  group_by(CNTR_ID) %>%\n  # Mock the data field\n  summarise(data=n())%>%\n  ungroup()%>%\n  mutate(id=seq(1,8,1))\n\ntext <- subworld %>% \n  #select(geometry) %>%\n  st_cast(\"MULTIPOLYGON\") %>%\n # st_coordinates() %>%\n  st_centroid() %>%\n  st_coordinates() %>%\n  cbind(names) %>%\n  select(-n)\n\n\ntext_full <- text %>%\n  left_join(small_countries_feat,by=c(\"CNTR_ID\",\"NAME_ENGL\")) %>%\n  count(X,Y,NAME_ENGL,avg) %>%\n  mutate(text=paste0(NAME_ENGL,\"\\n\",avg,\"%\\n\"))\n\n\nlibrary(ggforce)\n\ncircles <-\ndata.frame(\nx0 = text_full$X,\ny0 = text_full$Y,\nr = text_full$avg) #seq(min(text_full$avg), max(text_full$avg), length.out = 8))\n\n\nlibrary(extrafont)\n\n\nggplot() +\n  geom_sf(data = cropped_world, fill=\"gray\")+\n  geom_sf(data = subworld, aes(color=CNTR_ID)) +\n  geom_text(data = text_full, aes(x=X,y=Y,label=text),family = \"Roboto Condensed\") +\n  geom_circle(data = circles, aes(x0 = x0, y0 = y0, \n                                  r = r,\n                                  fill=r,\n                                  alpha=r),\n              color=\"gray\",size=0.2) +\n  scale_fill_gradient(low = \"white\",high = \"blue\")+\n  scale_alpha_continuous(range = c(0.1,0.3))+\n  coord_sf(xlim = c(120,171.8428), \n           ylim = c( -14.36381, 40.59467),\n           crs = 4326) +\n  ggthemes::theme_fivethirtyeight() +\n  theme(text=element_text(family = \"Roboto Condensed\"),\n        panel.grid = element_line(size=0.08),\n        legend.position = \"none\")\n\n\nggsave(\"map2.png\")\n\n\nlibrary(tidyverse)\nlibrary(cowplot)\nggdraw() +\n  draw_image(\"map2.png\",scale=0.99) +\n  draw_image(\"globe.png\",\n             scale=0.2,\n             x=0.409,y=0.4) +\n  draw_label(\"Pell Awards\",\n             x=0.53,y=0.95,\n             fontfamily = \"Roboto Condensed\",\n             hjust=0,\n             color=\"grey30\",\n             size=30) +\n    draw_label(\"Pell Awards\",\n             x=0.53,y=0.95,\n             fontfamily = \"Roboto Condensed\",\n             hjust=0,\n             color=\"#a5bec9\",\n             size=29.5) +\n      draw_label(\"Basic Educational Opportunity Grants\\nby the U.S. Department of Education\",\n             x=0.47,y=0.88,\n             fontfamily = \"Roboto Condensed\",\n             hjust=0,\n             color=\"#24424f\",\n             size=12) +\n        draw_label(\"Western Pacific Ocean Islands yearly variation+ (average values %) 1990-2017\",\n               x=0.03,y=0.06,angle = 90,\n             #x=0.35,y=0.78,\n             fontfamily = \"Roboto Condensed\",\n             hjust=0,\n             color=\"#24424f\",\n             size=14) +\n  \n    draw_label(\"DataSource: #TidyTuesday 2022 week35\\nU.S. Department of Education\",\n             x=0.125,y=0.06,angle = 90,\n             fontfamily = \"Roboto Condensed\",\n             hjust=0,size=8) +\n      draw_label(\"DataVisualization: Federica Gazzelloni - @fgazzelloni\",\n             x=0.6,y=0.015,angle = 0,\n             fontfamily = \"Roboto Condensed\",\n             hjust=0,size=9) \n\nggsave(\"w35_pell.png\",bg=\"#b1d2e0\") #grey65 Saving 7 x 7 in image"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w7_DuBoisChallenge2022/w7_DuBoisChallenge2022.html",
    "href": "tidytuesday/cases2022/posts2022/w7_DuBoisChallenge2022/w7_DuBoisChallenge2022.html",
    "title": "DuBoisChallenge2022",
    "section": "",
    "text": "This week is all about #DuBoisChallenge2022, I choose plate number 6.\n\nlibrary(tidyverse)\n\n\nLoad #TidyTuesday 2022/07 data\n\nplate6 <- read_csv('https://raw.githubusercontent.com/ajstarks/dubois-data-portraits/master/challenge/2022/challenge06/data.csv')\n\n\n\nAdd a column with distances\n\ndf <- plate6 %>%\n  janitor::clean_names() %>%\n  mutate(x_axis=c(1860,1860-cumsum(diff(iliteracy_rate))))\ndf\n\n\n\nCreate axis lables vectors\n\niliteracy_rate<-df$iliteracy_rate\nx_axis <-df$x_axis\n\n\n\nFonts\n\nlibrary(showtext)\nfont_add(family = \"Public Sans Thin\",\n         regular = \"PublicSans-Thin.ttf\")\n\nfont_add(family = \"PublicSans-Medium\",\n         regular = \"PublicSans-Medium.ttf\")\n \nshowtext_auto()\n\n\n\nMake the plot\n\nlibrary(ggstar) # for making the triangles\n  \nnumber6 <- df %>%\n  ggplot(aes(x = x_axis, y = iliteracy_rate))+\n  \n  # add the columns\n  geom_col(width = 1.5,fill=\"black\") +\n\n  # this is one way to add the horizontal lines\n  geom_segment(aes(x = 1858, xend = x_axis+0.1,\n                   y = iliteracy_rate, yend = iliteracy_rate),\n               size = 2.5, color = \"black\") +\n  geom_segment(aes(x = 1858, xend = x_axis+0.1,\n                   y = iliteracy_rate, yend = iliteracy_rate),\n               size = 2.4, color = \"#d9ccbf\")+\n  \n  # with ggstar add the triangular shape\n  geom_star(starshape = 20, size = 0.8,angle = 90, fill = \"black\",\n            position = position_nudge(x = -0.1, y = -0.15)) +\n  \n  # add the little round corners\n  geom_curve(aes(x = x_axis - 0.1, xend = x_axis + 0.65,\n                 y = iliteracy_rate + 1.2, yend = iliteracy_rate),\n             curvature = -0.6, size = 0.1) +\n  \n  # customize the axis values\n  scale_x_continuous(breaks = x_axis,\n                     labels = c(\"99%\",\"92%\",\"81.6%\",\"67.27%\",\"(50%?)\"),\n                     expand = expansion(0.01)) +\n  scale_y_continuous(breaks = iliteracy_rate,\n                     labels = c(1860,1870,1880,1890,\"(1900?)\"),\n                     expand = expansion(0.01)) +\n  \n  # add a title and a theme\n  labs(title = \"ILLITERACY.\\n\", subtitle = \" \", caption = \"fg\")+\n  theme_void()+\n  theme(text = element_text(size = 18, family = \"Public Sans Thin\", color = \"grey25\"),\n        plot.title = element_text(size = 24, family = \"PublicSans-Medium\",face = \"bold\", hjust = 0.5),\n        plot.background = element_rect(fill = \"#d2c2b3\", color = \"#d2c2b3\"),\n        panel.background =  element_rect(fill = \"#d2c2b3\",color = \"#d2c2b3\"),\n        axis.text.x = element_text(),\n        axis.text.y = element_text(),\n        plot.margin = margin(0,25,0,25))\n\n\n\nAssemble background, plot and annotation\nWith {cowplot} add a background image as the same as the original one and the text on the left side of the x-axis\n\n\nSave the plot\n\nggsave(\"w7_Number6.png\", width = 1000, height = 1350, \n       units = \"px\", dpi = 320)"
  },
  {
    "objectID": "tidytuesday/cases2022/posts2022/w24_US_Drought/w24_US_Drought.html",
    "href": "tidytuesday/cases2022/posts2022/w24_US_Drought/w24_US_Drought.html",
    "title": "US Drought",
    "section": "",
    "text": "library(tidyverse)\nlibrary(broom)\nlibrary(geojsonio)\nlibrary(RColorBrewer)\nlibrary(rgdal)\nlibrary(rgeos)\n\n\n# Set the fonts\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Chelsea Market\",\n                family=\"Chelsea Market\")\n\n\n#tuesdata <- tidytuesdayR::tt_load('2022-06-14')\ndrought_fips <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-14/drought-fips.csv')\n\n\n\n\ndrought_fips%>%\n  group_by(State)%>%\n  summarise(drought=mean(DSCI))%>%\n  ungroup() %>%\n  ggplot(aes(x=fct_reorder(State,-drought),y=drought))+\n  geom_col()+\n  labs(x=\"\",y=\"\",\n       title=\"Avg level of drought for each state\")+\n  ggthemes::theme_economist_white()+\n  theme(axis.text.x = element_text(size=5))\n\n\ndrought_avg<- drought_fips%>%\n  group_by(State)%>%\n  summarise(drought=mean(DSCI))%>%\n  ungroup()\n\n\n\n\nsource: https://d3-graph-gallery.com/graph/hexbinmap_geo_basic.html\n\n# load json data\nmap_hex <- \n  geojson_read(\"us_states_hexgrid.geojson.json\",  what = \"sp\")\n\n# map_hex%>%class # SpatialPolygonsDataFrame\n# set the names\nmap_hex@data <-\n  map_hex@data %>%\n  mutate(google_name = gsub(\" \\\\(United States\\\\)\", \"\", google_name))\n\n\n# make a smaller sized hex \nmap_hex_buffer <- gBuffer(map_hex, width = -.15, byid = T)\n\n# tidy to dataframe\nmap_hex_tidy <- tidy(map_hex_buffer, region = \"iso3166_2\")\n\n# add drought level\nhex_drought <- \n  map_hex_tidy %>%\n  left_join(drought_avg, by = c(\"id\"=\"State\"))\n\n# make the centroids with state names\ncentr <- cbind.data.frame(data.frame(gCentroid(map_hex_buffer, byid = T), \n                                     id = map_hex@data$iso3166_2))\n\n\n\n\n\nggplot()+\ngeom_polygon(data=map_hex,\nmapping=aes(long,lat,group=group),\nfill=\"brown\",\ncolor=\"#f8bc05\")+\ngeom_polygon(data=hex_drought,\nmapping=aes(long,lat,group=group,fill=drought),\ncolor=\"white\")+\ngeom_text(data=centr,\naes(x=x, y=y, label=id),\ncolor=\"white\",size=2,fontface=\"bold\") +\nscale_fill_gradient(low = \"grey\", high = \"brown\")+\nlabs(title=\"US intense drought locations\",\ncaption=\"DataSource: #TidyTuesday 2022 week24 & Drought.gov | DataViz: @FGazzelloni\",\nfill=\"Level\")+\ncoord_map()+\nggthemes::theme_map()+\ntheme(text=element_text(color=\"white\",family=\"Chelsea Market\"),\npanel.background = element_rect(fill=\"#162e51\",color=\"#f8bc05\",size=1),\nplot.background = element_rect(fill=\"#0071bc\",color=\"#f8bc05\",size=1),\nplot.title = element_text(size=20,color=\"#f8bc05\"),\nlegend.background = element_rect(fill=\"#0071bc\",color=\"#f8bc05\",size=0.5),\nlegend.position = c(0.01,0.3))\n\n\nggsave(\"w24_drought.png\",\ndpi=320,\nwidth = 5.9,\nheight = 4)"
  },
  {
    "objectID": "ts-and-cs.html",
    "href": "ts-and-cs.html",
    "title": "CC License",
    "section": "",
    "text": "MIT License\nCopyright (c) 2023 Federica Gazzelloni\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
]